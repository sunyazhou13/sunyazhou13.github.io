<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>東引甌越</title>
  <subtitle>不断学习, 与时俱进.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.sunyazhou.com/"/>
  <updated>2018-02-04T04:40:59.377Z</updated>
  <id>https://www.sunyazhou.com/</id>
  
  <author>
    <name>sunyazhou</name>
    <email>sunyazhou13@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>NLP分词WordEmbeding</title>
    <link href="https://www.sunyazhou.com/2018/02/04/20180204Word-Embeding/"/>
    <id>https://www.sunyazhou.com/2018/02/04/20180204Word-Embeding/</id>
    <published>2018-02-04T04:24:30.000Z</published>
    <updated>2018-02-04T04:40:59.377Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20180204Word-Embeding/wordembeding.png" alt=""></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>学习过程中记录一下python代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding:utf8</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> sys</div><div class="line">reload(sys)</div><div class="line">sys.setdefaultencoding(<span class="string">'utf8'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 加载包</span></div><div class="line"><span class="keyword">from</span> gensim.models <span class="keyword">import</span> Word2Vec</div><div class="line"><span class="keyword">from</span> gensim.models.word2vec <span class="keyword">import</span> LineSentence</div><div class="line"></div><div class="line"><span class="comment"># 训练模型</span></div><div class="line"><span class="comment"># sentences = LineSentence('wiki.zh.word.text')</span></div><div class="line"><span class="comment"># size：词向量的维度</span></div><div class="line"><span class="comment"># window：上下文环境的窗口大小</span></div><div class="line"><span class="comment"># min_count：忽略出现次数低于min_count的词</span></div><div class="line"><span class="comment"># model = Word2Vec(sentences, size=128, window=5, min_count=5, workers=4)</span></div><div class="line"></div><div class="line"><span class="comment"># 保存模型</span></div><div class="line"><span class="comment"># model.save('word_embedding_128')</span></div><div class="line"></div><div class="line"><span class="comment"># 如果已经保存过模型，则直接加载即可</span></div><div class="line"><span class="comment"># 前面训练并保存的代码都可以省略</span></div><div class="line">model = Word2Vec.load(<span class="string">"word_embedding_128"</span>)</div><div class="line"></div><div class="line"><span class="comment"># 使用模型</span></div><div class="line"><span class="comment"># 返回和一个词语最相关的多个词语以及对应的相关度</span></div><div class="line">items = model.most_similar(<span class="string">u'中国'</span>)</div><div class="line"><span class="keyword">for</span> item <span class="keyword">in</span> items:</div><div class="line">	<span class="comment"># 词的内容，词的相关度</span></div><div class="line">	<span class="keyword">print</span> item[<span class="number">0</span>], item[<span class="number">1</span>]</div><div class="line"></div><div class="line"><span class="comment"># 返回两个词语之间的相关度</span></div><div class="line">model.similarity(<span class="string">u'男人'</span>,  <span class="string">u'女人'</span>)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20180204Word-Embeding/wordembeding.png&quot; alt=&quot;
    
    </summary>
    
      <category term="python开发" scheme="https://www.sunyazhou.com/categories/python%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="python开发" scheme="https://www.sunyazhou.com/tags/python%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>使用Python操作MySQL数据库</title>
    <link href="https://www.sunyazhou.com/2018/01/13/20180113Python-MySQL/"/>
    <id>https://www.sunyazhou.com/2018/01/13/20180113Python-MySQL/</id>
    <published>2018-01-13T14:27:18.000Z</published>
    <updated>2018-02-04T04:23:36.640Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20180113Python-MySQL/mysql-python.png" alt=""></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>为了实现<code>不斷學習 與時俱進</code>周末把大部分时间放在了学习<code>Python</code>上.<br>在最近的学习中有一些有价值的部分都摘录整理出来放到博客上,以免后续用到的时候忘记时回来翻翻博客.</p>
<p>我是在<code>study.163.com</code>的这个<a href="http://study.163.com/course/courseMain.htm?courseId=1003520028" target="_blank" rel="external">《全栈数据工程师养成攻略》</a>课程中学习的,推荐大家学习一下.</p>
<h2 id="本篇主要内容"><a href="#本篇主要内容" class="headerlink" title="本篇主要内容"></a>本篇主要内容</h2><p>主要分为三个大部分</p>
<ol>
<li>搭建<code>Web</code>环境</li>
<li>数据库MySQL的使用方法</li>
<li>使用Python操作MySQL</li>
</ol>
<h3 id="搭建Web环境"><a href="#搭建Web环境" class="headerlink" title="搭建Web环境"></a>搭建<code>Web</code>环境</h3><ul>
<li>Web环境: Apache、Nginx…</li>
<li>Web服务启动中相关配置.</li>
</ul>
<h4 id="Web环境-Apache、Nginx…"><a href="#Web环境-Apache、Nginx…" class="headerlink" title="Web环境: Apache、Nginx…"></a>Web环境: Apache、Nginx…</h4><p>两个平台的相关的下载</p>
<p><a href="https://www.mamp.info/en/" target="_blank" rel="external">MAMP</a>: Mac, Apache, MySQL, PHP </p>
<blockquote>
<p>Mac, Apache, MySQL, PHP 缩写<code>MAMP</code></p>
</blockquote>
<p><a href="https://www.mamp.info/en/" target="_blank" rel="external">WAMP</a>: Windows, Apache, MySQL, PHP </p>
<blockquote>
<p>Windows, Apache, MySQL, PHP 缩写<code>WAMP</code></p>
</blockquote>
<p>当然还有linux版本这里就不做多介绍了</p>
<p>总之需要安装这个软件进行环境配置的搭建.</p>
<p>我这里用<code>MAMP</code>举例说明一下</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20180113Python-MySQL/mamp1.png" alt=""></p>
<p>打开之后<br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20180113Python-MySQL/mamp2.png" alt=""></p>
<h4 id="Web服务启动中相关配置"><a href="#Web服务启动中相关配置" class="headerlink" title="Web服务启动中相关配置"></a>Web服务启动中相关配置</h4><p>开启<code>Apatch Server</code>和<code>MySQL Server</code>服务(右上角).<br>然后点击<code>Perferences</code>,进行本地端口配置.</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20180113Python-MySQL/mamp3.png" alt=""></p>
<p>这里有两种默认配置(红色框选部分) </p>
<p>如果把服务开启的话那么打开浏览器输入:<code>localhost:8888</code>就可以看到相关的效果</p>
<blockquote>
<p>localhost == 127.0.0.1</p>
</blockquote>
<p><code>8888</code>是服务的端口</p>
<p>下面这张图可以选择文件根目录<br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20180113Python-MySQL/mamp4.png" alt=""></p>
<p>什么意思呢?</p>
<p>就是你把网页的相关文件放到 这个文件夹的话<br>就会在浏览器上直接浏览.</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20180113Python-MySQL/mamp2.png" alt=""></p>
<p>这张图中间的<code>Open Start Page</code>. </p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20180113Python-MySQL/sql1.png" alt=""></p>
<p>进入到数据库配置相关</p>
<p>配置数据库名称<br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20180113Python-MySQL/sql2.png" alt=""></p>
<p>输入表名</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20180113Python-MySQL/sql3.png" alt=""></p>
<p>配置数据库表<br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20180113Python-MySQL/sql4.png" alt=""></p>
<p>配置完右侧完成</p>
<h3 id="数据库MySQL的使用方法"><a href="#数据库MySQL的使用方法" class="headerlink" title="数据库MySQL的使用方法"></a>数据库MySQL的使用方法</h3><ul>
<li>基本概念</li>
<li>终端配置Python MySQL</li>
<li>Navicat 数据的导出导入</li>
<li>个人的习惯搞法</li>
</ul>
<h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><p><code>CURD</code>操作:</p>
<ul>
<li><code>C</code> Create</li>
<li><code>R</code> Read</li>
<li><code>U</code> Update</li>
<li><code>D</code> Delete</li>
</ul>
<p>这就是数据库相关知识中 <code>增``删``改``查</code></p>
<h4 id="终端配置Python-MySQL"><a href="#终端配置Python-MySQL" class="headerlink" title="终端配置Python MySQL"></a>终端配置Python MySQL</h4><p>在终端中使用如下指令安装MySQL环境</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">pip install MySQL-python</div></pre></td></tr></table></figure>
<p>我安装的时候出错了</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20180113Python-MySQL/pip_install_mysql-python.png" alt=""></p>
<p>最后执行</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">brew install mysql-python</div></pre></td></tr></table></figure>
<p>然后再去执行<code>pip install MySQL-python</code></p>
<p>如何测试是否成功</p>
<p>在shell中输入<code>python</code></p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20180113Python-MySQL/pythonshell1.png" alt=""></p>
<p>执行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> MySQLdb</div></pre></td></tr></table></figure>
<p>如果没有错误就是OK的.</p>
<h4 id="Navicat-数据的导出导入"><a href="#Navicat-数据的导出导入" class="headerlink" title="Navicat 数据的导出导入"></a>Navicat 数据的导出导入</h4><p>这个数据库可视化操作软件大家自行下载吧<br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20180113Python-MySQL/navicat1.png" alt=""></p>
<p>打开之后点击左上角点击新建connect 选择MySQL<br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20180113Python-MySQL/navicat2.png" alt=""></p>
<p>接着配置数据库的信息<br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20180113Python-MySQL/navicat3.png" alt=""></p>
<p>这里的名称就是<strong>数据库名称</strong><br><code>host</code>地方本地,如果是远程的话,填写<code>ip</code>或者<code>url</code><br><code>port</code>前面我们设置了<code>8889</code><br>账号和密码输入<code>root</code>(前面图里面已经看到了账号密码都是一样的)</p>
<p>下面就是连接数据库</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20180113Python-MySQL/navicat4.png" alt=""></p>
<p>下面这张图就是</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20180113Python-MySQL/navicat5.png" alt=""></p>
<p><strong>数据库导出和导入,当然也可以导出导入数据表.</strong></p>
<h4 id="个人的习惯搞法"><a href="#个人的习惯搞法" class="headerlink" title="个人的习惯搞法"></a>个人的习惯搞法</h4><ul>
<li>使用<code>phpmyadmin</code>新建数据库和数据表</li>
<li>使用<code>python</code>插入、读取、更新、修改数据</li>
<li>使用<code>Navicat</code>导出数据库</li>
<li>使用<code>phpmyadmin</code>导入数据库 </li>
</ul>
<p>最后deloy(部署)到线上,这样就可以避免各种错误操作数据库的问题</p>
<h3 id="使用Python操作MySQL"><a href="#使用Python操作MySQL" class="headerlink" title="使用Python操作MySQL"></a>使用Python操作MySQL</h3><p>这个没啥就是coding部分,使用之前把点击<a href="https://github.com/sunyazhou13/sunyazhou13.github.io-images/blob/master/20180113Python-MySQL/douban_movie_clean.txt" target="_blank" rel="external">这里下载</a>这个文本文件</p>
<p>我们用<code>sublime text</code>新建一个<code>text.py</code>文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding:utf8</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> sys</div><div class="line">reload(sys)</div><div class="line">sys.setdefaultencoding(<span class="string">"utf8"</span>)</div><div class="line"></div><div class="line"><span class="keyword">import</span> MySQLdb</div><div class="line"><span class="keyword">import</span> MySQLdb.cursors</div></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20180113Python-MySQL/Pythoncode1.png" alt=""></p>
<blockquote>
<p>注意:_test.py最好和douban_movie<em>clean.txt保持在同一个目录这样就不用写路径了</em></p>
</blockquote>
<p>接着创建数据库连接</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"></div><div class="line">db = MySQLdb.connect(host=<span class="string">'127.0.0.1'</span>, user=<span class="string">'root'</span>, passwd=<span class="string">'root'</span>, db=<span class="string">'douban'</span>, port=<span class="number">8889</span>, charset=<span class="string">'utf8'</span>, cursorclass=MySQLdb.cursors.DictCursor) //<span class="number">1</span></div><div class="line">db.autocommit(<span class="keyword">True</span>) //<span class="number">2</span></div><div class="line">cursor = db.cursor() //<span class="number">3</span></div><div class="line"></div><div class="line">fr = open(<span class="string">'douban_movie_clean.txt'</span>,<span class="string">'r'</span>) //<span class="number">4</span></div><div class="line"></div><div class="line">fr.close() //<span class="number">4</span></div><div class="line"></div><div class="line">cursor.close() //<span class="number">3</span></div><div class="line">db.close() //<span class="number">1</span></div></pre></td></tr></table></figure>
<blockquote>
<p>注意 <code>db</code>记得用完关闭,<code>cursor</code>也要记得关闭, <code>fr</code>是文件的读写 和数据库没啥关系也需要记得用完关闭</p>
</blockquote>
<p>下面解释一下什么意思</p>
<ol>
<li><code>db</code>创建输入库实例,输入参数 <code>host</code>(这里用的是127.0.0.1也可以换成localhost)、<code>passwd</code>、<code>db</code>、<code>port</code>、<code>charset</code>、<code>cursorclass</code>.</li>
<li>自动改完提交完成更新数据库</li>
<li>通过<code>db</code>实例拿到一个连接<code>cursor</code> 每次都通过<code>cursor.execute()</code>执行增删改查操作sql语句</li>
<li>读取本地的文本文件</li>
</ol>
<p>大概就是这个意思</p>
<h4 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h4><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment"># Create</span></div><div class="line"><span class="comment"># 读取数据</span></div><div class="line">fr = open(<span class="string">'douban_movie_clean.txt'</span>, <span class="string">'r'</span>)</div><div class="line"></div><div class="line">count = <span class="number">0</span></div><div class="line"><span class="keyword">for</span> line <span class="keyword">in</span> fr:</div><div class="line">	count += <span class="number">1</span></div><div class="line">	<span class="comment"># count表示当前处理到第几行了</span></div><div class="line">	<span class="keyword">print</span> count</div><div class="line">	<span class="comment"># 跳过表头</span></div><div class="line">	<span class="keyword">if</span> count == <span class="number">1</span>:</div><div class="line">		<span class="keyword">continue</span></div><div class="line"></div><div class="line">	<span class="comment"># strip()函数可以去掉字符串两端的空白符</span></div><div class="line">	<span class="comment"># split()函数按照给定的分割符将字符串分割为列表</span></div><div class="line">	line = line.strip().split(<span class="string">'^'</span>)</div><div class="line">	<span class="comment"># 插入数据，注意对齐字段</span></div><div class="line">	<span class="comment"># execute()函数第一个参数为要执行的SQL命令</span></div><div class="line">	<span class="comment"># 这里用字符串格式化的方法生成一个模板</span></div><div class="line">	<span class="comment"># %s表示一个占位符</span></div><div class="line">	<span class="comment"># 第二个参数为需要格式化的参数，传入到模板中</span></div><div class="line">	cursor.execute(<span class="string">"insert into movie(title, url, rate, length, description) values(%s, %s, %s, %s, %s)"</span>, [line[<span class="number">1</span>], line[<span class="number">2</span>], line[<span class="number">4</span>], line[<span class="number">-3</span>], line[<span class="number">-1</span>]])</div><div class="line"></div><div class="line"><span class="comment"># 关闭读文件</span></div><div class="line">fr.close()</div></pre></td></tr></table></figure>
<p>通过我们拿到的<code>cursor</code>连接实例来执行<code>cursor.execute()</code>函数进行<code>sql</code>的插入操作.</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20180113Python-MySQL/Pythoncode2.png" alt=""></p>
<p>来看下结果<br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20180113Python-MySQL/sqlresult.png" alt=""></p>
<h4 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h4><p>更新数据 比如我想把id=1的记录更新一下<code>title</code>字段和<code>length</code>长度</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment"># Update</span></div><div class="line">cursor.execute(<span class="string">"update movie set title=%s, length=%s where id=1"</span>, [<span class="string">'孙亚洲'</span>, <span class="number">999</span>])</div></pre></td></tr></table></figure>
<h4 id="读取数据-1"><a href="#读取数据-1" class="headerlink" title="读取数据"></a>读取数据</h4><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment"># Read</span></div><div class="line">cursor.execute(<span class="string">"select title, length from movie where id=1"</span>)</div><div class="line">movies = cursor.fetchone()</div></pre></td></tr></table></figure>
<h4 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h4><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment"># Delete</span></div><div class="line">cursor.execute(<span class="string">"delete from movie where id=%s"</span>,[<span class="number">2</span>])</div></pre></td></tr></table></figure>
<hr>
<p>下面看下完成的代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding:utf8</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> sys</div><div class="line">reload(sys)</div><div class="line">sys.setdefaultencoding(<span class="string">"utf8"</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> MySQLdb</div><div class="line"><span class="keyword">import</span> MySQLdb.cursors</div><div class="line"></div><div class="line">db = MySQLdb.connect(host=<span class="string">'127.0.0.1'</span>, user=<span class="string">'root'</span>, passwd=<span class="string">'root'</span>, db=<span class="string">'douban'</span>, port=<span class="number">8889</span>, charset=<span class="string">'utf8'</span>, cursorclass=MySQLdb.cursors.DictCursor)</div><div class="line">db.autocommit(<span class="keyword">True</span>)</div><div class="line">cursor = db.cursor()</div><div class="line"></div><div class="line">fr = open(<span class="string">'douban_movie_clean.txt'</span>,<span class="string">'r'</span>)</div><div class="line"></div><div class="line"><span class="comment"># Create</span></div><div class="line">count = <span class="number">0</span></div><div class="line"><span class="keyword">for</span> line <span class="keyword">in</span> fr:</div><div class="line">	count += <span class="number">1</span></div><div class="line">	<span class="keyword">print</span> count</div><div class="line">	<span class="keyword">if</span> count == <span class="number">1</span>:</div><div class="line">		<span class="keyword">continue</span></div><div class="line">	line = line.strip().split(<span class="string">'^'</span>)</div><div class="line">	cursor.execute(<span class="string">"insert into movie(title, url, rate, length, description) values(%s, %s, %s, %s, %s)"</span>, [line[<span class="number">1</span>], line[<span class="number">2</span>], line[<span class="number">4</span>], line[<span class="number">-3</span>], line[<span class="number">-1</span>]])</div><div class="line">fr.close()</div><div class="line"></div><div class="line"><span class="comment"># Update</span></div><div class="line">cursor.execute(<span class="string">"update movie set title=%s, length=%s where id=1"</span>, [<span class="string">'孙亚洲'</span>, <span class="number">999</span>])</div><div class="line"></div><div class="line"><span class="comment"># Read</span></div><div class="line">cursor.execute(<span class="string">"select title, length from movie where id=1"</span>)</div><div class="line">movies = cursor.fetchone()</div><div class="line"></div><div class="line"><span class="keyword">print</span> len(movies)</div><div class="line"><span class="comment"># print movies[0]</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Delete</span></div><div class="line"></div><div class="line">cursor.execute(<span class="string">"delete from movie where id=%s"</span>,[<span class="number">2</span>])</div><div class="line"></div><div class="line"></div><div class="line">cursor.close()</div><div class="line">db.close()</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过学习<code>python</code>操作数据库很有收获,想起了大学李月辉老师教我怎么用java连接数据库.<br>在工作中我们可能会遇到一大堆数据如何插入到数据等问题,通过学习了本章内容可以很容易的处理批量数据.</p>
<p>关于更多的SQL语句<br>参考<a href="http://www.runoob.com/sql/sql-tutorial.html" target="_blank" rel="external">SQL 教程</a></p>
<p>全文完</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20180113Python-MySQL/mysql-python.png&quot; alt=&quot;&quot;
    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="web开发" scheme="https://www.sunyazhou.com/tags/web%E5%BC%80%E5%8F%91/"/>
    
      <category term="python" scheme="https://www.sunyazhou.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>AVAudioSession-Category各种姿势</title>
    <link href="https://www.sunyazhou.com/2018/01/12/20180112AVAudioSession-Category/"/>
    <id>https://www.sunyazhou.com/2018/01/12/20180112AVAudioSession-Category/</id>
    <published>2018-01-12T02:32:18.000Z</published>
    <updated>2018-01-13T14:24:50.905Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20180112AVAudioSession-Category/ASPG_intro_2x.png" alt="AVAudioSession"></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>2018新年第一篇, 梳理<code>AVAudioSession</code>的<code>Category</code>,解决音频开发中的各种播放被打断或者首次启动时无声音的问题</p>
<h2 id="开篇"><a href="#开篇" class="headerlink" title="开篇"></a>开篇</h2><p>由于<code>iOS</code>系统的特殊性,所有<code>App</code>共用一个<code>AVAudioSession</code>所以这个会话是个单例对象.(<code>macOS</code>是支持同时播放多路音频文件)</p>
<p>当遇到<code>插拔耳机</code>,<code>接电话</code>,<code>调起 siri</code>,等等,就出现音频会话被系统时间打断等行为表现:</p>
<ul>
<li>是进行录音还是播放？</li>
<li>当系统静音键按下时该如何表现？</li>
<li>是从扬声器还是从听筒里面播放声音？</li>
<li>插拔耳机后如何表现？</li>
<li>来电话/闹钟响了后如何表现？</li>
<li>其他音频App启动后如何表现？</li>
</ul>
<h3 id="Session默认行为"><a href="#Session默认行为" class="headerlink" title="Session默认行为"></a>Session默认行为</h3><ul>
<li>可以进行播放，但是不能进行录制。</li>
<li>当用户将手机上的静音拨片拨到“静音”状态时，此时如果正在播放音频，那么播放内容会被静音。</li>
<li>当用户按了手机的锁屏键或者手机自动锁屏了，此时如果正在播放音频，那么播放会静音并被暂停。</li>
<li>如果你的App在开始播放的时候，此时QQ音乐等其他App正在播放，那么其他播放器会被静音并暂停。</li>
</ul>
<p><code>AVAudioSession</code>默认的行为相当于设置了<code>Category</code>为<code>AVAudioSessionCategorySoloAmbient</code></p>
<p>示例代码:</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)configSession&#123;	</div><div class="line">    [[<span class="built_in">AVAudioSession</span> sharedInstance] setCategory:<span class="built_in">AVAudioSessionCategorySoloAmbient</span> error:&amp;error];</div><div class="line">    <span class="keyword">if</span> (error) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,error);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="AVAudioSession"><a href="#AVAudioSession" class="headerlink" title="AVAudioSession"></a>AVAudioSession</h3><p>上边说了 这个类是个单例</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">+ (<span class="built_in">AVAudioSession</span> *)sharedInstance;</div></pre></td></tr></table></figure>
<p>通过上边方法获得单例</p>
<p>虽然系统会在App启动的时候，激活这个唯一的<code>AVAudioSession</code>，但是最好还是在自己用的时候再次进行激活：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">- (BOOL)setActive:(BOOL)active error:(NSError * _Nullable *)outError;</div></pre></td></tr></table></figure>
<p>通过设置<code>active</code>为<code>YES</code>激活<code>Session</code>，设置为<code>NO</code>解除<code>Session</code>的激活状态。<code>BOOL</code>返回值表示是否成功，如果失败的话可以通过<code>NSError</code>的<code>error.localizedDescription</code>查看出错原因。</p>
<blockquote>
<p>因为<code>AVAudioSession</code>会影响其他<code>App</code>的表现，当自己<code>App</code>的<code>Session</code>被激活，其他<code>App</code>的就会被解除激活.</p>
</blockquote>
<p><strong>如何要让自己的<code>Session</code>解除激活后恢复其他<code>App Session</code>的激活状态呢?</strong></p>
<p>此时可以使用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">- (BOOL)setActive:(BOOL)active withOptions:(AVAudioSessionSetActiveOptions)options error:(NSError * _Nullable *)outError;</div></pre></td></tr></table></figure>
<p><strong>这里的<code>options</code>传入<code>AVAudioSessionSetActiveOptionNotifyOthersOnDeactivation</code>即可.</strong></p>
<p>当然，也可以通过<code>otherAudioPlaying</code>变量来提前判断当前是否有其他App在播放音频。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"Current Category:%@"</span>, [<span class="built_in">AVAudioSession</span> sharedInstance].category); <span class="comment">//返回当前 category</span></div></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">Current Category:AVAudioSessionCategorySoloAmbien</div></pre></td></tr></table></figure>
<h3 id="七大Category"><a href="#七大Category" class="headerlink" title="七大Category"></a>七大Category</h3><p>下面介绍一下<code>AVAudioSession</code>非常重要的七中<code>Category</code>.</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="meta">#pragma mark -- Values for the category property --</span></div><div class="line"></div><div class="line"><span class="built_in">AVF_EXPORT</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> <span class="built_in">AVAudioSessionCategoryAmbient</span>;</div><div class="line"></div><div class="line"><span class="built_in">AVF_EXPORT</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> <span class="built_in">AVAudioSessionCategorySoloAmbient</span>;</div><div class="line"></div><div class="line"><span class="built_in">AVF_EXPORT</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> <span class="built_in">AVAudioSessionCategoryPlayback</span>;</div><div class="line"></div><div class="line"><span class="built_in">AVF_EXPORT</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> <span class="built_in">AVAudioSessionCategoryRecord</span>;</div><div class="line"></div><div class="line"><span class="built_in">AVF_EXPORT</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> <span class="built_in">AVAudioSessionCategoryPlayAndRecord</span>;</div><div class="line"></div><div class="line"><span class="built_in">AVF_EXPORT</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> <span class="built_in">AVAudioSessionCategoryAudioProcessing</span> <span class="built_in">NS_DEPRECATED_IOS</span>(<span class="number">3</span>_0, <span class="number">10</span>_0) __TVOS_PROHIBITED __WATCHOS_PROHIBITED;</div><div class="line"></div><div class="line"><span class="built_in">AVF_EXPORT</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> <span class="built_in">AVAudioSessionCategoryMultiRoute</span> <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">6</span>_0);</div></pre></td></tr></table></figure>
<p><code>AVAudioSession</code>将使用音频的场景分成七大类，通过设置<code>Session</code>为不同的类别，可以控制：</p>
<ul>
<li>当App激活Session的时候，是否会打断其他不支持混音的App声音</li>
<li>当用户触发手机上的“静音”键时或者锁屏时，是否相应静音</li>
<li>当前状态是否支持录音</li>
<li>当前状态是否支持播放</li>
<li>每个App启动时都会设置成上面说的默认状态，即其他App会被中断同时相应“静音”键的播放模式。通过下表可以细分每个类别的支持情况：</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">类别</th>
<th style="text-align:center">当按“静音”或者锁屏是是否静音</th>
<th style="text-align:center">是否引起不支持混音的App中断</th>
<th style="text-align:center">是否支持录音和播放</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">AVAudioSessionCategoryAmbient</td>
<td style="text-align:center">是</td>
<td style="text-align:center">否</td>
<td style="text-align:center">只支持播放</td>
</tr>
<tr>
<td style="text-align:center">AVAudioSessionCategoryAudioProcessing</td>
<td style="text-align:center">N/A</td>
<td style="text-align:center">都不支持</td>
<td style="text-align:center">N/A</td>
</tr>
<tr>
<td style="text-align:center">AVAudioSessionCategoryMultiRoute</td>
<td style="text-align:center">否</td>
<td style="text-align:center">是</td>
<td style="text-align:center">既可以录音也可以播放</td>
</tr>
<tr>
<td style="text-align:center">AVAudioSessionCategoryPlayAndRecord</td>
<td style="text-align:center">否</td>
<td style="text-align:center">默认不引起</td>
<td style="text-align:center">既可以录音也可以播放</td>
</tr>
<tr>
<td style="text-align:center">AVAudioSessionCategoryPlayback</td>
<td style="text-align:center">否</td>
<td style="text-align:center">默认引起</td>
<td style="text-align:center">只用于播放</td>
</tr>
<tr>
<td style="text-align:center">AVAudioSessionCategoryRecord</td>
<td style="text-align:center">否</td>
<td style="text-align:center">是</td>
<td style="text-align:center">只用于录音</td>
</tr>
<tr>
<td style="text-align:center">AVAudioSessionCategorySoloAmbient</td>
<td style="text-align:center">是</td>
<td style="text-align:center">是</td>
<td style="text-align:center">只用于播放</td>
</tr>
</tbody>
</table>
<p>可以看到，其实默认的就是<code>AVAudioSessionCategorySoloAmbient</code>类别.<br>从表中我们可以总结如下：  </p>
<ul>
<li><p><em><code>AVAudioSessionCategoryAmbient</code>:只用于播放音乐时，并且可以和QQ音乐同时播放，比如玩游戏的时候还想听QQ音乐的歌，那么把游戏播放背景音就设置成这种类别。同时，当用户锁屏或者静音时也会随着静音，这种类别基本使用所有App的背景场景。</em></p>
</li>
<li><p><em><code>AVAudioSessionCategoryAudioProcessing</code>:主要用于音频格式处理，一般可以配合AudioUnit进行使用.</em></p>
</li>
<li><p><em><code>AVAudioSessionCategoryMultiRoute</code>:想象一个DJ用的App，手机连着HDMI到扬声器播放当前的音乐，然后耳机里面播放下一曲，这种常人不理解的场景，这个类别可以支持多个设备输入输出.</em></p>
</li>
<li><p><em><code>AVAudioSessionCategoryPlayAndRecord</code>: 如果既想播放又想录制该用什么模式呢？比如VoIP，打电话这种场景，PlayAndRecord就是专门为这样的场景设计的.</em></p>
</li>
<li><p><em><code>AVAudioSessionCategoryPlayback</code>:如果锁屏了还想听声音怎么办？用这个类别，比如App本身就是播放器，同时当App播放时，其他类似QQ音乐就不能播放了。所以这种类别一般用于播放器类App.</em></p>
</li>
<li><p><em><code>AVAudioSessionCategoryRecord</code>:有了播放器，肯定要录音机，比如微信语音的录制，就要用到这个类别，既然要安静的录音，肯定不希望有QQ音乐了，所以其他播放声音会中断。想想微信语音的场景，就知道什么时候用他了.</em></p>
</li>
<li><p><em><code>AVAudioSessionCategorySoloAmbient</code>:也是只用于播放,但是和”AVAudioSessionCategoryAmbient”不同的是，用了它就别想听QQ音乐了，比如不希望QQ音乐干扰的App，类似节奏大师。同样当用户锁屏或者静音时也会随着静音，锁屏了就玩不了节奏大师了.</em></p>
</li>
</ul>
<p>了解了这七大类别，我们就可以根据自己的需要进行对应类别的设置了：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="built_in">BOOL</span>)setCategory:(<span class="built_in">NSString</span> *)category error:(<span class="built_in">NSError</span> **)outError;</div></pre></td></tr></table></figure>
<p>传入对应的列表枚举即可。如果返回<code>NO</code>可以通过<code>NSError</code>的<code>error.localizedDescription</code>查看原因.</p>
<p>可以通过:</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="keyword">@property</span>(<span class="keyword">readonly</span>) <span class="built_in">NSArray</span>&lt;<span class="built_in">NSString</span> *&gt; *availableCategories;</div></pre></td></tr></table></figure>
<p>属性,查看当前设备支持哪些类别,然后再进行设置,从而保证传入参数的合法,减少错误的可能.</p>
<p>比如使用如下代码:</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"Current Category:%@"</span>, [<span class="built_in">AVAudioSession</span> sharedInstance].category);</div><div class="line">   <span class="built_in">NSError</span> *error = <span class="literal">nil</span>;</div><div class="line">   [[<span class="built_in">AVAudioSession</span> sharedInstance] setCategory:<span class="built_in">AVAudioSessionCategoryPlayback</span> error:&amp;error];</div><div class="line">   <span class="keyword">if</span> (<span class="literal">nil</span> != error) &#123;</div><div class="line">       <span class="built_in">NSLog</span>(<span class="string">@"set Option error %@"</span>, error.localizedDescription);</div><div class="line">   &#125;</div><div class="line">   <span class="built_in">NSLog</span>(<span class="string">@"Current Category:%@"</span>, [<span class="built_in">AVAudioSession</span> sharedInstance].category);</div></pre></td></tr></table></figure>
<p>此时在播放音乐的时候，再去按下静音键，会发现，音乐还在继续播放，不会被静音。</p>
<h3 id="类别的选项-Category-Options"><a href="#类别的选项-Category-Options" class="headerlink" title="类别的选项(Category Options)"></a>类别的选项(Category Options)</h3><p>上面介绍的这个七大类别，可以认为是设定了七种主场景，而这七类肯定是不能满足开发者所有的需求的。<code>CoreAudio</code>提供的方法是，<strong>首先定下七种的一种基调,然后在进行微调.<code>CoreAudio</code>为每种<code>Category</code>都提供了些许选项来进行微调.</strong></p>
<p>在设置完类别后，可以通过:</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="keyword">@property</span>(<span class="keyword">readonly</span>) <span class="built_in">AVAudioSessionCategoryOptions</span> categoryOptions;</div></pre></td></tr></table></figure>
<p>属性,查看当前类别设置了哪些选项,注意这里的返回值是<code>AVAudioSessionCategoryOptions</code>,<strong>实际是多个<code>options</code>的<code>|</code>运算</strong>.<br>默认情况下是<code>0</code>.</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="built_in">NS_OPTIONS</span>(<span class="built_in">NSUInteger</span>, <span class="built_in">AVAudioSessionCategoryOptions</span>)</div><div class="line">&#123;</div><div class="line">	<span class="built_in">AVAudioSessionCategoryOptionMixWithOthers</span>			= <span class="number">0x1</span>,</div><div class="line">	<span class="built_in">AVAudioSessionCategoryOptionDuckOthers</span>				= <span class="number">0x2</span>,</div><div class="line">	<span class="built_in">AVAudioSessionCategoryOptionAllowBluetooth</span>	__TVOS_PROHIBITED __WATCHOS_PROHIBITED		= <span class="number">0x4</span>,</div><div class="line">	<span class="built_in">AVAudioSessionCategoryOptionDefaultToSpeaker</span> __TVOS_PROHIBITED __WATCHOS_PROHIBITED		= <span class="number">0x8</span>,</div><div class="line">	<span class="built_in">AVAudioSessionCategoryOptionInterruptSpokenAudioAndMixWithOthers</span> <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">9</span>_0) = <span class="number">0x11</span>,</div><div class="line">	<span class="built_in">AVAudioSessionCategoryOptionAllowBluetoothA2DP</span> API_AVAILABLE(ios(<span class="number">10.0</span>), watchos(<span class="number">3.0</span>), tvos(<span class="number">10.0</span>)) = <span class="number">0x20</span>,</div><div class="line">	<span class="built_in">AVAudioSessionCategoryOptionAllowAirPlay</span> API_AVAILABLE(ios(<span class="number">10.0</span>), tvos(<span class="number">10.0</span>)) __WATCHOS_PROHIBITED = <span class="number">0x40</span>,</div><div class="line">&#125; <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">6</span>_0);</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:left">选项</th>
<th style="text-align:left">适用类别</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">AVAudioSessionCategoryOptionMixWithOthers</td>
<td style="text-align:left">AVAudioSessionCategoryPlayAndRecord, AVAudioSessionCategoryPlayback, and AVAudioSessionCategoryMultiRoute</td>
<td style="text-align:center">是否可以和其他后台App进行混音</td>
</tr>
<tr>
<td style="text-align:left">AVAudioSessionCategoryOptionDuckOthers</td>
<td style="text-align:left">AVAudioSessionCategoryAmbient, AVAudioSessionCategoryPlayAndRecord, AVAudioSessionCategoryPlayback, and AVAudioSessionCategoryMultiRoute</td>
<td style="text-align:center">是否压低其他App声音</td>
</tr>
<tr>
<td style="text-align:left">AVAudioSessionCategoryOptionAllowBluetooth</td>
<td style="text-align:left">AVAudioSessionCategoryRecord and AVAudioSessionCategoryPlayAndRecord</td>
<td style="text-align:center">是否支持蓝牙耳机</td>
</tr>
<tr>
<td style="text-align:left">AVAudioSessionCategoryOptionDefaultToSpeaker</td>
<td style="text-align:left">AVAudioSessionCategoryPlayAndRecord</td>
<td style="text-align:center">是否默认用免提声音</td>
</tr>
</tbody>
</table>
<blockquote>
<p>目前主要的选项有这几种，都有对应的使用场景，除此之外，还有iOS9之后新增加的一些</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:left">选项</th>
<th style="text-align:left">适用类别</th>
<th style="text-align:center">作用</th>
<th style="text-align:left">最低适用系统</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">AVAudioSessionCategoryOptionInterruptSpokenAudioAndMixWithOthers</td>
<td style="text-align:left">–</td>
<td style="text-align:center">–</td>
<td style="text-align:left">iOS 9</td>
</tr>
<tr>
<td style="text-align:left">AVAudioSessionCategoryOptionAllowBluetoothA2DP</td>
<td style="text-align:left">–</td>
<td style="text-align:center">–</td>
<td style="text-align:left">iOS 10</td>
</tr>
<tr>
<td style="text-align:left">AVAudioSessionCategoryOptionAllowAirPlay</td>
<td style="text-align:left">–</td>
<td style="text-align:center">支持蓝牙A2DP耳机和AirPlay</td>
<td style="text-align:left">iOS 10</td>
</tr>
</tbody>
</table>
<p>下面介绍一下每个子场景选项的作用:</p>
<ul>
<li><p><em><code>AVAudioSessionCategoryOptionMixWithOthers</code>:如果确实用的<code>AVAudioSessionCategoryPlayback</code>实现的一个背景音，可是，又想和QQ音乐并存，那么可以在<code>AVAudioSessionCategoryPlayback</code>类别下在设置这个选项，就可以实现共存了.</em></p>
</li>
<li><p><em><code>AVAudioSessionCategoryOptionDuckOthers</code>：在实时通话的场景，比如QQ音乐，当进行视频通话的时候，会发现QQ音乐自动声音降低了，此时就是通过设置这个选项来对其他音乐App进行了压制.</em></p>
</li>
<li><p><em><code>AVAudioSessionCategoryOptionAllowBluetooth</code>：如果要支持蓝牙耳机电话，则需要设置这个选项.</em></p>
</li>
<li><p><em><code>AVAudioSessionCategoryOptionDefaultToSpeaker</code>： 如果在VoIP模式下，希望默认打开免提功能，需要设置这个选项.</em></p>
</li>
</ul>
<p>通过接口:</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="built_in">BOOL</span>)setCategory:(<span class="built_in">NSString</span> *)category withOptions:(<span class="built_in">AVAudioSessionCategoryOptions</span>)options error:(<span class="built_in">NSError</span> **)outError;</div></pre></td></tr></table></figure>
<p>来对当前的类别进行选项(options)的设置.</p>
<p>实例代码:</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)xxxMethod&#123;</div><div class="line">    [[<span class="built_in">AVAudioSession</span> sharedInstance] setCategory:<span class="built_in">AVAudioSessionCategoryPlayback</span> withOptions:<span class="built_in">AVAudioSessionCategoryOptionMixWithOthers</span> error:&amp;error];</div><div class="line">    <span class="keyword">if</span> (<span class="literal">nil</span> != error) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"set Option error %@"</span>, error.localizedDescription);</div><div class="line">    &#125;</div><div class="line">    options = [[<span class="built_in">AVAudioSession</span> sharedInstance] categoryOptions];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"Category[%@] has %lu options"</span>,  [<span class="built_in">AVAudioSession</span> sharedInstance].category, options);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此时，如果打开QQ音乐播放器，然后再开始进行播放，会发现，QQ和我们的实例都在播放，并且进行了自动混音。</p>
<h3 id="七大模式"><a href="#七大模式" class="headerlink" title="七大模式"></a>七大模式</h3><p>通过上面的<code>七大类别</code>:</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="meta">#pragma mark -- Values for the mode property --</span></div><div class="line"></div><div class="line"><span class="built_in">AVF_EXPORT</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> <span class="built_in">AVAudioSessionModeDefault</span> <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">5</span>_0);</div><div class="line"></div><div class="line"><span class="built_in">AVF_EXPORT</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> <span class="built_in">AVAudioSessionModeVoiceChat</span> <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">5</span>_0);</div><div class="line"></div><div class="line"><span class="built_in">AVF_EXPORT</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> <span class="built_in">AVAudioSessionModeGameChat</span> <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">5</span>_0);</div><div class="line"></div><div class="line"><span class="built_in">AVF_EXPORT</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> <span class="built_in">AVAudioSessionModeVideoRecording</span> <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">5</span>_0);</div><div class="line"></div><div class="line"><span class="built_in">AVF_EXPORT</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> <span class="built_in">AVAudioSessionModeMeasurement</span> <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">5</span>_0);</div><div class="line"></div><div class="line"><span class="built_in">AVF_EXPORT</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> <span class="built_in">AVAudioSessionModeMoviePlayback</span> <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">6</span>_0);</div><div class="line"></div><div class="line"><span class="built_in">AVF_EXPORT</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> <span class="built_in">AVAudioSessionModeVideoChat</span> <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">7</span>_0);</div><div class="line"></div><div class="line"><span class="built_in">AVF_EXPORT</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> <span class="built_in">AVAudioSessionModeSpokenAudio</span> <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">9</span>_0);</div></pre></td></tr></table></figure>
<p>我们基本覆盖了常用的<strong>主场景</strong>，在每个主场景中可以通过<code>Option</code>进行<strong>微调</strong>。为此<code>CoreAudio</code>提供了七大比较常见微调后的子场景。叫做<code>各个类别的模式</code>.</p>
<table>
<thead>
<tr>
<th style="text-align:left">模式Mode</th>
<th style="text-align:left">适用的类别</th>
<th style="text-align:center">场景</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">AVAudioSessionModeDefault</td>
<td style="text-align:left">所有类别</td>
<td style="text-align:center">默认的模式</td>
</tr>
<tr>
<td style="text-align:left">AVAudioSessionModeVoiceChat</td>
<td style="text-align:left">AVAudioSessionCategoryPlayAndRecord</td>
<td style="text-align:center">VoIP</td>
</tr>
<tr>
<td style="text-align:left">AVAudioSessionModeGameChat</td>
<td style="text-align:left">AVAudioSessionCategoryPlayAndRecord</td>
<td style="text-align:center">游戏录制，由GKVoiceChat自动设置，无需手动调用</td>
</tr>
<tr>
<td style="text-align:left">AVAudioSessionModeVideoRecording</td>
<td style="text-align:left">AVAudioSessionCategoryPlayAndRecord AVAudioSessionCategoryRecord</td>
<td style="text-align:center">录制视频时</td>
</tr>
<tr>
<td style="text-align:left">AVAudioSessionModeMoviePlayback</td>
<td style="text-align:left">AVAudioSessionCategoryPlayback</td>
<td style="text-align:center">视频播放</td>
</tr>
<tr>
<td style="text-align:left">AVAudioSessionModeMeasurement</td>
<td style="text-align:left">AVAudioSessionCategoryPlayAndRecord AVAudioSessionCategoryRecord AVAudioSessionCategoryPlayback</td>
<td style="text-align:center">最小系统</td>
</tr>
<tr>
<td style="text-align:left">AVAudioSessionModeVideoChat</td>
<td style="text-align:left">AVAudioSessionCategoryPlayAndRecord</td>
<td style="text-align:center">视频通话</td>
</tr>
</tbody>
</table>
<p>每个模式有其适用的类别，所以，并不是有“七七 四十九”种组合。如果当前处于的类别下没有这个模式，那么是设置不成功的。  </p>
<p>设置完Category后可以通过如下代码:</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="keyword">@property</span>(<span class="keyword">readonly</span>) <span class="built_in">NSArray</span>&lt;<span class="built_in">NSString</span> *&gt; *availableModes;</div><div class="line">``` </div><div class="line">这个属性,查看其支持哪些属性，做合法性校验。</div><div class="line"></div><div class="line"></div><div class="line">下面说一下具体应用场景</div><div class="line"></div><div class="line">* _`<span class="built_in">AVAudioSessionModeDefault</span>`： 每种类别默认的就是这个模式，所有要想还原的话，就设置成这个模式。_</div><div class="line"></div><div class="line">* -`<span class="built_in">AVAudioSessionModeVoiceChat</span>`：主要用于VoIP场景，此时系统会选择最佳的输入设备，比如插上耳机就使用耳机上的麦克风进行采集。此时有个副作用，他会设置类别的选项为`<span class="built_in">AVAudioSessionCategoryOptionAllowBluetooth</span>`从而支持蓝牙耳机。_</div><div class="line"></div><div class="line">* _`<span class="built_in">AVAudioSessionModeVideoChat</span>` ： 主要用于视频通话，比如QQ视频、FaceTime。时系统也会选择最佳的输入设备，比如插上耳机就使用耳机上的麦克风进行采集并且会设置类别的选项为<span class="string">"AVAudioSessionCategoryOptionAllowBluetooth"</span> 和 <span class="string">"AVAudioSessionCategoryOptionDefaultToSpeaker"</span>。_</div><div class="line"></div><div class="line">* _`<span class="built_in">AVAudioSessionModeGameChat</span>` ： 适用于游戏App的采集和播放，比如“GKVoiceChat”对象，一般不需要手动设置._</div><div class="line"></div><div class="line">&gt; 另外几种和音频APP关系不大，一般我们只需要关注VoIP或者视频通话即可。</div><div class="line"></div><div class="line"></div><div class="line">通过调用：</div><div class="line"></div><div class="line">``` objc</div><div class="line">- (<span class="built_in">BOOL</span>)setMode:(<span class="built_in">NSString</span> *)mode error:(<span class="built_in">NSError</span> **)outError;</div></pre></td></tr></table></figure>
<p>可以在设置<code>Category</code>之后再设置模式。</p>
<p>当然，这些模式只是<code>CoreAduio</code>总结的，不一定完全满足要求，对于具体的模式，在<code>iOS10</code>中还是可以微调的。  </p>
<p>通过接口:  </p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"></div><div class="line">- (<span class="built_in">BOOL</span>)setCategory:(<span class="built_in">NSString</span> *)category mode:(<span class="built_in">NSString</span> *)mode options:(<span class="built_in">AVAudioSessionCategoryOptions</span>)options error:(<span class="built_in">NSError</span> **)outError;</div><div class="line">-</div></pre></td></tr></table></figure>
<p>但是在<code>iOS9</code>及以下就只能在<code>Category</code>上调了，其实本质是一样的，可以认为是个API语法糖，接口封装.</p>
<h3 id="系统中断响应"><a href="#系统中断响应" class="headerlink" title="系统中断响应"></a>系统中断响应</h3><p>上面说的这些<code>Categor、</code>Option<code>以及</code>Mode`都是对自己作为播放主体时的表现，但是假设，现在正在播放着，突然来电话了、闹钟响了或者你在后台放歌但是用户启动其他App用上面的方法影响的时候，我们的App该如何表现呢？最常用的场景当然是先暂停，待恢复的时候再继续。那我们的App要如何感知到这个终端以及何时恢复呢？</p>
<p><code>AVAudioSession</code>提供了多种<code>Notifications</code>来进行此类状况的通知。其中将来电话、闹铃响等都归结为一般性的中断</p>
<p>用<code>AVAudioSessionInterruptionNotification</code>来通知。其回调回来的<code>userInfo</code>主要包含两个键：</p>
<ul>
<li><p><em><code>AVAudioSessionInterruptionTypeKey</code>： 取值为<code>AVAudioSessionInterruptionTypeBegan</code>表示中断开始，我们应该暂停播放和采集，取值为<code>AVAudioSessionInterruptionTypeEnded</code>表示中断结束，我们可以继续播放和采集。</em></p>
</li>
<li><p><em><code>AVAudioSessionInterruptionOptionKey</code>： 当前只有一种值<code>AVAudioSessionInterruptionOptionShouldResume</code>表示此时也应该恢复继续播放和采集。</em></p>
</li>
</ul>
<p><strong>而将其他<code>App</code>占据<code>AudioSession</code>的时候用<code>AVAudioSessionSilenceSecondaryAudioHintNotification</code>来进行通知。其回调回来的</strong><code>userInfo</code>键为:</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="built_in">AVAudioSessionSilenceSecondaryAudioHintTypeKey</span></div></pre></td></tr></table></figure>
<p>可能包含的值:</p>
<ul>
<li><p><code>AVAudioSessionSilenceSecondaryAudioHintTypeBegin</code>： 表示其他<code>App</code>开始占据<code>Session</code>.</p>
</li>
<li><p><code>AVAudioSessionSilenceSecondaryAudioHintTypeEnd</code>: 表示其他<code>App</code>开始释放<code>Session</code>.</p>
</li>
</ul>
<h3 id="外设改变"><a href="#外设改变" class="headerlink" title="外设改变"></a>外设改变</h3><p>除了其他<code>App</code>和系统服务，会对我们的<code>App</code>产生影响以外，用户的手也会对我们产生影响。默认情况下，<code>AudioSession</code>会在<code>App</code>启动时选择一个最优的输出方案，比如插入耳机的时候，就用耳机。但是这个过程中，用户可能拔出耳机，我们App要如何感知这样的情况呢？</p>
<p>同样<code>AVAudioSession</code>也是通过<code>Notifications</code>来进行此类状况的通知。</p>
<p>假设有这样的App<br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/9d2068989e1b3da5c3b2afaa85fd24d07010cceb/20180112AVAudioSession-Category/route_change.png" alt=""></p>
<p>最开始在录音时，用户插入和拔出耳机我们都停止录音，这里通过<code>Notification</code>来通知有新设备了，或者设备被退出了，然后我们控制停止录音。或者在播放时，当耳机被拔出出时，<code>Notification</code>给了通知，我们先暂停音乐播放，待耳机插回时，在继续播放。</p>
<p>在<code>NSNotificationCenter</code>中对<code>AVAudioSessionRouteChangeNotification</code>进行注册。在其<code>userInfo</code>中有键：</p>
<ul>
<li><code>AVAudioSessionRouteChangeReasonKey</code> : 表示改变的原因</li>
<li><code>AVAudioSessionSilenceSecondaryAudioHintTypeKey</code>： 和上面的中断意义意义一样。</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:left">枚举值</th>
<th style="text-align:center">意义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">AVAudioSessionRouteChangeReasonUnknown</td>
<td style="text-align:center">未知原因</td>
</tr>
<tr>
<td style="text-align:left">AVAudioSessionRouteChangeReasonNewDeviceAvailable</td>
<td style="text-align:center">有新设备可用</td>
</tr>
<tr>
<td style="text-align:left">AVAudioSessionRouteChangeReasonOldDeviceUnavailable</td>
<td style="text-align:center">老设备不可用</td>
</tr>
<tr>
<td style="text-align:left">AVAudioSessionRouteChangeReasonCategoryChange</td>
<td style="text-align:center">类别改变了</td>
</tr>
<tr>
<td style="text-align:left">AVAudioSessionRouteChangeReasonOverride</td>
<td style="text-align:center">App重置了输出设置</td>
</tr>
<tr>
<td style="text-align:left">AVAudioSessionRouteChangeReasonWakeFromSleep</td>
<td style="text-align:center">从睡眠状态呼醒</td>
</tr>
<tr>
<td style="text-align:left">AVAudioSessionRouteChangeReasonNoSuitableRouteForCategory</td>
<td style="text-align:center">当前Category下没有合适的设备</td>
</tr>
<tr>
<td style="text-align:left">AVAudioSessionRouteChangeReasonRouteConfigurationChange</td>
<td style="text-align:center">Rotuer的配置改变了</td>
</tr>
</tbody>
</table>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><code>AVAudioSession</code>构建了一个音频使用生命周期的上下文。当前状态是否可以录音、对其他App有怎样的影响、是否响应系统的静音键、如何感知来电话了等都可以通过它来实现。尤为重要的是<code>AVAudioSession</code>不仅可以和<code>AVFoundation</code>中的<code>AVAudioPlyaer</code>/<code>AVAudioRecorder</code>配合，其他录音/播放工具比如<code>AudioUnit</code>、<code>AudioQueueService</code>也都需要他进行录音、静音等上下文配合。</p>
<p><a href="https://www.jianshu.com/p/3e0a399380df" target="_blank" rel="external">参考</a></p>
<p>全文完</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20180112AVAudioSession-Category/ASPG_intro_2x
    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="macOS开发" scheme="https://www.sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>2017年终总结</title>
    <link href="https://www.sunyazhou.com/2017/12/31/20171230Final-Summary/"/>
    <id>https://www.sunyazhou.com/2017/12/31/20171230Final-Summary/</id>
    <published>2017-12-31T02:46:20.000Z</published>
    <updated>2018-01-03T16:05:48.127Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20171230Final-Summary/2017FinalSummart1.jpeg" alt=""></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>时间像车轮一样在飞转<br>历史像江河一样在流淌<br>整整走过了365个风雨历程<br>2017年过的如此不寻常<br>一度春夏秋冬 一度雨雪风霜<br>一度翻山越岭 一度起伏延宕  </p>
</blockquote>
<p>又一年过去了,我也得墨守成规的按时交出我的年终总结了,为了不标新立异,我必须尽量不废话.(<strong>talk is cheap, show me the code!</strong>)</p>
<h2 id="2017回顾"><a href="#2017回顾" class="headerlink" title="2017回顾"></a>2017回顾</h2><p>这一年的重点事件主要如下:</p>
<ul>
<li>技术</li>
<li>买房</li>
<li>工作</li>
<li>书法 </li>
<li>读书</li>
<li>运动</li>
<li>驾照</li>
</ul>
<h3 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h3><p>这一年让我唯一有些许成就感的事情莫过于我搭建了自己的技术博客,能在这里记录我的技术成长和生活中的点点滴滴.</p>
<p>从年初我搭建博客开始至今已发表整整45篇.</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20171230Final-Summary/2017FinalSummary_blog.png" alt="blog"></p>
<p>正如我的<strong>关于</strong>页面说的,我并没有对它的品质太过于苛求,尽量记录一下容易忘记的技术和生活经验. 虽然大家看到这些并没有太过留意,但我自己确觉得如数家珍,毕竟这是一笔财富.当我几年后会看这篇年终总结的时候,希望自己<strong>没有因为虚度年华而悔恨,也没有因为碌碌无为而羞耻</strong>.</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20171230Final-Summary/2017FinalSummary_blog2.png" alt=""></p>
<p>我是一个不喜欢玩各种游戏的90后,每天看着统计后台才找回一点干活的心情.</p>
<p>今年的技术多数集中在多媒体上,每天和音视频斗智斗勇.今年的前半部分在开发TCP的聊天应用叫<code>百度Hi for mac</code>. 当然厂长<a href="https://baike.baidu.com/item/%E6%9D%8E%E5%BD%A6%E5%AE%8F/125160?fr=aladdin" target="_blank" rel="external">Robin(李彦宏)</a>)也在用. <em>对于这个满脑子人工智能一门心思研究无人驾驶每次产品都落地的不咋地整整核心技术人员总留不住的厂长,我递过去了我的辞职申请</em>.今年下半年在全力研究多媒体短视频相关的开发,<code>Open GL</code>,<code>GPUImage</code>,<code>AV Foundation</code>…… 吭哧吭哧(kengchi 一声). 直到写博客现在为止,才刚刚研究完<code>AV Foundation</code>最后一页. 搞了很久技术深感在某些领域需要深耕,不能盲目的跟风,还得脚踏实地.</p>
<p>28岁,90后.这一年感觉技术上没有啥成就感,到有如下感慨:</p>
<blockquote>
<p>也许大神都是命中注定的,而我很不幸,没有被注定.</p>
</blockquote>
<hr>
<h3 id="买房"><a href="#买房" class="headerlink" title="买房"></a>买房</h3><p>这是我2017年经历过最始料未及的一个大事件.</p>
<h4 id="看房"><a href="#看房" class="headerlink" title="看房"></a>看房</h4><p>这事得从2016的十一长假说起, 我回哈尔滨看房</p>
<p>从哈尔滨万达广场沿着 哈尔滨大街 步行, 到群力 又步行回来.跟我一个比较要好的高中室友.</p>
<p>大概的路线是这样的:</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20171230Final-Summary/2017FinalSummary_findhouse.png" alt="看房"></p>
<p>据我后来统计 每天至少步行18公里以上. </p>
<p>于是我得出看房的经验列表:</p>
<table>
<thead>
<tr>
<th style="text-align:center">区域</th>
<th style="text-align:center">房价</th>
<th style="text-align:center">房屋类型</th>
<th style="text-align:center">装修类型</th>
<th style="text-align:center">发展潜力</th>
<th style="text-align:center">推荐看房装备</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">哈西</td>
<td style="text-align:center">均价8k~1w</td>
<td style="text-align:center">期房多/现房少</td>
<td style="text-align:center">毛坯多/精/简装少</td>
<td style="text-align:center">高铁/学区/商圈/地铁</td>
<td style="text-align:center">电动车+跑鞋</td>
</tr>
<tr>
<td style="text-align:center">群力</td>
<td style="text-align:center">均价6k~9k</td>
<td style="text-align:center">期房少/现房少</td>
<td style="text-align:center">毛坯</td>
<td style="text-align:center">周边啥也没有(关东古巷/松花江)</td>
<td style="text-align:center">电动车+跑鞋</td>
</tr>
<tr>
<td style="text-align:center">其它</td>
<td style="text-align:center">N/A</td>
<td style="text-align:center">N/A</td>
<td style="text-align:center">二手居多</td>
<td style="text-align:center">周边配套没调研</td>
<td style="text-align:center">电动车+跑鞋</td>
</tr>
</tbody>
</table>
<blockquote>
<p>注意:<em>为啥我推荐的是电动车+跑鞋,因为我看房时发现有的区域跨度太大,需要车最好,有的区域跨度小有车没地方停,尤其是一些还没建成的地块,你去了漫天漂灰,泥泞不堪,你开车不是刷车就是麻烦耽误时间,车速太快你看不清楚哪是哪,走走停停车我认为不方便,摩托车太大一般,只有电动车最合适,一个骑车一个看,哪里不清楚看哪.但需要一个续航里程高点的电动车.还有跑鞋,看房必须得走,上楼下楼,这个单元那个小区的.没有一双舒服的鞋走一上午就知道啥滋味了.</em></p>
</blockquote>
<p>可惜我没车,只有一双腿和一双<code>new balance</code>跑鞋,每天走上18公里,可能是鞋垫太舒服了,脚都磨红了都没起泡,我还暗自慨叹我自己多高明得回没穿别的鞋,可是没当我高兴一会儿就发现,鞋垫快磨碎了. 所以建议大家看房要 <code>管住嘴</code>,<code>带够水</code>,<code>迈开腿</code>,别吃太饱了.</p>
<table>
<thead>
<tr>
<th style="text-align:center">我看过的房地产</th>
<th style="text-align:center">推荐意见和结论</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">有个叫什么红星城</td>
<td style="text-align:center">纯扯淡浪费时间 不推荐</td>
</tr>
<tr>
<td style="text-align:center">东方新天地</td>
<td style="text-align:center">缺钱的可以考虑,据说是房本下来很费劲</td>
</tr>
<tr>
<td style="text-align:center">恒大珺庭</td>
<td style="text-align:center">房屋朝向让我觉得难受,简装,怕费事的可以考虑,拎包入住大开发比较靠谱</td>
</tr>
<tr>
<td style="text-align:center">金爵万象</td>
<td style="text-align:center">貌似在新天地东边,墙皮子直掉不敢买,不推荐</td>
</tr>
<tr>
<td style="text-align:center">辰能溪树庭院</td>
<td style="text-align:center">精装,推荐,就是贵,估计都没有了</td>
</tr>
<tr>
<td style="text-align:center">北纬45度</td>
<td style="text-align:center">就剩公寓了,没住宅了,买不了了</td>
</tr>
<tr>
<td style="text-align:center">君贵东方瑞景</td>
<td style="text-align:center">售楼员挺二,清华大街南北还是城中村,一般,价格死贵还没啥亮点</td>
</tr>
<tr>
<td style="text-align:center">漫步巴黎</td>
<td style="text-align:center">没房了,剩下的都不咋好,房屋太大,内室很不适合我们东北人的习惯,一般</td>
</tr>
<tr>
<td style="text-align:center">百年俪景</td>
<td style="text-align:center">没房, 价格一般,房屋格局还行,喜欢安静的可以考虑,价格稍贵</td>
</tr>
<tr>
<td style="text-align:center">观江国际</td>
<td style="text-align:center">是我见过群力最贵的了当时1.5w 不过没啥好房子了,不差钱推荐</td>
</tr>
<tr>
<td style="text-align:center">其它</td>
<td style="text-align:center">基本没有好的,板楼基本都是期房还没有,高层不是时间长就各种不靠谱</td>
</tr>
</tbody>
</table>
<p>上述这些只代表我个人看法.</p>
<p>时间到达2017年1月份,过年回家</p>
<p>我趁这个时间点又去了几家,发现</p>
<p>房价 从<code>8</code>千涨到<code>1w</code>,恒大珺庭最为明显.十一的时候还有些好的户型,十一以后基本绝迹.剩下一堆破户型,要不挡光要么房屋布局狭窄.</p>
<h4 id="哈尔滨户口和北京公积金"><a href="#哈尔滨户口和北京公积金" class="headerlink" title="哈尔滨户口和北京公积金"></a>哈尔滨户口和北京公积金</h4><p>我是个北漂的码农大学毕业直接去了北京. 户口还不属于哈尔滨市.<br>据我跑完大部分的售楼处后,打听的公积金使用方式,</p>
<ol>
<li>北京的公积金如果想在哈尔滨市用必须是哈尔滨市户口才能用.</li>
<li>想办理哈尔滨市户口必须得买房,或者单位接收等集体户口.</li>
<li>想在<code>哈尔滨</code>买房用<code>北京公积金</code>必须得是<strong>哈尔滨市户口</strong>,别的地方用不了.</li>
</ol>
<p>写到这里我真的想骂娘了,但为了保持儒士的风范我还是忍了,我不得不说,这是个<strong>鸡生蛋</strong>,<strong>蛋生鸡</strong>的问题.</p>
<p>如果说农村户口想成为哈尔滨市市民是因为我们农村人每个人分块地的话,那我请政府收回我的土地,把我户口改成哈尔滨市户口.那块破土地如果能发家致富我又何必背井离乡去北漂.</p>
<h4 id="过年筹划买房"><a href="#过年筹划买房" class="headerlink" title="过年筹划买房"></a>过年筹划买房</h4><p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20171230Final-Summary/haerbin_haxi.jpg" alt=""></p>
<p>回家过年,这年过得我心情都不在年上,心情很矛盾,过了初七就上班回北京了.我的家在绥化市海伦市.</p>
<p>回北京的两个月时间里,根本都没有什么干活的劲头,于是我就给父母打电话</p>
<p>我说了至今为止最具掷地有声的话.</p>
<p>我在电话中对父母说:”我在北京,距离哈尔滨1200多公里,你们说我是千里奔波去看房,还是你们去呢,我周末就两天假,去了回来最多也就能看上半天,你们在家没啥事距离哈尔滨那么近为啥不去帮我去看看房呢.”(父母每年都去外面打工)</p>
<blockquote>
<p>父母确实听了这一番话,也都感同身受</p>
</blockquote>
<p>于是俩人行动了起来, 一周跑了两趟哈尔滨.由于哈尔滨也没啥亲戚只能去了 回海伦,去了回海伦.</p>
<p>我的一番话起了决定性作用, 这俩人在周五打电话告诉我,他们看中了爱达88.回来吧！</p>
<h4 id="天时-地利-人和"><a href="#天时-地利-人和" class="headerlink" title="天时 地利 人和"></a><strong>天时</strong> <strong>地利</strong> <strong>人和</strong></h4><p>买房绝对是一件<code>天时</code>,<code>地利</code>,<code>人和</code>的事情.</p>
<p>我父母帮我看房这一周,我基本也没心情干活,我的老大(经理)看我的心情我都能猜到了,最后他给了我一周假,回家买房.</p>
<p>因为这一周我在办理各种银行的 收入证明,银行流水的打印贷款哈尔滨各种银行的模板,公积金等</p>
<p>北京的公积金如果想拿出来当首付,必须退出北京市公积金.相当于离开北京.<br>说白了就是得离职.</p>
<p>这段经历让我至今难忘,当时的真是进退维谷.</p>
<h4 id="坐飞机回家买房"><a href="#坐飞机回家买房" class="headerlink" title="坐飞机回家买房"></a>坐飞机回家买房</h4><p>2017年的3月某日凌晨5点,周六 天气:<strong>轻度雾霾</strong>,地点:去往北京首都国际机场T2航站楼的路上</p>
<p>前天晚上预约的滴滴专车早已在楼下等候,我和<code>我家那位</code>在最后一遍确认 户口本、身份证、公司人力资源部签发的各种银行的收入证明、各种银行卡、银行流水单…… 确认完毕 出发.</p>
<p>路上司机是个话唠  </p>
<p>司机说:”这是去哪!”<br>我说:”回家看看房”</p>
<p>…</p>
<p>司机说:”我们北京政府给我们分的房子 一平 才3000多,距离地铁不算太远”<br>我说:”北京人真好…国家都如此照顾”</p>
<p>…</p>
<p>司机说:”唉 都是这些外来人口把这房价搞起来的,要不我们还能再便宜点！”<br>我说:”…要啥自行车知足吧!”</p>
<p>司机说:”&amp;%&amp;*#$#&amp;#$#^#$^!”</p>
<p>…</p>
<p>我真都懒的和他吐口水.</p>
<blockquote>
<p>牛逼哄哄的北京人,你要是去哈尔滨租房,北京户口,哥的房子就双倍价格租你,不住就回北京,冰城人不太欢迎你这种得了便宜还不知足的北京土著</p>
</blockquote>
<p>终于到机场,雾霾貌似散去了不少.</p>
<p>东方航空的飞机 早已在停机坪等着值机(值机就是你选好你的座位)检票了.</p>
<p>打印取票…  </p>
<p>等了好长时间发现去太早了,不去太早也不行,就北京这交通还是宁愿早去三个小时也不能相信taxi.地铁绕道好远.</p>
<p>我看飞机票上边写着 9:58分到哈尔滨</p>
<p>…</p>
<p>检票…<br>登机…  </p>
<p>7:59</p>
<p>起飞 (起飞起了半个小时我服了,别告诉你要delay了,坐火车总晚点,坐飞机还晚点我也是醉了)</p>
<p>当飞机起飞开到北京的上空,早已没了雾霾,出现在眼前的是<code>祖国的万里长城</code>(这个时候如果能放上一首《我的中国心》你想起那首歌词, 长江…长城..),如果说去过长城觉得很没意思,那么当你在飞机上俯视它的时候,我觉得你会看到另一种心情,那感觉绝对前所未有.有机会大家可以试试,但要在天气非常好的时候,太阳刚从东方升起. 后来我才发现如果你是个海归的人才当你看到祖国的万里长城心理是什么滋味(你的飞机要降落在祖国的首都国际 机场,看着梦寐已久的万里长城).</p>
<blockquote>
<p>当时我的直觉告诉我,今天是个好兆头.买房应该十拿九稳.</p>
</blockquote>
<p>飞机穿越辽宁的上空,看到一架 <code>歼-15</code>貌似是战斗机 飞机腹部带着一颗导弹 直线向南飞去… 估计是每天执行任务,紧接着 就是白雪皑皑的 平原 尽览无余.</p>
<p>我刻意观察过,这雪的厚度 从略裹地表… 飞过吉林逐渐增加雪的厚度…到哈尔滨 太厚了.</p>
<p>飞行也就一个小时…</p>
<p>如果哈尔滨机场是我见过最破的机场那应该是我说错了,如果我说你看到一片<code>苞米地</code>还有稍许<code>电线杆子</code>飞机跑道的水泥地上都冻成冰了 青一块紫一块的 地表 看清后这是飞机起降的跑道你也许不信,但是这飞机就能在这种恶劣环境正常起降. 降落半个小时,飞行员这个屌丝 不知道干啥 飞行速度降落的时候慢的可怜,哈尔滨周边的村庄屯子 看的一清二楚,哎呀,当时那心情,我只能说我第一次坐飞机回哈尔滨,不知道太平机场周边太荒凉.</p>
<p>降落之后我总结  </p>
<p>原来 行程两个小时其实 中途飞行也就一个小时,起飞半个小时,降落半个小时.我能说啥呢,完美没晚点.这飞机开的我给你打101分.   </p>
<p>坐大巴到哈西…</p>
<p>下来大巴路过哈西站东广场,直奔爱达售楼处. </p>
<p><strong>奇迹的一幕发生了</strong>   </p>
<p>我吐了一口唾沫, 不偏不正, 沿着 广场上有地漏缝隙的大理石<code>直直</code>吐到了下水道,吐进去了,连边都没沾,就是这么准, 我当时惊呆了,可惜当时着急没照相. </p>
<blockquote>
<p>这是真事,我当时的直觉告诉我,怎么这么正道, unblievable看来今天买房能买成.</p>
</blockquote>
<p>到了爱达售楼处我父母早已在那等着我了,</p>
<p>我父母说要不要在周边看看,我说不用了砍瓜切菜挑户型,买吧!</p>
<p>于是就是干净利落的交完定金,回家办理结婚手续,张罗钱.</p>
<blockquote>
<p>看到这里提醒一下大家,事后我发现我选的户型没有阳台,是飘窗那种看样子.</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20171230Final-Summary/2017FinalSummary_house_type.jpg" alt=""></p>
<p>爱达88-1单元-12楼-三室两厅一卫-<code>124.7</code>平,当时的价格 10800/平 </p>
<p>来张封顶的照片 感谢<strong>红姐</strong>提供:<br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20171230Final-Summary/aida88.JPG" alt=""> </p>
<p>在过去的几年我回家的路线是这样的:<br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20171230Final-Summary/way_home_hailun.png" alt=""></p>
<p>从<code>北京坐地铁</code>到<code>北京站</code>–&gt;<code>哈尔滨站</code>–&gt;<code>海伦站</code>–&gt;<code>大客(大巴)</code>–&gt;<code>第二良种场</code><br>全程<code>1455</code>公里左右,说的凄惨一些坐大巴回农村地图都没有导航.压根都没有这个路线,到海伦<code>40公里左右</code></p>
<p>如果说交房以后我的路线应该是这样的:<br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20171230Final-Summary/way_home_haerbin.png" alt=""><br>从<code>北京坐地铁</code>到<code>北京站</code>–&gt;<code>哈尔滨西站</code> 完事 走5分钟我到家了.</p>
<blockquote>
<p>为了这<code>265</code>公里(哈尔滨减去到海伦农村的公里)我已为之奋斗了至少<code>4</code>年,未来还会继续奋斗到把房贷还完.</p>
</blockquote>
<h4 id="贷款"><a href="#贷款" class="headerlink" title="贷款"></a>贷款</h4><p>回家办理完最坑的事情发生了</p>
<p>我首付交了61w多 贷了60万,哈尔滨银行是我见过最SB的银行,我的银行流水已经高出两个月的还贷价格,但它还要我女朋友的流水也要达到和我同等标准.我当时真是膈应的哈尔滨银行咬牙切齿. 后来通过招商银行办理的商业贷款买的房.至此我想说如果你有能力达到这个银行的标准你应该离中产阶级不远了,已经是小康中的小康了.</p>
<p>在这里我说几个比较坑的地方</p>
<ol>
<li>银行的贷款银行流水需要现场打印,作假的流水就不要去贷款了否则会得不偿失.</li>
<li>还贷能力不够的需要找一个中间人.他的要求是和你一样准备相关材料.这种基本就需要靠各种亲戚了,可惜的是我家有这样的亲戚却有贷款.</li>
<li>贷款的时候 贷款业务员总推荐你买各种理财产品,不要买trust me.</li>
<li>贷款的银行里面必须保证有至少还贷能力三个月的存款.</li>
</ol>
<p>我被第<code>4</code>条坑了,我交完首付的时候要说身无分文那有点扯淡,但是也就最多<code>2000多元</code>,两个人回北京的路费去除掉 吃饭住宿都勉强不能维持了.还要我存进去<code>3万</code>这不扯淡嘛？后来又和比较好的同学,姐姐借点钱存进去了.唉 太TM扯淡了</p>
<p>我已经回到解放前了,还要我怎样.</p>
<p>至此我觉得一个国家连最基本的老百姓住房都成问题这已经不是一个好的国家了.</p>
<h4 id="办理完所有买房手续"><a href="#办理完所有买房手续" class="headerlink" title="办理完所有买房手续"></a>办理完所有买房手续</h4><p>有一种感觉叫如释重负,就是形容买完房办理贷款.等待审批完成最后成为一个不折不扣的房奴,那这段话说的应该是我,心理的一块石头算是落了地.</p>
<p>4月份收到招商银行的审批合同,银行要求必须本人去取.也可以通过代理人拿着本人身份证 代理人身份证去取,于是我求助了我的一个 小学、初中、高中同学.帮我去爱建支行取出我的贷款合同帮我邮寄到了北京.</p>
<p>我买房父母没拿多少钱,全是这几年大学毕业辛苦北漂忍受雾霾拿生命积攒下来的.<br>所以我不羡慕那些拿钱给儿女买房的父母.</p>
<p>至此买房 算是告一段落.</p>
<blockquote>
<p>买房如果写两个人名的话,是签发的6份合同, 房地产,银行,本人各一份<br>产权所有是谁签 51% 和谁签 49%的比例</p>
</blockquote>
<h4 id="提取北京公积金"><a href="#提取北京公积金" class="headerlink" title="提取北京公积金"></a>提取北京公积金</h4><p>北京公积金提取需要提供如下材料:</p>
<ul>
<li>购房合同原件和购房合同复印件</li>
<li>贷款合同原件和贷款合同复印件</li>
<li>北京纳税连续一年以上打印</li>
<li>购房发票原件以及税务查询截图打印</li>
<li>购房的付款小票</li>
<li>公司的提取公积金章程表格</li>
<li>部门经理签字认可单</li>
<li>本人亲自签字认可对提供材料的真实性认可单</li>
</ul>
<p>这些东西办完之后 公积金可以约定支取.由于百度破公司的信誉不好,只能每个季度(3个月)提取一次.</p>
<p><strong>办理完之后北京住房公积金会返回给我们一张<code>公积金约定提取记录单</code>用于其它人提取的凭证,下次提取必须凭借这张提取记录单,比如我女朋友她想提取必须拿这个记录单,记住这很重要.</strong></p>
<p>第一笔钱入账的时候都已经是 6月末,第一件事就是把买房时候借点钱都还清.</p>
<blockquote>
<p>我就想不明白为啥公积金的钱是我的我还提取出来这么费劲,即便是十九大各种开会减少各种手续我发现外地人依然还是老样子,只有北京人提取各种方便.我满腔激愤的膈应起来那个出租车司机.</p>
</blockquote>
<p>经过了如此复杂的手续 我才得以买套房,想想真是心酸无助,确又黯然神伤, 在中国买房就是这么费事, 后来买房的看客们, 做好一个打持久战的准备,因为我们在和中国的体制斗智斗勇.</p>
<p>如果对本人买房经历有任何问题 请底部留言,我一一解答.</p>
<p>到此买房结束, 我相信跟我做邻居的人绝不是一般的普通人,他也必定经历我的这些至少一部分,收入、地位、等等等等,因为能在爱达这个地块买房的人,非富即贵,希望我的经历和买房经验能给你提供借鉴,少走弯路.</p>
<hr>
<h3 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h3><h4 id="离开中国互联网之巅-百度"><a href="#离开中国互联网之巅-百度" class="headerlink" title="离开中国互联网之巅-百度"></a>离开中国互联网之巅-百度</h4><p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20171230Final-Summary/2017FinalSummary_work1.jpg" alt=""></p>
<p>如果你是一个年轻需要锻炼的程序员我建议你去百度,那里有你成长所需要的土壤</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20171230Final-Summary/2017FinalSummary_work2.png" alt=""></p>
<p>上边这张是办公环境,可以说确实很好.</p>
<p><strong>有一种离职叫真的干够了</strong></p>
<p>离开百度与其说是一种<strong>损失</strong>不如说是<strong>选择比努力更重要</strong>.</p>
<p>认识了很多精英小伙伴,他们不是<strong>干啥啥行</strong>的人就是在某个领域<strong>世界排行榜都有成就</strong>的人.</p>
<p>我一开始在百度云设备,后来产品不济转岗到<strong>百度网盘</strong>.是的你今天用的<code>iOS</code>百度网盘或者<strong>macOS百度网盘</strong>就有我开发的一段故事.</p>
<p>后来觉得团队气氛不是很好转战到百度hi做聊天,如果我说QQ微信你知道的话,那么百度有没有类似QQ、微信这样的聊天工具呢,有的,这玩意就叫百度Hi.</p>
<p>在Hi团队 接触到了一位来自<code>清华大学</code>毕业的老乡<strong>涛兄</strong>.</p>
<p>如果说这听起来感觉很有面子的话,那我来说一个2017年我听过最真实的笑话.</p>
<p>据涛兄说:</p>
<p><strong>他当年高考的时候,数学打了<code>149</code>分(150满分),让涛兄很不能释怀的是他有时候吃饭的时候都再思考为啥不是<code>150</code>分,他卷面也已经很干净了,没有错误的题目啊.终于有一天他找到了答案,他说:”有可能是卷面太干净了扣了一分”</strong>.</p>
<blockquote>
<p>这是一件2017年我听过最搞笑且真实的笑话,回想我的高考..还是算了,这就是差距.</p>
</blockquote>
<p>离开的百度Hi 来到的新的公司 金山云</p>
<p>进公司的时候唉 一眼望去 好多张熟悉的面孔,原来相当一部分同事都是百度的前同事.</p>
<p>工作就这样把,不多介绍了</p>
<hr>
<h3 id="书法"><a href="#书法" class="headerlink" title="书法"></a>书法</h3><p>这一年买了两只毛笔花了大概200多</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20171230Final-Summary/maobi.png" alt=""></p>
<p>不过用起来确实很好,好马配好鞍,好笔配毛毡.</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20171230Final-Summary/IMG_2514.png" alt=""></p>
<p>有幸在百度碰到书法高手-老乡<code>潘旭</code>,这个绥棱人真是干啥啥行,写代码飞驰电掣.还有一手好书法.让我这个海伦人很佩服.</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20171230Final-Summary/linzexu.JPG" alt=""></p>
<p>这是林则徐当年写给皇帝的虎门销烟奏折.是我学习书法的最终目标.</p>
<hr>
<h3 id="读书"><a href="#读书" class="headerlink" title="读书"></a>读书</h3><p>在文学上 2017读过+听过的书我都一一记录 也推荐大家看看.</p>
<ul>
<li>《卑鄙的圣人曹操》1~10部全听完 </li>
</ul>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20171230Final-Summary/beibideshengrencaocao.jpg" alt=""></p>
<ul>
<li>《知行合一 王阳明 》</li>
</ul>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20171230Final-Summary/zhuxingheyi_wangyangming.jpg" alt=""></p>
<ul>
<li><p>《大清相国》 陈廷敬<br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20171230Final-Summary/daqingxiangguo.jpeg" alt=""></p>
</li>
<li><p>《晚清的最后十八年》1~4部</p>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20171230Final-Summary/wanqingzuihou18nian.jpeg" alt=""></p>
<ul>
<li>《Learn AV Foundation》</li>
</ul>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20171230Final-Summary/learn_av_foundation.jpeg" alt=""></p>
<p>简单就这么多</p>
<p>这里比较推荐的是<strong>《大清相国》</strong>和<strong>《晚清最后的十八年》</strong></p>
<h4 id="读《晚清最后的十八年》中有一个故事值得学习"><a href="#读《晚清最后的十八年》中有一个故事值得学习" class="headerlink" title="读《晚清最后的十八年》中有一个故事值得学习"></a>读《晚清最后的十八年》中有一个故事值得学习</h4><p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20171230Final-Summary/fudaoanzheng.jpg" alt=""></p>
<blockquote>
<p>福岛安正（1852一1919）日本信州人．日本殖民机构关东都督府都督。陆军大将。有“日本情报战之父”之称。他是一个具有超前眼光的阴谋家、战略家.  </p>
<p>1887年，福岛安正被任命为日本驻德国武官。在德国的五年中，他详细的考察了欧洲各国的情况，其中俄国的动向引起了他的极大关注。迫于英国的牵制，俄国传统的南进政策被迫放缓，福岛安正正确预测俄国必然会转向东进。果然，1891年1月，俄国公布了建造西伯利亚大铁路的计划，并立即动工。这条连接俄国首都圣彼得堡和符拉迪沃斯托克（海参崴），横穿欧亚大陆的铁路，可以说是俄国侵略亚洲的最大武器。西伯利亚铁路横穿中国东北部，从哈尔滨向南有一分支，直达旅顺、大连，可以使俄国轻而易举的进入亚洲。福岛预测这条铁路大约要耗时十年，他认为这十年是关系日本生死存亡的十年，日本对此绝不能袖手旁观。  </p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20171230Final-Summary/Russia.png" alt=""></p>
<blockquote>
<p><strong>为了掌握俄国东进政策的实际情况，福岛决定亲自沿着西伯利亚铁路进行实地侦察。这个大胆的计划立即得到了参谋次长川上操六的大力支持。由于福岛的军人身份会暴露穿越计划的目的，于是福岛对外宣布要进行一次单骑穿越严寒时期西伯利亚的探险旅行。即使是土生土长的俄国人，也不敢轻言在严冬时期穿越西伯利亚，更何况是一个没有严寒地区生活经历的外国人。福岛此言一出，世界哗然，西方探险家对他的“穿越”计划嗤之以鼻，大家都等着看这个日本人的笑话。但福岛安正极为坚定，他深知这个计划对日本意味着什么</strong>。<br><strong>1892年2月11日，福岛和爱骑“凯旋”从德国踏上穿越之旅，在零下20摄氏度的严寒中北上。3月下旬，到达圣彼得堡后，福岛向日本参谋本部发去了第一份关于俄国陆军的调查报告。此时，俄方也隐约觉察到福岛的此次“旅行”是项庄舞剑，意在沛公。4月9日，福岛离开圣彼得堡，于当月下旬抵达莫斯科。在那里受到了沙皇和皇后的接见和赐宴。经过细致考察，福岛向日本参谋本部提交了关于西伯利亚铁路建设方面的报告。9月下旬，福岛到达中俄两国的界山―海拔3000多米的阿尔泰山。从阿尔泰山极目远望，满目皑皑白雪。至此，福岛已经走了7000公里，完成一半路程。<br>福岛安正在旅途中迎来了1893年。1月下旬到2月是西伯利亚最寒冷的时期，气温达到零下50度。俄国人几乎不在这样严寒的冬天外出，但是福岛却以惊人的意志在荒无人烟的冰天雪地里顽强前行。最终，凭借顽强的的毅力，福岛走出了西伯利亚。沿着逐渐转暖的黑龙江一路南下进入中国，福岛安正又用了两个多月的时间，在瑷珲、齐齐哈尔、吉林等地刺探军情。经过一年多的艰苦跋涉，福岛已经身心俱疲。他终于到了终点站–符拉迪沃斯托克。在这次的西伯利亚穿越中，福岛安正至少换了八匹马，历时488天，行程14000公里，创下了情报侦察史上的奇迹</strong>。<br>居住在符拉迪沃斯托克的日本人欣喜若狂地迎接福岛的到来。全世界都在大肆报到他单骑穿越西伯利亚的消息。福岛安正成了世界的名人。明治天皇特授予他三等旭日重光勋章并亲自设宴款待。福岛安正在穿越中获得的第一手资料，成为日俄战争中日本获胜的重要信息保障。<br>一个国家的情报工作，单靠几个人的力量是远远不够的，经过长期的经营才能形成一个庞大而有效的情报网络。在这方面，福岛也是一个行家里手</p>
</blockquote>
<p>这个人日本人横穿俄国欧亚远东大铁路,也就是今天的莫斯科-&gt;&gt;满洲里-&gt;&gt;齐齐哈尔-&gt;&gt;大庆-&gt;&gt;哈尔滨-&gt;&gt;牡丹江-&gt;&gt;海参崴 对俄贸易跨国专列铁路线.</p>
<p>就为了搜集战略情报,铁路途经山川地形地貌河流都绘制成地图(那时候还没有google卫星定位地图),为了战争做好充足的准备. </p>
<p>这个人的意志深深的鼓舞了我,如果一个国家想侵略另一个国家,出一两个这样的人才就差不多够了.</p>
<p>下图是晚清的东北军<br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20171230Final-Summary/manqing_dongbeijun.jpg" alt=""></p>
<p>这些书多数都是听的少数用kindle看的.2018年会再接再厉.</p>
<hr>
<h3 id="运动"><a href="#运动" class="headerlink" title="运动"></a>运动</h3><p>这一年一直坚持打羽毛球<br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20171230Final-Summary/badminton.JPG" alt=""></p>
<p>参加了金山的羽毛球比赛拿了一个季军 老实说纯打酱油哈见笑见笑<br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20171230Final-Summary/Runner-up2.JPG" alt=""><br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20171230Final-Summary/Runner-up1.JPG" alt="">  </p>
<p>金山的小伙伴们还是不错的团队<br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20171230Final-Summary/badminton_team.gif" alt=""></p>
<hr>
<h3 id="驾照"><a href="#驾照" class="headerlink" title="驾照"></a>驾照</h3><p>这是2017年我觉得最值得去做的一件事,终于把驾驶证考了.上学的时候家里条件实在太差了,没钱考驾照,上班以后没有了时间.总之结果还是好的</p>
<p>来张海淀驾校的照片.<br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20171230Final-Summary/drivinglicence1.png" alt=""></p>
<p>说一下考驾照的感触</p>
<p>科目一、二、三、四 一气呵成.2个月顺利拿本,总计跑了11趟驾校.</p>
<p>不过不得不说首都的教育还是很好的,教学设置一应俱全.果然还是得看首都的发展.</p>
<p>如果是自尊心强的人我建议可以报名.如果挨骂几句都接受不了的话还是别报了.</p>
<h2 id="2018目标"><a href="#2018目标" class="headerlink" title="2018目标"></a>2018目标</h2><p>说完了2017年的各种大事件</p>
<p>下面我列一下今年的目标</p>
<ul>
<li>swift4 进阶看完 </li>
<li>iOS Core Animation 看完</li>
<li>Learn AV Foundation 要写几篇博客从上次段的位置续上</li>
<li>学会Python和数据挖掘 为机器学习做铺垫</li>
<li>人工智能领域要有跨足</li>
<li>多媒体相关技术深耕</li>
<li>英语水平再提高一个level</li>
</ul>
<p>好了目标就这些吧</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这一年过很多事件都没来得及想就发生了,有些想的基本很少完成,博客质量有量的积累却没有质的飞跃. 如果用几个字来结束2017的年终总结那我只能发出这句话吧！</p>
<p><strong>雄关漫道真如铁,而今迈步从头越.</strong></p>
<p>(估计大家刚刚进入我的博客,发现有一张劳斯莱斯的背景图,这张图是从劳斯莱斯汽车官方找到的,是<code>1903</code>年<a href="https://zh.wikipedia.org/wiki/%E6%9F%A5%E7%88%BE%E6%96%AF%C2%B7%E5%8B%9E%E6%96%AF" target="_blank" rel="external">查尔斯·史都华·劳斯</a>开车劳斯莱斯汽车打破陆地速度世界记录的画面,最后由于计算速度的设备没有经过组委会认定被判定无效.用这张图的寓意就是有时候做到了不必care认证不认证那不重要,事实已经证明了.)</p>
<hr>
<p>文章最后给创业的哥哥姐姐打个关于奶粉的广告,当然可以忽略:</p>
<blockquote>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20171230Final-Summary/WechatAD.jpeg" alt="">走亲访友庆团圆，首选礼品美益源，绿色天然无污染，长期饮用身体健，老叟身心如少年，孩童茁壮 喜心田，营养之高易消化，免疫提高蛋白欢，滋养安神又助眠，修身健体更美颜，世界公认不一般，根深蒂固百姓间，追求营养来宣传，老年康健儿孙福，孩子强健父母愿， 别看价格别喊天，疾病缠身后悔难，只要选择美益源，幸福康健寿百年。今天你喝了吗？美益源羊奶粉，今天你喝了吗？ 绥化店:13845540073 </p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20171230Final-Summary/2017FinalSummart1.jpeg&quot;
    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="生活" scheme="https://www.sunyazhou.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>Markdown中插入音频文件</title>
    <link href="https://www.sunyazhou.com/2017/12/27/20171227markdown-audio/"/>
    <id>https://www.sunyazhou.com/2017/12/27/20171227markdown-audio/</id>
    <published>2017-12-27T04:04:07.000Z</published>
    <updated>2017-12-30T04:13:29.152Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>喜欢在博客文章打开的时候 播放一首背景音乐, 但Markdown本身是不支持插入音频视频,带着这个疑问开始这篇文章.</p>
<h2 id="markdown插入音乐"><a href="#markdown插入音乐" class="headerlink" title="markdown插入音乐"></a>markdown插入音乐</h2><p><code>markdown</code>其实就是 一种<code>html</code>的转换语法,其实内部也同时支持直接写<code>html</code>标签, 如果不了解各种标签请点击<a href="https://www.w3schools.com/tags/tag_iframe.asp" target="_blank" rel="external">w3cschool</a>查看各种 API 的用法,此时要用到的标签为<code>iframe</code>，代码如下所示，其中</p>
<ul>
<li><code>div</code>用于控制格式，若无则默认为居左</li>
<li><code>frameborder</code>用于规定是否显示框架周围的边框，1为是，0为否</li>
<li><code>marginwidth</code>及<code>marginheight</code>表示距离边缘的像素大小</li>
<li><code>width</code>及<code>height</code>表示播放条的长度和宽度</li>
<li><code>src</code>为播放链接，可以在如网易云音乐的<code>生成外链播放器</code>获取该链接，同时也获得以下代码，并可以自行更改；也可将音频链接改为视频链接，从而播放视频</li>
</ul>
<blockquote>
<p>值得注意的是，音频和视频在默认情况下是会自动循环播放的，可以修改链接的值进行修改<br>在<code>src</code>域中，<code>auto</code>值表示是否自动播放，当值为<code>1</code>时为自动播放，<code>0</code>则不是<br>在<code>src</code>域中，有些链接会附有<code>height</code>或<code>width</code>值，其表示表示播放框的基本宽高，可以更换其值以获得想要的播放框大小，此时可以不用填写外部的<code>width</code>及<code>height</code>.</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">life</span>&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">frameborder</span>=<span class="string">"no"</span> <span class="attr">marginwidth</span>=<span class="string">"0"</span> <span class="attr">marginheight</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">400</span> <span class="attr">height</span>=<span class="string">140</span> <span class="attr">src</span>=<span class="string">"https://music.163.com/outchain/player?type=2&amp;id=34341360&amp;auto=0&amp;height=66"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<div align="life"><br><iframe frameborder="no" marginwidth="0" marginheight="0" width="400" height="140" src="https://music.163.com/outchain/player?type=2&id=34341360&auto=0&height=66"></iframe><br></div>


<h2 id="接口说明"><a href="#接口说明" class="headerlink" title="接口说明"></a>接口说明</h2><p>这里面可以看到 用了 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">https://music.163.com/outchain/player?type=2&amp;id=34341360&amp;auto=0&amp;height=66</div></pre></td></tr></table></figure>
<p>这个接口的<code>id=34341360</code>是从这里获取的</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20171227markdown-audio/markdown_audio1.png" alt=""></p>
<p>找到<code>复制链接</code>,然后用浏览器打开.</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20171227markdown-audio/markdown_audio2.png" alt=""></p>
<p>后边的 <code>id=34341360</code>就是我们要的 <code>id</code> 然后接口替换就可以了</p>
<p>更多技巧可参考以前写的一篇文章<br><a href="https://www.sunyazhou.com/2017/10/25/20171025markdown-skill/">markdown折叠</a><br><a href="https://www.sunyazhou.com/2017/09/29/20170929markdown-table/">markdown 表格</a></p>
<p>全文完</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;喜欢在博客文章打开的时候 播放一首背景音乐, 但Markdown本身是不支持插入音频视频,带着这个疑问开始这篇文章.&lt;/p&gt;
&lt;h2 id=
    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>音频声像Pan值电平左右声道平衡</title>
    <link href="https://www.sunyazhou.com/2017/12/19/20171219AudioPan/"/>
    <id>https://www.sunyazhou.com/2017/12/19/20171219AudioPan/</id>
    <published>2017-12-19T03:40:13.000Z</published>
    <updated>2017-12-24T07:20:12.406Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20171219AudioPan/audio-pan.jpg" alt=""></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近在开发多媒体音视频相关业务,期间遇到的问题这里全做记录下来,下面是同事提供的一个例子我整理出来,以备后续开发遇到此类问题有个备案.</p>
<h2 id="开篇"><a href="#开篇" class="headerlink" title="开篇"></a>开篇</h2><p>最近开发音频涉及到左右声道调节,基于左右声道的音量实现 声音环绕效果.<br>下面是 UI 演示.</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20171219AudioPan/audio_pan_demo.gif" alt=""></p>
<p>这里其实修改的类似 <code>AVAudioPlayer</code>里面的<code>pan</code>值修改</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20171219AudioPan/pan_audio_api.png" alt=""></p>
<p>我在以前的文章也有一篇提到过这个<a href="https://www.sunyazhou.com/2017/03/17/Learning-AV-Foundation-AVAudioPlayer/">pan 值</a></p>
<p>可能大家不理解为啥 这个 API 起名叫<code>pan</code></p>
<p>在声学领域这个东西有专门的名字叫 <code>声像</code>.</p>
<p><a href="http://underwaysoft.com/writing/books/dsp-develop.html#%E7%BA%BF%E6%80%A7%E5%A3%B0%E5%83%8F%EF%BC%88&lt;span class=cnBracket&gt;Pan&lt;/span&gt;%EF%BC%89" target="_blank" rel="external">这篇文章</a>介绍了一些我们对声学知识的简单介绍,虽然不知道作者是谁,但是作者应该是非常专业的声学开发者.</p>
<p>其实按照我们平常的理解应该是这样去实现这个 pan 值的修改</p>
<p>左声道音量给右声道声音的补偿 或者右侧声道给左侧声道的补偿,通过滑块的 value 来决定两边谁加多少减多少,但是大家的思路是对的,但是做法是不正确的,因为 两边的音量放在中间必须是1.0,也就是说 range 在 <code>-1 ~ 1</code>之间. 如果按照这个滑动方式回导致滑动过大. </p>
<p>带着这个问题我的同事找到了一个公式 来计算 这个值</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20171219AudioPan/pan-algorithm.png" alt=""></p>
<ul>
<li><code>pan</code>就是我们的滑块的<code>value</code></li>
<li><code>Vl</code> 代表左侧音量</li>
<li><code>Vr</code> 代表右侧音量</li>
</ul>
<p>根据这个公式我们有如下 代码</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;math.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSUInteger</span>, KSYMCChannelType) &#123;</div><div class="line">    KSYMCChannelTypeLeft = <span class="number">0</span>,</div><div class="line">    KSYMCChannelTypeRight = <span class="number">1</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">KSYMultiCanvasHelper</span> : <span class="title">NSObject</span></span></div><div class="line"></div><div class="line">+ (<span class="built_in">CGFloat</span>)calculateVolume:(KSYMCChannelType)type</div><div class="line">                  panValue:(<span class="built_in">CGFloat</span>)pan</div><div class="line">                    volume:(<span class="built_in">CGFloat</span>)volume;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">KSYMultiCanvasHelper</span></span></div><div class="line"></div><div class="line">+ (<span class="built_in">CGFloat</span>)calculateVolume:(KSYMCChannelType)type</div><div class="line">                  panValue:(<span class="built_in">CGFloat</span>)pan</div><div class="line">                    volume:(<span class="built_in">CGFloat</span>)volume&#123;</div><div class="line">    <span class="keyword">if</span> (type == KSYMCChannelTypeLeft) &#123;</div><div class="line">        <span class="built_in">CGFloat</span> leftVolumn = sqrt(<span class="number">2</span>) * cos((<span class="number">1</span> + pan)*M_PI_4) *volume;</div><div class="line">        <span class="keyword">return</span> leftVolumn;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == KSYMCChannelTypeRight) &#123;</div><div class="line">        <span class="built_in">CGFloat</span> rightVolumn = sqrt(<span class="number">2</span>) * sin((<span class="number">1</span> + pan)*M_PI_4) *volume;</div><div class="line">        <span class="keyword">return</span> rightVolumn;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>这里的计算还是比较准确的.</p>
<p>经过测试 左侧 音量 为 0 时 右侧音量应该是 1.41左右</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>经过上述测试音频的 pan 值修改 如果自行开发还是比较好搞得,只是鄙人对音频的知识积累的太少了.这篇文章看起来虽然没什么技术含量,全当知识的点滴积累吧. 至于为啥 是 <code>M_PI_4</code>还请专研一下文章的扩展链接,因为要把一个线性的操作转换成一个圆型方便数学的计算,以及 <strong>声像</strong>和<strong>声向</strong>的区别.</p>
<p>全文完</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20171219AudioPan/audio-pan.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;
    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="macOS开发" scheme="https://www.sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>UICollectionViewCell添加KVO</title>
    <link href="https://www.sunyazhou.com/2017/12/15/20171215cell-add-kvo/"/>
    <id>https://www.sunyazhou.com/2017/12/15/20171215cell-add-kvo/</id>
    <published>2017-12-15T09:05:10.000Z</published>
    <updated>2017-12-16T11:00:18.710Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20171215cell-add-kvo/UICollectionViewCell.png" alt=""></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>都一个多月没更新博客了,这一段时间太忙了. 这篇带来的分享内容是<strong>如何正确的给一个<code>UICollectionViewCell</code>添加<code>KVO</code>监听</strong>.</p>
<h2 id="开篇"><a href="#开篇" class="headerlink" title="开篇"></a>开篇</h2><p>由于目前在开发<a href="https://github.com/ksvc/KSYMediaEditorKit_iOS" target="_blank" rel="external">短视频</a>相关的SDK,面向的多数都是小白开发者,为了能让小白以最低的成本看懂 SDK 的代码以及用法,这就要求我们以小白最容易理解的方式开发代码,比如最低级的<code>MVC</code>模式,最直白的<code>Objective-C</code>(老实说我都烦透了 OC 这种超级长看着都难受的编程语言,早想用 swift 来玩一把了),所以在开发的技术选型和代码编写过程中都是达到小白最低的理解能力的开发模式,但有时候不得不面对在<em>小白能理解</em>和<em>功能的高级实现</em>之间做妥协.最近开发遇到个问题,如下:</p>
<blockquote>
<p>PM 有个需求 要实现在一个屏幕内多个 cell 上随意切换 录制视图并且能随意点击取消,再加上录制完成的视频如果不在选中状态就显示封面,如果在选中状态就继续预览,如果没有录制完的视频并且不在预览的 CELL要显示添加功能.</p>
</blockquote>
<p>听完这个需求是不是都晕了,我们来看张我实现完成的图.</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20171215cell-add-kvo/record_demo.gif" alt=""></p>
<ol>
<li>录制完的视频取出封面</li>
<li>正在预览的随时准备录制</li>
<li>随意能切换 cell 不影响录制视图</li>
<li>未录制的并且没有已录制完视频文件的 cell 显示 添加按钮</li>
</ol>
<p>第一眼看着没啥技术含量都 UI 是吧</p>
<p>好我们来玩点有技术含量的</p>
<h4 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h4><p>如果使用传统MVC 模式的话<code>Cell</code>上边显示数据,那<code>model</code>里面是不是要放一个<code>record</code>的实例对象 告诉它 啥时候开始啥时候结束,当然你有更好的方式我就不说了我其实也知道.</p>
<h4 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h4><p>取出封面很简单让 cell里面存储一下录制完的 URL 就可以了,然后每次调用 UICollectonView 的 <code>reload:</code>方法</p>
<h4 id="问题3"><a href="#问题3" class="headerlink" title="问题3"></a>问题3</h4><p>我们实现录制视图的方式是放在 cell 的一个 subview 上, 正在录制的视图如果 reload 的话 应该会瞬间没了.就算吭哧吭哧实现完开始录制、暂停录制、恢复录制、结束录制… 这活我觉得问题和隐患应该非常多.别想了 不能这么玩</p>
<h4 id="问题4"><a href="#问题4" class="headerlink" title="问题4"></a>问题4</h4><p>cell的选中和非选中问题,你有没有发现 如果正在录制的 cell 上的 view 是选中的有个红色的框代表当前属于 焦点状态.<br>那录制完成呢.是不是需要重新 reload cell 告诉它当前谁 选中 谁取消,如果点击的是同一个 cell 还要取反操作.如果正在预览是不是再次选中说明要停止预览显示加号或者封面图,想着想着你发现这玩意是个状态机.必须要想好 model 构造,要让model 的参数足够多去控制当前 cell 的选中状态、非选中状态、预览状态、非预览状态、录制状态、非录制状态、录完状态、停止录制状态… 想着想着 太麻烦了 于是我整理出一个状态机的表格 如下:</p>
<table>
<thead>
<tr>
<th style="text-align:center">Cell Status</th>
<th style="text-align:center">当前cell显示内容</th>
<th style="text-align:center">其它 cell 显示内容</th>
<th style="text-align:center">点击当前</th>
<th style="text-align:center">点击其它选中</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">无预览状态</td>
<td style="text-align:center">显示加号/封面图</td>
<td style="text-align:center">显示加号/或者封面</td>
<td style="text-align:center">开始预览</td>
<td style="text-align:center">切换预览视图</td>
</tr>
<tr>
<td style="text-align:center">正在预览状态</td>
<td style="text-align:center">预览视频</td>
<td style="text-align:center">显示加号/或者封面</td>
<td style="text-align:center">显示加号/或者封面</td>
<td style="text-align:center">切换预览视图</td>
</tr>
<tr>
<td style="text-align:center">正在录制状态</td>
<td style="text-align:center">预览视频/播放视频</td>
<td style="text-align:center">(显示加号或播放视频)/(显示加号或预览视频)</td>
<td style="text-align:center">无操作(上锁)</td>
<td style="text-align:center">无操作(上锁)</td>
</tr>
</tbody>
</table>
<blockquote>
<p><em>这些不重要,有这个印象就行了不用仔细看</em></p>
</blockquote>
<p>并不是我把问题复杂化,是 PM 的需求太复杂.不得不完整列出所有状态,精简,再精简,让小白开发者也能看懂的 SDK 才是好 SDK.</p>
<p>其实 其它的问题还有好多 我就不列出来了,好 现在我们来依次解决问题</p>
<p><strong>其实,综合上述信息来看,归根结底的原因是,实现这个录制随意切换功能等等的交互并不适用于<code>MVC</code>这种传统的玩法.<br>更像是一个<code>MVVM</code>的搞法</strong>,于是我想到了 MVVM 里面的精髓所在.要用<strong>数据驱动视图</strong>.</p>
<p>上面的4个主要问题不就是因为 model 的状态修改了要通知 cell 变化嘛.那我们使用 model 的状态来控制</p>
<blockquote>
<p>注意:<em>如果使用 MVVM 的玩法就不要再去调用 collectionview 的 reload:方法了</em></p>
</blockquote>
<p>目前开发实现<code>MVVM</code>的方式主流两种</p>
<ul>
<li>RAC</li>
<li>KVO</li>
</ul>
<p>显然<code>RAC</code>太大并不适用于我们 demo,用 KVO 搞一把.(代码有删减)</p>
<h4 id="第一步定义-model"><a href="#第一步定义-model" class="headerlink" title="第一步定义 model"></a>第一步定义 model</h4><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">void</span> (^CompletionHandler)(<span class="built_in">UIImage</span> * image); <span class="comment">//取出 Image 给 Cell 显示的回调</span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSUInteger</span>,KSYMultiCanvasModelStatus)&#123;</div><div class="line">    KSYMultiCanvasModelStatusNOPreview = <span class="number">0</span>,<span class="comment">//无预览状态</span></div><div class="line">    KSYMultiCanvasModelStatusINPreview = <span class="number">1</span>,<span class="comment">//正在预览状态</span></div><div class="line">    KSYMultiCanvasModelStatusRecording = <span class="number">2</span> <span class="comment">//正在录制状态</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">KSYCanvasModel</span> : <span class="title">NSObject</span> </span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSURL</span>  *videoURL; <span class="comment">//存放录制完视频 URL</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">BOOL</span>   isSelected;<span class="comment">//是否是选中</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) KSYMultiCanvasModelStatus modelStatus; <span class="comment">//重要!!!:模型状态用它控制 cell 显示</span></div><div class="line">- (<span class="keyword">void</span>)gengrateImageBySize:(<span class="built_in">CGSize</span>)size</div><div class="line">          completionHandler:(CompletionHandler)handler;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">KSYCanvasModel</span> ()</span></div><div class="line"></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>)<span class="built_in">AVAssetImageGenerator</span> *imageGenerator;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">KSYCanvasModel</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)gengrateImageBySize:(<span class="built_in">CGSize</span>)size</div><div class="line">          completionHandler:(CompletionHandler)handler&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.videoURL == <span class="literal">nil</span>) &#123; handler(<span class="literal">nil</span>); &#125;</div><div class="line">    </div><div class="line">    <span class="built_in">AVURLAsset</span> *asset = [<span class="built_in">AVURLAsset</span> assetWithURL:<span class="keyword">self</span>.videoURL];</div><div class="line">    <span class="keyword">self</span>.imageGenerator = <span class="literal">nil</span>;</div><div class="line">    <span class="keyword">self</span>.imageGenerator = [<span class="built_in">AVAssetImageGenerator</span> assetImageGeneratorWithAsset:asset];</div><div class="line">    <span class="keyword">self</span>.imageGenerator.maximumSize = size;</div><div class="line">    </div><div class="line">    <span class="built_in">NSError</span> *error=<span class="literal">nil</span>;</div><div class="line">    <span class="built_in">CMTime</span> time= kCMTimeZero;<span class="comment">//CMTime是表示电影时间信息的结构体，第一个参数表示是视频第几秒，第二个参数表示每秒帧数.(如果要活的某一秒的第几帧可以使用CMTimeMake方法)</span></div><div class="line">    <span class="built_in">CMTime</span> actualTime;</div><div class="line">    <span class="built_in">CGImageRef</span> cgImage= [<span class="keyword">self</span>.imageGenerator copyCGImageAtTime:time actualTime:&amp;actualTime error:&amp;error];</div><div class="line">    <span class="keyword">if</span>(error)&#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"截取视频缩略图时发生错误，错误信息：%@"</span>,error.localizedDescription);</div><div class="line">        handler(<span class="literal">nil</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">CMTimeShow</span>(actualTime);</div><div class="line">    <span class="built_in">UIImage</span> *image = [<span class="built_in">UIImage</span> imageWithCGImage:cgImage];<span class="comment">//转化为UIImage</span></div><div class="line">    <span class="built_in">CGImageRelease</span>(cgImage);</div><div class="line">    handler(image);</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>ok model 大概是这样 .m 文件主要是从视频中取封面图</p>
<h4 id="第二步定义-cell"><a href="#第二步定义-cell" class="headerlink" title="第二步定义 cell"></a>第二步定义 cell</h4><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;UIKit/UIKit.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"KSYCanvasModel.h"</span></span></div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="built_in">NSString</span> *KSYModelKVOStatusContext;</div><div class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> *KSYKeyPathForModelStatus = <span class="string">@"modelStatus"</span>;</div><div class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> *KSYKeyPathForIsSelected = <span class="string">@"isSelected"</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">KSYCanvasCell</span> : <span class="title">UICollectionViewCell</span></span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> <span class="built_in">UIView</span> *canvasImageView;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> <span class="built_in">UIImageView</span> *addImageView;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> <span class="built_in">UIImageView</span> *boundsView;</div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) KSYCanvasModel *model;</div><div class="line"></div><div class="line"><span class="comment">//注册和移除观察接口</span></div><div class="line">- (<span class="keyword">void</span>)addObserver:(<span class="built_in">NSObject</span> *)observer</div><div class="line">         forKeyPath:(<span class="built_in">NSString</span> *)keyPath</div><div class="line">            options:(<span class="built_in">NSKeyValueObservingOptions</span>)options</div><div class="line">            context:(<span class="keyword">void</span> *)context;</div><div class="line">- (<span class="keyword">void</span>)removeObserver:(<span class="built_in">NSObject</span> *)observer</div><div class="line">            forKeyPath:(<span class="built_in">NSString</span> *)keyPath </div><div class="line">               context:(<span class="keyword">void</span> *)context;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">KSYCanvasCell</span>()</span></div><div class="line"><span class="comment">// 使用 ObservableKeys 保存 keyPath 观察状态，避免重复注册和重复移除（重复移除会导致 crash）</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSMutableSet</span> *observableKeySets;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">KSYCanvasCell</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)awakeFromNib &#123;</div><div class="line">    [<span class="keyword">super</span> awakeFromNib];</div><div class="line">    </div><div class="line">    <span class="comment">//千万别把 KOV 监听写在这里</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//.,,此处省略了不太相关的代码</span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)addObserver:(<span class="built_in">NSObject</span> *)observer</div><div class="line">         forKeyPath:(<span class="built_in">NSString</span> *)keyPath</div><div class="line">            options:(<span class="built_in">NSKeyValueObservingOptions</span>)options</div><div class="line">            context:(<span class="keyword">void</span> *)context&#123;</div><div class="line">    <span class="keyword">if</span> ([<span class="keyword">self</span>.observableKeySets containsObject:keyPath]) &#123; <span class="keyword">return</span>; &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.observableKeySets == <span class="literal">nil</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.observableKeySets = [<span class="built_in">NSMutableSet</span> set];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    [<span class="keyword">self</span>.observableKeySets addObject:keyPath];</div><div class="line">    </div><div class="line">    [<span class="keyword">self</span>.model addObserver:observer</div><div class="line">                 forKeyPath:keyPath</div><div class="line">                    options:options</div><div class="line">                    context:context];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)removeObserver:(<span class="built_in">NSObject</span> *)observer</div><div class="line">            forKeyPath:(<span class="built_in">NSString</span> *)keyPath</div><div class="line">               context:(<span class="keyword">void</span> *)context&#123;</div><div class="line">    <span class="keyword">if</span> (![<span class="keyword">self</span>.observableKeySets containsObject:keyPath]) &#123; <span class="keyword">return</span>; &#125;</div><div class="line">    </div><div class="line">    [<span class="keyword">self</span>.model removeObserver:observer</div><div class="line">                    forKeyPath:keyPath</div><div class="line">                       context:context];</div><div class="line">    [<span class="keyword">self</span>.observableKeySets removeObject:keyPath];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)observeValueForKeyPath:(<span class="built_in">NSString</span> *)keyPath</div><div class="line">                      ofObject:(<span class="keyword">id</span>)object</div><div class="line">                        change:(<span class="built_in">NSDictionary</span>&lt;<span class="built_in">NSKeyValueChangeKey</span>,<span class="keyword">id</span>&gt; *)change</div><div class="line">                       context:(<span class="keyword">void</span> *)context&#123;</div><div class="line">    <span class="keyword">if</span> ([KSYKeyPathForModelStatus isEqualToString:keyPath]) &#123;</div><div class="line">        KSYMultiCanvasModelStatus modelStatus = [[change objectForKey:<span class="built_in">NSKeyValueChangeNewKey</span>] integerValue];</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"当前状态:%zd"</span>,modelStatus);</div><div class="line">		 <span class="comment">//拿到模型状态然后做适当的处理</span></div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>([KSYKeyPathForIsSelected isEqualToString:keyPath])&#123;</div><div class="line">        <span class="comment">//处理是否显示边框</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<blockquote>
<p>这里要在.h 里面复写 下面这俩个方法 因为要再 ViewController 里面拿到 cell 调用这个方法</p>
</blockquote>
<ul>
<li><code>addObserver:forKeyPath:options:context:</code> 这个方法是系统方法需要复写并对外暴露接口</li>
<li><code>removeObserver:forKeyPath:context:</code> 这个方法是系统方法需要复写并对外暴露接口</li>
</ul>
<p>这里定义了一个上下文对象用于找到识别这个在 cell的监听还有两个要监听的属性(KSYCanvasCell.h 顶部)</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="built_in">NSString</span> *KSYModelKVOStatusContext;</div><div class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> *KSYKeyPathForModelStatus = <span class="string">@"modelStatus"</span>;</div><div class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> *KSYKeyPathForIsSelected = <span class="string">@"isSelected"</span>;</div></pre></td></tr></table></figure>
<blockquote>
<p>注意:<strong>为了防止 cell 重复注册导致复用的时候崩溃,这里用<code>NSMutableSet</code>让 model 的观察者只注册一次</strong></p>
</blockquote>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">KSYCanvasCell</span>()</span></div><div class="line"><span class="comment">// 使用 ObservableKeys 保存 keyPath 观察状态，避免重复注册和重复移除（重复移除会导致 crash）</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSMutableSet</span> *observableKeySets;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>添加的时候做一次check</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)addObserver:(<span class="built_in">NSObject</span> *)observer</div><div class="line">         forKeyPath:(<span class="built_in">NSString</span> *)keyPath</div><div class="line">            options:(<span class="built_in">NSKeyValueObservingOptions</span>)options</div><div class="line">            context:(<span class="keyword">void</span> *)context&#123;</div><div class="line">    <span class="keyword">if</span> ([<span class="keyword">self</span>.observableKeySets containsObject:keyPath]) &#123; <span class="keyword">return</span>; &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.observableKeySets == <span class="literal">nil</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.observableKeySets = [<span class="built_in">NSMutableSet</span> set];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    [<span class="keyword">self</span>.observableKeySets addObject:keyPath];</div><div class="line">    </div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>移除的时候要做一次 check</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)removeObserver:(<span class="built_in">NSObject</span> *)observer</div><div class="line">            forKeyPath:(<span class="built_in">NSString</span> *)keyPath</div><div class="line">               context:(<span class="keyword">void</span> *)context&#123;</div><div class="line">    <span class="keyword">if</span> (![<span class="keyword">self</span>.observableKeySets containsObject:keyPath]) &#123; <span class="keyword">return</span>; &#125;</div><div class="line">    </div><div class="line">    [<span class="keyword">self</span>.model removeObserver:observer</div><div class="line">                    forKeyPath:keyPath</div><div class="line">                       context:context];</div><div class="line">    [<span class="keyword">self</span>.observableKeySets removeObject:keyPath];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ok cell 大概是这个意思</p>
<h4 id="第三步在-ViewController里面-适当的位置-注册-移除监听-并在ViewController控制器的生命周期内也做好相关监听的移除和添加"><a href="#第三步在-ViewController里面-适当的位置-注册-移除监听-并在ViewController控制器的生命周期内也做好相关监听的移除和添加" class="headerlink" title="第三步在 ViewController里面 适当的位置 注册/移除监听 并在ViewController控制器的生命周期内也做好相关监听的移除和添加"></a>第三步在 ViewController里面 适当的位置 注册/移除监听 并在ViewController控制器的生命周期内也做好相关监听的移除和添加</h4><p>这里我们需要实现<code>UICollectionViewDelegate</code>的代理协议来调用 cell 的添加 cell 和移除 cell</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)collectionView:(<span class="built_in">UICollectionView</span> *)collectionView willDisplayCell:(<span class="built_in">UICollectionViewCell</span> *)cell forItemAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath&#123;</div><div class="line">    KSYCanvasCell *canvasCell = (KSYCanvasCell *)cell;</div><div class="line">    [canvasCell addObserver:canvasCell</div><div class="line">                 forKeyPath:KSYKeyPathForModelStatus</div><div class="line">                    options:<span class="built_in">NSKeyValueObservingOptionNew</span></div><div class="line">                    context:&amp;KSYModelKVOStatusContext];</div><div class="line">    [canvasCell addObserver:canvasCell</div><div class="line">                 forKeyPath:KSYKeyPathForIsSelected</div><div class="line">                    options:<span class="built_in">NSKeyValueObservingOptionNew</span></div><div class="line">                    context:&amp;KSYModelKVOStatusContext];</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)collectionView:(<span class="built_in">UICollectionView</span> *)collectionView didEndDisplayingCell:(<span class="built_in">UICollectionViewCell</span> *)cell forItemAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath&#123;</div><div class="line">    KSYCanvasCell *canvasCell = (KSYCanvasCell *)cell;</div><div class="line">    <span class="comment">//状态变化</span></div><div class="line">    [canvasCell removeObserver:canvasCell</div><div class="line">                    forKeyPath:KSYKeyPathForModelStatus</div><div class="line">                       context:&amp;KSYModelKVOStatusContext];</div><div class="line">    <span class="comment">//选中变化</span></div><div class="line">    [canvasCell removeObserver:canvasCell</div><div class="line">                    forKeyPath:KSYKeyPathForIsSelected</div><div class="line">                       context:&amp;KSYModelKVOStatusContext];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>你是不是会问为啥写这 </p>
<p>我来告诉我我遇到的一个坑</p>
<p>如果你在 下面的方法里写注册 后果不堪设想,因为 cell 是复用的,每次复写 KVO 都是在创建新的对象</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (__kindof <span class="built_in">UICollectionViewCell</span> *)collectionView:(<span class="built_in">UICollectionView</span> *)collectionView cellForItemAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath&#123;</div><div class="line">    KSYCanvasCell *cell = [collectionView dequeueReusableCellWithReuseIdentifier:[KSYCanvasCell className] forIndexPath:indexPath];</div><div class="line">    cell.model = [<span class="keyword">self</span>.models objectAtIndex:indexPath.row];</div><div class="line">    <span class="comment">//如果写在这里</span></div><div class="line">    <span class="keyword">return</span> cell;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>KVO的实现原理很简单,就是把这个对象的监听属性在底层复写一下,监听两个值之间的变化.KVO 原理相关的就不多废话了,这都是家常便饭了</p>
<p>我一开始写在了 cell 的 awakeFromNib: 因为都是 cell 拖拽的控件,但是麻烦真是接踵而至,各种崩溃</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)awakeFromNib &#123;</div><div class="line">    [<span class="keyword">super</span> awakeFromNib];</div><div class="line">	 <span class="comment">//别写在这里    </span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果你不信邪可以试试.</p>
<p>最后我们在控制器的适当位置修改 model 的状态这样就做到了实时更新 cell</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"></div><div class="line">- (<span class="keyword">void</span>)collectionView:(<span class="built_in">UICollectionView</span> *)collectionView didSelectItemAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath&#123;</div><div class="line">    <span class="comment">//------------处理点击-----------</span></div><div class="line">    KSYCanvasModel *lastModel = [<span class="keyword">self</span>.models objectAtIndex:<span class="keyword">self</span>.lastSelectedIndexPath.row];</div><div class="line">    KSYCanvasModel *selectedModel = [<span class="keyword">self</span>.models objectAtIndex:indexPath.row];</div><div class="line">    <span class="built_in">BOOL</span> clickSameCell = (<span class="keyword">self</span>.lastSelectedIndexPath == indexPath);</div><div class="line">    <span class="keyword">if</span> (clickSameCell) &#123;</div><div class="line">        <span class="comment">//选择同一个cell</span></div><div class="line">        selectedModel.isSelected = !selectedModel.isSelected;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        lastModel.isSelected = <span class="literal">NO</span>;</div><div class="line">        selectedModel.isSelected = <span class="literal">YES</span>;   </div><div class="line">    &#125;</div><div class="line">    selectedModel.modelStatus = KSYMultiCanvasModelStatusRecording; <span class="comment">//这就会出发 cell的 KVO 了</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后别忘了在ViewController的生命周期添加和移出观察者</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)viewWillDisappear:(<span class="built_in">BOOL</span>)animated</div><div class="line">&#123;</div><div class="line">    [<span class="keyword">super</span> viewWillDisappear:animated];</div><div class="line">    [<span class="keyword">self</span>.canvasCollectionView.visibleCells enumerateObjectsUsingBlock:^(KSYCanvasCell *cell, <span class="built_in">NSUInteger</span> idx, <span class="built_in">BOOL</span> * _Nonnull stop) &#123;</div><div class="line">        [cell removeObserver:cell</div><div class="line">                  forKeyPath:KSYKeyPathForModelStatus</div><div class="line">                     context:&amp;KSYModelKVOStatusContext];</div><div class="line">    &#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样的实现过程就 解决了 上边提到的 问题 1、2、3、4</p>
<p>这也是最精简的实现方式,以小白的开发视角 来看也需要熟悉一点 MVVM 了.这都是成了 iOS 最标配了.</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这种偏向MVVM模式开发的方式 我个人觉得还是不错的,虽然现在各种MVVM格式早已经烂大街了,但只要想起来,用起来,能用简单直白的方式解决问题,它就是好的开发设计模式.当然本章也主要讲了一些技巧而已,不足之处还请各位指正.</p>
<p>demo我就不写了 可以参考<a href="https://github.com/ksvc/KSYMediaEditorKit_iOS" target="_blank" rel="external">我们的短视频 demo</a> multicanvas target</p>
<p>全文完</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20171215cell-add-kvo/UICollectionViewCell.png
    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="macOS开发" scheme="https://www.sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>适配iPhone X</title>
    <link href="https://www.sunyazhou.com/2017/11/03/20171103iPhone-X-Adaptor/"/>
    <id>https://www.sunyazhou.com/2017/11/03/20171103iPhone-X-Adaptor/</id>
    <published>2017-11-03T03:44:44.000Z</published>
    <updated>2017-11-25T08:21:09.464Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20171103iPhone-X-Adaptor/say_hello_to_furture.png" alt=""></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近苹果发布iPhone X,随后小伙伴的 X 都到货了,适配问题也接踵而至,<br>相信拿到 iPhone X的感觉是下面这样的:</p>
<p><img src="https://ws1.sinaimg.cn/large/89e3e57fly1fll1y5jyygj22io1w0hdt.jpg" alt=""></p>
<p>本篇主要内容分为:</p>
<ul>
<li>iPhone X尺寸参数</li>
<li>UI适配</li>
<li>极端情况处理</li>
<li>实践案例</li>
<li>总结</li>
</ul>
<h3 id="1-iPhone-X尺寸参数"><a href="#1-iPhone-X尺寸参数" class="headerlink" title="1.iPhone X尺寸参数"></a>1.iPhone X尺寸参数</h3><h4 id="1-1-首先-来围观一下模拟器的-iPhone-X的外观"><a href="#1-1-首先-来围观一下模拟器的-iPhone-X的外观" class="headerlink" title="1.1 首先 来围观一下模拟器的 iPhone X的外观"></a>1.1 首先 来围观一下模拟器的 iPhone X的外观</h4><p><img src="https://ws1.sinaimg.cn/large/89e3e57fly1fll6d0zx4sj20m80c1t9p.jpg" alt="safeArea"></p>
<p>下面这点先记住这很重要:格式UIEdgeInsetsMake(上, 左,下,右);  </p>
<blockquote>
<p>iPhone X竖屏时:占满整个屏幕的控制器的view的safeAreaInsets是（44，0，34，0）<br>iPhone X横屏时:是（0，44，21，44），inset后的区域正好是safeAreaLayoutGuide区域</p>
</blockquote>
<p>safeAreaInsets是相对于屏幕的物理边界计算的偏移量,通俗一点就是</p>
<blockquote>
<p>横屏: 距离顶部(物理屏幕顶边)偏移44，距离左侧偏移0，距离底部偏移34,距离右边偏移0(从右向左偏移别搞错了).<br>竖屏: 距离顶部(物理屏幕顶边)偏移0，距离左侧偏移44，<strong>距离底部偏移21</strong>(注意横屏底部有home 虚拟键),<strong>距离右边偏移44</strong>(同样注意不是竖屏的30了). </p>
</blockquote>
<p>进过测试发现,Margins 区域 有10个像素点就是上边 的 40 - 30 = 10的作用区间(我的理解应该是为了压力触摸屏的事件响应范围)，还有特别留意一下横屏的时候 顶部和底部的区别,顶部为0, 底部要保留21的 pts(points)来显示 home 虚拟键,<strong>记得获取屏幕宽度或者高度的时候要做好减去 21 的准备.</strong></p>
<p><img src="https://ws1.sinaimg.cn/mw690/89e3e57fly1fll3kxabqkj20c10nojru.jpg" alt="穿黑色外套略显优雅"><br><img src="https://ws1.sinaimg.cn/mw690/89e3e57fly1fll3pg1izmj20af0n6mxf.jpg" alt="不穿外套略显尴尬"></p>
<h4 id="1-2-实际场景"><a href="#1-2-实际场景" class="headerlink" title="1.2 实际场景"></a>1.2 实际场景</h4><p><img src="https://ws1.sinaimg.cn/mw690/89e3e57fly1fll3xqtuydj21w02iokjl.jpg" alt="实际测试中的刘海样式"></p>
<blockquote>
<p>看到苹果[射击湿]的扁平化凹陷齐刘海设计的我现在就像在乔布斯坟头上坟烧纸一样,眼神里带有少许悲伤.</p>
</blockquote>
<h4 id="1-3-工业化图纸尺寸"><a href="#1-3-工业化图纸尺寸" class="headerlink" title="1.3 工业化图纸尺寸"></a>1.3 工业化图纸尺寸</h4><p>说重点不废话</p>
<p><img src="https://ws1.sinaimg.cn/large/89e3e57fly1fll4dy8bmrj20yg0icq5y.jpg" alt="iPhone X顶部尺寸图纸"></p>
<table>
<thead>
<tr>
<th style="text-align:center">参数</th>
<th style="text-align:center">size 尺寸</th>
<th style="text-align:center">备注</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">屏幕宽高</td>
<td style="text-align:center">375 x 812</td>
<td style="text-align:center">pt(point)</td>
</tr>
<tr>
<td style="text-align:center">屏幕宽高比</td>
<td style="text-align:center">9:19.5</td>
<td style="text-align:center">而不是普通的 9:16 了</td>
</tr>
<tr>
<td style="text-align:center">整体屏幕高度</td>
<td style="text-align:center">比<code>iPhone 6/7/8&#39;s</code>高了<code>145</code>pt</td>
<td style="text-align:center">pt(point)</td>
</tr>
<tr>
<td style="text-align:center">状态栏高度(status bar)</td>
<td style="text-align:center">44</td>
<td style="text-align:center">比原来高出了<code>24</code>pt(并且空余的<code>24</code>(44-20)pts 不能被 app 使用,因为他是给<code>Face ID</code>相关传感器留出区域)</td>
</tr>
<tr>
<td style="text-align:center">传感器区域(sensor housing)</td>
<td style="text-align:center">30</td>
<td style="text-align:center">单位 pt,就是被挡住的那个 Face ID传感器区域</td>
</tr>
<tr>
<td style="text-align:center">状态栏+导航栏高度(Navigation Bar)</td>
<td style="text-align:center">88 或 (带 title 样式的 140)</td>
<td style="text-align:center">pt(point)</td>
</tr>
<tr>
<td style="text-align:center">底部 Toolbar</td>
<td style="text-align:center">83</td>
<td style="text-align:center">不在是原来的 44 pt(point),如果横屏 Toolbar 高度 53</td>
</tr>
<tr>
<td style="text-align:center">retina像素倍数</td>
<td style="text-align:center">3x</td>
<td style="text-align:center">3倍屏</td>
</tr>
<tr>
<td style="text-align:center">pixels像素</td>
<td style="text-align:center">1125 x 2436</td>
<td style="text-align:center">和 iPhone各种Plus版本一直</td>
</tr>
<tr>
<td style="text-align:center">iPhone X 安全区</td>
<td style="text-align:center">frame 为(0, 44, 375, 734)</td>
<td style="text-align:center">对比iPhone6/6s安全区frame 为(0, 0, 375, 667)</td>
</tr>
<tr>
<td style="text-align:center">layout margins</td>
<td style="text-align:center">纵向 20,横向64 )</td>
<td style="text-align:center">横向 margins 底部有那个 home 键范围</td>
</tr>
</tbody>
</table>
<blockquote>
<p>注意: <em>别搞错了status bar和FaceID传感器区域范围,因为状态栏(status bar)和传感器区域(sensor housing)之间还是有点间隙的 间隙是 6 pt</em><br><em>status bar空余的<code>24</code>(44-20)pts 不能被 app 使用,因为他是给<code>Face ID</code>相关传感器留出区域.而且我们不能改变 出现比如定位的图标、通话、和其他后台任务的图标的小大</em><br><em>这里说的pt(point)是开发人员的计算屏幕一倍的像素单位,不是视觉提供素材的pixel像素</em></p>
</blockquote>
<h3 id="2-UI适配"><a href="#2-UI适配" class="headerlink" title="2. UI适配"></a>2. UI适配</h3><p>ok 看完各种尺寸 我们来说一下 UI 适配工作</p>
<h4 id="2-1-工作分工"><a href="#2-1-工作分工" class="headerlink" title="2.1 工作分工:"></a>2.1 工作分工:</h4><ul>
<li>UI(视觉设计师)的素材提供 </li>
<li>RD(研发工程师)的UI相关适配</li>
</ul>
<h5 id="2-1-1-设计和开发同学需要考虑适配的范围有"><a href="#2-1-1-设计和开发同学需要考虑适配的范围有" class="headerlink" title="2.1.1 设计和开发同学需要考虑适配的范围有"></a>2.1.1 设计和开发同学需要考虑适配的范围有</h5><p><img src="https://ws1.sinaimg.cn/large/89e3e57fly1fll4xm1k21j206f0dwdgm.jpg" alt=""></p>
<ol>
<li>传感器区域(sensor housing), 就是那个顶部<code>Face ID</code>的遮盖区域(大家常说的刘海儿).  </li>
<li>底部<code>Home键</code> 标识的触发区域,就是那个底部的横条(home indicator).  </li>
<li>圆角 四个定点的圆角问题.  </li>
</ol>
<p>三倍(3x)屏的图标素材问题</p>
<ul>
<li>建议使用<code>PDF</code>格式或者矢量图;</li>
<li>使用<code>@2x</code>或者<code>@3x</code>图</li>
<li>如果没有使用<code>LaunchScreen.storyboard</code>作为应用启动的话 <code>3x</code>图用不了.</li>
</ul>
<h5 id="2-1-2-研发的工作范围"><a href="#2-1-2-研发的工作范围" class="headerlink" title="2.1.2 研发的工作范围"></a>2.1.2 研发的工作范围</h5><ol>
<li>适配 UI 的导航栏和状态栏</li>
<li>适配safeArea范围</li>
</ol>
<p><img src="https://ws1.sinaimg.cn/large/89e3e57fly1fll5z16qs5j20ep056434.jpg" alt="短视频录制顶部按钮适配前"></p>
<p>我们的搞法是把导航栏隐藏掉然后填写上按钮,但是当 iPhone X出来的时候就不行了因为会出现被刘海盖住,其实主要的原因是我们用的 Masonry 自动布局的 edge 超过了安全区范围</p>
<p><img src="https://ws1.sinaimg.cn/large/89e3e57fly1fll689p471g206h07aju1.gif" alt=""></p>
<p>我们的搞法是放置一个 View,并且让他的 edge 在 iOS11上 等于安全区范围.</p>
<p>那么我们为啥要这么搞呢?</p>
<ol>
<li>我们需要适配 iPhone X 的 safeArea 并且兼容 iOS8</li>
<li>后续处理事件 按钮、手势 都用这个 view 搞.</li>
</ol>
<p>对基于这两点我们选择这种搞法.</p>
<p>代码实现如下:</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="keyword">if</span> (@available(iOS <span class="number">11.0</span>, *)) &#123;</div><div class="line">       [<span class="keyword">self</span>.canRotateView mas_remakeConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">           make.top.equalTo(<span class="keyword">self</span>.view.mas_safeAreaLayoutGuideTop);</div><div class="line">           make.bottom.equalTo(<span class="keyword">self</span>.view.mas_safeAreaLayoutGuideBottom);</div><div class="line">           make.left.equalTo(<span class="keyword">self</span>.view.mas_safeAreaLayoutGuideLeft);</div><div class="line">           make.right.equalTo(<span class="keyword">self</span>.view.mas_safeAreaLayoutGuideRight);</div><div class="line">       &#125;];</div><div class="line">   &#125; <span class="keyword">else</span> &#123;</div><div class="line">   	[<span class="keyword">self</span>.safeAreaView mas_remakeConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">           make.edges.equalTo(<span class="keyword">self</span>.view);</div><div class="line">       &#125;];	</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>下面是完成之后的效果图</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20171103iPhone-X-Adaptor/KSYMediaEditorKit_launch.PNG" alt="Launch"><br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20171103iPhone-X-Adaptor/KSYMediaEditorKit_config.PNG" alt="config"><br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20171103iPhone-X-Adaptor/KSYMediaEditorKit_record.PNG" alt="record"><br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20171103iPhone-X-Adaptor/KSYMediaEditorKit_edit.PNG" alt="edit"></p>
<h3 id="3-极端情况处理"><a href="#3-极端情况处理" class="headerlink" title="3. 极端情况处理"></a>3. 极端情况处理</h3><h4 id="极端情况1-如果有些-app-使用的手势-是从下往上滑动的话"><a href="#极端情况1-如果有些-app-使用的手势-是从下往上滑动的话" class="headerlink" title="极端情况1:如果有些 app 使用的手势 是从下往上滑动的话"></a>极端情况1:如果有些 app 使用的手势 是从下往上滑动的话</h4><p><img src="https://ws1.sinaimg.cn/large/89e3e57fly1fll6sir2s3j206n0dxjsi.jpg" alt="手势从下往上滑动"></p>
<p>这样就会造成在 iPhone X上 滑动和 home 虚拟按键冲突的问题,那如果出现这种问题如何解决呢？</p>
<p>我们需要 需要开启 <a href="https://developer.apple.com/documentation/uikit/uiviewcontroller/2887512-preferredscreenedgesdeferringsys" target="_blank" rel="external"><code>edge protect</code></a>, 这是控制器的方法.</p>
<p>在 UIViewController 里面返回 要触摸返回键的范围</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">preferredScreenEdgesDeferringSystemGestures</span><span class="params">()</span></span> -&gt; <span class="type">UIRectEdge</span></div></pre></td></tr></table></figure>
<p>objc 版本</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="built_in">UIRectEdge</span>)preferredScreenEdgesDeferringSystemGestures&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">UIRectEdgeAll</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样的话 用户 滑动一次 手势响应, 如果 滑动两次 才会触发<code>home indicator</code>.</p>
<h4 id="极端情况2-如何隐藏底部-home-条"><a href="#极端情况2-如何隐藏底部-home-条" class="headerlink" title="极端情况2:如何隐藏底部 home 条?"></a>极端情况2:如何隐藏底部 home 条?</h4><p>那个底部的横条如何 隐藏掉呢?</p>
<p>其实这是一种被动的视图响应体验,<a href="https://developer.apple.com/documentation/uikit/uiviewcontroller/2887510-prefershomeindicatorautohidden" target="_blank" rel="external"> auto-hiding</a>, 返回这个<code>UIViewController</code>的 <code>bool</code>的值,这样的话 如果用户没有触发底部的<code>home 条</code>(home indicator)几秒,<code>home 条</code>(home indicator)会淡出不做响应.</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">prefersHomeIndicatorAutoHidden</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span></div></pre></td></tr></table></figure>
<p>Objective-C 版本</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="built_in">BOOL</span>)prefersHomeIndicatorAutoHidden&#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="实践案例"><a href="#实践案例" class="headerlink" title="实践案例"></a>实践案例</h3><h4 id="实践案例1-safeArea-在-iOS11上开启之后-在低版本-怎么处理"><a href="#实践案例1-safeArea-在-iOS11上开启之后-在低版本-怎么处理" class="headerlink" title="实践案例1:safeArea 在 iOS11上开启之后 在低版本 怎么处理?"></a>实践案例1:safeArea 在 iOS11上开启之后 在低版本 怎么处理?</h4><blockquote>
<p>经过测试 在<code>iOS9</code>之前就是用不了<code>safeArea</code>必须<code>iOS9 or later</code><br>如果兼容 iOS 8.0的建议去掉<code>safeArea</code>否则报错</p>
</blockquote>
<p>解决的方式:参考我们的短视频适配 使用一个背景 View 来做支撑并且使它的 edge 边缘处于<code>safeArea</code>范围内并使用如下代码做 iOS11前的安全区</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">if</span> ( <span class="built_in">NS_AVAILABEL</span>(iOS <span class="number">11.0</span>)) &#123;</div><div class="line">	<span class="comment">//iOS11 支持安全区域范围</span></div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">	<span class="comment">//iOS11之前不支持安全区范围</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="实践案例1-Masonryedge-不能等于-safeAreaGuide"><a href="#实践案例1-Masonryedge-不能等于-safeAreaGuide" class="headerlink" title="实践案例1:Masonryedge 不能等于 safeAreaGuide?"></a>实践案例1:<code>Masonry</code>edge 不能等于 safeAreaGuide?</h4><p>因为我们的代码基本都是 xib 拖拽控件，使用 masonry 自动布局</p>
<p>如果对一个 view 让它的上、左、下、右 4个边缘等于父视图的话我们经常写下面 代码</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">[<span class="keyword">self</span>.xxxView mas_remakeConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">           make.edges.equalTo(<span class="keyword">self</span>.view);</div><div class="line">   &#125;];</div></pre></td></tr></table></figure>
<p>但是为支持 safeArea,<code>Masonry</code>库提供了<code>safeAreaGuide</code></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"></div><div class="line">[<span class="keyword">self</span>.safeAreaView mas_remakeConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">       make.edges.equalTo(<span class="keyword">self</span>.view.mas_safeAreaLayoutGuide);</div><div class="line">  	 &#125;];</div></pre></td></tr></table></figure>
<p>但是经过我验证 这样写会触发<code>Masonry</code>库 bug 导致 crash</p>
<p>看下边的例子:</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 底部segement</span></div><div class="line">[<span class="keyword">self</span>.panelTabbar mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">    make.left.right.bottom.equalTo(<span class="keyword">self</span>.view);</div><div class="line">    make.height.equalTo(@<span class="number">44</span>);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<p>但我要是改成 iOS11</p>
<p>这个写法就会不支持  </p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 底部segement  </span></div><div class="line">[<span class="keyword">self</span>.panelTabbar mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">    make.left.right.bottom.equalTo(<span class="keyword">self</span>.view.mas_safeAreaLayoutGuide);</div><div class="line">    make.height.equalTo(@<span class="number">44</span>);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<p>必须改成 </p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 底部segement</span></div><div class="line">[<span class="keyword">self</span>.panelTabbar mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">    make.left.equalTo(<span class="keyword">self</span>.view.mas_safeAreaLayoutGuideLeft);</div><div class="line">    make.right.equalTo(<span class="keyword">self</span>.view.mas_safeAreaLayoutGuideRight);</div><div class="line">    make.bottom.equalTo(<span class="keyword">self</span>.view.mas_safeAreaLayoutGuideBottom);</div><div class="line">    make.height.equalTo(@<span class="number">44</span>);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<blockquote>
<p>正确写法</p>
</blockquote>
<p>我也不知道到底是这个库的作者没搞明白为啥费劲挨个上下左右都这么搞，还是他喜欢这样写冗余代码,总之现在这种搞法是最正确的.</p>
<blockquote>
<p>这个已经给 Masonry 库提了 issue 近期应该会修复</p>
</blockquote>
<h4 id="实践案例3-安全区域-safeArea-的坐标-frame"><a href="#实践案例3-安全区域-safeArea-的坐标-frame" class="headerlink" title="实践案例3: 安全区域 safeArea 的坐标(frame)"></a>实践案例3: 安全区域 safeArea 的坐标(frame)</h4><p>如果有一种需求需要计算 iPhone 的 安全区域 范围 宽高等于多少？如下代码可以得到正确的 范围</p>
<p><code>@available(iOS 11.0, *)</code></p>
<p><code>NSString * safeAreaRect = NSStringFromCGRect(self.view.safeAreaLayoutGuide.layoutFrame);</code></p>
<blockquote>
<p>下面代码请在 ViewController 里面测试</p>
</blockquote>
<p>我测试了 安全局frame 区别</p>
<ul>
<li>iPhone X 安全区 (0, 44, 375, 734).</li>
<li>iPhone 6s 安全区 (0, 0, 375, 667).</li>
</ul>
<blockquote>
<p>高了 734 - 667 = 67 </p>
</blockquote>
<p>如果是视频录制 会导致视频比例不对</p>
<p>解决办法: 推荐 安全区顶部到底部 高度的宽度比值 等于标准的 3:4 或者 9:16</p>
<h4 id="实践案例4-适配-iPhone-X常用的宏"><a href="#实践案例4-适配-iPhone-X常用的宏" class="headerlink" title="实践案例4: 适配 iPhone X常用的宏"></a>实践案例4: 适配 iPhone X常用的宏</h4><p>其实我个人不推荐用宏 鉴于它短时间内 能解决问题 我不得不列举一些</p>
<p>先看问题</p>
<p><img src="https://ws1.sinaimg.cn/mw690/89e3e57fly1fll7kd1a49j20yg05u0tp.jpg" alt="状态栏白色"><br><img src="https://ws1.sinaimg.cn/mw690/89e3e57fly1fll7kd18zlj20np06sq3w.jpg" alt="导航栏太紧"></p>
<p><img src="https://ws1.sinaimg.cn/mw690/89e3e57fly1fll7kd1ipxj20od0ae40k.jpg" alt="适配完"></p>
<p>出现这种问题是由于</p>
<blockquote>
<p>iOS 11上面废除了scrollView的<code>automaticallyAdjustsScrollViewInsets</code>这个属性的使用.使用UIScrollView’s <code>contentInsetAdjustmentBehavior</code>来替代，<a href="https://www.lee1994.com/guan-yu-iphone/" target="_blank" rel="external">详细介绍</a></p>
</blockquote>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="keyword">if</span> (@available(iOS <span class="number">11.0</span>, *)) &#123;</div><div class="line">    <span class="keyword">self</span>.collectionView.contentInsetAdjustmentBehavior = <span class="built_in">UIApplicationBackgroundFetchIntervalNever</span>;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">self</span>.automaticallyAdjustsScrollViewInsets = <span class="literal">false</span>;</div><div class="line">    <span class="comment">// Fallback on earlier versions</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>为了省事 可以使用这个宏</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="meta">#define AdjustsScrollViewInsetNever(controller,view) if(@available(iOS 11.0, *)) &#123;view.contentInsetAdjustmentBehavior = UIScrollViewContentInsetAdjustmentNever;&#125; else if([controller isKindOfClass:[UIViewController class]]) &#123;controller.automaticallyAdjustsScrollViewInsets = false;&#125;</span></div></pre></td></tr></table></figure>
<p>高度系数宏 812.0 是iPhoneX的高度尺寸</p>
<pre><code class="objc"><span class="meta">#define kHeightCoefficient (kScreenHeight == 812.0 ? 667.0/667.0 : kScreenHeight/667.0)</span>
</code></pre>
<p>好 适配到此为止.</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>上述是测试短视频 SDK 开发过程中适配 iPhone X 的 一些 case,由于偏于多媒体方向,并不涉及到例如 网络层 如果适配 iPhone X等一些短视频开发过程中并没有遇到的特定问题,可能还有一些遗漏部分,如果发现我会及时更新.</p>
<p>全文完</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20171103iPhone-X-Adaptor/say_hello_to_furture
    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>论一个优雅的模态转场的自我修养</title>
    <link href="https://www.sunyazhou.com/2017/10/31/20171031Elegant-present-transition/"/>
    <id>https://www.sunyazhou.com/2017/10/31/20171031Elegant-present-transition/</id>
    <published>2017-10-31T03:32:17.000Z</published>
    <updated>2017-10-31T12:55:31.166Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在开发过程中虽然 UI 这个活很没技术含量,但有时候还是需要做些的特别的转场效果.本教程参考<a href="https://www.raywenderlich.com/139277/uipresentationcontroller-tutorial-getting-started" target="_blank" rel="external">UIPresentationController Tutorial: Getting Started</a> 这篇博文进行 OC 版翻译 也加入了一些小改动</p>
<blockquote>
<p>swift 点这里下载<a href="https://koenig-media.raywenderlich.com/uploads/2016/08/Medal_Count_Completed.zip" target="_blank" rel="external">demo</a><br>Objective-C 点击这里直达<a href="https://github.com/sunyazhou13/SlideInPresentation" target="_blank" rel="external">demo</a></p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/fd8747d4c220c683f587db45126037b080e5c380/20171031Elegant-present-transition/Elegant-present-transition.gif" alt=""></p>
<h3 id="需求背景"><a href="#需求背景" class="headerlink" title="需求背景"></a>需求背景</h3><p>转场对目前的 iOS 来讲已经不能再熟悉了 但想找个靠谱点的带遮盖的转场 没找到几个靠谱的</p>
<p>不是这个问题不行就那个问题不能满足 </p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20171031Elegant-present-transition/demo1.png" alt=""></p>
<p>根据<code>Raywenderrich</code>的教程 我翻译成了 OC 版本 并加了一些小改动 </p>
<h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><ul>
<li>导入头文件</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"SlideInPresentationManager.h"</span></span></div></pre></td></tr></table></figure>
<ul>
<li>声明属性</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) SlideInPresentationManager *slideInTransitioningDelegate;</div></pre></td></tr></table></figure>
<ul>
<li>弹出模态控制器的时候如下代码</li>
</ul>
<pre><code class="objc">- (<span class="keyword">IBAction</span>)presentAction:(<span class="built_in">UIButton</span> *)sender {
    PresentationDirection direction;
    <span class="keyword">if</span> (sender.tag == <span class="number">100</span>) {
        <span class="built_in">NSLog</span>(<span class="string">@"左侧弹出模态转场"</span>);
        direction = PresentationDirectionLeft;
    } <span class="keyword">else</span> <span class="keyword">if</span> (sender.tag == <span class="number">101</span>) {
        <span class="built_in">NSLog</span>(<span class="string">@"上弹出模态转场"</span>);
        direction = PresentationDirectionTop;
    } <span class="keyword">else</span> <span class="keyword">if</span> (sender.tag == <span class="number">102</span>) {
        <span class="built_in">NSLog</span>(<span class="string">@"右弹出模态转场"</span>);
        direction = PresentationDirectionRight;
    } <span class="keyword">else</span> {
        <span class="built_in">NSLog</span>(<span class="string">@"下弹出模态转场"</span>);
        direction = PresentationDirectionBottom;
    }

    <span class="keyword">self</span>.slideInTransitioningDelegate = <span class="literal">nil</span>;
    <span class="comment">//控制现实遮盖的视图转场(core 代码)</span>
    <span class="keyword">self</span>.slideInTransitioningDelegate = [[SlideInPresentationManager alloc] init];
    <span class="keyword">self</span>.slideInTransitioningDelegate.direction = direction;
    <span class="keyword">self</span>.slideInTransitioningDelegate.disableCompactHeight = <span class="literal">NO</span>;
    <span class="keyword">self</span>.slideInTransitioningDelegate.sliderRate = <span class="number">1.0</span>/<span class="number">3.0</span>;

    <span class="comment">//创建控制器实例</span>
    PresentController *presentVC = [[PresentController alloc] initWithNibName:<span class="string">@"PresentController"</span> bundle:[<span class="built_in">NSBundle</span> mainBundle]];
    presentVC.transitioningDelegate = <span class="keyword">self</span>.slideInTransitioningDelegate;
    presentVC.modalPresentationStyle = <span class="built_in">UIModalPresentationCustom</span>;
    [<span class="keyword">self</span> presentViewController:presentVC animated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];
}
</code></pre>
<p>剩下的就可以愉快的玩耍了 </p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在开发过程中虽然 UI 这个活很没技术含量,但有时候还是需要做些的特别的转场效果.本教程参考&lt;a href=&quot;https://www.ray
    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="macOS开发" scheme="https://www.sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>markdown嵌入折叠标签</title>
    <link href="https://www.sunyazhou.com/2017/10/25/20171025markdown-skill/"/>
    <id>https://www.sunyazhou.com/2017/10/25/20171025markdown-skill/</id>
    <published>2017-10-25T08:10:35.000Z</published>
    <updated>2017-10-31T12:55:31.166Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>这几天一直在开十九大,导致我的梯子翻墙不好使了,就在此时<a href="https://onevcat.com/2017/10/swift-error-category/" target="_blank" rel="external">喵神发表了一篇博文 关于 Swift Error 的分类</a>  </p>
</blockquote>
<p>每次看喵神的文章就像诸葛亮跟周瑜聊天一样如饮美酒,我不能自比诸葛孔明和周公瑾.</p>
<p>当我仔细看喵神博客的时候发现 原来<code>markdown</code>支持很多<code>html</code>标签的小技巧</p>
<p>比如:</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20171025markdown-skill/markdown_skill1.gif" alt="喵神文章中的"></p>
<p>第一眼我震撼了 原来 markdown 里面还能嵌入这么多好玩的 就这个问题 问了一下喵神</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20171025markdown-skill/markdown_question.png" alt="与喵神对话"></p>
<p><a href="https://www.w3schools.com/tags/tag_summary.asp" target="_blank" rel="external">简单的 summary tag 而已..</a></p>
<p>于是我测试了一下代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">details</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">summary</span>&gt;</span>点击时的区域标题<span class="tag">&lt;/<span class="name">summary</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span> - 测试 测试测试<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span> 测试二 测试三 。。。。。 .<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">details</span>&gt;</span></div></pre></td></tr></table></figure>
<p>下面我们来玩一下试试</p>
<details><br>  <summary>这是孙先生的博客 点击查看更多内容.</summary><br>  <p> 666666 昨天程序员节 是不是被 PM 虐了 QA 提个很多 bug 不想 fix.</p><br>  <p> 昨天一不小心驾照考下来了 耗时2个月 快不快。。。。.</p><br></details>



<p>OK 上边就是我们用到的几行代码 很简单直接嵌入 markdown 编辑器里面就马上出效果</p>
<p>感谢<a href="https://onevcat.com/" target="_blank" rel="external">喵神的指导</a></p>
<p>更多标签相关 可参考<a href="https://www.w3schools.com/tags/tag_summary.asp" target="_blank" rel="external">w3schools</a></p>
<p>全文完 </p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;这几天一直在开十九大,导致我的梯子翻墙不好使了,就在此时&lt;a href=&quot;https://onevcat.com/
    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="macOS开发" scheme="https://www.sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="技巧" scheme="https://www.sunyazhou.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>理解UIView的绘制</title>
    <link href="https://www.sunyazhou.com/2017/10/16/20171016UIView-Rendering/"/>
    <id>https://www.sunyazhou.com/2017/10/16/20171016UIView-Rendering/</id>
    <published>2017-10-16T05:00:30.000Z</published>
    <updated>2017-11-25T08:21:09.463Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20171016UIView-Rendering/UIView_rendering%402x.png" alt="UIView渲染"></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近研究OpenGL ES相关和 GPU 相关 发现这篇文章很具有参考的入门价值.</p>
<h3 id="理解-UIView-的绘制-UIView-是如何显示到-Screen-上的"><a href="#理解-UIView-的绘制-UIView-是如何显示到-Screen-上的" class="headerlink" title="理解 UIView 的绘制, UIView 是如何显示到 Screen 上的?"></a>理解 UIView 的绘制, UIView 是如何显示到 Screen 上的?</h3><p>首先要从<code>Runloop</code>开始说,iOS 的<code>MainRunloop</code> 是一个60fps 的回调,也就是说16.7ms(毫秒)会绘制一次屏幕,这个时间段内要完成:</p>
<ul>
<li><code>view</code>的缓冲区创建</li>
<li><code>view</code>内容的绘制(如果重写了 drawRect)  </li>
</ul>
<p>这些 <code>CPU</code>的工作.</p>
<p>然后将这个缓冲区交给<code>GPU</code>渲染, 这个过程又包含:</p>
<ul>
<li>多个<code>view</code>的拼接(compositing)</li>
<li>纹理的渲染(Texture)等.</li>
</ul>
<p>最终现实在屏幕上.因此,如果在16.7ms 内完不成这些操作, eg: CPU做了太多的工作, 或者<code>view</code>层次过于多,图片过于大,导致<code>GPU</code>压力太大,就会导致”卡”的现象,也就是 <strong>丢帧</strong>,<strong>掉帧</strong>.</p>
<p>苹果官方给出的最佳帧率是:<strong>60fps</strong>(60Hz),也就是一帧不丢, 当然这是理想中的绝佳体验.</p>
<h3 id="这个60fps该怎么理解呢？"><a href="#这个60fps该怎么理解呢？" class="headerlink" title="这个60fps该怎么理解呢？"></a>这个<code>60fps</code>该怎么理解呢？</h3><p>一般来说如果帧率达到 <code>25+fps</code>(fps &gt;= 25帧以上,不是25加别看错),人眼就基本感觉不到卡顿了,因此,如果你能让你的 iOS 程序<strong>稳定</strong>保持在<code>30fps</code>已经很不错了, 注释,是”稳定”在30fps,而不是, <code>10fps</code>,<code>40fps</code>,<code>20fps</code>这样的跳动,如果帧频不稳就会有卡的感觉,<code>60fps</code>真的很难达到, 尤其是在 iPhone 4/4s等 32bit 位机上,不过现在苹果已经全面放弃32位,支持最低64位会好很多.</p>
<p>总的来说, UIView从绘制到Render的过程有如下几步：</p>
<ul>
<li>每一个<code>UIView</code>都有一个<code>layer</code></li>
<li>每一个<code>layer</code>都有个<code>content</code>,这个<code>content</code>指向的是一块缓存,叫做<strong><code>backing store</code></strong>.  </li>
</ul>
<p><code>UIView</code>的绘制和渲染是两个过程:</p>
<ul>
<li>当<code>UIView</code>被绘制时,CPU执行<code>drawRect</code>，通过<code>context</code>将数据写入<strong><code>backing store</code></strong>  </li>
<li>当<strong><code>backing store</code></strong>写完后，通过render server交给GPU去渲染，将backing store中的bitmap数据显示在屏幕上.</li>
</ul>
<p>上面提到的从<code>CPU</code>到<code>GPU</code>的过程可用下图表示:</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20171016UIView-Rendering/CPU_to_GPU.001.png" alt=""></p>
<p>下面具体来讨论下这个过程</p>
<ul>
<li>CPU bound:</li>
</ul>
<p>假设我们创建一个 UILabel</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="built_in">UILabel</span>* label = [[<span class="built_in">UILabel</span> alloc]initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">10</span>, <span class="number">50</span>, <span class="number">300</span>, <span class="number">14</span>)];</div><div class="line">label.backgroundColor = [<span class="built_in">UIColor</span> whiteColor];</div><div class="line">label.font = [<span class="built_in">UIFont</span> systemFontOfSize:<span class="number">14.0</span>f];</div><div class="line">label.text = <span class="string">@"test"</span>;</div><div class="line">[<span class="keyword">self</span>.view addSubview:label];</div></pre></td></tr></table></figure>
<p>这个时候不会发生任何操作, 由于 UILabel 重写了<code>drawRect</code>方法,因此,这个 <code>View</code>会被 <code>marked as &quot;dirty&quot;</code>:</p>
<p>类似这个样子:</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/179212e7ed967e07c602dbe7eef101c4c5eb7b16/20171016UIView-Rendering/drawRect.png" alt=""></p>
<p>然后一个新的<code>Runloop</code>到来，上面说道在这个<code>Runloop</code>中需要将界面渲染上去，对于<code>UIKit</code>的渲染，Apple用的是它的<code>Core Animation</code>。<br>做法是在Runloop开始的时候调用：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">[<span class="built_in">CATransaction</span> begin]</div></pre></td></tr></table></figure>
<p>在<code>Runloop</code>结束的时候调用  </p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"></div><div class="line">[<span class="built_in">CATransaction</span> commit]</div></pre></td></tr></table></figure>
<p>在<code>begin</code>和<code>commit</code>之间做的事情是将<code>view</code>增加到<code>view hierarchy</code>中，这个时候也不会发生任何绘制的操作。<br>当<code>[CATransaction commit]</code>执行完后，<code>CPU</code>开始绘制这个<code>view</code>:</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20171016UIView-Rendering/CATransaction_commit.png" alt="CPU绘制图"></p>
<p>首先<code>CPU</code>会为<code>layer</code>分配一块内存用来绘制<code>bitmap</code>，叫做<strong><code>backing store</code></strong><br>创建指向这块<code>bitmap</code>缓冲区的指针，叫做<code>CGContextRef</code><br>通过<code>Core Graphic</code>的<code>api</code>，也叫<code>Quartz2D</code>，绘制<code>bitmap</code><br>将<code>layer</code>的<code>content</code>指向生成的<code>bitmap</code><br>清空<code>dirty flag</code>标记<br>这样<code>CPU</code>的绘制基本上就完成了.<br>通过<code>time profiler</code>可以完整的看到个过程：  </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line"></div><div class="line">Running Time Self Symbol Name</div><div class="line">2.0ms 1.2% 0.0 +[CATransaction flush]</div><div class="line">2.0ms 1.2% 0.0 CA::Transaction::commit()</div><div class="line">2.0ms 1.2% 0.0 CA::Context::commit_transaction(CA::Transaction*)</div><div class="line">1.0ms 0.6% 0.0 CA::Layer::layout_and_display_if_needed(CA::Transaction*)</div><div class="line">1.0ms 0.6% 0.0 CA::Layer::display_if_needed(CA::Transaction*)</div><div class="line">1.0ms 0.6% 0.0 -[CALayer display]</div><div class="line">1.0ms 0.6% 0.0 CA::Layer::display()</div><div class="line">1.0ms 0.6% 0.0 -[CALayer _display]</div><div class="line">1.0ms 0.6% 0.0 CA::Layer::display_()</div><div class="line">1.0ms 0.6% 0.0 CABackingStoreUpdate_</div><div class="line">1.0ms 0.6% 0.0 backing_callback(CGContext*, void*)</div><div class="line">1.0ms 0.6% 0.0 -[CALayer drawInContext:]</div><div class="line">1.0ms 0.6% 0.0 -[UIView(CALayerDelegate) drawLayer:inContext:]</div><div class="line">1.0ms 0.6% 0.0 -[UILabel drawRect:]</div><div class="line">1.0ms 0.6% 0.0 -[UILabel drawTextInRect:]</div></pre></td></tr></table></figure>
<p>假如某个时刻修改了<code>label</code>的<code>text</code>:  </p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">label.text = <span class="string">@"hello world"</span>;</div></pre></td></tr></table></figure>
<p>由于内容变了,<code>layer</code>的<code>content</code>的<code>bitmap</code>的尺寸也要变化，因此这个时候当新的<code>Runloop</code>到来时，<code>CPU</code>要为<code>layer</code>重新创建一个<code>backing store</code>，重新绘制<code>bitmap</code>.<br><code>CPU</code>这一块最耗时的地方往往在<code>Core Graphic</code>的绘制上，关于<code>Core Graphic</code>的性能优化是另一个话题了，又会牵扯到很多东西，就不在这里讨论了.</p>
<p>GPU bound：</p>
<p><code>CPU</code>完成了它的任务：将<code>view</code>变成了<code>bitmap</code>，然后就是<code>GPU</code>的工作了，<code>GPU</code>处理的单位是<code>Texture</code>.<br>基本上我们控制<code>GPU</code>都是通过<code>OpenGL</code>来完成的，但是从<code>bitmap</code>到<code>Texture</code>之间需要一座桥梁，<code>Core Animation</code>正好充当了这个角色：<br><code>Core Animation</code>对<code>OpenGL</code>的<code>api</code>有一层封装，当我们要渲染的<code>layer</code>已经有了<code>bitmap content</code>的时候，这个<code>content</code>一般来说是一个<code>CGImageRef</code>，<code>CoreAnimation</code>会创建一个<code>OpenGL</code>的<code>Texture</code>并将<code>CGImageRef（bitmap）</code>和这个<code>Texture</code>绑定，通过<code>TextureID</code>来标识。<br>这个对应关系建立起来之后，剩下的任务就是<code>GPU</code>如何将<code>Texture</code>渲染到屏幕上了。<br><code>GPU</code>大致的工作模式如下：</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/8f92ec74bfc31508293f5a6cadcd68ac703eb1a0/20171016UIView-Rendering/GPU_work.png" alt=""></p>
<p>整个过程也就是一件事：</p>
<p><code>CPU</code>将准备好的<code>bitmap</code>放到<code>RAM</code>里，<code>GPU</code>去搬这快内存到<code>VRAM</code>中处理。<br>而这个过程<code>GPU</code>所能承受的极限大概在16.7ms完成一帧的处理，所以最开始提到的60fps其实就是GPU能处理的最高频率.<br>因此，<code>GPU</code>的挑战有两个：</p>
<ul>
<li>将数据从<code>RAM</code>搬到<code>VRAM</code>中</li>
<li>将<code>Texture</code>渲染到屏幕上    </li>
</ul>
<p>这两个中瓶颈基本在第二点上。渲染<code>Texture</code>基本要处理这么几个问题：</p>
<ul>
<li>Compositing:</li>
</ul>
<p><code>Compositing</code>是指将多个纹理拼到一起的过程，对应<code>UIKit</code>，是指处理多个<code>view</code>合到一起的情况，如:  </p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">[<span class="keyword">self</span>.view addsubview : subview]。</div></pre></td></tr></table></figure>
<p>如果<code>view</code>之间没有叠加，那么<code>GPU</code>只需要做普通渲染即可.<br>如果多个<code>view</code>之间有叠加部分，<code>GPU</code>需要做<code>blending</code>.  </p>
<p>加入两个<code>view</code>大小相同，一个叠加在另一个上面，那么计算公式如下：</p>
<p><code>R</code> = <code>S</code>+<code>D</code>*(<code>1</code>-<code>Sa</code>)  </p>
<blockquote>
<p><code>R</code>: 为最终的像素值<br><code>S</code>: 代表 上面的Texture（Top Texture）<br><code>D</code>: 代表下面的Texture(lower Texture)  </p>
</blockquote>
<p>其中<code>S</code>,<code>D</code>都已经<code>pre-multiplied</code>各自的<code>alpha</code>值。<br><code>Sa</code>代表<code>Texture</code>的<code>alpha</code>值。  </p>
<p>假如<code>Top Texture</code>（上层<code>view</code>）的<code>alpha</code>值为<code>1</code>，即不透明。那么它会遮住下层的<code>Texture</code>.<br>即,<code>R</code> = <code>S</code>。是合理的。  </p>
<p>假如<code>Top Texture</code>（上层<code>view</code>）的<code>alpha</code>值为<code>0.5</code>，<br><code>S</code>为<code>(1,0,0)</code>，乘以<code>alpha</code>后为<code>(0.5,0,0）</code>。<br><code>D</code>为<code>(0，0，1)</code>。<br>得到的<code>R</code>为<code>（0.5，0，0.5）</code>。  </p>
<p>基本上每个像素点都需要这么计算一次。  </p>
<p>因此，<code>view</code>的层级很复杂，或者<code>view</code>都是半透明的（<code>alpha</code>值不为<code>1</code>）都会带来<code>GPU</code>额外的计算工作。</p>
<ul>
<li>Size</li>
</ul>
<p>这个问题，主要是处理<code>image</code>带来的，假如内存里有一张<code>400x400</code>的图片，要放到<code>100x100</code>的<code>imageview</code>里，如果不做任何处理，直接丢进去，问题就大了，这意味着，<code>GPU</code>需要对大图进行缩放到小的区域显示，需要做像素点的<code>sampling</code>，这种<code>smapling</code>的代价很高，又需要兼顾<code>pixel alignment</code>。  计算量会飙升。  </p>
<ul>
<li>Offscreen Rendering And Mask</li>
</ul>
<p>如果我们对<code>layer</code>做这样的操作：  </p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">label.layer.cornerRadius = <span class="number">5.0</span>f;</div><div class="line">label.layer.masksToBounds = <span class="literal">YES</span>;</div></pre></td></tr></table></figure>
<p>会产生<code>offscreen rendering</code>,它带来的最大的问题是，当渲染这样的<code>layer</code>的时候，需要额外开辟内存，绘制好<code>radius，mask</code>，然后再将绘制好的<code>bitmap</code>重新赋值给<code>layer</code>。<br>因此继续性能的考虑，<code>Quartz</code>提供了优化的<code>api</code>：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">label.layer.cornerRadius = <span class="number">5.0</span>f;</div><div class="line">label.layer.masksToBounds = <span class="literal">YES</span>;</div><div class="line">label.layer.shouldRasterize = <span class="literal">YES</span>;</div><div class="line">label.layer.rasterizationScale = label.layer.contentsScale;</div></pre></td></tr></table></figure>
<p>简单的说，这是一种<code>cache</code>机制。<br>同样<code>GPU</code>的性能也可以通过<code>instrument</code>去衡量：</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/e3fad5583fdd4fd52b11a8fe44a9528b95f8ac1b/20171016UIView-Rendering/rendering_result.png" alt=""></p>
<p>红色代表<code>GPU</code>需要做额外的工作来渲染<code>View</code>，绿色代表<code>GPU</code>无需做额外的工作来处理<code>bitmap</code>。</p>
<p>全文完</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20171016UIView-Rendering/UIView_rendering%402
    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>DeviceCheck</title>
    <link href="https://www.sunyazhou.com/2017/09/30/20170930DeviceCheck/"/>
    <id>https://www.sunyazhou.com/2017/09/30/20170930DeviceCheck/</id>
    <published>2017-09-30T01:45:25.000Z</published>
    <updated>2017-10-09T14:42:28.420Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/dd5e142392f5ea3756cb8877e134b5334e659738/20170930DeviceCheck/DeviceCheck.png" alt=""></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>iOS11 苹果改动了一个比较引开发者关注的亮点</p>
<p><strong>UDID之类的写到系统 keychain 的唯一标识会随着 app 删除而删除</strong></p>
<p>这个问题在微博上已经争论好几天</p>
<h3 id="iOS11新的设备唯一标识-DCDevice"><a href="#iOS11新的设备唯一标识-DCDevice" class="headerlink" title="iOS11新的设备唯一标识 DCDevice"></a>iOS11新的设备唯一标识 DCDevice</h3><h4 id="介绍-API"><a href="#介绍-API" class="headerlink" title="介绍 API"></a>介绍 API</h4><p>我们首先看看<code>DCDevice</code>类都有啥</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;DeviceCheck/DeviceCheck.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="built_in">NS_ASSUME_NONNULL_BEGIN</span></div><div class="line"></div><div class="line">API_AVAILABLE(ios(<span class="number">11.0</span>), tvos(<span class="number">11.0</span>)) API_UNAVAILABLE(watchos, macos)</div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">DCDevice</span> : <span class="title">NSObject</span></span></div><div class="line"><span class="comment">//当前设备</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">class</span>, <span class="keyword">readonly</span>) DCDevice *currentDevice;</div><div class="line"></div><div class="line"><span class="comment">//是否支持</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">getter</span>=isSupported, <span class="keyword">readonly</span>) <span class="built_in">BOOL</span> supported;</div><div class="line"></div><div class="line"><span class="comment">//生成唯一标识的 token 注意:每call一次就会生成一个新的 token(和前边不同)</span></div><div class="line">- (<span class="keyword">void</span>)generateTokenWithCompletionHandler:(<span class="keyword">void</span>(^)(<span class="built_in">NSData</span> * _Nullable token, <span class="built_in">NSError</span> * _Nullable error))completion;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="built_in">NS_ASSUME_NONNULL_END</span></div></pre></td></tr></table></figure>
<p>接口简直不能再简单了 <strong>创建实例调方法</strong></p>
<h4 id="使用-API"><a href="#使用-API" class="headerlink" title="使用 API"></a>使用 API</h4><p>下面我们来看下如何使用<code>DCDevice</code></p>
<p>导入头文件</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;DeviceCheck/DeviceCheck.h&gt;</span></span></div></pre></td></tr></table></figure>
<p>check 是否支持 如果支持 的话会在回调以后返回 <code>token</code>(NSData)</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    </div><div class="line">    <span class="comment">//下面是调用代码</span></div><div class="line">    <span class="keyword">if</span>([DCDevice currentDevice].supported)&#123;</div><div class="line">        [[DCDevice currentDevice] generateTokenWithCompletionHandler:^(<span class="built_in">NSData</span> * _Nullable token, <span class="built_in">NSError</span> * _Nullable error) &#123;</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,token);</div><div class="line">        &#125;];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>token 是个 2188字节(2k 多点)的二进制流,很小</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/213b6d379c40ee75415b6a3447085d7914181ef3/20170930DeviceCheck/DCDevice_code%402x.png" alt=""></p>
<p>我尝试各种字符串编码最终也不知道里面是啥 没能成功打印出来</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/213b6d379c40ee75415b6a3447085d7914181ef3/20170930DeviceCheck/DCDevice_binary%402x.png" alt=""></p>
<p>谁要是打印出来烦请 share 一下</p>
<h4 id="删除-重装App-如何处理"><a href="#删除-重装App-如何处理" class="headerlink" title="删除/重装App 如何处理"></a>删除/重装App 如何处理</h4><blockquote>
<p>DeviceCheck 允许你通过你的服务器与 Apple 服务器通讯，并为单个设备设置2k左右 的数据。<br>在设备上用 DeviceCheck API 生成一个 2字节的 token (00, 01,10,11)，然后将这个 token 发给自己的服务器，再由自己的服务器与 Apple 的 API 进行通讯，来更新或者查询该设备的值。这两字节 的数据用来追踪用户。比如。借助两个自己的数据，你可以得知用户究竟使用了该 App 多久。<br>该 API 可以成为：反欺诈领域：<br>试用7天<br>Uber、滴滴司机被封号后，防止重新注册账号接单<br>该用户是否已经领取过首次注册红包<br>APP防多开<br>因为传输的是 flag 级别的数据，并不会定位到该设备的使用者，所以相对安全。</p>
<p>但是对于购买了二手手机的使用场景，可能会出现一些边界情况，这个在业务中也需要考虑进去。</p>
</blockquote>
<p>引自<a href="https://github.com/ChenYilong/iOS11AdaptationTips/issues/22" target="_blank" rel="external">iOS11开发新特性之实用小tips</a></p>
<p>首先要明白我们 的 token 需要发给谁</p>
<ol>
<li>token 需要发送给我们自己公司的<code>server</code>做记录</li>
<li>我们公司自己的<code>server</code>去<code>Apple</code>的<code>server</code>查询<code>token</code>是否有效,从而来更新或者查询该设备值. </li>
<li>这<code>2k 左右的 token</code>不会因为设备删除 app 而删除 会一直存在苹果的 server(其实我觉得就是苹果自己去获取的设备唯一标识).</li>
</ol>
<p>那么 怎么查询和更新呢 </p>
<h5 id="查询接口"><a href="#查询接口" class="headerlink" title="查询接口"></a>查询接口</h5><p><strong><a href="https://api.development.devicecheck.apple.com/v1/query_two_bits" target="_blank" rel="external">https://api.development.devicecheck.apple.com/v1/query_two_bits</a></strong></p>
<p>可以用终端自己模拟一下 就当作你自己是自己的服务器访问Apple 的服务器</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">curl -i --verbose -H <span class="string">"Authorization: Bearer &lt;GeneratedJWT&gt;"</span> \</div><div class="line">-X POST --data-binary @ValidQueryRequest.json \ </div><div class="line">https://api.development.devicecheck.apple.com/v1/query_two_bits</div></pre></td></tr></table></figure>
<p>json 的定义如下:</p>
<table>
<thead>
<tr>
<th style="text-align:center">字段 key</th>
<th style="text-align:center">类型</th>
<th style="text-align:center">说明</th>
<th style="text-align:center">必须</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">device_token</td>
<td style="text-align:center">String</td>
<td style="text-align:center">设备唯一标识 token</td>
<td style="text-align:center">是</td>
</tr>
<tr>
<td style="text-align:center">transaction_id</td>
<td style="text-align:center">String</td>
<td style="text-align:center">服务器产生的一个ID</td>
<td style="text-align:center">是</td>
</tr>
<tr>
<td style="text-align:center">timestamp</td>
<td style="text-align:center">Long</td>
<td style="text-align:center">服务器生成的UTC时间戳</td>
<td style="text-align:center">是</td>
</tr>
</tbody>
</table>
<p>它会 返回 如下格式</p>
<figure class="highlight json"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">   <span class="attr">"device_token"</span> : <span class="string">"wlkCDA2Hy/CfrMqVAShs1BAR/0sAiuRIUm5jQg0a..."</span></div><div class="line">   <span class="string">"transaction_id"</span> : <span class="string">"5b737ca6-a4c7-488e-b928-8452960c4be9"</span>,</div><div class="line">   <span class="attr">"timestamp"</span> : <span class="number">1487716472000</span> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="更新接口"><a href="#更新接口" class="headerlink" title="更新接口"></a>更新接口</h5><p><strong><a href="https://api.development.devicecheck.apple.com/v1/update_two_bits" target="_blank" rel="external">https://api.development.devicecheck.apple.com/v1/update_two_bits</a></strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">curl -i --verbose -H <span class="string">"Authorization: Bearer &lt;GeneratedJWT&gt;"</span> \</div><div class="line">-X POST --data-binary @ValidUpdateRequest.json \</div><div class="line">https://api.development.devicecheck.apple.com/v1/update_two_bits</div></pre></td></tr></table></figure>
<p>json 的定义如下:</p>
<table>
<thead>
<tr>
<th style="text-align:center">字段 key</th>
<th style="text-align:center">类型</th>
<th style="text-align:center">说明</th>
<th style="text-align:center">必须</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">device_token</td>
<td style="text-align:center">String</td>
<td style="text-align:center">设备唯一标识 token</td>
<td style="text-align:center">是</td>
</tr>
<tr>
<td style="text-align:center">transaction_id</td>
<td style="text-align:center">String</td>
<td style="text-align:center">服务器产生的一个ID</td>
<td style="text-align:center">是</td>
</tr>
<tr>
<td style="text-align:center">timestamp</td>
<td style="text-align:center">Long</td>
<td style="text-align:center">服务器生成的UTC时间戳</td>
<td style="text-align:center">是</td>
</tr>
<tr>
<td style="text-align:center">bit0</td>
<td style="text-align:center">Boolean</td>
<td style="text-align:center">新的布尔值1</td>
<td style="text-align:center">否</td>
</tr>
<tr>
<td style="text-align:center">bit1</td>
<td style="text-align:center">Boolean</td>
<td style="text-align:center">新的布尔值2</td>
<td style="text-align:center">否</td>
</tr>
</tbody>
</table>
<p>json 的示例:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">   <span class="attr">"device_token"</span> : <span class="string">"wlkCDA2Hy/CfrMqVAShs1BAR/0sAiuRIUm5jQg0a..."</span></div><div class="line">   <span class="string">"transaction_id"</span> : <span class="string">"5b737ca6-a4c7-488e-b928-8452960c4be9"</span>,</div><div class="line">   <span class="attr">"timestamp"</span> : <span class="number">1487716472000</span>,</div><div class="line">   <span class="attr">"bit0"</span> : <span class="literal">true</span>,</div><div class="line">   <span class="attr">"bit1"</span> : <span class="literal">false</span> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="最终的方案"><a href="#最终的方案" class="headerlink" title="最终的方案"></a>最终的方案</h3><ol>
<li>iOS11以前版本暂且才用 UUID 等 keychian 方式 </li>
<li>iOS11尽量才用新的 api 来适配解决</li>
</ol>
<p>对于 server 来讲可以 把 token 搞成新的附属字段 比如一个账号下登录多少个设备</p>
<p>那么 一个 UID 下面 就要附属 iOS 版本+ token </p>
<p>相信过不了多久 很成熟的 token方案会脱颖而出 </p>
<p><em>如果本文有误之处还请各路大神指教</em></p>
<p>全文完</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/dd5e142392f5ea3756cb8877e134b5334e659738/20170930Dev
    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="macOS开发" scheme="https://www.sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Markdown插入表格语法</title>
    <link href="https://www.sunyazhou.com/2017/09/29/20170929markdown-table/"/>
    <id>https://www.sunyazhou.com/2017/09/29/20170929markdown-table/</id>
    <published>2017-09-29T10:01:08.000Z</published>
    <updated>2017-10-09T14:42:28.419Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20170929markdown-table/table.png" alt=""></p>
<p>以前总用 markdown 插入表格不成功 这篇分享一下 markdown 如何插入表格</p>
<p>demo:</p>
<ul>
<li>普通样式</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">| 一个普通标题 | 一个普通标题 | 一个普通标题 |</div><div class="line">| ------| ------ | ------ |</div><div class="line">| 短文本 | 中等文本 | 稍微长一点的文本 |</div><div class="line">| 稍微长一点的文本 | 短文本 | 中等文本 |</div></pre></td></tr></table></figure>
<p>现实效果是这样的</p>
<table>
<thead>
<tr>
<th>一个普通标题</th>
<th>一个普通标题</th>
<th>一个普通标题</th>
</tr>
</thead>
<tbody>
<tr>
<td>短文本</td>
<td>中等文本</td>
<td>稍微长一点的文本</td>
</tr>
<tr>
<td>稍微长一点的文本</td>
<td>短文本</td>
<td>中等文本</td>
</tr>
</tbody>
</table>
<p>对齐</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">| 左对齐标题 | 右对齐标题 | 居中对齐标题 |</div><div class="line">| :------| ------: | :------: |</div><div class="line">| 短文本 | 中等文本 | 稍微长一点的文本 |</div><div class="line">| 稍微长一点的文本 | 短文本 | 中等文本 |</div></pre></td></tr></table></figure>
<p>效果是这样的</p>
<table>
<thead>
<tr>
<th style="text-align:left">左对齐标题</th>
<th style="text-align:right">右对齐标题</th>
<th style="text-align:center">居中对齐标题</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">短文本</td>
<td style="text-align:right">中等文本</td>
<td style="text-align:center">稍微长一点的文本</td>
</tr>
<tr>
<td style="text-align:left">稍微长一点的文本</td>
<td style="text-align:right">短文本</td>
<td style="text-align:center">中等文本</td>
</tr>
</tbody>
</table>
<p>语法说明:</p>
<ul>
<li><code>|</code>、<code>-</code>、<code>:</code>、 之间多余的空格会被忽略,不影响布局.</li>
<li>默认标题栏<strong>居中对齐</strong>, 内容居左对齐.</li>
<li><code>-:</code>表示内容和标题栏居右对齐.</li>
<li><code>:-</code>表示内容和标题栏居左对齐.</li>
<li><code>:-:</code>表示内容和标题栏居中对齐.</li>
<li><strong>内容</strong>和<code>|</code>之间的多余空格会被忽略.</li>
<li>每行第一个<code>|</code>和最后一个<code>|</code>可以省略.</li>
<li><code>-</code>的数量至少有一个.</li>
</ul>
<p>每次总忘记 markdown 表格怎么写</p>
<p>如果你需要 加一列 可以复制粘贴前边<code>|</code>和 下边的<code>|:-----:|</code></p>
<p>我用的是开源免费的 <a href="https://github.com/MacDownApp/macdown/releases" target="_blank" rel="external">MacDown</a> 大家可以自行下载,平常发表文章都用这个.</p>
<p>全文完</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.gi
    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="macOS开发" scheme="https://www.sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="技巧" scheme="https://www.sunyazhou.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>如何使用Charles截获https请求</title>
    <link href="https://www.sunyazhou.com/2017/09/01/20170901Charles-capture-https/"/>
    <id>https://www.sunyazhou.com/2017/09/01/20170901Charles-capture-https/</id>
    <published>2017-09-01T15:17:09.000Z</published>
    <updated>2017-09-01T16:25:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/2017-09-01-Charles-capture-https/charles_album.png" alt=""></p>
<p>如何使用<code>charles</code>在iOS设备上截获<code>https</code>的请求 </p>
<h2 id="1-安装Charles"><a href="#1-安装Charles" class="headerlink" title="1.安装Charles"></a>1.安装Charles</h2><p><a href="https://www.charlesproxy.com/download/" target="_blank" rel="external">官网下载</a>就行了 至于破解之类的 自行google吧  我这里使用的是Charles 4.1.3版本 目前应该是最新的 </p>
<h2 id="2-HTTP抓包配置"><a href="#2-HTTP抓包配置" class="headerlink" title="2.HTTP抓包配置"></a>2.HTTP抓包配置</h2><h4 id="1-查看电脑IP"><a href="#1-查看电脑IP" class="headerlink" title="(1) 查看电脑IP"></a>(1) 查看电脑IP</h4><p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/2017-09-01-Charles-capture-https/wifi_ip_mac.png" alt=""></p>
<h4 id="2-设置手机HTTP代理"><a href="#2-设置手机HTTP代理" class="headerlink" title="(2) 设置手机HTTP代理"></a>(2) 设置手机HTTP代理</h4><p>手机连上电脑，点击“设置-&gt;无线局域网-&gt;连接的WiFi”，设置HTTP代理：<br>服务器为电脑IP地址：如192.168.1.108<br>端口：8888</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/2017-09-01-Charles-capture-https/wifi_ip_port_iPhone.png" alt=""></p>
<p>注意:<em>这里用我自己电脑的IP举例 红色区域 记得替换成你自己的电脑的IP</em></p>
<p>设置代理后，需在在电脑上打开Charles,这个时候 如果手机有请求就会弹出如下图:</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/2017-09-01-Charles-capture-https/charles_allow.png" alt=""></p>
<p>点击<strong>Allow</strong> 就可以了</p>
<h3 id="3-HTTPS抓包"><a href="#3-HTTPS抓包" class="headerlink" title="3. HTTPS抓包"></a>3. HTTPS抓包</h3><p>左上角菜单中 选择<code>SSL Proxying Settings</code></p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/2017-09-01-Charles-capture-https/charles_step1.png" alt=""></p>
<p>然后 勾选<code>Enable SSL Proxying</code> </p>
<p>紧接着点击 <code>Add</code></p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/2017-09-01-Charles-capture-https/charles_step2.png" alt=""></p>
<p>再然后在</p>
<p><code>Host</code>: 输入 <code>*</code> 代表通配所有 如果你要截获 比如 *.baidu.com那就写上</p>
<p><code>Port</code>: 443 默认端口 填完 点击OK</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/2017-09-01-Charles-capture-https/charles_step3.png" alt=""></p>
<p>紧接着 点击<code>Help</code> -&gt; <code>SSL Proxying</code> -&gt; 安装根证书</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/2017-09-01-Charles-capture-https/charles_step4.png" alt=""></p>
<p>安装到钥匙串后 点击charles的root证书 选择 <code>使用信任</code></p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/2017-09-01-Charles-capture-https/charles_cer_root_mac.png" alt=""></p>
<p>下一步 是安装手机的root证书 </p>
<p><img src="https://github.com/sunyazhou13/sunyazhou13.github.io-images/blob/master/2017-09-01-Charles-capture-https/charles_step6.png?raw=true" alt=""></p>
<p>这时 需要在 设置 代理ip的手机上 (iPhone上)用 Safari 直接打开网址: <a href="chls.pro/ssl">chls.pro/ssl</a></p>
<p>此时手机一会儿就弹出这样的 提示 点击<strong>允许</strong></p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/2017-09-01-Charles-capture-https/iPhone1.PNG" alt=""></p>
<p>然后 安装证书</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/2017-09-01-Charles-capture-https/iPhone2.PNG" alt=""></p>
<p>安装完 最后一步<strong>非常重要</strong></p>
<p><strong>必须到 通用-&gt;关于本机-&gt;证书信任设置</strong>去信任 证书 </p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/2017-09-01-Charles-capture-https/iPhone3.PNG" alt=""></p>
<p>如果不信任 就会抓取的时候出现下图这样的问题</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/2017-09-01-Charles-capture-https/charles_root_cer_error.png" alt=""></p>
<blockquote>
<p>注意:<em>iOS10.3以上版本 貌似才需要</em></p>
</blockquote>
<p>最后放上一张截获成功的图 (支付宝的接口)</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/2017-09-01-Charles-capture-https/result.png" alt=""></p>
<p>全文完</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.gi
    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="macOS开发" scheme="https://www.sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="技巧" scheme="https://www.sunyazhou.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>ARKit技术初探</title>
    <link href="https://www.sunyazhou.com/2017/08/30/ARKit/"/>
    <id>https://www.sunyazhou.com/2017/08/30/ARKit/</id>
    <published>2017-08-30T06:50:43.000Z</published>
    <updated>2017-08-31T13:17:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/ARKit/ARKit_preview.png" alt=""></p>
<p>本篇会从广泛介绍到详细介绍,也就是从粗粒度向细粒度逐渐过度讲解.<br>期间有任何问题请大家集思广益,多多指教. </p>
<h1 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h1><ul>
<li><strong>AR技术介绍</strong> </li>
<li><strong>ARKit工作原理及流程介绍</strong> </li>
<li><strong>ARKit简单代码实现</strong> </li>
<li><strong>ARKit框架所有API介绍</strong> </li>
<li><strong>ARScnView介绍</strong> </li>
<li><strong>ARSession介绍</strong> </li>
<li><strong>ARCamera介绍</strong> </li>
<li><strong>ARKit捕捉平地</strong> </li>
<li><strong>AR代码demo实现</strong> </li>
</ul>
<h2 id="AR技术介绍"><a href="#AR技术介绍" class="headerlink" title="AR技术介绍"></a>AR技术介绍</h2><h4 id="AR技术简介"><a href="#AR技术简介" class="headerlink" title="AR技术简介"></a>AR技术简介</h4><ul>
<li>增强现实技术（Augmented Reality，简称 AR），是一种实时的计算摄影机影像的位置及角度并加上相应图像、视频、3D模型的技术，这种技术的目标是在屏幕上把虚拟世界套在现实世界并进行互动</li>
<li>AR场景实现技术要素<ol>
<li>多媒体捕捉现实图像：如摄像头</li>
<li>三维建模:3D立体模型</li>
<li>传感器追踪:主要追踪现实世界动态物体的六轴变化，这六轴分别是X、Y、Z轴位移及旋转。其中位移三轴决定物体的方位和大小，旋转三轴决定物体显示的区域</li>
<li>坐标识别及转换：3D模型显示在现实图像中不是单纯的frame坐标点，而是一个三维的矩阵坐标</li>
<li>AR还可以与虚拟物体进行一些交互(optional)<br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/447c7f0d7eed6cd1e4971d0fa19bef8401686383/ARKit/AR_Direction.png" alt=""></li>
</ol>
</li>
</ul>
<h4 id="ARKit概述及特点"><a href="#ARKit概述及特点" class="headerlink" title="ARKit概述及特点"></a>ARKit概述及特点</h4><ul>
<li><p><code>ARKit</code> 框架(framework)提供 两种 AR 技术</p>
<ul>
<li><strong>基于3D 场景(<code>SceneKit</code>) 实现的增强现实</strong></li>
<li><p><strong>基于2D 场景(<code>SpriktKit</code>) 实现的增强现实</strong>  </p>
<blockquote>
<p> 一般主流都是基于3D 实现,<code>ARkit</code>兼容 <code>SceneKit</code>和 <code>SpriktKit</code> (苹果推出游戏引擎)framework </p>
</blockquote>
</li>
</ul>
</li>
<li><p>显示AR 效果为什么依赖 <strong>3D引擎<code>SceneKit</code>和 2D 引擎<code>SpriktKit</code> 苹果的游戏引擎框架? 原因是游戏引擎才可以加载物体模型。</strong></p>
<blockquote>
<p> 虽然<code>ARKit</code>中的视图<strong>(<code>ARSCNView</code>)继承自<code>SCNView</code>,<code>SCNView</code>继承自<code>UIView</code></strong>,<br>但是目前<code>ARKit</code>框架本身只包含相机追踪, 不能直接加载物体模型, 所以只能依赖游戏引擎加载 ARKit (我觉得苹果是在充分利用和整合现有资源并推广自己的 framework 一石二鸟) 因为就目前我没有看到 任何<code>ARKit</code>支持 <code>Unity3D</code>或者 <code>Cocoas2D</code></p>
</blockquote>
</li>
</ul>
<h4 id="iOS11-如何支持ARKit"><a href="#iOS11-如何支持ARKit" class="headerlink" title="iOS11 如何支持ARKit"></a>iOS11 如何支持<code>ARKit</code></h4><p>iOS11虽然推出了 <code>ARKit</code> 但不是所有 iOS11系统都支持  </p>
<ul>
<li>必须 CPU  A9以上(iPhone 6s 以上 还有 iPhone SE)</li>
</ul>
<p>开发环境</p>
<ul>
<li>Xcode版本:Xcode9及以上</li>
<li>系统: iOS11及以上</li>
<li>iOS设备：处理器A9及 以上（6S机型及以上)</li>
<li>macOS系统: 10.12.4及以上</li>
</ul>
<h4 id="Xcode-自带创建模板-多数都不用"><a href="#Xcode-自带创建模板-多数都不用" class="headerlink" title="Xcode 自带创建模板(多数都不用)"></a>Xcode 自带创建模板(多数都不用)</h4><p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/ARKit/ARKit-Model.png" alt=""></p>
<p>demo 演示</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> () &lt;<span class="title">ARSCNViewDelegate</span>&gt;</span></div><div class="line"><span class="comment">//AR视图：展示3D界面</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="keyword">IBOutlet</span> ARSCNView *sceneView;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line">    </div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line"></div><div class="line">    <span class="comment">//场景代理</span></div><div class="line">    <span class="keyword">self</span>.sceneView.delegate = <span class="keyword">self</span>;</div><div class="line">    </div><div class="line">    <span class="comment">// 显示帧率</span></div><div class="line">    <span class="keyword">self</span>.sceneView.showsStatistics = <span class="literal">YES</span>;</div><div class="line">    </div><div class="line">    <span class="comment">// 创建一个场景</span></div><div class="line">    <span class="built_in">SCNScene</span> *scene = [<span class="built_in">SCNScene</span> sceneNamed:<span class="string">@"art.scnassets/ship.scn"</span>];</div><div class="line">    </div><div class="line">    <span class="comment">// Set the scene to the view</span></div><div class="line">    <span class="keyword">self</span>.sceneView.scene = scene;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)viewWillAppear:(<span class="built_in">BOOL</span>)animated &#123;</div><div class="line">    [<span class="keyword">super</span> viewWillAppear:animated];</div><div class="line">    </div><div class="line">    <span class="comment">// 世界坐标系配置</span></div><div class="line">    ARWorldTrackingSessionConfiguration *configuration = [ARWorldTrackingSessionConfiguration new];</div><div class="line">    </div><div class="line">    <span class="comment">// 运行3D 场景的 会话</span></div><div class="line">    [<span class="keyword">self</span>.sceneView.session runWithConfiguration:configuration];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)viewWillDisappear:(<span class="built_in">BOOL</span>)animated &#123;</div><div class="line">    [<span class="keyword">super</span> viewWillDisappear:animated];</div><div class="line">    </div><div class="line">    <span class="comment">// 暂停</span></div><div class="line">    [<span class="keyword">self</span>.sceneView.session pause];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)didReceiveMemoryWarning &#123;</div><div class="line">    [<span class="keyword">super</span> didReceiveMemoryWarning];</div><div class="line">    <span class="comment">// Release any cached data, images, etc that aren't in use.</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#pragma mark - ARSCNViewDelegate</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//给当前锚点创建一个节点 (node 可以理解成 UIView)</span></div><div class="line"><span class="comment">/*</span></div><div class="line">// Override to create and configure nodes for anchors added to the view's session.</div><div class="line">- (SCNNode *)renderer:(id&lt;SCNSceneRenderer&gt;)renderer nodeForAnchor:(ARAnchor *)anchor &#123;</div><div class="line">    SCNNode *node = [SCNNode new];</div><div class="line"> </div><div class="line">    // Add geometry to the node...</div><div class="line"> </div><div class="line">    return node;</div><div class="line">&#125;</div><div class="line">*/</div><div class="line"></div><div class="line"><span class="comment">//会话有错误</span></div><div class="line">- (<span class="keyword">void</span>)session:(ARSession *)session didFailWithError:(<span class="built_in">NSError</span> *)error &#123;</div><div class="line">    <span class="comment">// Present an error message to the user</span></div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//被打断  类似音频播放的时候被打断 eg:前后台切换 来电话  siri</span></div><div class="line">- (<span class="keyword">void</span>)sessionWasInterrupted:(ARSession *)session &#123;</div><div class="line">    <span class="comment">// Inform the user that the session has been interrupted, for example, by presenting an overlay</span></div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//会话结束</span></div><div class="line">- (<span class="keyword">void</span>)sessionInterruptionEnded:(ARSession *)session &#123;</div><div class="line">    <span class="comment">// Reset tracking and/or remove existing anchors if consistent tracking is required</span></div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="ARKit工作原理及流程介绍"><a href="#ARKit工作原理及流程介绍" class="headerlink" title="ARKit工作原理及流程介绍"></a>ARKit工作原理及流程介绍</h2><h3 id="主要内容-1"><a href="#主要内容-1" class="headerlink" title="主要内容"></a>主要内容</h3><p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/ARKit/Rendering_ARKit.png" alt=""></p>
<p><code>ARKit</code> 并不是一个独立运行的框架 必须要配合<code>SceneKit</code>,没有<code>SceneKit</code> <code>ARKit</code>和普通相机没有任何区别</p>
<blockquote>
<p> <em>难点:3D坐标的矩阵转换</em>     (3D X/Y/Z, 4x4坐标) </p>
</blockquote>
<p>下面是一张图 ARKit 的所有.h 头文件 (没有列出派生的子类)</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/ARKit/ARDefines%402x.png" alt=""></p>
<ul>
<li><p>ARKit框架中的核心类</p>
<ul>
<li><strong><code>ARScnView</code></strong></li>
<li><strong><code>ARSession</code></strong></li>
<li><strong><code>ARCamera</code></strong></li>
</ul>
</li>
<li><p><code>ARKit</code>demo 示例 实现</p>
<ul>
<li>捕捉平面 添加物体</li>
</ul>
</li>
<li><p>AR虚拟增强现实就是指在相机捕捉到的现实世界图像中显示一个虚拟的3D模型,这个过程可以分为两个步骤</p>
<ol>
<li>相机捕捉现实世界图像 (由ARKit 实现)  </li>
<li>在图像中现实虚拟3D 模型(由SceneKit 实现)</li>
</ol>
</li>
<li><p><code>ARKit</code>与<code>SceneKit</code>框架关系图</p>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/ARKit/ARKit_UML.png" alt=""></p>
<ol>
<li><code>ARSCNView</code> –&gt; <code>SCNView</code>(SceneKit.framework)–&gt;<code>UIView</code>(UIKit.framework)</li>
<li>ARSCNView视图容器,它管理一个 <code>ARSession</code></li>
<li>在一个完整的虚拟增强现实体验中,<code>ARKit</code>只负责把真实世界画面转变为一个3D 场景, 这个过程主要分为两个环节：<ul>
<li>ARCamera 负责捕捉摄像头画面</li>
<li>ARSession 负责搭建3D 场景</li>
</ul>
</li>
<li><p>在一个完整的虚拟增强现实体验中,将虚拟物体展现在3D场景中是由<code>SceneKit</code>框架来完成的 </p>
<blockquote>
<p> 每一个虚拟的物体都是一个节点SCNNode,每一个节点构成了一个场景SCNScene,无数个场景构成了3D世界</p>
<p>可以理解UIViewController 的[view addSubview:xxxView];</p>
</blockquote>
</li>
</ol>
<h3 id="ARKit工作原理"><a href="#ARKit工作原理" class="headerlink" title="ARKit工作原理"></a>ARKit工作原理</h3><h4 id="ARSCNView与-ARSession关系"><a href="#ARSCNView与-ARSession关系" class="headerlink" title="ARSCNView与 ARSession关系"></a>ARSCNView与 ARSession关系</h4><p>说之前先了解一下这个<code>Session</code> 和<code>Context</code>命名以及含义</p>
<p><code>Session</code> 直译: 会话<br><code>Context</code> 直译: 上下文</p>
<p><em>在iOS框架中，凡是带session或者context后缀的，这种类一般自己不干活，作用一般都是两个</em>:</p>
<ul>
<li><strong>管理其他类，帮助他们搭建沟通桥梁，好处就是解耦</strong> </li>
<li><strong>负责帮助我们管理复杂环境下的内存</strong></li>
</ul>
<p><em><code>Session</code> 和<code>Context</code>不同点</em></p>
<ul>
<li>session 有硬件参与的(一般与硬件打交道), eg: 摄像头捕捉 <code>ARSession</code>、音频 <code>AVAudioSession</code>, 网卡相关的<code>NSURLSession</code> …. 等等.</li>
<li>context 一般没有硬件参与的, eg: <code>CGGraphicContext</code>、<code>EAGLContext</code> 绘图上下文, 以及自定义转场里面的那个 Context 就不详细列举了.</li>
</ul>
<p>回到正题, 如上所说 我们要想实现一个</p>
<p><code>ARSCNView</code> 与<code>ARCamera</code> 之间相互协同配合<br>(<code>ARSCNView</code> 与<code>ARCamera</code> 两者之间没有直接关系)</p>
<ul>
<li><strong>ARSCNView —–&gt; ARCamera 或</strong>   </li>
<li><strong>ARSCNView &lt;—– ARCamera</strong></li>
</ul>
<blockquote>
<p><strong>ARSCNView里有个 ARFrame(属性 成员变量), ARFrame 里面包含 ARCamera(属性 成员变量)</strong></p>
</blockquote>
<p>就需要一个沟通的桥梁 进行调度配合协作完成 图像捕捉到视觉渲染的过程<strong>这个桥梁 就是 <code>ARSession</code></strong></p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/ARKit/ARKit_session.png" alt=""></p>
<p>如果想运行一个 <code>ARSession</code>会话,必须指定一个叫<code>会话追踪配置</code>的对象<code>ARConfiguration</code>,<code>ARConfiguration</code>主要目的负责追踪相机在3D 世界中的位置以及一些特征场景的捕捉,<strong>比如捕捉平面</strong>,这个类 作用很大</p>
<ul>
<li><code>ARConfiguration</code>是个父类,为了更好实现增强现实的效果,苹果建议我们使用派生自它的子类<code>ARWorldTrackingConfiguration</code>(这个类仅支持<code>A9</code>芯片之后的机型). </li>
</ul>
<p>注意: <em>原来是这个<code>ARWorldTrackingSessionConfiguration</code>现在被弃用了.</em></p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/ARKit/ARWorldTrackingConfiguration.png" alt=""></p>
<h4 id="ARFrame-与-ARWorldTrackingConfiguration"><a href="#ARFrame-与-ARWorldTrackingConfiguration" class="headerlink" title="ARFrame 与 ARWorldTrackingConfiguration"></a>ARFrame 与 ARWorldTrackingConfiguration</h4><p><code>ARSession</code> 搭建沟通的桥梁的参与者有两个</p>
<ol>
<li>ARFrame</li>
<li>ARWorldTrackingConfiguration</li>
</ol>
<p><code>ARWorldTrackingConfiguration</code> （3D世界追踪配置) 的作用是跟踪设备的<strong>方向、位置、检测摄像头捕捉到的内容</strong>.</p>
<p>它的内部实现了一系列庞大的算法和调用iPhone 上必要的传感器来检测手机的 <strong>移动、旋转、平移</strong>(六轴位置方向变化) </p>
<p>当<code>ARWorldTrackingConfiguration</code>计算出相机在3D 世界中的位置时,会把这个<strong>位置数据</strong> 交个<code>ARSession</code>去管理, 而相机的<strong>位置数据</strong>对应的类就是<code>ARFrame</code> </p>
<blockquote>
<p><code>ARSession</code>类一个属性叫<code>currentFrame</code> 就是 ARFrame 的实例变量</p>
</blockquote>
<p><code>ARCamera</code>只负责捕捉图像,不参与数据的处理. 它属于3D 场景中的一个环节,<br>每个3D Scene 都会有一个 Camera, 这个 Camera 决定了我们看到物体的视野.</p>
<p>这三者关系如下:</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/ARKit/relationship_ARFrame.png" alt=""></p>
<blockquote>
<p><code>ARFrame</code>里面有我们需要的<code>CVPixelBufferRef</code>(capturedImage) 和 <code>ARCamera</code> 也就是我们需要的图像的原始数据</p>
</blockquote>
<p><strong>ARCamera在3D世界的位置</strong></p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/ARKit/coordinate.png" alt=""></p>
<h3 id="ARKit-工作流程"><a href="#ARKit-工作流程" class="headerlink" title="ARKit 工作流程"></a>ARKit 工作流程</h3><p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/ARKit/ar_workflow.png" alt=""> 图片来自:<a href="http://www.jianshu.com/p/0492c7122d2f" target="_blank" rel="external">坤小</a></p>
<ol>
<li><code>ARSCNView</code>加载场景<code>SCNScene</code></li>
<li><code>SCNScene</code> 启动相机<code>ARCamera</code>开始捕捉场景</li>
<li><code>ARCamera</code> 捕捉场景后 <code>ARSCNView</code>开始将场景数据给<code>ARSession</code></li>
<li><code>ARSession</code> 通过<code>ARConfiguration</code>(或者它的派生子类) 实现场景的追踪并返回一个<code>ARFrame</code>.</li>
<li>给<code>ARSCNView</code>的 scene 添加一个子节点(3D物体模型)</li>
</ol>
<blockquote>
<p><code>ARConfiguration</code> 捕捉相机的位置的目的是<strong>能够在添加的3D 物体模型的时候计算出3D 物体模型相对于相机的真实矩阵位置</strong></p>
</blockquote>
<p>注意:<strong>在3D坐标系统中</strong></p>
<ul>
<li>世界坐标系 相当于 UIView 的 <code>Frame</code></li>
<li>本地坐标系 相当于 UIView 的 <code>bounds</code></li>
</ul>
<blockquote>
<p>坐标系的转换在 ARKit 中是比较难部分 </p>
</blockquote>
<h2 id="ARKit简单代码实现"><a href="#ARKit简单代码实现" class="headerlink" title="ARKit简单代码实现"></a>ARKit简单代码实现</h2><p><a href="https://github.com/sunyazhou13/ARDemos/blob/master/ARDemo1.zip" target="_blank" rel="external">代码ARKitDemo1</a></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)touchesBegan:(<span class="built_in">NSSet</span>&lt;<span class="built_in">UITouch</span> *&gt; *)touches withEvent:(<span class="built_in">UIEvent</span> *)event&#123;</div><div class="line">    <span class="comment">//1. 使用场景加载 scn 文件</span></div><div class="line">    </div><div class="line">    <span class="built_in">SCNScene</span> *scene = [<span class="built_in">SCNScene</span> sceneNamed:<span class="string">@"Models.scnassets/vase/vase.scn"</span>];</div><div class="line">    <span class="built_in">SCNNode</span> *plantNode = scene.rootNode.childNodes[<span class="number">0</span>];</div><div class="line">    </div><div class="line">    <span class="comment">//2. 调整位置 将节点添加到当前屏幕中</span></div><div class="line">    plantNode.position = <span class="built_in">SCNVector3Make</span>(<span class="number">0</span>, <span class="number">-1</span>, <span class="number">-1</span>);</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="comment">//3. 将飞机节点添加到当前屏幕</span></div><div class="line">    [<span class="keyword">self</span>.arSceneView.scene.rootNode addChildNode:plantNode];</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里需要补充一点 </p>
<blockquote>
<p>我们先抛开<code>ARSCNView</code>和 <code>UIViewController</code> 以及<code>UIView</code>的关系</p>
</blockquote>
<p><strong>我们只说一下<code>ARSCNView</code>,<code>scene</code>,<code>node</code>啥关系</strong></p>
<p><code>ARSCNView</code> 是个集成自 UIView 的视图</p>
<p><code>ARSCNView</code> 有个属性(成员变量)叫<code>scene</code> 这就相当于 VC</p>
<p><code>scene</code>有 <code>rootNode</code> 相当于 VC 有<code>self.view</code></p>
<p><strong>可以把<code>scene</code>理解为 VC</strong><br><strong>把<code>rootNode</code>理解为 <code>self.view</code></strong></p>
<p>我们知道 self.view 可以添加 子 view 通过 </p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">[<span class="keyword">self</span>.view addSubview:xxx];</div></pre></td></tr></table></figure>
<p> 那么 node 也就有了相应的方法</p>
 <figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">[scene.rootNode addChildNode:xxxNode];</div></pre></td></tr></table></figure>
<blockquote>
<p>注意:<em><strong>所有的场景有且只有一个根节点，其他所有节点都是根节点的子节点</strong></em></p>
</blockquote>
<h2 id="ARKit框架所有API介绍"><a href="#ARKit框架所有API介绍" class="headerlink" title="ARKit框架所有API介绍"></a>ARKit框架所有API介绍</h2><p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/ARKit/ARDefines%402x.png" alt=""></p>
<p>还是拿上边这张图说一下 这里我们诉求剖析所有 API 从而达到大家都了解 ARKit的内容</p>
<h4 id="ARAnchor"><a href="#ARAnchor" class="headerlink" title="ARAnchor"></a>ARAnchor</h4><p><code>ARAnchor</code>表示一个物体在3D 空间的位置和方向(ARAnchor 俗称 3D 锚点, 类似 UIKit 框架中 CALayer的 Anchor)</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ARAnchor</span> : <span class="title">NSObject</span> &lt;<span class="title">NSCopying</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">//锚点唯一标识</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">NSUUID</span> *identifier;</div><div class="line"></div><div class="line"><span class="comment">//锚点的旋转变换矩阵，定义了锚点的旋转、位置、缩放。是一个4x4的矩阵</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) matrix_float4x4 transform;</div><div class="line"></div><div class="line"><span class="comment">//构造方法,一般我们无需构造。因为添加一个3D物体时ARKit会有代理告知我们物体的锚点</span></div><div class="line">- (<span class="keyword">instancetype</span>)initWithTransform:(matrix_float4x4)transform;</div></pre></td></tr></table></figure>
<blockquote>
<p><code>ARFrame</code>表示的也是物体的位置和方向,但是<code>ARFrame</code>通常标识的是 AR 相机的<strong>位置</strong>和<strong>方向</strong>以及追踪相机的时间戳,还有捕捉到相机的图片帧(CVPixelBufferRef)</p>
</blockquote>
<h4 id="ARError"><a href="#ARError" class="headerlink" title="ARError"></a>ARError</h4><p><code>ARError</code> 错误描述类, eg: 设备不支持, 常驻后台的会话中断…等</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">FOUNDATION_EXTERN <span class="built_in">NSString</span> *<span class="keyword">const</span> ARErrorDomain;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ERROR_ENUM</span>(ARErrorDomain, ARErrorCode) &#123;</div><div class="line">    <span class="comment">/** Unsupported session configuration. */</span></div><div class="line">    ARErrorCodeUnsupportedConfiguration   = <span class="number">100</span>,</div><div class="line">    </div><div class="line">    <span class="comment">/** A sensor required to run the session is not available. */</span></div><div class="line">    ARErrorCodeSensorUnavailable          = <span class="number">101</span>,</div><div class="line">    </div><div class="line">    <span class="comment">/** A sensor failed to provide the required input. */</span></div><div class="line">    ARErrorCodeSensorFailed               = <span class="number">102</span>,</div><div class="line">    </div><div class="line">    <span class="comment">/** App does not have permission to use the camera. The user may change this in settings. */</span></div><div class="line">    ARErrorCodeCameraUnauthorized         = <span class="number">103</span>,</div><div class="line">    </div><div class="line">    <span class="comment">/** World tracking has encountered a fatal error. */</span></div><div class="line">    ARErrorCodeWorldTrackingFailed        = <span class="number">200</span>,</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h4 id="ARFrame"><a href="#ARFrame" class="headerlink" title="ARFrame"></a>ARFrame</h4><p><code>ARFrame</code> 主要是追踪当前的状态 eg: 图片帧, 时间戳,位置方向等参数.</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ARFrame</span> : <span class="title">NSObject</span> &lt;<span class="title">NSCopying</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">//时间戳</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">NSTimeInterval</span> timestamp;</div><div class="line"></div><div class="line"><span class="comment">//图片帧</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) CVPixelBufferRef capturedImage;</div><div class="line"></div><div class="line"><span class="comment">//相机（表示这个ARFrame是哪一个相机的，iPhone7plus有两个摄像机）</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>, <span class="keyword">readonly</span>) ARCamera *camera;</div><div class="line"></div><div class="line"><span class="comment">//返回当前相机捕捉到的锚点数据（当一个3D虚拟模型加入到ARKit中时，锚点值得就是这个模型在AR中的位置）</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>, <span class="keyword">readonly</span>) <span class="built_in">NSArray</span>&lt;ARAnchor *&gt; *anchors;</div><div class="line"></div><div class="line"><span class="comment">//灯光 指的是灯光强度 一般是0-2000，系统默认1000</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>, <span class="keyword">nullable</span>, <span class="keyword">readonly</span>) ARLightEstimate *lightEstimate;</div><div class="line"></div><div class="line"><span class="comment">//特征点（应该是捕捉平地或者人脸的，比较苹果有自带的人脸识别功能） 仅限 world 的追踪配置可用</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>, <span class="keyword">nullable</span>, <span class="keyword">readonly</span>) ARPointCloud *rawFeaturePoints;</div><div class="line"></div><div class="line"><span class="comment">//根据2D坐标点搜索3D模型，这个方法通常用于，当我们在手机屏幕点击某一个点的时候，可以捕捉到这一个点所在的3D模型的位置，至于为什么是一个数组非常好理解。手机屏幕一个是长方形，这是一个二维空间。而相机捕捉到的是一个由这个二维空间射出去的长方体，我们点击屏幕一个点可以理解为在这个长方体的边缘射出一条线，这一条线上可能会有多个3D物体模型</span></div><div class="line">point：<span class="number">2</span>D坐标点（手机屏幕某一点）</div><div class="line">ARHitTestResultType：捕捉类型  点还是面</div><div class="line">(<span class="built_in">NSArray</span>&lt;ARHitTestResult *&gt; *)：追踪结果数组</div><div class="line"></div><div class="line">- (<span class="built_in">NSArray</span>&lt;ARHitTestResult *&gt; *)hitTest:(<span class="built_in">CGPoint</span>)point types:(ARHitTestResultType)types;</div><div class="line"></div><div class="line"><span class="comment">//相机窗口的的坐标变换（可用于相机横竖屏的旋转适配）</span></div><div class="line">-(<span class="built_in">CGAffineTransform</span>)displayTransformWithViewportSize:(<span class="built_in">CGSize</span>)viewportSize orientation:(<span class="built_in">UIInterfaceOrientation</span>)orientation;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>这里说一下一个技巧 如果在一个类里面我们不想提供<code>init:</code>方法的话 该如何写？</p>
<p>我们都知道<code>OC</code>里面所有的<code>class</code>都是继承 自<code>NSObject</code>,<code>NSObject</code>里面有<code>init:</code>、<code>dealloc:</code>等方法.</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ARAnchor</span> (<span class="title">Unavailable</span>)</span></div><div class="line"></div><div class="line">- (<span class="keyword">instancetype</span>)init <span class="built_in">NS_UNAVAILABLE</span>;</div><div class="line">+ (<span class="keyword">instancetype</span>)new <span class="built_in">NS_UNAVAILABLE</span>;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<blockquote>
<p>这里用到的技巧就是 写个 Category 并复写该方法后边标注为<code>NS_UNAVAILABLE</code></p>
</blockquote>
<h4 id="ARHitTestResult"><a href="#ARHitTestResult" class="headerlink" title="ARHitTestResult"></a>ARHitTestResult</h4><p><code>ARHitTestResult</code> 点击回调结果,这个类主要用于AR 技术中 <strong>现实世界与3D 场景中虚拟物体的交互.</strong> eg:在相机中移动、拖拽3D 虚拟物体,都可以通过这个类来获取 ARKit 所捕捉的结果.</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="built_in">NS_OPTIONS</span>(<span class="built_in">NSUInteger</span>, ARHitTestResultType) &#123;</div><div class="line">    <span class="comment">//点</span></div><div class="line">    ARHitTestResultTypeFeaturePoint              = (<span class="number">1</span> &lt;&lt; <span class="number">0</span>),</div><div class="line">	<span class="comment">//水平面 y为0.    </span></div><div class="line">    ARHitTestResultTypeEstimatedHorizontalPlane  = (<span class="number">1</span> &lt;&lt; <span class="number">1</span>),</div><div class="line">    </div><div class="line">    <span class="comment">//已结存在的平面</span></div><div class="line">    ARHitTestResultTypeExistingPlane             = (<span class="number">1</span> &lt;&lt; <span class="number">3</span>),</div><div class="line">    </div><div class="line">    <span class="comment">//已结存在的锚点和平面</span></div><div class="line">    ARHitTestResultTypeExistingPlaneUsingExtent  = (<span class="number">1</span> &lt;&lt; <span class="number">4</span>),</div><div class="line">&#125; <span class="built_in">NS_SWIFT_NAME</span>(ARHitTestResult.ResultType);</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ARHitTestResult</span> : <span class="title">NSObject</span></span></div><div class="line"></div><div class="line"><span class="comment">//捕捉类型</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) ARHitTestResultType type;</div><div class="line"></div><div class="line"><span class="comment">//3D虚拟物体与相机的距离（单位：米）</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">CGFloat</span> distance;</div><div class="line"></div><div class="line"><span class="comment">//本地坐标矩阵（世界坐标指的是相机为场景原点的坐标，而每一个3D物体自身有一个场景，本地坐标就是相对于这个场景的坐标）类似于frame和bounds的区别</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) matrix_float4x4 localTransform;</div><div class="line"></div><div class="line"><span class="comment">//世界坐标矩阵</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) matrix_float4x4 worldTransform;</div><div class="line"></div><div class="line"><span class="comment">//锚点（3D虚拟物体，在虚拟世界有一个位置，这个位置参数是SceneKit中的SCNVector3：三维矢量），而锚点anchor是这个物体在AR现实场景中的位置，是一个4x4的矩阵</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>, <span class="keyword">nullable</span>, <span class="keyword">readonly</span>) ARAnchor *anchor;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>这里需要了解一下:</p>
<ul>
<li><p><strong>matrix_float4x4</strong> <strong>worldTransform</strong>; 世界坐标系 <strong>以相机为场景的原点开始(0,0,0,0)</strong> 也就是以相机为圆心向外,参照这个原点 3D 物体的位置信息. 这就相当于2D 的 UIView 的 frame (绝对坐标)</p>
</li>
<li><p><strong>matrix_float4x4</strong>  <strong>localTransform</strong>; 本地坐标系 以一个 node 为父节点为参照,相当于距离这个父场景的坐标.</p>
</li>
<li><p><strong>matrix_float4x4</strong> <a href="http://www.opengl-tutorial.org/cn/beginners-tutorials/tutorial-3-matrices/" target="_blank" rel="external">4x4 矩阵请参考这里</a> </p>
</li>
</ul>
<h4 id="ARLightEstimate"><a href="#ARLightEstimate" class="headerlink" title="ARLightEstimate"></a>ARLightEstimate</h4><p><code>ARLightEstimate</code></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ARLightEstimate</span> : <span class="title">NSObject</span></span></div><div class="line"></div><div class="line"><span class="comment">//环境灯光强度  范围0-2000 默认1000</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">CGFloat</span> ambientIntensity;</div><div class="line"></div><div class="line"><span class="comment">//环境光温度</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">CGFloat</span> ambientColorTemperature;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h4 id="ARPlaneAnchor"><a href="#ARPlaneAnchor" class="headerlink" title="ARPlaneAnchor"></a>ARPlaneAnchor</h4><p><code>ARPlaneAnchor</code>派生自<code>ARAnchor</code>的子类, 平面锚点.<code>ARKit</code>能自动识别平地,并且添加一个锚点到场景中,当然要想看到真实世界中的平地效果需要我们自己使用 <code>SCNNode</code>渲染一个锚点.</p>
<blockquote>
<p>锚点只是一个位置</p>
</blockquote>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ARPlaneAnchor</span> : <span class="title">ARAnchor</span></span></div><div class="line"></div><div class="line"><span class="comment">//平地类型，目前只有一个，就是水平面 </span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) ARPlaneAnchorAlignment alignment;</div><div class="line"></div><div class="line"><span class="comment">//3轴矢量结构体，表示平地的中心点  x/y/z</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) vector_float3 center;</div><div class="line"></div><div class="line"><span class="comment">//3轴矢量结构体，表示平地的大小（宽度和高度）  x/y/z</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) vector_float3 extent;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h4 id="ARPointCloud"><a href="#ARPointCloud" class="headerlink" title="ARPointCloud"></a>ARPointCloud</h4><p><code>ARPointCloud</code> 点状渲染  </p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ARPointCloud</span> : <span class="title">NSObject</span> &lt;<span class="title">NSCopying</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">//点数</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">NSUInteger</span> count;</div><div class="line"></div><div class="line"><span class="comment">//每一个点的位置的集合（结构体带*表示的是结构体数组）</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="keyword">const</span> vector_float3 *points;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h4 id="ARConfiguration"><a href="#ARConfiguration" class="headerlink" title="ARConfiguration"></a>ARConfiguration</h4><p><code>ARConfiguration</code> 会话追踪配置</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//追踪对其方式</span></div><div class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSInteger</span>, ARWorldAlignment) &#123;</div><div class="line">    <span class="comment">/* 相机位置 vector (0, -1, 0) /</span></div><div class="line">    ARWorldAlignmentGravity,</div><div class="line">    /* 相机位置及方向. vector (0, -1, 0)    heading ：(0, 0, -1) */</div><div class="line">    ARWorldAlignmentGravityAndHeading,</div><div class="line">    <span class="comment">/* 相机方向. */</span></div><div class="line">    ARWorldAlignmentCamera</div><div class="line">&#125; ;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="built_in">NS_OPTIONS</span>(<span class="built_in">NSUInteger</span>, ARPlaneDetection) &#123;</div><div class="line">    ARPlaneDetectionNone        = <span class="number">0</span>,</div><div class="line">    ARPlaneDetectionHorizontal  = (<span class="number">1</span> &lt;&lt; <span class="number">0</span>), <span class="comment">//探测平面是水平横向</span></div><div class="line">&#125; ;</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ARConfiguration</span> : <span class="title">NSObject</span> &lt;<span class="title">NSCopying</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">//当前设备是否支持，一般A9芯片以下设备不支持</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">class</span>, <span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">BOOL</span> isSupported;</div><div class="line"></div><div class="line"><span class="comment">//世界坐标的对齐方式 </span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readwrite</span>) ARWorldAlignment worldAlignment;</div><div class="line"></div><div class="line"><span class="comment">//是否需要自适应灯光效果，默认是YES</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readwrite</span>, <span class="keyword">getter</span>=isLightEstimationEnabled) <span class="built_in">BOOL</span> lightEstimationEnabled;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="comment">//世界会话追踪配置，苹果建议我们使用这个类，这个子类只有一个属性，也就是可以帮助我们追踪相机捕捉到的平地</span></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ARWorldTrackingSessionConfiguration</span> : <span class="title">ARConfiguration</span></span></div><div class="line"></div><div class="line"><span class="comment">//探测的类型</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readwrite</span>) ARPlaneDetection planeDetection;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<blockquote>
<p>会话配置的恩子类:ARWorldTrackingSessionConfiguration，它们在同一个API文件中</p>
</blockquote>
<h4 id="ARSKView"><a href="#ARSKView" class="headerlink" title="ARSKView"></a>ARSKView</h4><p><code>ARSKView</code>是2D 的 AR 视图 这个基本就不需要讲了 和 <code>ARSCNView</code>一样,就不重复介绍了</p>
<h4 id="ARScnView-重点介绍"><a href="#ARScnView-重点介绍" class="headerlink" title="ARScnView 重点介绍"></a>ARScnView 重点介绍</h4><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ARSCNView</span> : <span class="title">SCNView</span></span></div><div class="line"></div><div class="line"><span class="comment">//代理</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>, <span class="keyword">nullable</span>) <span class="keyword">id</span>&lt;ARSCNViewDelegate&gt; delegate;</div><div class="line"></div><div class="line"><span class="comment">//AR 会话</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) ARSession *session;</div><div class="line"></div><div class="line"><span class="comment">//场景</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">SCNScene</span> *scene;</div><div class="line"></div><div class="line"><span class="comment">//是否自动适应灯光</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="built_in">BOOL</span> automaticallyUpdatesLighting;</div><div class="line"></div><div class="line"><span class="comment">//返回对应节点的锚点，节点是一个3D虚拟物体，它的坐标是虚拟场景中的坐标，而锚点ARAnchor是ARKit中现实世界的坐标</span></div><div class="line">- (<span class="keyword">nullable</span> ARAnchor *)anchorForNode:(<span class="built_in">SCNNode</span> *)node;</div><div class="line"></div><div class="line"><span class="comment">//返回对应锚点的物体</span></div><div class="line">- (<span class="keyword">nullable</span> <span class="built_in">SCNNode</span> *)nodeForAnchor:(ARAnchor *)anchor;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"></div><div class="line"></div><div class="line"> */</div><div class="line">- (<span class="built_in">NSArray</span>&lt;ARHitTestResult *&gt; *)hitTest:(<span class="built_in">CGPoint</span>)point types:(ARHitTestResultType)types;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<blockquote>
<p>根据2D坐标点搜索3D模型，这个方法通常用于，当我们在手机屏幕点击某一个点的时候，可以捕捉到这一个点所在的3D模型的位置，至于为什么是一个数组非常好理解。手机屏幕一个是长方形，这是一个二维空间。而相机捕捉到的是一个由这个二维空间射出去的长方体，我们点击屏幕一个点可以理解为在这个长方体的边缘射出一条线，这一条线上可能会有多个3D物体模型,point：2D坐标点（手机屏幕某一点）<br>ARHitTestResultType：捕捉类型  点还是面<br>(NSArray<arhittestresult *=""> *)：追踪结果数组  详情见本章节ARHitTestResult类介绍<br>数组的结果排序是由近到远</arhittestresult></p>
</blockquote>
<p>代理方法</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//代理的内部实现了SCNSceneRendererDelegate：scenekit代理 和ARSessionObserver：ARSession监听（KVO机制）</span></div><div class="line"><span class="meta">#pragma mark - ARSCNViewDelegate</span></div><div class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">ARSCNViewDelegate</span> &lt;<span class="title">SCNSceneRendererDelegate</span>, <span class="title">ARSessionObserver</span>&gt;</span></div><div class="line"><span class="keyword">@optional</span></div><div class="line"></div><div class="line"><span class="comment">//自定义节点的锚点</span></div><div class="line">- (<span class="keyword">nullable</span> <span class="built_in">SCNNode</span> *)renderer:(<span class="keyword">id</span> &lt;<span class="built_in">SCNSceneRenderer</span>&gt;)renderer nodeForAnchor:(ARAnchor *)anchor;</div><div class="line"></div><div class="line"><span class="comment">//当添加节点是会调用，我们可以通过这个代理方法得知我们添加一个虚拟物体到AR场景下的锚点（AR现实世界中的坐标）</span></div><div class="line">- (<span class="keyword">void</span>)renderer:(<span class="keyword">id</span> &lt;<span class="built_in">SCNSceneRenderer</span>&gt;)renderer didAddNode:(<span class="built_in">SCNNode</span> *)node forAnchor:(ARAnchor *)anchor;</div><div class="line"></div><div class="line"><span class="comment">//将要刷新节点</span></div><div class="line">- (<span class="keyword">void</span>)renderer:(<span class="keyword">id</span> &lt;<span class="built_in">SCNSceneRenderer</span>&gt;)renderer willUpdateNode:(<span class="built_in">SCNNode</span> *)node forAnchor:(ARAnchor *)anchor;</div><div class="line"></div><div class="line"><span class="comment">//已经刷新节点</span></div><div class="line">- (<span class="keyword">void</span>)renderer:(<span class="keyword">id</span> &lt;<span class="built_in">SCNSceneRenderer</span>&gt;)renderer didUpdateNode:(<span class="built_in">SCNNode</span> *)node forAnchor:(ARAnchor *)anchor;</div><div class="line"></div><div class="line"><span class="comment">//移除节点</span></div><div class="line">- (<span class="keyword">void</span>)renderer:(<span class="keyword">id</span> &lt;<span class="built_in">SCNSceneRenderer</span>&gt;)renderer didRemoveNode:(<span class="built_in">SCNNode</span> *)node forAnchor:(ARAnchor *)anchor;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h4 id="ARSesson-重点介绍"><a href="#ARSesson-重点介绍" class="headerlink" title="ARSesson 重点介绍"></a>ARSesson 重点介绍</h4><p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/ARKit/session_brige002.png" alt=""></p>
<p><code>ARSesson</code> 是一个连接底层与 AR 视图之间的桥梁, <code>ARSCNView</code>里的所有方法都是又<code>ARSession</code>提供的</p>
<p><strong><code>ARSesson</code>获取相机位置数据主要由两种方式</strong></p>
<ul>
<li>push 通过实现 Session 的代理<code>session:didUpdateFrame:</code>告知用户</li>
<li>pull 用户想要可主动去取 <code>ARSession</code>的<code>currentFrame</code>属性</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ARSession</span> : <span class="title">NSObject</span></span></div><div class="line"></div><div class="line"><span class="comment">//代理</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) <span class="keyword">id</span> &lt;ARSessionDelegate&gt; delegate;</div><div class="line"></div><div class="line"><span class="comment">//指定代理执行的线程（主线程不会有延迟，子线程会有延迟），不指定的话默认主线程</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>, <span class="keyword">nullable</span>) <span class="built_in">dispatch_queue_t</span> delegateQueue;</div><div class="line"></div><div class="line"><span class="comment">//相机当前的位置（是由会话追踪配置计算出来的）</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>, <span class="keyword">nullable</span>, <span class="keyword">readonly</span>) ARFrame *currentFrame;</div><div class="line"></div><div class="line"><span class="comment">//会话配置</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>, <span class="keyword">nullable</span>, <span class="keyword">readonly</span>) ARConfiguration *configuration;</div><div class="line"></div><div class="line"><span class="comment">//运行会话（这行代码就是开启AR的关键所在）</span></div><div class="line">- (<span class="keyword">void</span>)runWithConfiguration:(ARConfiguration *)configuration <span class="built_in">NS_SWIFT_UNAVAILABLE</span>(<span class="string">"Use run(_:options:) instead"</span>);</div><div class="line"></div><div class="line"><span class="comment">//运行会话，只是多了一个参数ARSessionRunOptions：作用就是会话断开重连时的行为。</span></div><div class="line">- (<span class="keyword">void</span>)runWithConfiguration:(ARConfiguration *)configuration options:(ARSessionRunOptions)options <span class="built_in">NS_SWIFT_NAME</span>(run(_:options:));</div><div class="line"></div><div class="line"><span class="comment">//暂停会话</span></div><div class="line">- (<span class="keyword">void</span>)pause;</div><div class="line"></div><div class="line"><span class="comment">//添加锚点</span></div><div class="line">- (<span class="keyword">void</span>)addAnchor:(ARAnchor *)anchor <span class="built_in">NS_SWIFT_NAME</span>(add(anchor:));</div><div class="line"></div><div class="line"><span class="comment">//移除锚点</span></div><div class="line">- (<span class="keyword">void</span>)removeAnchor:(ARAnchor *)anchor <span class="built_in">NS_SWIFT_NAME</span>(remove(anchor:));</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<blockquote>
<p>运行会话<strong>runWithConfiguration:options:</strong> options 是个<code>ARSessionRunOptions</code>枚举<br>这个方法的作用就是会话断开重连时的行为</p>
</blockquote>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="built_in">NS_OPTIONS</span>(<span class="built_in">NSUInteger</span>, ARSessionRunOptions) &#123;</div><div class="line">	 <span class="comment">//表示重置追踪</span></div><div class="line">    ARSessionRunOptionResetTracking           = (<span class="number">1</span> &lt;&lt; <span class="number">0</span>),</div><div class="line">    </div><div class="line">    <span class="comment">//移除现有锚点</span></div><div class="line">    ARSessionRunOptionRemoveExistingAnchors   = (<span class="number">1</span> &lt;&lt; <span class="number">1</span>)</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>下面来看下<code>ARSession</code>的代理</p>
<p><code>ARSession</code> 分 两种</p>
<ul>
<li>KVO 观察者 ARSessionObserver</li>
<li>delegate 委托代理 ARSessionDelegate</li>
</ul>
<blockquote>
<p>看到这我也很奇怪这个玩法 </p>
</blockquote>
<p>ARSessionObserver如下</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">ARSessionObserver</span> &lt;<span class="title">NSObject</span>&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">@optional</span></div><div class="line"></div><div class="line"><span class="comment">//session 失败</span></div><div class="line">- (<span class="keyword">void</span>)session:(ARSession *)session didFailWithError:(<span class="built_in">NSError</span> *)error;</div><div class="line"></div><div class="line"><span class="comment">//相机追踪状态发生改变</span></div><div class="line">- (<span class="keyword">void</span>)session:(ARSession *)session cameraDidChangeTrackingState:(ARCamera *)camera;</div><div class="line"></div><div class="line"><span class="comment">//session 意外断开（如果开启ARSession之后，APP退到后台就有可能导致会话断开）</span></div><div class="line">- (<span class="keyword">void</span>)sessionWasInterrupted:(ARSession *)session;</div><div class="line"></div><div class="line"><span class="comment">//session 会话断开后 恢复(短时间退到后台再进入APP会自动恢复）</span></div><div class="line">- (<span class="keyword">void</span>)sessionInterruptionEnded:(ARSession *)session;</div><div class="line"></div><div class="line"><span class="comment">//session 已经输出了一个 音频数据 `CMSampleBufferRef` </span></div><div class="line">- (<span class="keyword">void</span>)session:(ARSession *)session didOutputAudioSampleBuffer:(<span class="built_in">CMSampleBufferRef</span>)audioSampleBuffer;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>ARSessionDelegate 如下</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">相机位置发生改变 就是相机的位置有变动</div><div class="line">- (<span class="keyword">void</span>)session:(ARSession *)session didUpdateFrame:(ARFrame *)frame;</div><div class="line"></div><div class="line"><span class="comment">// 已添加锚点</span></div><div class="line">- (<span class="keyword">void</span>)session:(ARSession *)session didAddAnchors:(<span class="built_in">NSArray</span>&lt;ARAnchor*&gt;*)anchors;</div><div class="line"></div><div class="line"><span class="comment">//刷新锚点</span></div><div class="line">- (<span class="keyword">void</span>)session:(ARSession *)session didUpdateAnchors:(<span class="built_in">NSArray</span>&lt;ARAnchor*&gt;*)anchors;</div><div class="line"></div><div class="line"><span class="comment">//移除锚点</span></div><div class="line">- (<span class="keyword">void</span>)session:(ARSession *)session didRemoveAnchors:(<span class="built_in">NSArray</span>&lt;ARAnchor*&gt;*)anchors;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>以上是 <code>ARSession</code></p>
<h4 id="ARCamera-重点介绍"><a href="#ARCamera-重点介绍" class="headerlink" title="ARCamera 重点介绍"></a>ARCamera 重点介绍</h4><p><code>ARCamera</code>是个相机, 它是链接虚拟场景和现实场景的之间的枢纽. </p>
<p>在<code>ARKit</code>中,它是捕捉现实图像的相机,在 SceneKit 中它是3D 虚拟世界中的相机</p>
<blockquote>
<p>游戏里一般第一人称3D 游戏, 英雄就是一个3D 相机, 我们电脑屏幕看到的画面就是这个相机捕捉到的画面</p>
</blockquote>
<p>一般情况下我们不需要自己去创建一个<code>ARCamera</code>实例, 因为每次初始化一个 <code>ARSCNView</code>的时候,它会默认为我们创建一个<code>ARCamera</code>实例,而且这个相机就是摄像头的位置,同时也是3D 世界中的原点所在 <strong>(0,0,0)</strong> </p>
<p>至于<code>ARCamera</code> 的 api 一般我们也不用 care,<code>ARKit</code>默认会配置好.</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ARCamera</span> : <span class="title">NSObject</span> &lt;<span class="title">NSCopying</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">//4x4矩阵表示相机位置 跟锚点类似</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) matrix_float4x4 transform;</div><div class="line"></div><div class="line"><span class="comment">//相机方向（旋转）的矢量欧拉角 分别是x/y/z</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) vector_float3 eulerAngles;</div><div class="line"></div><div class="line"><span class="comment">//相机追踪状态（在下方会有枚举值介绍）</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) ARTrackingState trackingState <span class="built_in">NS_REFINED_FOR_SWIFT</span>;</div><div class="line"></div><div class="line"><span class="comment">//追踪运动类型</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) ARTrackingStateReason trackingStateReason <span class="built_in">NS_REFINED_FOR_SWIFT</span>;</div><div class="line"></div><div class="line"><span class="comment">//相机曲率 3x3矩阵  </span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) matrix_float3x3 intrinsics;</div><div class="line"></div><div class="line"><span class="comment">//摄像头分辨率</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">CGSize</span> imageResolution;</div><div class="line"></div><div class="line"><span class="comment">//投影矩阵</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) matrix_float4x4 projectionMatrix;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//创建相机 使用x,y,z 位置 </span></div><div class="line">- (<span class="built_in">CGPoint</span>)projectPoint:(vector_float3)point orientation:(<span class="built_in">UIInterfaceOrientation</span>)orientation viewportSize:(<span class="built_in">CGSize</span>)viewportSize;</div><div class="line"> </div><div class="line"><span class="comment">//创建相机投影矩阵 近面距离  远面距离</span></div><div class="line">- (matrix_float4x4)projectionMatrixForOrientation:(<span class="built_in">UIInterfaceOrientation</span>)orientation viewportSize:(<span class="built_in">CGSize</span>)viewportSize zNear:(<span class="built_in">CGFloat</span>)zNear zFar:(<span class="built_in">CGFloat</span>)zFar;</div><div class="line"></div><div class="line"><span class="comment">//创建相机投影矩阵</span></div><div class="line">- (matrix_float4x4)viewMatrixForOrientation:(<span class="built_in">UIInterfaceOrientation</span>)orientation;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<blockquote>
<p>上边提到的远面和近面距离 <img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/ARKit/distance.png" alt="">  可以参考这张图 摘自<a href="http://www.jianshu.com/p/bc151ff65cef" target="_blank" rel="external">投影变换</a><br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/ARKit/distance2.png" alt=""><br> 这属于 OpenGL的学习范畴.有兴趣可以学习一下</p>
</blockquote>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//相机追踪状态枚举</span></div><div class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSInteger</span>, ARTrackingState) &#123;</div><div class="line">	 <span class="comment">/* 不被允许 */</span></div><div class="line">    ARTrackingStateNotAvailable,</div><div class="line">    </div><div class="line">    <span class="comment">/* 最小 */</span></div><div class="line">    ARTrackingStateLimited,</div><div class="line">    </div><div class="line">    <span class="comment">/* 正常. */</span></div><div class="line">    ARTrackingStateNormal,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">//追踪运动类型</span></div><div class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSInteger</span>, ARTrackingStateReason) &#123;</div><div class="line">    <span class="comment">/* 无. */</span></div><div class="line">    ARTrackingStateReasonNone,</div><div class="line">    </div><div class="line">    <span class="comment">//初始化</span></div><div class="line">    ARTrackingStateReasonInitializing,</div><div class="line">    </div><div class="line">    <span class="comment">/* 运动. */</span></div><div class="line">    ARTrackingStateReasonExcessiveMotion,</div><div class="line">    </div><div class="line">    <span class="comment">/** 脸部捕捉. */</span></div><div class="line">    ARTrackingStateReasonInsufficientFeatures,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>这里面涉及到的 一个叫做<code>eulerAngles</code><a href="https://zh.wikipedia.org/wiki/%E6%AC%A7%E6%8B%89%E8%A7%92" target="_blank" rel="external">欧拉角</a><br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/ARKit/eulerAngles.png" alt=""><br>这个欧拉角是解决3D物体的 旋转矩阵 等取向问题, 就有有一个平面 是静止不动的 一个平面是动的 根据圆心距离两个平面相交的 角度或者 sin cos 来解决一些夹角标记、旋转矩阵等问题 具体可以参考维基百科的解释 (我研究了一阵 还是云里雾里 见笑见笑) </p>
</blockquote>
<h4 id="ARKit捕捉平地"><a href="#ARKit捕捉平地" class="headerlink" title="ARKit捕捉平地"></a>ARKit捕捉平地</h4><p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/ARKit/plane_detective.gif" alt=""></p>
<p><a href="https://github.com/sunyazhou13/ARDemos/blob/master/ARDemoPlaneDetective.zip" target="_blank" rel="external">探测平地demo</a></p>
<p>贴一下核心代码</p>
<p>添加节点时候调用（当开启平地捕捉模式之后，如果捕捉到平地，ARKit会自动添加一个平地节点）</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="meta">#pragma mark -</span></div><div class="line"><span class="meta">#pragma mark - ARSCNViewDelegate 代理</span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)renderer:(<span class="keyword">id</span> &lt;<span class="built_in">SCNSceneRenderer</span>&gt;)renderer didAddNode:(<span class="built_in">SCNNode</span> *)node forAnchor:(ARAnchor *)anchor&#123;</div><div class="line">    <span class="keyword">if</span> ([anchor isMemberOfClass:[ARPlaneAnchor <span class="keyword">class</span>]]) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"捕捉到平地"</span>);</div><div class="line">        <span class="comment">//添加一个3D 平面模型,ARKit 只有捕捉能力,锚点是一个空间位置,要想更加清楚的看到这个空间,我们需要给空间添加一个平地的3D模型来渲染他</span></div><div class="line">        <span class="comment">//1. 获取扑捉到的平地锚点</span></div><div class="line">        ARPlaneAnchor *planeAnchor = (ARPlaneAnchor *)anchor;</div><div class="line">        <span class="comment">//2. 创建一个3D物体模型 (系统捕捉到的平地是一个不规则大小的长方形，这里我们将其变成一个长方形，并且对平地做一次缩放）</span></div><div class="line">        <span class="comment">//创建长方形  参数:长,宽,高,圆角</span></div><div class="line">        <span class="built_in">SCNBox</span> *plane = [<span class="built_in">SCNBox</span> boxWithWidth:planeAnchor.extent.x * <span class="number">0.3</span> height:<span class="number">0</span> length:planeAnchor.extent.x * <span class="number">0.3</span> chamferRadius:<span class="number">0</span>];</div><div class="line">        <span class="comment">//3. 使用Material渲染3D模型 默认模型是白色的</span></div><div class="line">        plane.firstMaterial.diffuse.contents = [<span class="built_in">UIColor</span> cyanColor];</div><div class="line">        </div><div class="line">        <span class="comment">//4. 创建一个基于3D 物体模型的节点</span></div><div class="line">        <span class="built_in">SCNNode</span> *planeNode = [<span class="built_in">SCNNode</span> nodeWithGeometry:plane];</div><div class="line">        <span class="comment">//5. 设置节点的位置为捕捉到的平地的锚点和中心位置 SceneKit框架中节点的位置position是一个基于3D坐标系的矢量坐标SCNVector3Make</span></div><div class="line">        planeNode.position = <span class="built_in">SCNVector3Make</span>(planeAnchor.center.x, <span class="number">0</span>, planeAnchor.center.z);</div><div class="line">        </div><div class="line">        [node addChildNode:planeNode];</div><div class="line">        </div><div class="line">        <span class="comment">//6. 当捕捉到平地时，2s之后开始在平地上添加一个3D模型</span></div><div class="line">        </div><div class="line">        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">2</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</div><div class="line">            <span class="comment">//1.创建一个花瓶场景</span></div><div class="line">            <span class="built_in">SCNScene</span> *scene = [<span class="built_in">SCNScene</span> sceneNamed:<span class="string">@"Models.scnassets/vase/vase.scn"</span>];</div><div class="line">            <span class="comment">//2.获取花瓶节点（一个场景会有多个节点，此处我们只写，花瓶节点则默认是场景子节点的第一个）</span></div><div class="line">            <span class="comment">//所有的场景有且只有一个根节点，其他所有节点都是根节点的子节点</span></div><div class="line">            <span class="built_in">SCNNode</span> *vaseNode = scene.rootNode.childNodes[<span class="number">0</span>];</div><div class="line">            </div><div class="line">            <span class="comment">//4.设置花瓶节点的位置为捕捉到的平地的位置，如果不设置，则默认为原点位置，也就是相机位置</span></div><div class="line">            vaseNode.position = <span class="built_in">SCNVector3Make</span>(planeAnchor.center.x, <span class="number">0</span>, planeAnchor.center.z);</div><div class="line">            </div><div class="line">            <span class="comment">//5.将花瓶节点添加到当前屏幕中</span></div><div class="line">            <span class="comment">//!!!此处一定要注意：花瓶节点是添加到代理捕捉到的节点中，而不是AR试图的根节点。因为捕捉到的平地锚点是一个本地坐标系，而不是世界坐标系</span></div><div class="line">            [node addChildNode:vaseNode];</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="AR代码demo实现"><a href="#AR代码demo实现" class="headerlink" title="AR代码demo实现"></a>AR代码demo实现</h4><p><a href="https://github.com/sunyazhou13/ARDemos" target="_blank" rel="external">所有相关的 demos 仓库</a></p>
<p>参考文献 </p>
<p><a href="http://metalkit.org/2017/07/29/using-arkit-with-metal.html" target="_blank" rel="external">Using ARKit with Metal</a>  </p>
<p><a href="http://www.jianshu.com/p/c97b230fa391" target="_blank" rel="external">坤小1~10篇</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.gi
    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="macOS开发" scheme="https://www.sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Learning AV Foundation(四)AVAsset元数据(高级篇)</title>
    <link href="https://www.sunyazhou.com/2017/08/07/Learning-AV-Foundation-AVAsset-Senior/"/>
    <id>https://www.sunyazhou.com/2017/08/07/Learning-AV-Foundation-AVAsset-Senior/</id>
    <published>2017-08-07T12:36:46.000Z</published>
    <updated>2017-08-28T12:43:20.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/684038b04b8ff1f2ed00e9b76f8bd02e8e243726/Learning-AV-Foundation-AVAsset-Senior3.2/audio-artwork.jpg" alt=""></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>先上图 </p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/Learning-AV-Foundation-AVAsset-Senior3.2/metadata.gif" alt=""></p>
<p>这一篇 <strong>我们将学习解决如何一套代码解析大部分 多媒体格式的文件然后形成通用的 model - 元数据键值空间标准化</strong></p>
<h2 id="内容介绍"><a href="#内容介绍" class="headerlink" title="内容介绍"></a>内容介绍</h2><p>结构图<br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/Learning-AV-Foundation-AVAsset-Senior3.2/MetaDataModel.png" alt=""></p>
<hr>
<p>class 代码 </p>
<ul>
<li><strong>MediaItem (一个直接对外的接口)</strong></li>
<li><strong>MetaData (元数据model)</strong></li>
<li><strong>Genre (风格)</strong></li>
<li><strong>AVMetadataItem+Additions</strong></li>
<li><strong>MetadataDefines</strong></li>
<li><strong>MetadataKit</strong></li>
<li><strong>Converters (文件夹包含如下:)</strong><ul>
<li><strong>MetadataConverter  (Protocol 存取 <code>AVMetadataItem</code>)</strong></li>
<li><strong>MetadataConverterFactory</strong></li>
<li><strong>DefaultMetadataConverter</strong></li>
<li><strong>ArtworkMetadataConverter</strong></li>
<li><strong>CommentMetadataConverter</strong></li>
<li><strong>TrackMetadataConverter</strong></li>
<li><strong>DiscMetadataConverter</strong></li>
<li><strong>GenreMetadataConverter</strong></li>
</ul>
</li>
</ul>
<hr>
<h3 id="MediaItem"><a href="#MediaItem" class="headerlink" title="MediaItem"></a>MediaItem</h3><p>这个类主要对外直接暴露接口 如下代码即可调用使用</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">__<span class="keyword">weak</span> <span class="keyword">typeof</span>(<span class="keyword">self</span>) weakSelf = <span class="keyword">self</span>;</div><div class="line">MediaItem *item = [[MediaItem alloc] initWithURL:<span class="keyword">self</span>.url];</div><div class="line">[item prepareWithCompletionHandler:^(<span class="built_in">BOOL</span> complete) &#123;</div><div class="line">    __<span class="keyword">strong</span> <span class="keyword">typeof</span>(weakSelf) strongSelf = weakSelf;</div><div class="line">    [strongSelf refreshDataByItem:item];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,[item modelDescription]);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<p>代码实现部分  </p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;AVFoundation/AVFoundation.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"MetaData.h"</span></span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">void</span>(^CompletionHandler)(<span class="built_in">BOOL</span> complete);</div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MediaItem</span> : <span class="title">NSObject</span></span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">readonly</span>) <span class="built_in">NSString</span> *filename;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">readonly</span>) <span class="built_in">NSString</span> *filetype;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">readonly</span>) MetaData *metadata;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>, <span class="keyword">getter</span> = isEditable) <span class="built_in">BOOL</span> editable;</div><div class="line">- (<span class="keyword">id</span>)initWithURL:(<span class="built_in">NSURL</span> *)url;</div><div class="line"><span class="comment">/**</span></div><div class="line"> 此方法完成之后如果成功即可取metadata</div><div class="line"></div><div class="line"> @param handler 回调 block</div><div class="line"> */</div><div class="line">- (<span class="keyword">void</span>)prepareWithCompletionHandler:(CompletionHandler)handler;</div><div class="line">- (<span class="keyword">void</span>)saveWithCompletionHandler:(CompletionHandler)handler;</div><div class="line"><span class="keyword">@end</span></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p><code>.m</code>可参考源码 比较多就不赘述了</p>
<p>当 block 完成时使用<br>目前支持获取元数据信息的媒体格式如下:  </p>
<ul>
<li>m4a</li>
<li>mov</li>
<li>mp4</li>
<li>mp3</li>
</ul>
<blockquote>
<p>注意:<em><strong>mp3文件是不可编辑的文件故而不能进行编辑 比如改变歌手名称之类 如果要编辑可使用其它专业软件尝试</strong></em>  </p>
</blockquote>
<p>我尝试了 mac 版本的 demo 编辑 文件 是 OK 的 但是在 iOS 上 我更改其它格式也没能保存成功 如果你看到有解决办法 可以留言给我或者发邮件给我 非常感谢.</p>
<h3 id="MetaData"><a href="#MetaData" class="headerlink" title="MetaData"></a>MetaData</h3><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;AVFoundation/AVFoundation.h&gt;</span></span></div><div class="line"><span class="class"><span class="keyword">@class</span> <span class="title">Genre</span>; //风格  <span class="title">eg</span>: 蓝调、 古典 ....</span></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MetaData</span> : <span class="title">NSObject</span></span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">copy</span>) <span class="built_in">NSString</span> *name;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">copy</span>) <span class="built_in">NSString</span> *artist;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">copy</span>) <span class="built_in">NSString</span> *albumArtist;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">copy</span>) <span class="built_in">NSString</span> *album;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">copy</span>) <span class="built_in">NSString</span> *grouping;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">copy</span>) <span class="built_in">NSString</span> *composer;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">copy</span>) <span class="built_in">NSString</span> *comments;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>) <span class="built_in">UIImage</span> *artwork;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>) Genre *genre;</div><div class="line"><span class="keyword">@property</span> <span class="built_in">NSString</span> *year;</div><div class="line"><span class="keyword">@property</span> <span class="keyword">id</span> bpm;</div><div class="line"><span class="keyword">@property</span> <span class="built_in">NSNumber</span> *trackNumber;</div><div class="line"><span class="keyword">@property</span> <span class="built_in">NSNumber</span> *trackCount;</div><div class="line"><span class="keyword">@property</span> <span class="built_in">NSNumber</span> *discNumber;</div><div class="line"><span class="keyword">@property</span> <span class="built_in">NSNumber</span> *discCount;</div><div class="line">- (<span class="keyword">void</span>)addMetadataItem:(<span class="built_in">AVMetadataItem</span> *)item withKey:(<span class="keyword">id</span>)key;</div><div class="line">- (<span class="built_in">NSArray</span> *)metadataItems;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>看到上边的代码估计你也猜到了 这就是我们需要的 比如 mp3文件解析出来的真正 model  </p>
<p>这里东西比较多 有些值有可能没有 请自行做好 check</p>
<h3 id="MetadataConverter"><a href="#MetadataConverter" class="headerlink" title="MetadataConverter"></a>MetadataConverter</h3><p>这个协议是为了支持所有多媒体文件统一解析使用,比如:mp3文件和mp4文件两个是不一样的文件格式,虽然里面有很多相同的key,但是肯定数据结构是不一样的,这样就要求,搞一个统一的协议,比如输入的是一个URL返回一个 model那么为了解决key value参差不齐问题 就搞了这个协议.</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">zh</span> &lt;<span class="title">NSObject</span>&gt;</span></div><div class="line"><span class="keyword">@optional</span></div><div class="line"><span class="comment">/**</span></div><div class="line"> AVMetadataItem to Model 转换 用于UI显示的model</div><div class="line"></div><div class="line"> @param item AVMetadataItem</div><div class="line"> @return model</div><div class="line"> */</div><div class="line">- (<span class="keyword">id</span>)displayValueFromMetadataItem:(<span class="built_in">AVMetadataItem</span> *)item;</div><div class="line"><span class="comment">/**</span></div><div class="line"> AVMetadataItem映射通用字段</div><div class="line"> </div><div class="line"> @param value 通过媒体元数据取出的某个key的value</div><div class="line"> @param item AVMetadataItem</div><div class="line"> @return AVMetadataItem</div><div class="line"> */</div><div class="line">- (<span class="built_in">AVMetadataItem</span> *)metadataItemFromDisplayValue:(<span class="keyword">id</span>)value</div><div class="line">                                withMetadataItem:(<span class="built_in">AVMetadataItem</span> *)item;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h3 id="MetadataConverterFactory"><a href="#MetadataConverterFactory" class="headerlink" title="MetadataConverterFactory"></a>MetadataConverterFactory</h3><p>这个类用于统一输出遵守<code>MetadataConverter</code>协议的model并且找到适当的转换器去转换响应的格式</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MetadataConverterFactory</span> : <span class="title">DefaultMetadataConverter</span></span></div><div class="line">- (<span class="keyword">id</span> &lt;MetadataConverter&gt;)converterForKey:(<span class="built_in">NSString</span> *)key;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">MetadataConverterFactory</span></span></div><div class="line">- (<span class="keyword">id</span> &lt;MetadataConverter&gt;)converterForKey:(<span class="built_in">NSString</span> *)key&#123;</div><div class="line">    <span class="keyword">id</span> &lt;MetadataConverter&gt; converter = <span class="literal">nil</span>;</div><div class="line">    <span class="keyword">if</span> ([key isEqualToString:MetadataKeyArtwork]) &#123;</div><div class="line">        converter = [[ArtworkMetadataConverter alloc] init];</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ([key isEqualToString:MetadataKeyTrackNumber]) &#123;</div><div class="line">        converter = [[TrackMetadataConverter alloc] init];</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ([key isEqualToString:MetadataKeyDiscNumber]) &#123;</div><div class="line">        converter = [[DiscMetadataConverter alloc] init];</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ([key isEqualToString:MetadataKeyComments]) &#123;</div><div class="line">        converter = [[CommentMetadataConverter alloc] init];</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ([key isEqualToString:MetadataKeyGenre]) &#123;</div><div class="line">        converter = [[GenreMetadataConverter alloc] init];</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        converter = [[DefaultMetadataConverter alloc] init];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> converter;</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h3 id="DefaultMetadataConverter"><a href="#DefaultMetadataConverter" class="headerlink" title="DefaultMetadataConverter"></a>DefaultMetadataConverter</h3><p>简单实现<code>MetadataConverter</code>协议</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">DefaultMetadataConverter</span> : <span class="title">NSObject</span> &lt;<span class="title">MetadataConverter</span>&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">DefaultMetadataConverter</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">id</span>)displayValueFromMetadataItem:(<span class="built_in">AVMetadataItem</span> *)item &#123;</div><div class="line">    <span class="keyword">return</span> item.value;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">AVMetadataItem</span> *)metadataItemFromDisplayValue:(<span class="keyword">id</span>)value</div><div class="line">                                withMetadataItem:(<span class="built_in">AVMetadataItem</span> *)item &#123;    </div><div class="line">    <span class="built_in">AVMutableMetadataItem</span> *metadataItem = [item mutableCopy];</div><div class="line">    metadataItem.value = value;</div><div class="line">    <span class="keyword">return</span> metadataItem;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="ArtworkMetadataConverter"><a href="#ArtworkMetadataConverter" class="headerlink" title="ArtworkMetadataConverter"></a>ArtworkMetadataConverter</h3><p>实现<code>MetadataConverter</code>协议 取出专辑封面</p>
<p>此处省略 .h 文件只贴出.m ( .h里面啥也没有 大家可参考 demo)</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ArtworkMetadataConverter</span></span></div><div class="line">- (<span class="keyword">id</span>)displayValueFromMetadataItem:(<span class="built_in">AVMetadataItem</span> *)item &#123;</div><div class="line">    <span class="built_in">UIImage</span> *image = <span class="literal">nil</span>;  <span class="comment">//下面是核心代码取出图片 </span></div><div class="line">    <span class="keyword">if</span> ([item.value isKindOfClass:[<span class="built_in">NSData</span> <span class="keyword">class</span>]]) &#123;                        <span class="comment">// 1</span></div><div class="line">        image = [[<span class="built_in">UIImage</span> alloc] initWithData:item.dataValue];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ([item.value isKindOfClass:[<span class="built_in">NSDictionary</span> <span class="keyword">class</span>]]) &#123;             <span class="comment">// 2</span></div><div class="line">        <span class="built_in">NSDictionary</span> *dict = (<span class="built_in">NSDictionary</span> *)item.value;</div><div class="line">        image = [[<span class="built_in">UIImage</span> alloc] initWithData:dict[<span class="string">@"data"</span>]];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> image;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">AVMetadataItem</span> *)metadataItemFromDisplayValue:(<span class="keyword">id</span>)value</div><div class="line">                                withMetadataItem:(<span class="built_in">AVMetadataItem</span> *)item &#123;</div><div class="line">    </div><div class="line">    <span class="built_in">AVMutableMetadataItem</span> *metadataItem = [item mutableCopy];</div><div class="line">    </div><div class="line">    <span class="built_in">UIImage</span> *image = (<span class="built_in">UIImage</span> *)value;</div><div class="line">    metadataItem.value = <span class="built_in">UIImagePNGRepresentation</span>(image);                          <span class="comment">// 3</span></div><div class="line">    </div><div class="line">    <span class="keyword">return</span> metadataItem;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>这里 mp3 (id3v2格式）取图片的方式可能有不一样的地方 1出判断 属于哪种格式 3处把 UIImage 转 NSData 再放回去</p>
<p>需要注意一个地方是 返回<code>AVMetadataItem</code>的类型<br>由于<code>AV Foundation</code>无法写入 ID3元数据 所以这里使用了 <code>AVMutableMetadataItem</code>来存储封面图</p>
<p><code>AVMutableMetadataItem</code> 是 <code>AVMetadataItem</code>的子类</p>
<h3 id="CommentMetadataConverter-注释转换"><a href="#CommentMetadataConverter-注释转换" class="headerlink" title="CommentMetadataConverter 注释转换"></a>CommentMetadataConverter 注释转换</h3><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">CommentMetadataConverter</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">id</span>)displayValueFromMetadataItem:(<span class="built_in">AVMetadataItem</span> *)item &#123;</div><div class="line">    </div><div class="line">    <span class="built_in">NSString</span> *value = <span class="literal">nil</span>;</div><div class="line">    <span class="keyword">if</span> ([item.value isKindOfClass:[<span class="built_in">NSString</span> <span class="keyword">class</span>]]) &#123;                      <span class="comment">// 1</span></div><div class="line">        value = item.stringValue;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ([item.value isKindOfClass:[<span class="built_in">NSDictionary</span> <span class="keyword">class</span>]]) &#123;             <span class="comment">// 2</span></div><div class="line">        <span class="built_in">NSDictionary</span> *dict = (<span class="built_in">NSDictionary</span> *) item.value;</div><div class="line">        <span class="keyword">if</span> ([dict[<span class="string">@"identifier"</span>] isEqualToString:<span class="string">@""</span>]) &#123;</div><div class="line">            value = dict[<span class="string">@"text"</span>];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> value;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">AVMetadataItem</span> *)metadataItemFromDisplayValue:(<span class="keyword">id</span>)value</div><div class="line">                                withMetadataItem:(<span class="built_in">AVMetadataItem</span> *)item &#123;</div><div class="line">    </div><div class="line">    <span class="built_in">AVMutableMetadataItem</span> *metadataItem = [item mutableCopy];               <span class="comment">// 3</span></div><div class="line">    metadataItem.value = value;</div><div class="line">    <span class="keyword">return</span> metadataItem;</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<ol>
<li><code>MPEG-4</code>和<code>QuickTime</code>媒体的 value 为 <code>NSString</code>  </li>
<li><code>MP3</code>的注释保存在一个定义<code>ID3 COMM帧</code>的<code>NSDictionary</code>中(如果处理的是<code>ID3V2.2</code>,则为<code>COM</code>),所有类型的值都保存在这个帧中. eg： iTune 在这个帧中保存音频标准化和无缝播放设置等,意味着当请求 <code>ID3</code>元数据时需要多接收多个<code>COMM帧</code>.包含实际注释内容的特定<code>COMM帧</code>被存储在一个带有空字符串标识的帧中.找到需要的条目后 通过请求<code>text</code> key 来检索出注释内容</li>
</ol>
<h3 id="TrackMetadataConverter-音轨数据转换"><a href="#TrackMetadataConverter-音轨数据转换" class="headerlink" title="TrackMetadataConverter 音轨数据转换"></a>TrackMetadataConverter 音轨数据转换</h3><p>音轨: 通常包含一首歌曲在整个唱片中的编号位置信息(eg: 12首歌中的第4首  4/12)等信息.</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">TrackMetadataConverter</span></span></div><div class="line">- (<span class="keyword">id</span>)displayValueFromMetadataItem:(<span class="built_in">AVMetadataItem</span> *)item &#123;</div><div class="line">    </div><div class="line">    <span class="built_in">NSNumber</span> *number = <span class="literal">nil</span>;</div><div class="line">    <span class="built_in">NSNumber</span> *count = <span class="literal">nil</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> ([item.value isKindOfClass:[<span class="built_in">NSString</span> <span class="keyword">class</span>]]) &#123;                      <span class="comment">// 1</span></div><div class="line">        <span class="built_in">NSArray</span> *components =</div><div class="line">        [item.stringValue componentsSeparatedByString:<span class="string">@"/"</span>];</div><div class="line">        <span class="keyword">if</span> (components.count &gt; <span class="number">0</span>) &#123;</div><div class="line">            number = @([components[<span class="number">0</span>] integerValue]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (components.count &gt; <span class="number">1</span>) &#123;</div><div class="line">            count = @([components[<span class="number">1</span>] integerValue]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ([item.value isKindOfClass:[<span class="built_in">NSData</span> <span class="keyword">class</span>]]) &#123;                   <span class="comment">// 2</span></div><div class="line">        <span class="built_in">NSData</span> *data = item.dataValue;</div><div class="line">        <span class="keyword">if</span> (data.length == <span class="number">8</span>) &#123;</div><div class="line">            uint16_t *values = (uint16_t *) [data bytes];</div><div class="line">            <span class="keyword">if</span> (values[<span class="number">1</span>] &gt; <span class="number">0</span>) &#123;</div><div class="line">                number = @(<span class="built_in">CFSwapInt16BigToHost</span>(values[<span class="number">1</span>]));                <span class="comment">// 3</span></div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (values[<span class="number">2</span>] &gt; <span class="number">0</span>) &#123;</div><div class="line">                count = @(<span class="built_in">CFSwapInt16BigToHost</span>(values[<span class="number">2</span>]));                 <span class="comment">// 4</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="built_in">NSMutableDictionary</span> *dict = [<span class="built_in">NSMutableDictionary</span> dictionary];           <span class="comment">// 5</span></div><div class="line">    [dict setObject:number ?: [<span class="built_in">NSNull</span> null] forKey:MetadataKeyTrackNumber];</div><div class="line">    [dict setObject:count ?: [<span class="built_in">NSNull</span> null] forKey:MetadataKeyTrackCount];</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> dict;</div><div class="line">&#125;</div><div class="line">- (<span class="built_in">AVMetadataItem</span> *)metadataItemFromDisplayValue:(<span class="keyword">id</span>)value</div><div class="line">                                withMetadataItem:(<span class="built_in">AVMetadataItem</span> *)item &#123;</div><div class="line">    <span class="built_in">AVMutableMetadataItem</span> *metadataItem = [item mutableCopy];</div><div class="line">    </div><div class="line">    <span class="built_in">NSDictionary</span> *trackData = (<span class="built_in">NSDictionary</span> *)value;</div><div class="line">    <span class="built_in">NSNumber</span> *trackNumber = trackData[MetadataKeyTrackNumber];</div><div class="line">    <span class="built_in">NSNumber</span> *trackCount = trackData[MetadataKeyTrackCount];</div><div class="line">    </div><div class="line">    uint16_t values[<span class="number">4</span>] = &#123;<span class="number">0</span>&#125;;                                                <span class="comment">// 6</span></div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (trackNumber &amp;&amp; ![trackNumber isKindOfClass:[<span class="built_in">NSNull</span> <span class="keyword">class</span>]]) &#123;</div><div class="line">        values[<span class="number">1</span>] = <span class="built_in">CFSwapInt16HostToBig</span>([trackNumber unsignedIntValue]);   <span class="comment">// 7</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (trackCount &amp;&amp; ![trackCount isKindOfClass:[<span class="built_in">NSNull</span> <span class="keyword">class</span>]]) &#123;</div><div class="line">        values[<span class="number">2</span>] = <span class="built_in">CFSwapInt16HostToBig</span>([trackCount unsignedIntValue]);    <span class="comment">// 8</span></div><div class="line">    &#125;</div><div class="line">    size_t length = <span class="keyword">sizeof</span>(values);</div><div class="line">    metadataItem.value = [<span class="built_in">NSData</span> dataWithBytes:values length:length];       <span class="comment">// 9</span></div><div class="line">    </div><div class="line">    <span class="keyword">return</span> metadataItem;</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<ol>
<li>刚才所说 <code>mp3</code>格式已 <code>xx/xx</code> 格式的字符串标识一个歌曲 在整个唱片中的第几首 所以我们用<code>/</code>分割</li>
<li>iTunes <code>M4A</code>文件的唱片信息保存在一个 <code>NSData</code> 中,<code>NSData</code>包含3个16位的<code>big encoding</code>数字,如果直接在控制台打印 NSData 会输出<strong><code>&lt;00000008 000a0000&gt;</code>这是4个16位的<code>big endian</code>数字数组的十六进制表现形式</strong>. 数组中第2个和第3个元素分别保存唱片编号和唱片计数值</li>
<li>如果唱片编号 != 0, 则获取该值并使用<a href="https://developer.apple.com/documentation/corefoundation/1425282-cfswapint16bigtohost?language=objc" target="_blank" rel="external"><code>CFSwapInt16BigToHost()</code></a>函数执行<code>endian</code>转换,转换成一个<code>little endian</code> 并打包成<code>NSNumber</code></li>
<li>同样如果音轨计数值不为0, 则获取该值并在字节上执行<code>endian</code>转换并打包成<code>NSNumber</code></li>
<li></li>
<li>步骤反过来换成3个<code>uint16_t</code> 保存音轨编号和计数值.</li>
<li>如果音轨编号有效, 将字节转换为<code>big endian</code>格式并保存到数组第2个位置</li>
<li>如果音轨计数值有效, 将字节转换为<code>big endian</code>格式并保存到数组第3个位置</li>
<li>打成 NSData 保存将其设置为元数据项的 value</li>
</ol>
<h3 id="DiscMetadataConverter-唱片数据转换"><a href="#DiscMetadataConverter-唱片数据转换" class="headerlink" title="DiscMetadataConverter 唱片数据转换"></a>DiscMetadataConverter 唱片数据转换</h3><p>唱片计数信息用于表示一首歌曲所在的CD是所有唱片中的第几张 通常都是 1/1 (通常都是一个 cd 一首)</p>
<p>上下的和音轨 非常类似了 如果是4/10就是 10首里面的第4首<br>由于唱片这玩意都过时了 你现在应该很少看到 屌丝 带着 walkman 在大街上压马路了都看不到了 </p>
<p>但是逻辑还是在的 这里逻辑看代码吧 和 音轨 基本一模一样</p>
<h3 id="GenreMetadataConverter-风格转换"><a href="#GenreMetadataConverter-风格转换" class="headerlink" title="GenreMetadataConverter 风格转换"></a>GenreMetadataConverter 风格转换</h3><p>数字音频使用的标准风格最初来自 MP3. ID3 规范定义了80个默认的风格类型及 另外46个 WinAmp 扩展,共计 126个风格. 不过这些都不属于正式格式. 由于 mp3风格的主导地位比较明显, iTunes 没有另造轮子,而是基本遵循 ID3 的风格分类,不过做了点小变化。<strong>iTunes 音乐风格的标号比响应的 ID3标识符大 <code>1</code> .</strong></p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/34c39090f2a8e0ec7a09652065acdd648d5f0133/Learning-AV-Foundation-AVAsset-Senior3.2/gener.png" alt=""></p>
<p>虽然 iTunes 使用了 ID3集合中的预定义音乐风格, 不过 iTunes 对电视、电影和有声读物等定义了自己的风格集. <a href="https://affiliate.itunes.apple.com/resources/documentation/genre-mapping/" target="_blank" rel="external">Apple’s Genre IDs Appendix</a></p>
<p>示例代码已经包含了这些类型 虽不在赘述 请参考 demo</p>
<h3 id="保存元数据"><a href="#保存元数据" class="headerlink" title="保存元数据"></a>保存元数据</h3><p><code>AVAsset</code>是一个不可变类型 我们不能直接修改 <code>AVAsset</code> 而是使用<code>AVAssetExportSession</code>类来导出新的资源副本以及元数据的改动.</p>
<h4 id="使用AVAssetExportSession"><a href="#使用AVAssetExportSession" class="headerlink" title="使用AVAssetExportSession"></a>使用<code>AVAssetExportSession</code></h4><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)saveWithCompletionHandler:(CompletionHandler)handler &#123;</div><div class="line">    </div><div class="line">    <span class="built_in">NSString</span> *presetName = <span class="built_in">AVAssetExportPresetPassthrough</span>;                  <span class="comment">// 1</span></div><div class="line">    <span class="built_in">AVAssetExportSession</span> *session =</div><div class="line">    [[<span class="built_in">AVAssetExportSession</span> alloc] initWithAsset:<span class="keyword">self</span>.asset</div><div class="line">                                     presetName:presetName];</div><div class="line">    </div><div class="line">    <span class="built_in">NSURL</span> *outputURL = [<span class="keyword">self</span> tempURL];                                      <span class="comment">// 2</span></div><div class="line">    session.outputURL = outputURL;</div><div class="line">    session.outputFileType = <span class="keyword">self</span>.filetype;</div><div class="line">    session.metadata = [<span class="keyword">self</span>.metadata metadataItems];                       <span class="comment">// 3</span></div><div class="line">    </div><div class="line">    [session exportAsynchronouslyWithCompletionHandler:^&#123;</div><div class="line">        <span class="built_in">AVAssetExportSessionStatus</span> status = session.status;</div><div class="line">        <span class="built_in">BOOL</span> success = (status == <span class="built_in">AVAssetExportSessionStatusCompleted</span>);</div><div class="line">        <span class="keyword">if</span> (success) &#123;                                                      <span class="comment">// 4</span></div><div class="line">            <span class="built_in">NSURL</span> *sourceURL = <span class="keyword">self</span>.url;</div><div class="line">            <span class="built_in">NSFileManager</span> *manager = [<span class="built_in">NSFileManager</span> defaultManager];</div><div class="line">            [manager removeItemAtURL:sourceURL error:<span class="literal">nil</span>];</div><div class="line">            [manager moveItemAtURL:outputURL toURL:sourceURL error:<span class="literal">nil</span>];</div><div class="line">            [<span class="keyword">self</span> reset];                                                   <span class="comment">// 5</span></div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (handler) &#123;</div><div class="line">            <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class="line">                handler(success);</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"sessionError:%@"</span>,session.error);</div><div class="line">    &#125;];</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">- (<span class="built_in">NSURL</span> *)tempURL &#123;</div><div class="line">    <span class="comment">// 获取Caches目录路径</span></div><div class="line">    <span class="built_in">NSString</span> *cachesDir = [<span class="built_in">NSSearchPathForDirectoriesInDomains</span>(<span class="built_in">NSCachesDirectory</span>, <span class="built_in">NSUserDomainMask</span>, <span class="literal">YES</span>) firstObject];</div><div class="line">    <span class="built_in">NSString</span> *tempDir = cachesDir;</div><div class="line">    <span class="built_in">NSString</span> *ext = [[<span class="keyword">self</span>.url lastPathComponent] pathExtension];</div><div class="line">    <span class="built_in">NSString</span> *tempName = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"temp.%@"</span>, ext];</div><div class="line">    <span class="built_in">NSString</span> *tempPath = [tempDir stringByAppendingPathComponent:tempName];</div><div class="line">    <span class="keyword">return</span> [<span class="built_in">NSURL</span> fileURLWithPath:tempPath];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>注意: <strong><strong><code>AVAssetExportPresetPassthrough</code> 这个预设值 确实允许修改<code>MPEG-4</code>和<code>QuickTime</code>容器中的存在的元数据信息, 不过它不可以添加新的元数据,添加元数据的唯一方法是使用转码预设值, 此外不能修改 <code>ID3</code>(mp3)标签。 框架不支持写入 MP3数据.</strong></strong></p>
</blockquote>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>经过了代码实现和解析多媒体元数据 <code>AVAsset</code>,我们也熟悉了多媒体文件的构造, ID3(MP3)格式的文件解析 arkwork 功能. 从而在后续开发过程中 提升开发效率. 最后放出 代码的 demo 请大家多多指教</p>
<p><strong><a href="https://github.com/sunyazhou13/MetaDemo" target="_blank" rel="external">示例 demo</a></strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/684038b04b8ff1f2ed00e9b76f8bd02e8e243726/Learning-AV
    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="macOS开发" scheme="https://www.sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="Learning AV Foundation" scheme="https://www.sunyazhou.com/tags/Learning-AV-Foundation/"/>
    
  </entry>
  
  <entry>
    <title>iOS 11 新技能</title>
    <link href="https://www.sunyazhou.com/2017/07/13/ios11-new-skills/"/>
    <id>https://www.sunyazhou.com/2017/07/13/ios11-new-skills/</id>
    <published>2017-07-13T02:55:15.000Z</published>
    <updated>2017-07-16T02:02:39.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/ios11-new-skills/what_is_news_in_ios11.png" alt=""></p>
<h2 id="可用性检查API"><a href="#可用性检查API" class="headerlink" title="可用性检查API"></a>可用性检查API</h2><p>在swift代码中经常可以看到 某个API 适用于 iOS10.0 </p>
<p>如下代码</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="meta">@available</span>(iOS <span class="number">11</span>, *)) &#123;</div><div class="line">	<span class="comment">//iOS 11可用 </span></div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">	<span class="comment">//老版本API</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在Xcode9 中, 编译器增加了 Objective-C 版本的 API 可用性检查</p>
<h5 id="通过API-AVAILABLE宏来标注方法的可用性"><a href="#通过API-AVAILABLE宏来标注方法的可用性" class="headerlink" title="通过API_AVAILABLE宏来标注方法的可用性"></a>通过<code>API_AVAILABLE</code>宏来标注方法的可用性</h5><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> : <span class="title">UIViewController</span></span></div><div class="line">- (<span class="keyword">void</span>)xxxMethodA API_AVAILABLE(ios(<span class="number">11.0</span>));</div><div class="line">- (<span class="keyword">void</span>)xxxMethodB API_AVAILABLE(ios(<span class="number">8.0</span>), macos(<span class="number">10.10</span>), watchos(<span class="number">2.0</span>), tvos(<span class="number">9.0</span>));</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<blockquote>
<p>切记 <code>macos</code>、<code>ios</code>、<code>watchos</code>、<code>tvos</code>都是小写</p>
</blockquote>
<p>通过这种写法进行可用性判断, 编辑器就不会产生警告了, 并且在<code>运行时</code>就根据iOS系统版本执行相应代码.</p>
<h5 id="通过API-AVAILABLE宏来标注整个class的可用性"><a href="#通过API-AVAILABLE宏来标注整个class的可用性" class="headerlink" title="通过API_AVAILABLE宏来标注整个class的可用性"></a>通过<code>API_AVAILABLE</code>宏来标注整个<code>class</code>的可用性</h5><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">API_AVAILABLE(ios(<span class="number">11.0</span>))</div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">A</span> : <span class="title">NSObject</span></span></div><div class="line">- (<span class="keyword">void</span>)xxxMothod;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>看了大家会发现 这个 都是用于OC的代码 那C/C++ 有吗? 必须有</p>
<h5 id="C-C-代码-可以使用"><a href="#C-C-代码-可以使用" class="headerlink" title="C/C++ 代码 可以使用 ``"></a>C/C++ 代码 可以使用 ``</h5><p>判断是否可用</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">if</span> (__builtin_available(iOS <span class="number">11</span>, macOS <span class="number">10.13</span>, *)) &#123;</div><div class="line">     xxxxFunc();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="code"><pre><div class="line">//导入头文件</div><div class="line">#include &lt;os/availability.h&gt; </div><div class="line"></div><div class="line">//可用性判断用于 声明函数 </div><div class="line">void myFunctionForiOS11OrNewer(int i) API_AVAILABLE(ios(11.0), macos(10.13));  </div><div class="line"></div><div class="line">//可用性判断 用于类 XXXClassA</div><div class="line">class API_AVAILABLE(ios(11.0), macos(10.13)) XXXClassA;</div></pre></td></tr></table></figure>
<p>默认 <code>API_AVAILABLE()</code> 只能用于 <code>iOS 11</code> / <code>tvOS 11</code> / <code>macOS 10.13</code> / <code>watchOS 4</code> 以上的 API 生效</p>
<p>如果就工程想使用这种llvm新版特性的话 需要修改 <code>buid setting</code>里面的 <code>Unguarded availability</code>  如下图:</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/ios11-new-skills/availability%402x.png" alt=""></p>
<h2 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h2><p>前面的文章我又讲过<a href="http://www.sunyazhou.com/2017/06/20/enable-static-analyer/">静态分析</a></p>
<p>这里说一下变化</p>
<h3 id="NSNumber-CFNumberRed-静态分析-延时"><a href="#NSNumber-CFNumberRed-静态分析-延时" class="headerlink" title="NSNumber/CFNumberRed 静态分析 延时"></a>NSNumber/CFNumberRed 静态分析 延时</h3><p>当我们错误的判断 NSNumber时  静态分析 则给出了提示 </p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/ios11-new-skills/error.png" alt=""></p>
<p>在Xcode9 中可以直接把这种倍忽视 的问题改成 当错误处理</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/ios11-new-skills/static.png" alt=""></p>
<h2 id="开启-LTO-并设置为-Incremental-模式"><a href="#开启-LTO-并设置为-Incremental-模式" class="headerlink" title="开启 LTO 并设置为 Incremental 模式"></a>开启 LTO 并设置为 Incremental 模式</h2><p>链接时优化（以下简称 <code>LTO</code>）是 LLVM 的一项优化特性，其主要原理是:</p>
<p><em>利用对象文件经过一些优化得到的中间格式在链接阶段再进行深度优化，包含代码逻辑层面的分析，去除实际未用到的函数、变量、甚至局部代码片段，继而减小安装包大小，同时提高了运行时的效率。</em></p>
<p>对于 LTO，Xcode 9 做出的改进主要是在进一步优化了编译速度。 苹果演示的例子是以某个大型 C++ 工程为参考，对于一次完整链接，Xcode 9 比 Xcode 8 提升了 35%；对于一次增量链接，Xcode 9 比 Xcode 8 提升了近 60%。</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/ios11-new-skills/lto1.png" alt=""></p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/ios11-new-skills/lto2.png" alt=""></p>
<p>开启LTO</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/ios11-new-skills/LTO.png" alt=""></p>
<p>据说对包大小和运行时速度有 10% 左右的优化</p>
<h2 id="GCD-统一队列标识"><a href="#GCD-统一队列标识" class="headerlink" title="GCD 统一队列标识"></a>GCD 统一队列标识</h2><p>统一队列标识是指我们在工程中散落在各处的创建队列，如果队列标识是一样的，他们在内核中会被 bind 在一起，其效率可以提高 30%。Apple 没有告诉我们其内核是怎么做到的，它提供了这样的建议，如果一类操作重要性程度或其他属性接近，亦或开发者希望散落在工程各处的代码可以放在同一个队列里去控制，那么我们在创建队列的时候就可以指定一个共同的标识符。 然后系统在内核中会把这些标识相同的队列 bind 到一起来管理</p>
<p>如下代码 如果app里面都使用同一个字符串 的话 效率可以提高30%</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_queue_create(<span class="string">"com.sunyazhou.demo.queue"</span>, DISPATCH_QUEUE_CONCURRENT);</div><div class="line">   <span class="built_in">dispatch_async</span>(queue, ^&#123;</div><div class="line">      <span class="comment">//异步执行代码写在这里</span></div><div class="line">   &#125;);</div></pre></td></tr></table></figure>
<blockquote>
<p>老实说 工程里面 避免不了文件上传下载 或者耗时任务处理  如果 整体搞成一个queue显然 不太符合业务需求 如果尽量保持 一个标识的Queue的话 也只能根据 业务分类来做到  可以有机会尝试一下</p>
</blockquote>
<p>全文完</p>
<p><a href="https://techblog.toutiao.com/2017/07/05/session0-2/" target="_blank" rel="external">参考</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/ios11-new-skills/what_is_news_in_ios11.png&quot; a
    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="macOS开发" scheme="https://www.sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>iOS生成随机颜色代码</title>
    <link href="https://www.sunyazhou.com/2017/07/04/arc4random-color/"/>
    <id>https://www.sunyazhou.com/2017/07/04/arc4random-color/</id>
    <published>2017-07-04T09:45:28.000Z</published>
    <updated>2017-07-16T02:02:47.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="built_in">CGFloat</span> hue = ( arc4random() % <span class="number">256</span> / <span class="number">256.0</span> );  <span class="comment">//  0.0 to 1.0</span></div><div class="line">   <span class="built_in">CGFloat</span> saturation = ( arc4random() % <span class="number">128</span> / <span class="number">256.0</span> ) + <span class="number">0.5</span>;  <span class="comment">//  0.5 to 1.0, away from white</span></div><div class="line">   <span class="built_in">CGFloat</span> brightness = ( arc4random() % <span class="number">128</span> / <span class="number">256.0</span> ) + <span class="number">0.5</span>;  <span class="comment">//  0.5 to 1.0, away from black</span></div><div class="line">   <span class="built_in">UIColor</span> *color = [<span class="built_in">UIColor</span> colorWithHue:hue saturation:saturation brightness:brightness alpha:<span class="number">1</span>];</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt; hue = ( arc4random()
    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="macOS开发" scheme="https://www.sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="技巧" scheme="https://www.sunyazhou.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>iOS获取各种文件目录的路径</title>
    <link href="https://www.sunyazhou.com/2017/06/26/get-sandbox-path-ios/"/>
    <id>https://www.sunyazhou.com/2017/06/26/get-sandbox-path-ios/</id>
    <published>2017-06-26T08:44:22.000Z</published>
    <updated>2017-07-16T02:01:48.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 获取沙盒主目录路径</span></div><div class="line"><span class="built_in">NSString</span> *homeDir = <span class="built_in">NSHomeDirectory</span>();</div><div class="line"><span class="comment">// 获取Documents目录路径</span></div><div class="line"><span class="built_in">NSString</span> *docDir = [<span class="built_in">NSSearchPathForDirectoriesInDomains</span>(<span class="built_in">NSDocumentDirectory</span>, <span class="built_in">NSUserDomainMask</span>, <span class="literal">YES</span>) firstObject];</div><div class="line"><span class="comment">// 获取Library的目录路径</span></div><div class="line"><span class="built_in">NSString</span> *libDir = [<span class="built_in">NSSearchPathForDirectoriesInDomains</span>(<span class="built_in">NSLibraryDirectory</span>, <span class="built_in">NSUserDomainMask</span>, <span class="literal">YES</span>) lastObject];</div><div class="line"><span class="comment">// 获取Caches目录路径</span></div><div class="line"><span class="built_in">NSString</span> *cachesDir = [<span class="built_in">NSSearchPathForDirectoriesInDomains</span>(<span class="built_in">NSCachesDirectory</span>, <span class="built_in">NSUserDomainMask</span>, <span class="literal">YES</span>) firstObject];</div><div class="line"><span class="comment">// 获取tmp目录路径</span></div><div class="line"><span class="built_in">NSString</span> *tmpDir =  <span class="built_in">NSTemporaryDirectory</span>();</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 获取沙盒主目录路径&lt;/span&gt;&lt;/div&gt;&lt;div class=
    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="macOS开发" scheme="https://www.sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>iOS Android Php RSA加密解密通配方案</title>
    <link href="https://www.sunyazhou.com/2017/06/26/rsa-universal-cross-platform-ios-android-php/"/>
    <id>https://www.sunyazhou.com/2017/06/26/rsa-universal-cross-platform-ios-android-php/</id>
    <published>2017-06-26T02:42:47.000Z</published>
    <updated>2017-08-28T12:43:20.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/rsa-universal-cross-platform-ios-android-php/rsa-red-logo.png" alt=""></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>先膜拜一下 RSA的作者</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/rsa-universal-cross-platform-ios-android-php/rsa-team.jpg" alt=""></p>
<p>RSA非对称加密 原理 各种。。。 请自行百度 </p>
<h2 id="弯路"><a href="#弯路" class="headerlink" title="弯路"></a>弯路</h2><p>最近开发涉及到如何使用RSA进行鉴权 等技术。。。老实说 我找了一圈根本就找到一个真正能在 iOS、Android、web跑通的代码.<br> 浪费了好几天开发时间 就没有一个靠谱能好使的 所以我必须发一篇博客<br>把真正 好使的代码拿出来 share一下 (当时我真的 想骂娘了 我擦 百度搜出来的 一堆垃圾) </p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><h2 id="第一步-生成公私钥对"><a href="#第一步-生成公私钥对" class="headerlink" title="第一步 生成公私钥对"></a>第一步 生成公私钥对</h2><h3 id="命令生成原始-RSA私钥文件-rsa-private-key-pem"><a href="#命令生成原始-RSA私钥文件-rsa-private-key-pem" class="headerlink" title="命令生成原始 RSA私钥文件 rsa_private_key.pem"></a>命令生成原始 RSA私钥文件 rsa_private_key.pem</h3><figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">openssl genrsa -out rsa_private_key.pem 1024</div></pre></td></tr></table></figure>
<h3 id="命令将原始-RSA私钥转换为-pkcs8格式"><a href="#命令将原始-RSA私钥转换为-pkcs8格式" class="headerlink" title="命令将原始 RSA私钥转换为 pkcs8格式"></a>命令将原始 RSA私钥转换为 pkcs8格式</h3><figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">openssl pkcs8 -topk8 -inform PEM -<span class="keyword">in</span> rsa_private_key.pem -outform PEM -nocrypt -out private_key.pem</div></pre></td></tr></table></figure>
<h3 id="生成RSA公钥-rsa-public-key-pem"><a href="#生成RSA公钥-rsa-public-key-pem" class="headerlink" title="生成RSA公钥 rsa_public_key.pem"></a>生成RSA公钥 rsa_public_key.pem</h3><figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">openssl rsa -<span class="keyword">in</span> rsa_private_key.pem -pubout -out rsa_public_key.pem</div></pre></td></tr></table></figure>
<blockquote>
<p>从上面看出通过私钥能生成对应的公钥，因此我们将私钥<code>private_key.pem</code>用在<em>服务器端</em>，<em>公钥</em>发放给<code>android</code>跟<code>ios</code>等前端</p>
</blockquote>
<h2 id="第二步-php代码实现"><a href="#第二步-php代码实现" class="headerlink" title="第二步 php代码实现"></a>第二步 php代码实现</h2><figure class="highlight php"><table><tr><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@author</span> sunyazhou (http://www.sunyazhou.com/)</div><div class="line"> * <span class="doctag">@version</span> 1.0</div><div class="line"> * <span class="doctag">@created</span> 2017-6-25</div><div class="line"> */</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rsa</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> $PRIVATE_KEY = <span class="string">'-----BEGIN PRIVATE KEY-----</span></div><div class="line">xxxxxxxxxxxxxxxxxxxxx</div><div class="line">/xxxxxxxxxxxxxxxxxxxxx</div><div class="line">y4dDpCOn</div><div class="line">A4tBsIdpMMoT+w==</div><div class="line">-----END PRIVATE KEY-----';</div><div class="line">    <span class="comment">/**</span></div><div class="line">    *返回对应的私钥</div><div class="line">    */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getPrivateKey</span><span class="params">()</span></span>&#123;</div><div class="line">    </div><div class="line">        $privKey = <span class="keyword">self</span>::$PRIVATE_KEY;</div><div class="line">         </div><div class="line">        <span class="keyword">return</span> openssl_pkey_get_private($privKey);      </div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 私钥加密</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">privEncrypt</span><span class="params">($data)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(!is_string($data))&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;           </div><div class="line">        <span class="keyword">return</span> openssl_private_encrypt($data,$encrypted,<span class="keyword">self</span>::getPrivateKey())? base64_encode($encrypted) : <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 私钥解密</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">privDecrypt</span><span class="params">($encrypted)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(!is_string($encrypted))&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> (openssl_private_decrypt(base64_decode($encrypted), $decrypted, <span class="keyword">self</span>::getPrivateKey()))? $decrypted : <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>打开<code>private_key.pem</code>，将上面的$PRIVATE_KEY，替换成private_key.pem的内容即可，服务器端我们只需要使用私钥来加密解密。</p>
<h2 id="第三步-android端-代码实现"><a href="#第三步-android端-代码实现" class="headerlink" title="第三步 android端 代码实现"></a>第三步 android端 代码实现</h2><p>使用java的Cipher类来实现加密解密类，代码如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</div><div class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</div><div class="line"><span class="keyword">import</span> java.io.InputStream;</div><div class="line"><span class="keyword">import</span> java.security.KeyFactory;</div><div class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</div><div class="line"><span class="keyword">import</span> java.security.PublicKey;</div><div class="line"><span class="keyword">import</span> java.security.spec.X509EncodedKeySpec;</div><div class="line"><span class="keyword">import</span> javax.crypto.Cipher;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> android.util.Base64;</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@author</span> alun (http://alunblog.duapp.com)</div><div class="line"> * <span class="doctag">@version</span> 1.0</div><div class="line"> * <span class="doctag">@created</span> 2013-5-17</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rsa</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String RSA_PUBLICE =</div><div class="line">            <span class="string">"xxxxxxxxxxxxxxxxC"</span> + <span class="string">"\r"</span> +</div><div class="line">            <span class="string">"Qf/xxxxxxxhVuwdNH6aRFE0ms3bkpp/WL4cfVDgnCO"</span> + <span class="string">"\r"</span> +</div><div class="line">            <span class="string">"+W9J6vRVpuTuD/xxxxxxxxbJeO74fYnYqo/mmyJSeLE5iZg4I"</span> + <span class="string">"\r"</span> +</div><div class="line">            <span class="string">"Zm5LPWBZWUp3ULCAZQIDAQAB"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ALGORITHM = <span class="string">"RSA"</span>;</div><div class="line"> </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 得到公钥</div><div class="line">     * <span class="doctag">@param</span> algorithm</div><div class="line">     * <span class="doctag">@param</span> bysKey</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> PublicKey <span class="title">getPublicKeyFromX509</span><span class="params">(String algorithm,</span></span></div><div class="line">            String bysKey) <span class="keyword">throws</span> NoSuchAlgorithmException, Exception &#123;</div><div class="line">        <span class="keyword">byte</span>[] decodedKey = Base64.decode(bysKey,Base64.DEFAULT);</div><div class="line">        X509EncodedKeySpec x509 = <span class="keyword">new</span> X509EncodedKeySpec(decodedKey);</div><div class="line"> </div><div class="line">        KeyFactory keyFactory = KeyFactory.getInstance(algorithm);</div><div class="line">        <span class="keyword">return</span> keyFactory.generatePublic(x509);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 使用公钥加密</div><div class="line">     * <span class="doctag">@param</span> content</div><div class="line">     * <span class="doctag">@param</span> key</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encryptByPublic</span><span class="params">(String content)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            PublicKey pubkey = getPublicKeyFromX509(ALGORITHM, RSA_PUBLICE);</div><div class="line"> </div><div class="line">            Cipher cipher = Cipher.getInstance(<span class="string">"RSA/ECB/PKCS1Padding"</span>);</div><div class="line">            cipher.init(Cipher.ENCRYPT_MODE, pubkey);</div><div class="line"> </div><div class="line">            <span class="keyword">byte</span> plaintext[] = content.getBytes(<span class="string">"UTF-8"</span>);</div><div class="line">            <span class="keyword">byte</span>[] output = cipher.doFinal(plaintext);</div><div class="line"> </div><div class="line">            String s = <span class="keyword">new</span> String(Base64.encode(output,Base64.DEFAULT));</div><div class="line"> </div><div class="line">            <span class="keyword">return</span> s;</div><div class="line"> </div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="comment">/**</span></div><div class="line">    * 使用公钥解密</div><div class="line">    * <span class="doctag">@param</span> content 密文</div><div class="line">    * <span class="doctag">@param</span> key 商户私钥</div><div class="line">    * <span class="doctag">@return</span> 解密后的字符串</div><div class="line">    */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">decryptByPublic</span><span class="params">(String content)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            PublicKey pubkey = getPublicKeyFromX509(ALGORITHM, RSA_PUBLICE);</div><div class="line">            Cipher cipher = Cipher.getInstance(<span class="string">"RSA/ECB/PKCS1Padding"</span>);</div><div class="line">            cipher.init(Cipher.DECRYPT_MODE, pubkey);</div><div class="line">            InputStream ins = <span class="keyword">new</span> ByteArrayInputStream(Base64.decode(content,Base64.DEFAULT));</div><div class="line">            ByteArrayOutputStream writer = <span class="keyword">new</span> ByteArrayOutputStream();</div><div class="line">            <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">128</span>];</div><div class="line">            <span class="keyword">int</span> bufl;</div><div class="line">            <span class="keyword">while</span> ((bufl = ins.read(buf)) != -<span class="number">1</span>) &#123;</div><div class="line">                <span class="keyword">byte</span>[] block = <span class="keyword">null</span>;</div><div class="line">                <span class="keyword">if</span> (buf.length == bufl) &#123;</div><div class="line">                block = buf;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                block = <span class="keyword">new</span> <span class="keyword">byte</span>[bufl];</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bufl; i++) &#123;</div><div class="line">                    block[i] = buf[i];</div><div class="line">                &#125;</div><div class="line">                &#125;</div><div class="line">                writer.write(cipher.doFinal(block));</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> String(writer.toByteArray(), <span class="string">"utf-8"</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong><em>注意:</em></strong>在初始化<code>Cipher</code>对象时，一定要指明使用<code>&quot;RSA/ECB/PKCS1Padding&quot;</code>格式如<code>Cipher.getInstance(&quot;RSA/ECB/PKCS1Padding&quot;);</code><br>打开<code>rsa_public_key.pem</code>文件，将上面代码的<code>RSA_PUBLICE</code>替换成其中内容即可.</p>
<h2 id="第四步-iOS端代码实现"><a href="#第四步-iOS端代码实现" class="headerlink" title="第四步 iOS端代码实现"></a>第四步 iOS端代码实现</h2><p>iOS上没有直接处理RSA加密的API，网上说的大多数也是处理X.509的证书的方法来实现，不过X.509证书是带签名的，在php端<code>openssl_pkey_get_private</code>方法获取密钥时，第二个参数需要传签名，而android端实现X.509证书加密解密较为不易，在这里我们利用ios兼容c程序的特点，利用openssl的api实现rsa的加密解密，代码如下：</p>
<p>CRSA.h代码</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  CRSA.h</span></div><div class="line"><span class="comment">//  RSA_C_demo</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by sunyazhou on 2017/6/25.</span></div><div class="line"><span class="comment">//  Copyright © 2017年 Kingsoft, Inc. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;openssl/rsa.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;openssl/pem.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;openssl/err.h&gt;</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> &#123;</div><div class="line">    KeyTypePublic,</div><div class="line">    KeyTypePrivate</div><div class="line">&#125;KeyType;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> &#123;</div><div class="line">    RSA_PADDING_TYPE_NONE       = RSA_NO_PADDING,</div><div class="line">    RSA_PADDING_TYPE_PKCS1      = RSA_PKCS1_PADDING,</div><div class="line">    RSA_PADDING_TYPE_SSLV23     = RSA_SSLV23_PADDING</div><div class="line">&#125;RSA_PADDING_TYPE;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">CRSA</span> : <span class="title">NSObject</span></span>&#123;</div><div class="line">    RSA *_rsa;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>)<span class="built_in">NSString</span> *rsaKeyPath; <span class="comment">//证书路径</span></div><div class="line"></div><div class="line">+ (<span class="keyword">id</span>)shareInstance;</div><div class="line">- (<span class="built_in">BOOL</span>)importRSAKeyFromeStringWithType:(KeyType)type andKey:(<span class="built_in">NSString</span> *)keyPath;</div><div class="line">- (<span class="built_in">BOOL</span>)importRSAKeyWithType:(KeyType)type;</div><div class="line">- (<span class="keyword">int</span>)getBlockSizeWithRSA_PADDING_TYPE:(RSA_PADDING_TYPE)padding_type;</div><div class="line">- (<span class="built_in">NSString</span> *)encryptByRsa:(<span class="built_in">NSString</span>*)content withKeyType:(KeyType)keyType;</div><div class="line">- (<span class="built_in">NSString</span> *)decryptByRsa:(<span class="built_in">NSString</span>*)content withKeyType:(KeyType)keyType;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>CRSA.m</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"></div><div class="line">//  CRSA.m</div><div class="line">//  RSA_C_demo</div><div class="line">//</div><div class="line">//  Created by sunyazhou on 2017/6/25.</div><div class="line">//  Copyright © 2017年 Kingsoft, Inc. All rights reserved.</div><div class="line">//</div><div class="line"></div><div class="line">#import &quot;CRSA.h&quot;</div><div class="line"></div><div class="line">#define BUFFSIZE  1024</div><div class="line">//#import &quot;NSString+Base64.h&quot;</div><div class="line">//#import &quot;NSData+Base64.h&quot;</div><div class="line"></div><div class="line">#define PADDING RSA_PADDING_TYPE_PKCS1</div><div class="line">@implementation CRSA</div><div class="line"></div><div class="line">+ (id)shareInstance</div><div class="line">&#123;</div><div class="line">    static KSYCRSA *_crsa = nil;</div><div class="line">    static dispatch_once_t onceToken;</div><div class="line">    dispatch_once(&amp;onceToken, ^&#123;</div><div class="line">        _crsa = [[self alloc] init];</div><div class="line">    &#125;);</div><div class="line">    return _crsa;</div><div class="line">&#125;</div><div class="line">- (BOOL)importRSAKeyWithType:(KeyType)type</div><div class="line">&#123;</div><div class="line">    FILE *file;</div><div class="line">    NSString *keyName = type == KeyTypePublic ? @&quot;public_key&quot; : @&quot;private_key&quot;;</div><div class="line">    NSString *keyPath = [[NSBundle mainBundle] pathForResource:keyName ofType:@&quot;pem&quot;];</div><div class="line">    </div><div class="line">    file = fopen([keyPath UTF8String], &quot;rb&quot;);</div><div class="line">    </div><div class="line">    if (NULL != file)</div><div class="line">    &#123;</div><div class="line">        if (type == KeyTypePublic)</div><div class="line">        &#123;</div><div class="line">            _rsa = PEM_read_RSA_PUBKEY(file, NULL, NULL, NULL);</div><div class="line">            assert(_rsa != NULL);</div><div class="line">        &#125;</div><div class="line">        else</div><div class="line">        &#123;</div><div class="line">            _rsa = PEM_read_RSAPrivateKey(file, NULL, NULL, NULL);</div><div class="line">            assert(_rsa != NULL);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        fclose(file);</div><div class="line">        </div><div class="line">        return (_rsa != NULL) ? YES : NO;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    return NO;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (BOOL)importRSAKeyWithPath:(KeyType)type</div><div class="line">&#123;</div><div class="line">    FILE *file;</div><div class="line">    NSString *keyName = type == KeyTypePublic ? @&quot;public_key.pem&quot; : @&quot;private_key.pem&quot;;</div><div class="line">    NSString *keyPath = [self.rsaKeyPath stringByAppendingPathComponent:keyName];</div><div class="line">    file = fopen([keyPath UTF8String], &quot;rb&quot;);</div><div class="line">    </div><div class="line">    if (NULL != file)</div><div class="line">    &#123;</div><div class="line">        if (type == KeyTypePublic)</div><div class="line">        &#123;</div><div class="line">            _rsa = PEM_read_RSA_PUBKEY(file, NULL, NULL, NULL);</div><div class="line">            assert(_rsa != NULL);</div><div class="line">        &#125;</div><div class="line">        else</div><div class="line">        &#123;</div><div class="line">            _rsa = PEM_read_RSAPrivateKey(file, NULL, NULL, NULL);</div><div class="line">            assert(_rsa != NULL);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        fclose(file);</div><div class="line">        </div><div class="line">        return (_rsa != NULL) ? YES : NO;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    return NO;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">- (BOOL)importRSAKeyFromeStringWithType:(KeyType)type andKey:(NSString *)key&#123;</div><div class="line">    if (key.length == 0) &#123; return NO; &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    BIO *keybio ;</div><div class="line">    keybio = BIO_new_mem_buf((__bridge void *)(key), -1);</div><div class="line">    if (keybio==NULL)</div><div class="line">    &#123;</div><div class="line">        printf( &quot;Failed to create key BIO&quot;);</div><div class="line">        return 0;</div><div class="line">    &#125;</div><div class="line">    if(type == KeyTypePublic)</div><div class="line">    &#123;</div><div class="line">        _rsa = PEM_read_bio_RSA_PUBKEY(keybio, &amp;_rsa,NULL, NULL);</div><div class="line">    &#125;</div><div class="line">    else</div><div class="line">    &#123;</div><div class="line">        _rsa = PEM_read_bio_RSAPrivateKey(keybio, &amp;_rsa,NULL, NULL);</div><div class="line">    &#125;</div><div class="line">    BIO_free(keybio);</div><div class="line">    return (_rsa != NULL) ? YES : NO;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (NSString *) encryptByRsa:(NSString*)content withKeyType:(KeyType)keyType</div><div class="line">&#123;</div><div class="line">    if (![self importRSAKeyWithPath:keyType])</div><div class="line">        return nil;</div><div class="line">//    if (![self importRSAKeyWithType:keyType])</div><div class="line">//        return nil;</div><div class="line">    </div><div class="line">    int status;</div><div class="line">    NSUInteger length  = [content length];</div><div class="line">    unsigned char input[length + 1];</div><div class="line">    bzero(input, length + 1);</div><div class="line">    int i = 0;</div><div class="line">    for (; i &lt; length; i++)</div><div class="line">    &#123;</div><div class="line">        input[i] = [content characterAtIndex:i];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    NSInteger  flen = [self getBlockSizeWithRSA_PADDING_TYPE:PADDING];</div><div class="line">    </div><div class="line">    char *encData = (char*)malloc(flen);</div><div class="line">    bzero(encData, flen);</div><div class="line">    </div><div class="line">    switch (keyType) &#123;</div><div class="line">        case KeyTypePublic:</div><div class="line">            status = RSA_public_encrypt(length, (unsigned char*)input, (unsigned char*)encData, _rsa, PADDING);</div><div class="line">            break;</div><div class="line">            </div><div class="line">        default:</div><div class="line">            status = RSA_private_encrypt(length, (unsigned char*)input, (unsigned char*)encData, _rsa, PADDING);</div><div class="line">            break;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    if (status)</div><div class="line">    &#123;</div><div class="line">        NSData *returnData = [NSData dataWithBytes:encData length:status];</div><div class="line">        free(encData);</div><div class="line">        encData = NULL;</div><div class="line">        </div><div class="line">        NSString *ret = [self base64EncodedStringForData:returnData ];</div><div class="line">        return ret;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    free(encData);</div><div class="line">    encData = NULL;</div><div class="line">    </div><div class="line">    return nil;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (NSString *) decryptByRsa:(NSString*)content withKeyType:(KeyType)keyType</div><div class="line">&#123;</div><div class="line">    if (![self importRSAKeyWithPath:keyType])</div><div class="line">        return nil;</div><div class="line">//    if (![self importRSAKeyWithType:keyType])</div><div class="line">//        return nil;</div><div class="line">    </div><div class="line">    int status;</div><div class="line">    </div><div class="line">    NSData *data = [self base64DecodedDataForString:content];</div><div class="line">    NSUInteger length = [data length];</div><div class="line">    </div><div class="line">    NSInteger flen = [self getBlockSizeWithRSA_PADDING_TYPE:PADDING];</div><div class="line">    char *decData = (char*)malloc(flen);</div><div class="line">    bzero(decData, flen);</div><div class="line">    </div><div class="line">    switch (keyType) &#123;</div><div class="line">        case KeyTypePublic:</div><div class="line">            status = RSA_public_decrypt(length, (unsigned char*)[data bytes], (unsigned char*)decData, _rsa, PADDING);</div><div class="line">            break;</div><div class="line">            </div><div class="line">        default:</div><div class="line">            status = RSA_private_decrypt(length, (unsigned char*)[data bytes], (unsigned char*)decData, _rsa, PADDING);</div><div class="line">            break;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    if (status)</div><div class="line">    &#123;</div><div class="line">        NSMutableString *decryptString = [[NSMutableString alloc] initWithBytes:decData length:strlen(decData) encoding:NSASCIIStringEncoding];</div><div class="line">        free(decData);</div><div class="line">        decData = NULL;</div><div class="line">        </div><div class="line">        return decryptString;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    free(decData);</div><div class="line">    decData = NULL;</div><div class="line">    </div><div class="line">    return nil;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (int)getBlockSizeWithRSA_PADDING_TYPE:(RSA_PADDING_TYPE)padding_type</div><div class="line">&#123;</div><div class="line">    int len = RSA_size(_rsa);</div><div class="line">    </div><div class="line">    if (padding_type == RSA_PADDING_TYPE_PKCS1 || padding_type == RSA_PADDING_TYPE_SSLV23) &#123;</div><div class="line">        len -= 11;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    return len;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">//---------------加密工具方法</div><div class="line">- (NSString *)base64EncodedStringForData:(NSData *)data</div><div class="line">&#123;</div><div class="line">    return [self base64EncodedStringWithWrapWidth:0 data:data];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (NSString *)base64EncodedStringWithWrapWidth:(NSUInteger)wrapWidth data:(NSData *)data</div><div class="line">&#123;</div><div class="line">    //ensure wrapWidth is a multiple of 4</div><div class="line">    wrapWidth = (wrapWidth / 4) * 4;</div><div class="line">    </div><div class="line">    const char lookup[] = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;;</div><div class="line">    </div><div class="line">    long long inputLength = [data length];</div><div class="line">    const unsigned char *inputBytes = [data bytes];</div><div class="line">    </div><div class="line">    long long maxOutputLength = (inputLength / 3 + 1) * 4;</div><div class="line">    maxOutputLength += wrapWidth? (maxOutputLength / wrapWidth) * 2: 0;</div><div class="line">    unsigned char *outputBytes = (unsigned char *)malloc(maxOutputLength);</div><div class="line">    </div><div class="line">    long long i;</div><div class="line">    long long outputLength = 0;</div><div class="line">    for (i = 0; i &lt; inputLength - 2; i += 3)</div><div class="line">    &#123;</div><div class="line">        outputBytes[outputLength++] = lookup[(inputBytes[i] &amp; 0xFC) &gt;&gt; 2];</div><div class="line">        outputBytes[outputLength++] = lookup[((inputBytes[i] &amp; 0x03) &lt;&lt; 4) | ((inputBytes[i + 1] &amp; 0xF0) &gt;&gt; 4)];</div><div class="line">        outputBytes[outputLength++] = lookup[((inputBytes[i + 1] &amp; 0x0F) &lt;&lt; 2) | ((inputBytes[i + 2] &amp; 0xC0) &gt;&gt; 6)];</div><div class="line">        outputBytes[outputLength++] = lookup[inputBytes[i + 2] &amp; 0x3F];</div><div class="line">        </div><div class="line">        //add line break</div><div class="line">        if (wrapWidth &amp;&amp; (outputLength + 2) % (wrapWidth + 2) == 0)</div><div class="line">        &#123;</div><div class="line">            outputBytes[outputLength++] = &apos;\r&apos;;</div><div class="line">            outputBytes[outputLength++] = &apos;\n&apos;;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //handle left-over data</div><div class="line">    if (i == inputLength - 2)</div><div class="line">    &#123;</div><div class="line">        // = terminator</div><div class="line">        outputBytes[outputLength++] = lookup[(inputBytes[i] &amp; 0xFC) &gt;&gt; 2];</div><div class="line">        outputBytes[outputLength++] = lookup[((inputBytes[i] &amp; 0x03) &lt;&lt; 4) | ((inputBytes[i + 1] &amp; 0xF0) &gt;&gt; 4)];</div><div class="line">        outputBytes[outputLength++] = lookup[(inputBytes[i + 1] &amp; 0x0F) &lt;&lt; 2];</div><div class="line">        outputBytes[outputLength++] =   &apos;=&apos;;</div><div class="line">    &#125;</div><div class="line">    else if (i == inputLength - 1)</div><div class="line">    &#123;</div><div class="line">        // == terminator</div><div class="line">        outputBytes[outputLength++] = lookup[(inputBytes[i] &amp; 0xFC) &gt;&gt; 2];</div><div class="line">        outputBytes[outputLength++] = lookup[(inputBytes[i] &amp; 0x03) &lt;&lt; 4];</div><div class="line">        outputBytes[outputLength++] = &apos;=&apos;;</div><div class="line">        outputBytes[outputLength++] = &apos;=&apos;;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //truncate data to match actual output length</div><div class="line">    outputBytes = realloc(outputBytes, outputLength);</div><div class="line">    NSString *result = [[NSString alloc] initWithBytesNoCopy:outputBytes length:outputLength encoding:NSASCIIStringEncoding freeWhenDone:YES];</div><div class="line">    </div><div class="line">#if !__has_feature(objc_arc)</div><div class="line">    [result autorelease];</div><div class="line">#endif</div><div class="line">    </div><div class="line">    return (outputLength &gt;= 4)? result: nil;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">- (NSData *)base64DecodedDataForString:(NSString *)string</div><div class="line">&#123;</div><div class="line">    return [self dataWithBase64EncodedString:string];</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">- (NSData *)dataWithBase64EncodedString:(NSString *)string</div><div class="line">&#123;</div><div class="line">    const char lookup[] =</div><div class="line">    &#123;</div><div class="line">        99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99,</div><div class="line">        99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99,</div><div class="line">        99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 62, 99, 99, 99, 63,</div><div class="line">        52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 99, 99, 99, 99, 99, 99,</div><div class="line">        99,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14,</div><div class="line">        15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 99, 99, 99, 99, 99,</div><div class="line">        99, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,</div><div class="line">        41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 99, 99, 99, 99, 99</div><div class="line">    &#125;;</div><div class="line">    </div><div class="line">    NSData *inputData = [string dataUsingEncoding:NSASCIIStringEncoding allowLossyConversion:YES];</div><div class="line">    long long inputLength = [inputData length];</div><div class="line">    const unsigned char *inputBytes = [inputData bytes];</div><div class="line">    </div><div class="line">    long long maxOutputLength = (inputLength / 4 + 1) * 3;</div><div class="line">    NSMutableData *outputData = [NSMutableData dataWithLength:maxOutputLength];</div><div class="line">    unsigned char *outputBytes = (unsigned char *)[outputData mutableBytes];</div><div class="line">    </div><div class="line">    int accumulator = 0;</div><div class="line">    long long outputLength = 0;</div><div class="line">    unsigned char accumulated[] = &#123;0, 0, 0, 0&#125;;</div><div class="line">    for (long long i = 0; i &lt; inputLength; i++)</div><div class="line">    &#123;</div><div class="line">        unsigned char decoded = lookup[inputBytes[i] &amp; 0x7F];</div><div class="line">        if (decoded != 99)</div><div class="line">        &#123;</div><div class="line">            accumulated[accumulator] = decoded;</div><div class="line">            if (accumulator == 3)</div><div class="line">            &#123;</div><div class="line">                outputBytes[outputLength++] = (accumulated[0] &lt;&lt; 2) | (accumulated[1] &gt;&gt; 4);</div><div class="line">                outputBytes[outputLength++] = (accumulated[1] &lt;&lt; 4) | (accumulated[2] &gt;&gt; 2);</div><div class="line">                outputBytes[outputLength++] = (accumulated[2] &lt;&lt; 6) | accumulated[3];</div><div class="line">            &#125;</div><div class="line">            accumulator = (accumulator + 1) % 4;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //handle left-over data</div><div class="line">    if (accumulator &gt; 0) outputBytes[outputLength] = (accumulated[0] &lt;&lt; 2) | (accumulated[1] &gt;&gt; 4);</div><div class="line">    if (accumulator &gt; 1) outputBytes[++outputLength] = (accumulated[1] &lt;&lt; 4) | (accumulated[2] &gt;&gt; 2);</div><div class="line">    if (accumulator &gt; 2) outputLength++;</div><div class="line">    </div><div class="line">    //truncate data to match actual output length</div><div class="line">    outputData.length = outputLength;</div><div class="line">    return outputLength? outputData: nil;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>这里面我增加了 密钥直接从字符串读取的方法 原来方法是 从<code>NSBundle</code>读取private_key.pem和 public_key.pem 但是考虑到被篡改 我增加了 密钥直接搞成字符串(把字符串写到本地沙盒然后加载文件的方式) 这样代码 安全就提高了一些 如果能破译.m的话 拿到的也只能是 publicKey(公钥) 只要不能篡改 就是安全的 </p>
</blockquote>
<h3 id="外部调用"><a href="#外部调用" class="headerlink" title="外部调用"></a>外部调用</h3><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="built_in">NSString</span> *publicKey = <span class="string">@"-----BEGIN PUBLIC KEY-----\n此处替换生成的公钥 记得换行 按照一定规则加'\n'  \n-----END PUBLIC KEY-----"</span>;</div><div class="line">    </div><div class="line">    <span class="built_in">NSString</span> *privateKey = <span class="string">@"-----BEGIN PRIVATE KEY-----\n  此处替换生成的私钥 \n-----END PRIVATE KEY-----"</span>;</div><div class="line">    </div><div class="line">    <span class="built_in">NSFileManager</span> *fm = [<span class="built_in">NSFileManager</span> defaultManager];</div><div class="line">    </div><div class="line">    <span class="comment">// 获取Documents目录路径</span></div><div class="line">    <span class="built_in">NSString</span> *docDir = [<span class="built_in">NSSearchPathForDirectoriesInDomains</span>(<span class="built_in">NSDocumentDirectory</span>, <span class="built_in">NSUserDomainMask</span>, <span class="literal">YES</span>) firstObject];</div><div class="line">    <span class="built_in">NSString</span> *bundleIdentifier = [[<span class="built_in">NSBundle</span> mainBundle] bundleIdentifier];</div><div class="line">    <span class="built_in">NSString</span> *path = [docDir stringByAppendingFormat:<span class="string">@"/%@"</span>,bundleIdentifier];</div><div class="line">    <span class="built_in">NSString</span> *publicKeyPath = [path stringByAppendingPathComponent:<span class="string">@"public_key.pem"</span>];</div><div class="line">    <span class="built_in">NSString</span> *privateKeyPath = [path stringByAppendingPathComponent:<span class="string">@"private_key.pem"</span>];</div><div class="line">    </div><div class="line">    <span class="built_in">BOOL</span> isDir;</div><div class="line">    <span class="built_in">BOOL</span> exists = [fm fileExistsAtPath:path isDirectory:&amp;isDir];</div><div class="line">    <span class="keyword">if</span> (exists) &#123;</div><div class="line">        <span class="comment">/* file exists */</span></div><div class="line">        <span class="keyword">if</span> (isDir) &#123;</div><div class="line">            <span class="built_in">NSError</span> *error = <span class="literal">nil</span>;</div><div class="line">            <span class="built_in">BOOL</span> pubResult = [publicKey writeToFile:publicKeyPath atomically:<span class="literal">YES</span> encoding:<span class="built_in">NSUTF8StringEncoding</span> error:&amp;error];</div><div class="line">            <span class="keyword">if</span> (error) &#123;</div><div class="line">                <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,[error localizedDescription]);</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">BOOL</span> privateResult = [privateKey writeToFile:privateKeyPath atomically:<span class="literal">YES</span> encoding:<span class="built_in">NSUTF8StringEncoding</span> error:&amp;error];</div><div class="line">            <span class="keyword">if</span> (error) &#123;</div><div class="line">                <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,[error localizedDescription]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;<span class="keyword">else</span> &#123;</div><div class="line">        [fm createDirectoryAtPath:path withIntermediateDirectories:<span class="literal">YES</span> attributes:<span class="literal">nil</span> error:<span class="literal">nil</span>];</div><div class="line">        <span class="built_in">NSError</span> *error = <span class="literal">nil</span>;</div><div class="line">        <span class="built_in">BOOL</span> pubResult = [publicKey writeToFile:publicKeyPath atomically:<span class="literal">YES</span> encoding:<span class="built_in">NSUTF8StringEncoding</span> error:&amp;error];</div><div class="line">        <span class="keyword">if</span> (error) &#123;</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,[error localizedDescription]);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">BOOL</span> privateResult = [privateKey writeToFile:privateKeyPath atomically:<span class="literal">YES</span> encoding:<span class="built_in">NSUTF8StringEncoding</span> error:&amp;error];</div><div class="line">        <span class="keyword">if</span> (error) &#123;</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,[error localizedDescription]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    rsa.rsaKeyPath = path;</div><div class="line">    [rsa importRSAKeyFromeStringWithType:KeyTypePublic andKey:publicKeyPath];</div><div class="line">    </div><div class="line">    [rsa importRSAKeyFromeStringWithType:KeyTypePrivate andKey:privateKeyPath];</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="built_in">NSString</span> *pubDesc = [rsa encryptByRsa:<span class="string">@"需要加密的字符串"</span> withKeyType:KeyTypePrivate];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"加密内容:%@\n--------\n"</span>,encryptString);</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"摘要:\n---------\n%@\n--------\n"</span>,pubDesc);</div><div class="line">    </div><div class="line">    <span class="comment">//剩下的大家自己探索一下 没什么难度</span></div></pre></td></tr></table></figure>
<p>其中openssl api包，我们可以在第一步RSA密钥生成工具openssl的include文件夹中得到</p>
<p>下面我说一下如何集成openssl到 iOS工程 </p>
<h3 id="1-下载-openssl-library"><a href="#1-下载-openssl-library" class="headerlink" title="1.下载 openssl library"></a>1.下载 openssl library</h3><p><a href="https://github.com/st3fan/ios-openssl" target="_blank" rel="external">openssl ios下载</a></p>
<h3 id="2-导入到工程中"><a href="#2-导入到工程中" class="headerlink" title="2.导入到工程中"></a>2.导入到工程中</h3><p>拖拽 openssl的库 <em>(包含 <code>include</code> &amp; <code>lib</code> 的文件夹 )</em>到工程中 </p>
<p>然后 去 project targets -&gt; <code>Build Settings</code></p>
<ul>
<li>找到 <strong>Header Search Paths</strong>, 添加 <code>&quot;${SRCROOT}/Libraries/openssl/include&quot;</code> 为你的工程</li>
<li>找到 <strong>Library Search Paths</strong>, 添加 <code>&quot;${SRCROOT}/Libraries/openssl/lib&quot;</code> </li>
</ul>
<p>然后就可以了如果中间出问题 请检查一下目录是否正确理论上应该是OK的</p>
<p>–</p>
<h2 id="最后说一下我遇到RSA加密的坑"><a href="#最后说一下我遇到RSA加密的坑" class="headerlink" title="最后说一下我遇到RSA加密的坑"></a>最后说一下我遇到RSA加密的坑</h2><p>在iOS端加密 生成摘要到android的时候 android解析不出来(有时候解析出结果前面 一堆乱码) 这是base64有问题  建议 android使用原生的恩</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> android.util.Base64;</div></pre></td></tr></table></figure>
<p>如果是iOS 请使用 如下 Base64<br><a href="https://github.com/nicklockwood/Base64" target="_blank" rel="external">base64来源</a></p>
<p>上边的ios 的base64和android一一对应 不要理解错了 随便搞个Base64就行了  不信我 你可以试试</p>
<p>base64的代码我已经把代码实现写到<code>CRSA.m</code>了 如果像剥离很简单</p>
<p>好 demo我就不写了 已经把所有实现都搞上去了 </p>
<p>希望大家找到 好使的RSA方法实现 如果有问题 随时留言 </p>
<p>最后我说一句 很简单的一个RSA跨平台方案 那些抄袭CSDN的文章小伙伴 少坑点人 连搜索引擎都不会放过你</p>
<p>全文完 </p>
<p><a href="https://www.lvtao.net/dev/android_ios_php_openssl.html" target="_blank" rel="external">参考</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/rsa-universal-cross-platform-ios-android-php/
    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="macOS开发" scheme="https://www.sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="安全" scheme="https://www.sunyazhou.com/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
</feed>
