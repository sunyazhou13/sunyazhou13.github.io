<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>東引甌越</title>
  <subtitle>不断学习, 与时俱进.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.sunyazhou.com/"/>
  <updated>2019-01-01T08:43:21.891Z</updated>
  <id>https://www.sunyazhou.com/</id>
  
  <author>
    <name>sunyazhou</name>
    <email>sunyazhou13@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2018年终总结</title>
    <link href="https://www.sunyazhou.com/2018/12/28/20181228FinalSummary/"/>
    <id>https://www.sunyazhou.com/2018/12/28/20181228FinalSummary/</id>
    <published>2018-12-28T15:04:41.000Z</published>
    <updated>2019-01-01T08:43:21.891Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/9e263dd6fbfaf3cb12eee6ebcbfff3519dc5f9eb/20181231FinalSummary/1500x500.JPEG" alt=""></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p><strong>埋头苦干尽五年,晨起面镜白发先.</strong><br><strong>一年到头不见泪,岁月荏苒冬却寒.</strong><br><strong>仿佛回到一三年,北京站前望着天.</strong><br><strong>北漂掘金那刻起,人生已无再少年.</strong></p>
</blockquote>
<p><img src="https://ws1.sinaimg.cn/mw690/bf8500b1ly1fya3hev8jmg208004dkjm.gif" alt=""></p>
<p><em>我要是能像你那么潇洒就好了,有时候你能做的事情我却做不到,我相信正义,可是没人相信我…</em></p>
<p><strong>这一年过的像网速一样快,看着年末又到了,我依然得墨守陈规的交出我的2018年终总结</strong></p>
<h2 id="2018回顾"><a href="#2018回顾" class="headerlink" title="2018回顾"></a>2018回顾</h2><p>这一年的清单如下:</p>
<ul>
<li>工作</li>
<li>演唱会</li>
<li>读书</li>
<li>技术</li>
<li>坚持</li>
<li>生活</li>
<li>故事</li>
<li>百年</li>
<li>总结</li>
</ul>
<p>很精彩…</p>
<h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><p>这一年我很动荡,4月份从金山云到了快手.负责开发快手iOS国内版App的直播业务.我是一个不太喜欢换工作的人.从百度一路走来,回头看除了心酸和热泪盈眶…</p>
<p>来到了快手,感觉到这个公司确实很有意思,是参加工作以来我认为最值得去的一个公司,因为我在与一群清华的学子为伍,与北邮的小伙伴肩并肩,这里基本50%都是清华系,老实说,当我面试的时候从上午10点面到下午4点多,我都不知道我是怎么面过的时候,我真的想放弃了,如果不面吐的面试那只能算唠嗑.团队的中坚力量来自于麻省理工学院,以及Facebook来的大佬.这其实是一种收获,一种能与世界顶尖大学的毕业生一起工作的机会,虽然我的工作经历算不上有多好,不过能与这样的小伙伴为伍我应该感到荣幸,当然自己不能太low.他们身上有我值得学习地方,我不喜欢横向对比,只喜欢纵向对比,对比那些比我优秀的人.</p>
<blockquote>
<p>北邮(北京邮电大学)被誉为计算机界的黄埔军校,录入分数仅次于清华几分.</p>
</blockquote>
<p>说完了我的感受,我再说一下这家公司的价值观,从我肤浅的认知价值观来看这家公司,确实很值得<strong>尊重</strong>,我只说两点:</p>
<ul>
<li>第一:接地气,如果你喜欢抖音,那我只能说你太不切实际,因为抖音的美女瘦身都是AI通过肢体识别实现的,换句话说你在被忽悠,再说抖音的视频中的内容,豪车,豪宅,高贵轻奢的生活,品质高档的餐厅…<strong>我就想问你,中国有多少人能过的上你在抖音视频中能看到的生活,你能吗？你能开着劳斯莱斯有事没事的炫耀吗?</strong>快手不一样,这里你能看到底层的劳动人民为了美好的生活而付出的实践行动,他们没有好的背景,他们真的只有背影,那种背影就是他们拍摄的视频的时候,这就是他们真实生活的写照…</li>
<li>第二:不像主播倾斜流量.基本不签约明星,名人,让每个普通人能凭借自己的本领脱颖而出,这换句话说就是在用互联网帮助每个人得到公平.(倾斜流量就是把一些高端名人推荐给你让你默认就关注他就跟微博似的最后整的都没法正常说话发东西.全是劈天盖地的牛皮癣广告)</li>
</ul>
<blockquote>
<p>回头再来看看BAT 哪家敢站出来说自己做到了上边这两点.做到了的在底部评论区扣1.</p>
</blockquote>
<p>今年来快手又两件事让我很高兴</p>
<ul>
<li>杭州之旅</li>
<li>快手家乡</li>
</ul>
<h4 id="南下杭州"><a href="#南下杭州" class="headerlink" title="南下杭州"></a>南下杭州</h4><p>刚到这家公司不久就赶上了Team Building(团队建设),去杭州 我从未去过杭州,第一站是杭州的海宁</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/5b7ec1d2b93ef37e0298da61b8ca8d2fead18ac1/20181231FinalSummary/haining.jpg" alt=""></p>
<blockquote>
<p>当年孙中山先生就是在这里下车去钱塘江观潮</p>
</blockquote>
<p>西塘,在家乡我习惯了23年的低矮平房,从未见过如下得建筑风格,这种徽系的白墙瓦房有一种中国地方的特色</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/d7b92c1b06942ffcae31bb001359836d2030e016/20181231FinalSummary/hangzhou2.jpg" alt=""></p>
<blockquote>
<p>真是栏杆拍遍吴钩看了，无人会登临意,休说鲈鱼堪脍尽西风季鹰归未…</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/d7b92c1b06942ffcae31bb001359836d2030e016/20181231FinalSummary/hangzhou1.jpg" alt=""></p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/fc87f192bde618d91574bf116c58409d5e4f1023/20181231FinalSummary/hangzhou3.jpg" alt=""></p>
<p>这里曾经是<strong>伍子胥（公元前559年—公元前484年,大约是春秋末年）</strong> 兴修的水利工程,我对春秋末年吴王夫差越王勾践的故事记忆犹新,但对吴国的风土人情的认知仅限于上学时候读的<strong>《史记》</strong>内容描述,从未亲自来到这里.虽然我的认知十分肤浅,但看到了江南风情的别具一格还是令我肃然起敬,从北京到杭州的列车上,途径山东泰山,苏州的姑苏城,上海的长江流域.长江三角洲的确不同于我的家乡东北,这里物流车辆远高于在东北的任何高速,从这一点就可以客观的发现江浙一带经济比东北要发达的多.这一路我几乎一夜没睡,各地都在大兴土木搞基建,火车途径每一个城市附近周边都很明显的发现塔吊楼房,正在施工作业.</p>
<p>江南的风景如画的确如此.</p>
<p><strong>杭州之旅我路过了钱塘江</strong></p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/5b7ec1d2b93ef37e0298da61b8ca8d2fead18ac1/20181231FinalSummary/qiantangriver.jpg" alt=""></p>
<p>这一幕让我不禁的想起初一时候清晨背诵的一首白居易的《钱塘湖春行》</p>
<p>当我身临其境的感受钱塘江的时候,我只有一个感慨,此情此景如果我是白居易我也一样能做出一首诗,这一幕也许在东北几乎是感受不到的.对于一个东北的孩子,让他有诗人的灵感的前提是他需要有这样的环境和人文历史.我喜欢比较我的家乡和我去过的所有地方,在我的家乡冰天雪地,夏季没有像江南的小桥流水人家,没有古道西风瘦马,更没有夕阳西下断肠人在天涯…我的家乡只有黑土地和森林,以及一望无际的平原,唯一一条松花江还只是我们从电视上才能感受到唯一人文地理.地域的文化差距是截然不同的,但是我们的初中依然要学习白居易的《钱塘湖春行》这种以我看来就是为了应付考试的任务文章已经脱离地域特色,变得毫无意义.我并不是偏激,学识渊博是好的,但是,需要了解自己的生活地域和文化我认为比背诵白居易的《钱塘湖春行》更有意义.</p>
<h4 id="快手家乡"><a href="#快手家乡" class="headerlink" title="快手家乡"></a>快手家乡</h4><p>今年晚些时候, 快手征求全公司员工意见,为一部分员工的家乡树立广告牌,我很幸运,成为了其中之一</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/13fb4cba3ab24f4d00201b7dae171b65633c06f6/20181231FinalSummary/kwaihometown.JPG" alt=""></p>
<p>我也从未想过有一天我能登上海伦的京都广告牌,成为快手的形象代言人之一,这要是在百度估计即便升到T8也未曾有如此这般的待遇吧! 真的很感谢快手,<strong>这是一家有人文主义精神和艺术气质的公司.</strong></p>
<p>工作的内容大概就介绍这么多吧! 现在的工作和团队还是不错的.就像我前边说的那样,与清华的学子为伍,与北邮的小伙伴肩并肩.这一切不是每个人都能在工作中遇到的.</p>
<h2 id="演唱会"><a href="#演唱会" class="headerlink" title="演唱会"></a>演唱会</h2><p>今年夏天,伍佰在北京五棵松体育馆 凯迪拉克中心开个人演唱会,这么多年我从未参加过任何一个明星真正意义上的演唱会.2013年的时候刘德华在北京开个人演唱会,由于当时没有舍得花钱买票,所以至今都觉得遗憾,当时刘德华的门票 ￥980一张. 如今伍佰的演唱会门票￥680一张,我买了两张,这一次说什么也要去看一看,以前因为工作没多久,花钱的确不敢大手大脚.</p>
<p>首席看台</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/42510f7a70af133d03d2a2060f3604e7163be3aa/20181231FinalSummary/chinablue2.jpg" alt=""></p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/42510f7a70af133d03d2a2060f3604e7163be3aa/20181231FinalSummary/chinablue3.jpg" alt=""></p>
<p>我记得第一次听伍佰的歌的时候是2000年左右,那时候我寄人篱下在我舅家东胜村,去双胜去上初中初一,有一次去一个叫镇东的地方全班同学都去听文艺演出,我坐在拖拉机的后车斗上,唱着伍佰的《白鸽》那时候还不知道MP3是什么东西,能听上这首录用磁带已经很满足了</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/61ad05a558d65fd4714b431755cbd8cfd810ca53/20181231FinalSummary/opentheshow.gif" alt=""></p>
<p>在伍佰的演唱会上开场的第二首想起的就是这首《白鸽》,唱出我的初中回忆,那个时候很穷,后来才知道还有一首成名曲叫《挪威的森林》.</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/42510f7a70af133d03d2a2060f3604e7163be3aa/20181231FinalSummary/chinablue1.gif" alt=""></p>
<p>当全场一起演唱挪威的森林的时候 那种场合的效果,绝对比KTV好多了.真的是前所未有,老实说 现场的声音算是原声了,这场演唱会真的值得.</p>
<p>伍佰说:”他的歌曲99%都是自己的原创” 不过仔细听过他的歌曲 真的很多经典<br>这中间伍佰唱了一首我第一感觉我没听过的歌曲,但是很好听,后来才得知叫<strong>《被动》</strong>,推荐给你们听听.</p>
<h2 id="读书"><a href="#读书" class="headerlink" title="读书"></a>读书</h2><p>这一年严格意义上来说我的眼睛很疼,每天至少14小时对着显示器,所以我列举了一些今年连看带听的书籍.</p>
<p>《晚清的最后十八年4》<br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/2e584f112f9b0f935c97330a521b0c3ee4536ab6/20181231FinalSummary/wanqing.jpg" alt=""></p>
<p>《曾国藩》<br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/c0bcc0e89234e74891d378696d8a596e72e27f31/20181231FinalSummary/zengguofan.jpg" alt="">  </p>
<p>《晚清重臣李鸿章》<br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/c0bcc0e89234e74891d378696d8a596e72e27f31/20181231FinalSummary/lepetit.jpg" alt=""></p>
<p>《毛泽东传》<br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20181231FinalSummary/maozedong.jpg" alt=""></p>
<p>《周总理的最后600天》<br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/68128680d7b63955098277c9815c07eedff64f14/20181231FinalSummary/zhouzongli.jpg" alt=""></p>
<p>《普京传记》<br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/68128680d7b63955098277c9815c07eedff64f14/20181231FinalSummary/%D0%92%D0%BB%D0%B0%D0%B4%D0%B8%D0%BC%D0%B8%D1%80%D0%92%D0%BB%D0%B0%D0%B4%D0%B8%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B8%D1%87%D0%9F%D1%83%D1%82%D0%B8%D0%BD.jpg" alt=""></p>
<p>《习近平的七年知青岁月》<br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/68128680d7b63955098277c9815c07eedff64f14/20181231FinalSummary/xijinping.jpg" alt=""></p>
<p>《乔布斯传》<br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/68128680d7b63955098277c9815c07eedff64f14/20181231FinalSummary/jobs.jpg" alt=""></p>
<p>《货币战争1~5部》<br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/68128680d7b63955098277c9815c07eedff64f14/20181231FinalSummary/currency_wars.jpg" alt=""></p>
<p>《拿破仑传》<br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/68128680d7b63955098277c9815c07eedff64f14/20181231FinalSummary/Napol%C3%A9onBonaparte.jpg" alt=""></p>
<p>《李嘉诚传》<br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/68128680d7b63955098277c9815c07eedff64f14/20181231FinalSummary/superlee.jpg" alt=""></p>
<h4 id="晚清的最后十八年-第4部"><a href="#晚清的最后十八年-第4部" class="headerlink" title="晚清的最后十八年 第4部"></a>晚清的最后十八年 第4部</h4><p>去年我读完了1~3部,可是那时候还没有完整版的第4部,这本书俞敏洪都亲自推荐,最后一部绝对殿堂班史诗级没有之一,读完最后一部才了解,原来康有为是个喜欢办事总打脸的人,根本做不到严于利己.原来孙中山其实并没有教科书上那样有多好,反而我觉得辛亥革命得归功于袁世凯,因为晚清是中国历史上像西方文明进军最恢宏得时代,袁世凯主张君主立宪保全皇族脸面,而黎洪元这些后来者为了掩盖造反的事实主张共和,葬送大清王朝最快的一个人是载沣(北京恭亲王府就是这个人的,最后捐给了中国人民政府)，就是他曾经去德国,德国沙皇让他下跪他保持了中华民族的尊严没有下跪,得到了德国皇帝得尊重,对这个人还是中国最后一个皇帝溥仪得父亲.总之这些 细节都会在这本书上说到.</p>
<p>从第一部介绍北洋舰队到介绍各种巡洋舰 驱逐舰 护卫舰 鱼雷艇… 这4部书简直完整的记录了中国清朝末期从中日甲午战争到辛亥革命全程记录.值得一看,强烈推荐</p>
<p>如果非要我写出推荐的理由,那我只能拿一张照片说明一下:</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/218720dd578111252efde67a95bcdfb1fedb2077/20181231FinalSummary/Krupp.jpg" alt=""></p>
<p>这是我今年10月份去天津市津南区小镇站 小站练兵园(袁世凯曾经练兵的地方)拍摄的德国克虏伯公司1860左右生产的野炮.</p>
<p>北洋时期的军舰巡洋舰大部分来自德国克虏伯公司,从这门炮的制造工艺来推测当时的工业制造程度和北洋海军的军事装备基本算是中国近代史亚洲第一的强国了.我们不是打不过日本,我们打不过的是清朝内部的腐败.</p>
<h4 id="曾国藩传"><a href="#曾国藩传" class="headerlink" title="曾国藩传"></a>曾国藩传</h4><p>如果要问我为什么如此这般推荐曾国藩,我只能说,这是我认为清朝历史上屈指可数的名臣,作为清朝经历过三代皇帝的变更,三朝大臣,恪尽职守兢兢业业,嘉庆皇帝说作为大清帝国的大臣必须得干啥啥行,曾国藩从0开始学习建筑学,从0开始学习西方文明,从0开始学习任何别人能擅长自己不擅长的东西.儒士中的典范,曾子的后人.练习新军评定太平天国起义.麾下基本招纳当时神舟各路领域第一的人才,比如我们化学上的元素周期表,就是当时在曾国藩幕府效力的科学家<a href="https://baike.baidu.com/item/%E5%BE%90%E5%AF%BF/3672479?fr=aladdin" target="_blank" rel="external">徐寿</a>所做,如果不是这个人我们今天看到化学元素将是英文符号,不会全部都带金字旁.作为老师,他教出中国近代文明学贯中西的伟大门生<a href="https://zh.wikipedia.org/wiki/%E6%9D%8E%E9%B4%BB%E7%AB%A0" target="_blank" rel="external">李鸿章</a>,功勋卓著.可是后来的人们因为曾国藩没有处理好<a href="https://zh.wikipedia.org/wiki/%E5%A4%A9%E6%B4%A5%E6%95%99%E6%A1%88" target="_blank" rel="external">天津教案事件</a>而倍受争议,我认为不是处理不好,真正的原因是因为<strong>弱国无外交</strong>,是慈禧想让曾国藩来收拾这个烂摊子刻意把这事让曾国藩当替罪羊.换作今天就是,有时候人非圣贤孰能无过,得倍受争议的活着,这显然不是曾国藩的本意,以曾国藩大人的原则和立场绝不是因为这事被别人抛石子而不去为之,相反曾大人敢于直面惨淡的人生,敢于正视淋漓的献血.如果那时候是现在习大大的中国,曾大人也会像外交官王毅一样敢于跟世界任何一个国家平起平坐. 这是我钦佩这位伟人不为人知的一面.</p>
<p>所以为了表达我对曾大人的尊重我送曾大人一副对联:</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/45604ae3bd82a1e2d71c15873023b9140761581f/20181231FinalSummary/zengguofan1.jpg" alt=""></p>
<p><strong>求忠臣必于孝子之门</strong><br><strong>凡秀才当以天下为任</strong></p>
<h4 id="晚清重臣李鸿章"><a href="#晚清重臣李鸿章" class="headerlink" title="晚清重臣李鸿章"></a>晚清重臣李鸿章</h4><p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/c0bcc0e89234e74891d378696d8a596e72e27f31/20181231FinalSummary/lepetit1.jpg" alt=""></p>
<p>这位慈祥的老人,改变了中国近代史,被西方人誉为”东方的脾斯麦”,中国第一位登上美国时代周刊封面人物,中国历史上第一位欧洲考察的人,第一位… 总计创造 了 47个 中国第一.</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/c0bcc0e89234e74891d378696d8a596e72e27f31/20181231FinalSummary/lepetit2.jpg" alt=""></p>
<blockquote>
<p>访问香港的李鸿章与香港总督卜力会面，站与李鸿章右侧者为刘学询，1900年7月。</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/c0bcc0e89234e74891d378696d8a596e72e27f31/20181231FinalSummary/ChineseMinisterLi%20HongzhangAndPrinceBismarck.jpg" alt=""></p>
<blockquote>
<p>为了表示对李鸿章的尊重和敬意，俾斯麦的着装极为庄重，穿上了他极少穿的盛装——德皇所赐玉冕、红鹰大十字宝星，手拿大玉，腰挂宝剑。两人见面后，首先互相问候对方身体如何，交流了各自的身心健康问题。</p>
</blockquote>
<p>脾斯麦被誉为 德国的铁血宰相,简直跟李鸿章一模一样经历三朝德皇,欧洲动荡,苦战多年终于换来了德国的统一.</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/c0bcc0e89234e74891d378696d8a596e72e27f31/20181231FinalSummary/Bismarck%2COttoF%C3%BCrst_von_und%20LiHungChang.jpg" alt=""></p>
<blockquote>
<p>李鸿章与俾斯麦在首相府阳台</p>
</blockquote>
<p>我用了这么多篇幅来介绍这位晚清名臣,我为什么这么崇拜这个人?</p>
<p>对,你问到了重点,我告诉你答案.</p>
<p>在我们的工作生活中,我们所从事的劳动基本都是西方文明的产物吧,计算机,物理化学,各种高科技,电路,哪种我们从几千年的中国的文化洗礼中能找到.我们饱读了中国的四书五经,可是我们反问过自己吗？读了这么多年书,没有从本质或者说从实际的实践中改变或者提过生产力,电脑,智能手机都是西方发明的,我们的时代已经进入了全盘西化的教育模式了</p>
<p>我们学习的英文 这东西我们的古典文学中根本找不到一个字母是能跟英语扯上关系的,我们今天用的汉语拼音是建国后和民国时期的产物.</p>
<p>在我自己的工作中经常会经历或者遭遇一些困难难以在断时间内克服或者解决,这个时候我就在反问自己,我怎么读了这么多年书连一个最简单的计算机理论问题都解决不了,回头想想计算机从发明的那一刻起到现在才几十年,我们从小就没有经历过计算的玩法,原理和制造,从某种意义上来说我们算不算是落后与西方文明,计算机不是中国人发明的,我们先要了解英语,了解和计算打交道的电脑语言,了解如何编写这种语言跟计算机交流,每当这个时候我内心是脆弱的,我的脆弱来自于我不够深入了解计算机内部,从我小的时候读的书都是千字文,跟这个东西扯不上关系,我应该找一个人作为我前进的榜样,这个人是谁呢,是谁在中国历史上第一位敢于学习西方文明,学贯中西,学习西方的先进文化,技术…制造自己的国家的计算机.我觉得这个人非李鸿章莫属,他虽然没有造计算机,但是他每天的工作都是面对着自己极大挑战的任务,他每天要处理洋人的事物,从德国克虏伯公司购买军舰创造北洋舰队,创办江南制造总局制造枪械兵器.用今天的话说,你首先得有车床,得有冶炼金属的技艺,得有技术,这位李大人可谓是中国第一个敢于解放思想观念接受西方文化和教育.学习西方先进文明技术来改造清朝的能臣了.</p>
<p>在西学东进的浪潮中,敢于像西方学习得人,非李鸿章莫属,我心中佩服这样的人,我今天工作中遇到的困难都是来自于西方的文明技术.有时候我们对于一些困难感到恐惧,其实恐惧源于未知,你不知道这么操作会意味着什么感到心理没底,主要的原因是我们还没有完全驾驭这一切.努力弄懂深入研究实践得到结论才是唯一的解决方式.</p>
<h5 id="用实力去赢得别人的尊重"><a href="#用实力去赢得别人的尊重" class="headerlink" title="用实力去赢得别人的尊重"></a>用实力去赢得别人的尊重</h5><p>晚清重臣李鸿章为了练军(淮军)去镇压太平天国农民起义,自己回安徽在没有经费和职权得前提下,操练了一只新军,每次镇压太平天国起义总是败多胜少,最后迫于无奈解散了队伍,自己去投奔了恩师 曾国藩,那时候曾国藩也是练习了自己的一只新军-湘军,曾大人也跟李鸿章一样没有经费,但是各路大臣回乡操练新军中,几乎都像李鸿章一样失败,只有曾国藩的湘军不太一样,当李鸿章落魄投奔恩师的时候,曾国藩内心无比高兴,因为在某种重要的决策上他的门生李鸿章原胜于自己,李鸿章投奔门房军营去见恩师,曾国藩故意当什么都没发生,简单吩咐门房说我太忙让 少荃(李鸿章 字少荃)去临营寒舍歇息,待我有空便去探望.在曾国藩的幕府 接纳清朝大臣必须 鸣礼炮 多少响,迎接仪式必须隆重,李鸿章当时还算是一个不大的官员,按照朝廷礼节得 鸣礼炮隆重接待的,在曾国藩这里基本就跟个兵卒来了一样没啥反应,这李鸿章心理十分难受,第二天 一早,左宗棠平定西北叛乱回来,来见曾国藩,曾国藩的迎接仪式远比想象中要隆重,鸣礼炮多少响。。。迎接仪式非常隆重,这一幕李鸿章看眼在里,苦在心里,一个左宗棠连我一半的官职都不到,恩师居然这么隆重接待,我来了恩师当什么都没发生,恩师是带我登上文学殿大学士的人,是我科举考试中对我严加管教,教授我生存本领的人,现在这般场景,怎让我不心酸,哎 看来<strong>我还得有自己的军队,打出几次胜仗,得有实力这样才能得到恩师得认可,才能去赢得别人的尊重</strong>.我现在什么都没有,左宗棠带领一群兵卒都这么嚣张… 李鸿章当时的心酸我看完了这段故事我很理解,我相信看到这里的你也一样感同身受.</p>
<p>其实曾国藩的良苦用心李鸿章当时还没察觉到,作为自己的门生没有谁比曾国藩更了解李鸿章了,曾国藩为了磨平李鸿章的棱角让他受如此这么心酸,就让他尝尝这是啥滋味,让他懂得<strong>人就得用实力去赢得别人的尊重</strong>.</p>
<p>曾国藩和李鸿章的故事一开始很抵触西方文明,到最后疲于应对再到主动出击,再到学贯中西,要不是洋人的船坚炮利那怎么会有李鸿章,怎么会诞生『中国的铁血宰相脾斯麦』.李鸿章在洋务运动中开创了多少个第一,回头再看看我的成长史又开创了多少第一,第一次背井离乡,第一次加入Baidu,比较早的接触iOS开发,第一次用博客记录知识技艺,第一次走出农村用计算机技术改变命运,成为村里人的希望,我完全就是再走李鸿章的老路,希望走在成为圣贤的路上,这条路上一定没有『前方300米有闯红灯拍照』,有前人的经验让我很幸运,但再往后会遇到前人都没经历过得东西,我将成为别人的前人.</p>
<p>故事讲完了</p>
<p>我们再来看看今天的我们,我们心目中按照王阳明的《知行合一》大家也都佩服有实力的人吧.<br>如果你觉得一个富二代 爹妈在一线二线城市给他买套房 帮他摆平了他需要的一切,这个人还没个正经工作,每天都过着养尊处优的生活你会佩服他吗？这不就是我们身边的一些人嘛? 我相信你一定不佩服他,你佩服他的是他有如此有正事的父母.</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/ef7d1636166dc587859a78cda527113bd85c8ead/20181231FinalSummary/five-year_plan.jpeg" alt=""></p>
<p>我从2013年开始制定自己的第一个五年计划,现在2018年了,我没有给自己一个满意的答卷,看着我的五年计划 勉强完成70%的程度,我很惭愧. 我承认我说了大话,我向那些看到我制定五年计划的各位,以及我的高中老师,深表歉意. 我确实在富二代的面前抬不起头,我的父亲没有正事,一切需要我自己白手起家.</p>
<p>于是我给自己写了句座右铭: <strong>埋头苦干十年,与富二代抬头相见.</strong> </p>
<h4 id="毛泽东传"><a href="#毛泽东传" class="headerlink" title="毛泽东传"></a>毛泽东传</h4><p>这是我今年的地四本书,听完感觉毛爷爷的故事,真的不容易,这个人很有气魄和诗人才华.在内外交困的新中国如果从零开始着手准备未来几十年的任务是不容易的,毛爷爷做到.从小生活在地主的家庭中没有因为父亲的小农思想而影响.</p>
<h4 id="周总理的最后600天"><a href="#周总理的最后600天" class="headerlink" title="周总理的最后600天"></a>周总理的最后600天</h4><p>这位共和国总理的声音你都需要听到,这也是我第一次听到周总理的原声录音,在最后的600多天的日子里,这位总理可谓鞠躬尽瘁日理万机,与江青团伙斗智斗勇,努力纠正文革的错误,把共和国的重任一步一步交给邓小平,没有小平爷爷的改革开放,那你今天也许就不会看到我写的博客文章来总结我的2018,周总理的勤俭值得我去学习,由于医疗条件不是很完备,当时的新中国还没有能力制造一些高级药品,周总理的药都是国外进口,可是这位总理节俭到当药片掉地上很珍惜的捡起来吃,他说,我多么希望我们共和国也能制造这种药去帮助那些像我一样受病痛折磨的人民.在最后的岁月里与病魔坚强抗争.</p>
<p>为了纪念这位伟人,我认真的听完讲解周总理的最后岁月,我很荣幸能在中国国家博物馆里找到总理的几件物品,让我瞻仰一下这位共和国总理的爱戴人民的精神和气质.</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/a55bae832166b756dc2b68c32b93560c9ccde8ba/20181231FinalSummary/hatOfZhouPrimeMinister.jpg" alt=""></p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/a55bae832166b756dc2b68c32b93560c9ccde8ba/20181231FinalSummary/hatOfZhouPrimeMinister2.JPG" alt=""></p>
<p>这是周总理参加日内瓦会议的礼帽 也就是下面这张我们在初高中历史书上经常看到的</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/a3454b2b00ff269f32b025ee9ffcdfd092bafab2/20181231FinalSummary/hatOfZhouPrimeMinister3.JPG" alt=""></p>
<p><em>图片引用自百度百科</em></p>
<p>我相信你看到这位共和国总理也会情不自禁的潸然泪下,他的声音你需要听到.</p>
<h4 id="普京传记"><a href="#普京传记" class="headerlink" title="普京传记"></a>普京传记</h4><p>这位前克格勃特工,俄罗斯的硬汉,对于苏联集体后的经济重建,强硬铁腕解决俄罗斯寡头的财务霸权,车臣战争的终结者,克里米亚地区的国际精神,敢于在世界上与美国强硬对抗. 普京传记确实记录的很详细,不过 就我个人观点 俄罗斯现在国民经济没有改善多好,依然是两架马车式的发展. 为了了解世界的历史和欧洲的地理我今年 学习很多欧洲的内容, 这本书就是在学习范围内.</p>
<h4 id="习近平的七年知青岁月"><a href="#习近平的七年知青岁月" class="headerlink" title="习近平的七年知青岁月"></a>习近平的七年知青岁月</h4><p>在我小时候父母经常跟我说学习不好就挑大粪,但是我要说的是这位现任中华人民共和国共和国的主席就是曾经挑过粪,在陕北梁家河一步一步从知青下乡到村支书再到加入中国共产党,恢复高考继续上清华学习,最终成为中华人民共和国的国家主席,这一路走真的很不平凡,这本书让我记忆犹新的一个故事值得我们每个人去学习.</p>
<p>当年习大大 作为知青刚下乡, 由于不够了解农村的百姓的生活,加上陕北十分贫困,知青们需要自己学会做饭,自己学会捡柴烧火,由于第一次没有经验,刚去梁家河的一段日子赶上陕北下雨, 做饭的柴都被雨淋湿了,没办法引火,知青们你瞅瞅我我瞅瞅你,互相不知所措,这种日子实在太过艰难, 习大大下乡的时候满满的一包又一包的都是书,在这段日子里白天干农活晚上吃完饭还要继续学习,由于没有什么吃的晚上学到很晚的时候会觉得饿,就简单 锅里放点水 放里两碎玉米,柴这种资源是有限的 所以煮完的玉米 也不知熟没熟就吃了,这段艰苦的生活我相信在看这篇文章的年轻人也许都理解不了,但是过的确实无比艰难,由于陕北的底线多山和高坡 不能积水加上田地是有限的,习大大带领全村的人民修堤坝蓄水灌溉,然后开垦农田.习大大深知陕北为什么贫穷因为百姓的田地实在太少,只能像大地要粮食,建完堤坝开山拓田地,办沼气池,当年还没有好的机械,全部都是人工挑这粪便装到沼气坑.沼气池需要技术,习大大又探访四川学习办沼气的经验,沼气池刚投入使用之前需要把沼气弄个洞来检测沼气是否能够达标使用,习大大亲自开洞,当时由于池内压力很大,喷了一身粪汤, 看到这的时候我不仅感叹,中国能有以为这样的主席太幸运了,这个人可真是深入基层劳动,敢于干最脏最累的活,一般干这种活的人他肯定知道底层人民的疾苦,他也一定知道如果带领祖国的广大人民脱贫致富.</p>
<p>如果放到现在你让一个年轻人去农村赶上下雨天做饭的柴都淋湿,根本点不着火做饭,这种苦日子真没几年轻人尝过,更别说办沼气池挑粪了.</p>
<p>即便你心目中的政府有多么贪腐,我觉得习大大不会,他尝过太多人没吃过的苦,受到过文革父亲的影响入了N次党才最终成功,这段经历不寻常,如果不了解这位国家领导人的历史,那我们也不会懂得现在的辛福来的多么不容易.现在其实比习大大的过去幸福多了,但是社会主义初级阶段就这样,先能解决温饱,摆脱贫困,然后再去研究奔小康发家致富,我希望习大大的人生经历能让每个人都知道,所以这本书强烈推荐.</p>
<h4 id="乔布斯传"><a href="#乔布斯传" class="headerlink" title="乔布斯传"></a>乔布斯传</h4><p>作为一名 苹果开发者 如果不去了解创造苹果的人其实是一种悲哀,乔布斯的个人性格非常极端追求绝对机制,如果没有这么刻薄的追求就不会有今天的iPhone, 当然光有这种气质是不够的,需要有技术驱动,沃兹尼亚克就是其中之一.数学天才,第一台 Apple I 就是这个大神手工做的,用芯片叠加,电路设计…..</p>
<p>乔布斯是一个极具 “现实扭曲立场”的人,(接地气一点就是能忽悠),作为孤儿的乔布斯深受养父的影响,他父亲是一个木匠,这个人说:”做什么其实跟做家具是一样的,衣柜的背板不容易被人所看见,但是衣柜的外表质量也要跟内在的背板一样的品质”,所以你今天拆开苹果的任何设备看看电路板就知道,黑色PCB印刷,内部电路设置和元器件都十分整齐,真的跟衣柜的背板一样质量. 例如: iPhone 4/4s</p>
<p>这是唯一两部乔布斯在世时发布的最后两样产品,但是现在的库克也许没有100%的遵照乔布斯的人格和习惯以及追求,整的现在的苹果手机国产的质量总出问题.这要是在乔布斯时代我相信这即便有也可以全部换新而且很少能出问题.</p>
<p>由于性格的极端和追求的极致导致 苹果的同事把被乔布斯伤害的同事称为”低通滤波器”(无论如何大声或者激烈大家都很低调平和的处理)</p>
<p>乔布斯的一生是不是传奇我不知道,我觉得至少我通过苹果的这副键盘敲出了一栋100w+楼房.</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/7a51ed176820e66e48ec015069843b0686a5e2f0/20181231FinalSummary/applekeyboard.png" alt=""></p>
<p>是的 我是一个Apple iOS Developer,这位伟人不为人知的一面的值得学习.</p>
<h4 id="货币战争1-5部"><a href="#货币战争1-5部" class="headerlink" title="货币战争1~5部"></a>货币战争1~5部</h4><p>这几部货币战争非常好,虽然以小说的形式出现,但是作者自述说如果以真实的材料出现那么银行家基本不会让这本书出版,往往小说的形式可以逃避它.</p>
<p>一部世界经济的必须经典, 英格兰银行…罗斯柴尔德家族…布雷顿森林体系…世界经济的金本位,银本位还有我国的以物资为本位的人民币,这些背后的价值都在这本书中一一列举.</p>
<h4 id="拿破仑传"><a href="#拿破仑传" class="headerlink" title="拿破仑传"></a>拿破仑传</h4><p>这位活跃在欧洲半个世纪的法兰西缔造者,大约活跃在中国的清朝中晚期,出生在法国南部的科西嘉岛的拿破仑,一路驰骋政府整片西欧领土,没一次的战争都以胜利为结尾,但是因为最后的一次滑铁卢战役而毁于一生,其实我们应该 以”不以成败论英雄”的态度来欣赏这位战斗勇士. </p>
<p>为了更多的了解欧洲,我需要了解那里的人文和地理,所以这本书值得一看</p>
<h4 id="李嘉诚传"><a href="#李嘉诚传" class="headerlink" title="李嘉诚传"></a>李嘉诚传</h4><p>最后要说说这位励志伟人李嘉诚,这位李超人简直称霸香港又温文尔雅,其实李超人的祖先时清朝时期的文官拔贡出身(可以理解为有文化有学识的秀才).这位伟人征服全港,无论做人做事都勤勤恳恳踏踏实实,从一家做塑胶花厂商到最后收购港灯,英资企业,汇丰银行的长期合作伙伴,怡和置地,再到香港的房地产…以及收购希尔顿酒店….太多太长一言难尽</p>
<p>这里要说一下这个怡和置地,它的前身是<a href="https://baike.baidu.com/item/%E6%80%A1%E5%92%8C%E6%B4%8B%E8%A1%8C/5039743?fr=aladdin" target="_blank" rel="external">怡和洋行</a>(英资企业)由两名苏格兰裔英国人威廉·渣甸（William Jardine，1784年～1843年）及詹姆士·马地臣（James Matheson，一译“孖地臣”，1796年～1878年）在中国广州创办,就是当年林则徐虎门销烟,捣毁东印度公司的鸦片,实际上背后是怡和洋行在掌控,因为林则徐侵犯了怡和洋行的利益在华利益,这位渣甸老板在英国女皇面前游说,挑起了1840年的鸦片战争.</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/f654b576ec4663c04c56eb2c121d5d98ba46ec32/20181231FinalSummary/yihe.jpg" alt=""></p>
<p>怡和洋行旧址 <em>图片引自百度百科</em></p>
<p>李嘉诚的一生真的从无到有,邻近坎坷,稳扎稳打,一步一步吞并收购.</p>
<p>让我印象深刻的是怡和大班 纽碧坚 跟李嘉诚的合作…</p>
<p>绝对励志的人生奋斗史 值得一看</p>
<h2 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h2><p>这一年在技术上投入和收益没有明显提升,不过我给自己的定下的OKR(Object key result一种工作目标的实现方式类似KPI)是每个月保证产出两篇技术文章,至少有一篇质量较高经过这一年的技术写作,还是很有收获的,我从没想过能用博客记录我的生活中的点点滴滴,大多都是技术相关很少写个人生活,除了年终总结以外基本都是iOS相关的技术,不过整体上个人感觉还是很水的,2019年需要比现在更有质量和深度.</p>
<p>为了奖励自己一年的技术进步和对写作的坚持,2018年我买了有一个BOSE降噪耳机(￥1888),作为程序员只有几样东西视为珍宝</p>
<ul>
<li>1.机械键盘</li>
<li>2.降噪耳机</li>
</ul>
<p>这一年坚持学习python和机器学习,但是明显的进步并不多,只是稍稍了解了一些数据挖掘和加工数据.不过目前负责快手的直播业务让我锻炼了很多,每一次开发遇到的问题我都会记下来,业余时间写demo然后发表文章到博客记录世界记录你.</p>
<p>不过对比去年的KPI指标</p>
<p>去年的KPI如下:</p>
<ul>
<li>swift4 进阶看完</li>
<li>iOS Core Animation 看完</li>
<li>Learn AV Foundation 要写几篇博客从上次段的位置续上</li>
<li>学会Python和数据挖掘 为机器学习做铺垫</li>
<li>多媒体相关技术深耕</li>
<li>英语水平再提高一个level</li>
</ul>
<p>显然我没有完成30%,很惭愧,所以我把目标实现的方式从KPI变成了OKR.这样弹性实现目标以便能更好的实现2019年的目标.</p>
<p>这一年我很败家,买了一堆破烂花了不少钱</p>
<p><strong>机械键盘</strong></p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/56e5c68e0b83c60ff00f960a24097fe14bb2e90a/20181231FinalSummary/keyboard.jpg" alt=""></p>
<blockquote>
<p>这机械键盘,确实很好,周末在家写代码非常流畅顺手.￥519</p>
</blockquote>
<p><strong>iPhone X 256G 美版</strong></p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/56e5c68e0b83c60ff00f960a24097fe14bb2e90a/20181231FinalSummary/iPhoneX.JPG" alt=""></p>
<blockquote>
<p>同事去美国帮忙代购的,作为一个iOS developer,我也是忍受了4年iPhone6,确实卡的不行了,￥8000</p>
</blockquote>
<p><strong>Apple Watch 3</strong></p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/56e5c68e0b83c60ff00f960a24097fe14bb2e90a/20181231FinalSummary/AppleWatch3.jpg" alt=""></p>
<blockquote>
<p>这个我认为基本没啥用,就能戴在手上看个点儿,其余的功能都用不了,￥3188</p>
</blockquote>
<p><strong>PC</strong></p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/56e5c68e0b83c60ff00f960a24097fe14bb2e90a/20181231FinalSummary/PC.jpg" alt=""></p>
<blockquote>
<p>为了学习机器学习买了个1050Ti,很久没DIY了,整套自己的买的装的.16G DDR4 2400内存,240G+120G两块三星固态硬盘,i5 8400 CPU, 技嘉Z370主板 总造价 ￥5547.<br>我已经把旧的那个200+贱卖了.</p>
</blockquote>
<p><strong>BOSE 降噪耳机</strong></p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/56e5c68e0b83c60ff00f960a24097fe14bb2e90a/20181231FinalSummary/bose.jpg" alt=""></p>
<blockquote>
<p>双11 打算买个程序员梦想中的耳机 ￥1888</p>
</blockquote>
<p><strong>小牛 N1s 动力版</strong></p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/56e5c68e0b83c60ff00f960a24097fe14bb2e90a/20181231FinalSummary/n1s.jpg" alt=""></p>
<blockquote>
<p>上班的代步工具.￥7399</p>
</blockquote>
<p>今年败家花了 ￥26541. </p>
<p>然而这里面我觉得最好用的东西,一个是小牛的这个电动车,一个是降噪耳机,至于手机我觉得对于一个像我这样穿31块钱林甸鞋的人,拿着一个8000多的 iPhone X 无疑是更加鲜明的证明我是一个十足的屌丝.电动车这个东西实在解决了我很多忙,上下班无论去哪里都很方便,降噪耳机则是在工作中能很安静投入的工作.至于机械键盘 显然没啥用,但是苹果的键盘更贵,想想还是算了,也算值得吧.最没啥用的就是PC 和那块手表,这两样东西是我买东西的一个败笔.</p>
<p>买了这么多破烂,花了不少钱,然后我发现有些东西一定要物尽其用.如果花了很多钱却没有发挥有用的价值显然就是一种不理性的消费..</p>
<h2 id="坚持"><a href="#坚持" class="headerlink" title="坚持"></a>坚持</h2><p>每年教师节我都会给一位初中的语文老师打电话问候一下,我一直连续坚持了11年.我觉得我的初中学习真的很差,没有给这位老师留下过太好的印象,我想弥补一下,想创造一项记录,这项记录是要做在这位老师的学生中连续坚持一句问候的学生,之不之一我不知道,未来如果能的话我会尽量坚持下去,希望这位老师记得这位学生很平凡,但却做了一件不平凡的事情,希望这位老师记得这位学生来自第二良种场.</p>
<p>在我的人生目标中需要树立一个二良人都佩服的榜样.这位榜样就是发生在这座几乎地图都没有导航路线且被中国忽略的村庄.我梦想有一天衣锦还乡的那一天能为二良建造一座计算机博物馆,在这座博物馆中你可以尽情的学习计算机类的书籍.像我一样用所学的知识改变自己的命运.</p>
<p>因为在我上学的红光农场初中,二良的学生受到了太多不平等不公正的待遇,这不禁让我潸然泪下,为什么我们就在红光农场这座邻近的农场村庄抬不起头来,是因为我们落后,落后就要挨打,就要受到不公正的待遇,为了改变这一切需要我们忍受”韩信的胯下之辱”.</p>
<p>在这所中学,老师们只对亲信子弟负责,对该农场的子弟次之,再次才能轮到像二良这种借读的学生中学习好的学生,至于像我这种既无背景也没关系,又学习不好的学生这种歧视真的刻骨铭心,参加工作后也依然没有忘记,为什么同样是中国人还搞这么具体的地域歧视. </p>
<p>我希望我能用自己的实践证明给这位老师看,看看到底是红光的学生坚持11年给您打电话还是二良的学生能坚持11年给你打电话,<strong>人活的要用实力去赢得别人佩服和尊重</strong>,我希望虽然二良和红光地域的经济差距很大,但是每个地域都有其独特性,没有哪里比哪里高低贵贱之分,要相互融合互相尊重.</p>
<p>少一些教育资源的倾斜,让每个学生都能得到公正平等的待遇.</p>
<h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><p>我认为人生有两堂选修课</p>
<ul>
<li>1.装修</li>
<li>2.做饭</li>
</ul>
<h4 id="装修"><a href="#装修" class="headerlink" title="装修"></a>装修</h4><p>从17年买房到现在房子还没有下来,如果是毛坯房的话,需要自己学会装修.</p>
<p>厨房: 集成灶、消毒柜、蒸烤箱 水槽、净水器、垃圾处理器…</p>
<p>这堂课只有两种人可以逃避</p>
<ul>
<li>有钱人</li>
<li>买二手房的人</li>
</ul>
<p>显然我不是这两种人,既没钱也没买二手房,需要经历有限的装修经费,捉襟见肘的装修.</p>
<p>在房子没下来之前我经常抽出时间了解一些相关的装修经验,我想装完修也许就成了半个装修工.</p>
<h4 id="做饭"><a href="#做饭" class="headerlink" title="做饭"></a>做饭</h4><p>这是一件只要有一个人需要干的活.</p>
<p>如果不去了解如何下厨做饭,那也许一辈子过的很平庸,如果不去了解毛葱和小葱大葱到底做饭好不好吃,什么样的葱适合做什么样的菜那么人就不会有太多的成长.</p>
<p>显然上面的两堂课我没有逃课.</p>
<p>所谓生活,有的年轻人认为我们不需要做成功人士,享受现在的静好不就可以了么,是的你能享受现在的美好那么一定有人替你砥砺前行,那个人要么是你父母要么是你爱人.</p>
<p>没有被生活折磨过只有两种可能</p>
<ul>
<li>第一 有人替你扛着</li>
<li>第二 别着急 还没轮到你</li>
</ul>
<p>家人总有用钱的时候,在中国 一场大病能摧毁一个中产阶级的家庭.即便是现在的医保力度很大,但是还是经不起大风大浪</p>
<p>在家里的老人总说钱买不来幸福, 我想说:『钱买不来100%的幸福,成长后99%的烦恼都是因为没钱』.</p>
<p>我现在懂得什么叫选择比努力更重要了,努力是为了让自己有更多选择的权利.</p>
<h2 id="故事"><a href="#故事" class="headerlink" title="故事"></a>故事</h2><p>有一个同学,我4年零2个月没有联系,时间过的真快 一晃 快5年了,我又重新加了一下微信,为了纪念这位同学,我撰写了一篇题材为《船与灯塔》的剧本. </p>
<p>这么多年我总结的真理是:”父母一定要有正事,如果没有正事那子女就得为父母的没正事买单,因为父母没有积攒下儿女未来几十年需要发展的经济基础,显然儿女就得白手起家从零开始”.</p>
<h2 id="百年"><a href="#百年" class="headerlink" title="百年"></a>百年</h2><p>今年的十一假期我去了阔别11年的天津,去看看07年去过的身影,11年前还没有GPS定位的地图,我却依然能找到方向.</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/3bc95da6f8fb8b7cb7c10d1c2e0c428d5b575044/20181231FinalSummary/sun.JPG" alt=""></p>
<p>这是我在天津找到家族百年以来唯一留下仅存的几张照片,我曾祖父,曾祖母,我的父亲和姑姑.现在看到这显得无比珍贵.</p>
<p>我的祖先是闯关东去的东北,家谱记载地址:山东省青州府寿光县孙家神庙,甸子北住.</p>
<p>也就是现在的:山东省潍坊市青州市寿光县孙家村<br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/8a00db92a789d99e2c0e43841d48bad35e2b76a8/20181231FinalSummary/hometown.png" alt=""></p>
<p>这里如今已经高铁建成,成为了祖国的蔬菜之乡,我为此感到欣慰,也许1900年左右我的祖先曾经生活在这里. </p>
<p>我的曾祖父来到东北的时候赶上了日本占领东三省,那时候也许迫于生计和民族的沦落,不得不为日本人工作,也就是在现在的黑龙江省海伦市海北镇十三井子村,日本人在这里养军马,前面是东方红水库,我的曾祖父练就一身打铁的手艺,为军马钉马掌,因为东北很冷,路面结冰,防止马打滑,所以钉马掌是其中的任务之一,上边中间这张照片,是当年仅存到现在的一张日本为工匠照的相片.</p>
<p>想想那个时候真是国破山河在,家书抵万金.这位老人也许经历过晚清覆灭,中华民国的初建到军阀混战,在到新中国的成立,历经3个朝代的更迭.</p>
<p>也许换做普通人都活不到一个朝代的覆灭</p>
<p>不过打铁的手艺可是传承3代人,我的爷爷,叔父,现在到我的哥哥,如果在现代应该成为工匠,希望有一天我的计算机博物馆中,能存放着家族打铁工艺的绝唱.</p>
<p>曾祖父那一代人活的不容易.</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这一年我写了很多技术的文章,我不想在年终总结中还谈论技术,应该记录一些生活的美好回忆.</p>
<p>去年的这个时候我给自己的定下的KPI今年显然没有完成</p>
<p>2019年希望能不断学习,与时俱进,学会更多有用的知识来提高影响力.</p>
<p>最后,幸福是奋斗出来的,还得撸起袖子加油干,得敢于直面惨淡的人生,敢于用实力去赢得别人的尊重,这样才能成为自己羡慕的别人.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/9e263dd6fbfaf3cb12eee6ebcbfff3519dc5f9eb/20181231Fin
    
    </summary>
    
      <category term="记录世界记录你" scheme="https://www.sunyazhou.com/categories/%E8%AE%B0%E5%BD%95%E4%B8%96%E7%95%8C%E8%AE%B0%E5%BD%95%E4%BD%A0/"/>
    
    
      <category term="生活" scheme="https://www.sunyazhou.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="年终总结" scheme="https://www.sunyazhou.com/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>iOS抖音的转场动画</title>
    <link href="https://www.sunyazhou.com/2018/12/21/20181221AwemeTransition/"/>
    <id>https://www.sunyazhou.com/2018/12/21/20181221AwemeTransition/</id>
    <published>2018-12-21T02:12:07.000Z</published>
    <updated>2018-12-24T14:05:50.935Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这几天比较忙,今天给大家带来的是抖音的转场动画实现 废话不多说上图</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/e2c340e680ad8308f23aa1ba8d3e8197847dcfec/20181219AwemeTransition/transition1.gif" alt=""> <img src="https://ws1.sinaimg.cn/large/bf8500b1ly1fyc09rh2cog20630at7wm.gif" alt=""></p>
<p>这里需要用到前一篇文章的上下滑<a href="https://github.com/sunyazhou13/AwemeDemo" target="_blank" rel="external">demo</a></p>
<p>学习这篇文章之前推荐看下喵神的<a href="https://onevcat.com/2013/10/vc-transition-in-ios7/" target="_blank" rel="external">iOS7中的ViewController转场切换</a> </p>
<p>如果对转场不是很了解的话可能学习会有一些难度和疑问.</p>
<h2 id="转场调用代码"><a href="#转场调用代码" class="headerlink" title="转场调用代码"></a>转场调用代码</h2><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"></div><div class="line">- (<span class="keyword">void</span>)collectionView:(<span class="built_in">UICollectionView</span> *)collectionView didSelectItemAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath &#123;</div><div class="line">    AwemeListViewController *awemeVC = [[AwemeListViewController alloc] init];</div><div class="line">    awemeVC.transitioningDelegate = <span class="keyword">self</span>; <span class="comment">//0</span></div><div class="line">    </div><div class="line">    <span class="comment">// 1</span></div><div class="line">    <span class="built_in">UICollectionViewCell</span> *cell = [collectionView cellForItemAtIndexPath:indexPath];</div><div class="line">    <span class="comment">// 2</span></div><div class="line">    <span class="built_in">CGRect</span> cellFrame = cell.frame;</div><div class="line">    <span class="comment">// 3</span></div><div class="line">    <span class="built_in">CGRect</span> cellConvertedFrame = [collectionView convertRect:cellFrame toView:collectionView.superview];</div><div class="line">    </div><div class="line">    <span class="comment">//弹窗转场</span></div><div class="line">    <span class="keyword">self</span>.presentScaleAnimation.cellConvertFrame = cellConvertedFrame; <span class="comment">//4</span></div><div class="line">    </div><div class="line">    <span class="comment">//消失转场</span></div><div class="line">    <span class="keyword">self</span>.dismissScaleAnimation.selectCell = cell; <span class="comment">// 5</span></div><div class="line">    <span class="keyword">self</span>.dismissScaleAnimation.originCellFrame  = cellFrame; <span class="comment">//6</span></div><div class="line">    <span class="keyword">self</span>.dismissScaleAnimation.finalCellFrame = cellConvertedFrame; <span class="comment">//7</span></div><div class="line">    </div><div class="line">    awemeVC.modalPresentationStyle = <span class="built_in">UIModalPresentationOverCurrentContext</span>; <span class="comment">//8</span></div><div class="line">    <span class="keyword">self</span>.modalPresentationStyle = <span class="built_in">UIModalPresentationCurrentContext</span>; <span class="comment">//9</span></div><div class="line">    </div><div class="line">    [<span class="keyword">self</span>.leftDragInteractiveTransition wireToViewController:awemeVC];</div><div class="line">    [<span class="keyword">self</span> presentViewController:awemeVC animated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> <code>0</code> 处代码使我们需要把当前的类做为转场的代理<br> <code>1</code> 这里我们要拿出cell这个view<br> <code>2</code> 拿出当前Cell的frame坐标<br> <code>3</code> cell的坐标转成屏幕坐标<br> <code>4</code> 设置弹出时候需要cell在屏幕的位置坐标<br> <code>5</code> 设置消失转场需要的选中cell视图<br> <code>6</code> 设置消失转场原始cell坐标位置<br> <code>7</code> 设置消失转场最终得cell屏幕坐标位置 用于消失完成回到原来位置的动画<br> <code>8</code> 设置弹出得vc弹出样式 这个用于显示弹出VC得时候 默认底部使blua的高斯模糊<br> <code>9</code> 设置当前VC的模态弹出样式为当前的弹出上下文  </p>
<blockquote>
<p>5~7 步设置的消失转场动画 下面会讲解</p>
</blockquote>
<p> 这里我们用的是前面讲上下滑的VC对象 大家不必担心 当它是一个普通的UIViewController即可</p>
<h2 id="实现转场所需要的代理"><a href="#实现转场所需要的代理" class="headerlink" title="实现转场所需要的代理"></a>实现转场所需要的代理</h2><p> 首先在需要实现<code>UIViewControllerTransitioningDelegate</code>这个代理</p>
 <figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"> <span class="meta">#pragma mark -</span></div><div class="line"><span class="meta">#pragma mark - UIViewControllerAnimatedTransitioning Delegate</span></div><div class="line">- (<span class="keyword">nullable</span> <span class="keyword">id</span> &lt;<span class="built_in">UIViewControllerAnimatedTransitioning</span>&gt;)animationControllerForPresentedController:(<span class="built_in">UIViewController</span> *)presented presentingController:(<span class="built_in">UIViewController</span> *)presenting sourceController:(<span class="built_in">UIViewController</span> *)source &#123;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.presentScaleAnimation; <span class="comment">//present VC</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">nullable</span> <span class="keyword">id</span> &lt;<span class="built_in">UIViewControllerAnimatedTransitioning</span>&gt;)animationControllerForDismissedController:(<span class="built_in">UIViewController</span> *)dismissed &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.dismissScaleAnimation; <span class="comment">//dismiss VC</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">nullable</span> <span class="keyword">id</span> &lt;<span class="built_in">UIViewControllerInteractiveTransitioning</span>&gt;)interactionControllerForDismissal:(<span class="keyword">id</span> &lt;<span class="built_in">UIViewControllerAnimatedTransitioning</span>&gt;)animator &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.leftDragInteractiveTransition.isInteracting? <span class="keyword">self</span>.leftDragInteractiveTransition: <span class="literal">nil</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 这里面我们看到我们分别返回了</p>
<ul>
<li>弹出动画实例<code>self.presentScaleAnimation</code></li>
<li>dismiss动画实例<code>self.dismissScaleAnimation</code></li>
<li><p>以及<code>self.leftDragInteractiveTransition</code>实例用于负责转场切换的具体实现</p>
<p>所以我们需要在 当前的VC中声明3个成员变量 并初始化</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) PresentScaleAnimation *presentScaleAnimation;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) DismissScaleAnimation *dismissScaleAnimation;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) DragLeftInteractiveTransition *leftDragInteractiveTransition;</div></pre></td></tr></table></figure>
</li>
</ul>
<p> 并在<code>viewDidLoad:</code>方法中初始化一下</p>
 <figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"> <span class="comment">//转场的两个动画</span></div><div class="line"><span class="keyword">self</span>.presentScaleAnimation = [[PresentScaleAnimation alloc] init];</div><div class="line"><span class="keyword">self</span>.dismissScaleAnimation = [[DismissScaleAnimation alloc] init];</div><div class="line"><span class="keyword">self</span>.leftDragInteractiveTransition = [DragLeftInteractiveTransition new];</div></pre></td></tr></table></figure>
<p> 这里我说一下这三个成员都负责啥事</p>
<p> 首先<code>DragLeftInteractiveTransition</code>类负责转场的 手势 过程,就是pan手势在这个类里面实现,并继承自<code>UIPercentDrivenInteractiveTransition</code>类,这是iOS7以后系统提供的转场基类必须在<code>interactionControllerForDismissal:</code>代理协议中返回这个类或者子类的实例对象,所以我们生成一个成员变量<code>self.leftDragInteractiveTransition</code></p>
<p> 其次是弹出present和消失dismiss的动画类,这俩类其实是负责简单的手势完成之后的动画.</p>
<p> 这两个类都是继承自NSObject并实现<code>UIViewControllerAnimatedTransitioning</code>协议的类,这个协议里面有 需要你复写某些方法返回具体的动画执行时间,和中间过程中我们需要的相关的容器视图以及控制器的视图实例,当我们自己执行完成之后调用相关的block回答告知转场是否完成就行了.</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">@implementation</span> <span class="title">PresentScaleAnimation</span></span></div><div class="line"></div><div class="line">- (<span class="built_in">NSTimeInterval</span>)transitionDuration:(<span class="keyword">id</span> &lt;<span class="built_in">UIViewControllerContextTransitioning</span>&gt;)transitionContext&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">0.3</span>f;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)animateTransition:(<span class="keyword">id</span> &lt;<span class="built_in">UIViewControllerContextTransitioning</span>&gt;)transitionContext&#123;</div><div class="line">    <span class="built_in">UIViewController</span> *toVC = [transitionContext viewControllerForKey:<span class="built_in">UITransitionContextToViewControllerKey</span>];    </div><div class="line">    <span class="keyword">if</span> (<span class="built_in">CGRectEqualToRect</span>(<span class="keyword">self</span>.cellConvertFrame, <span class="built_in">CGRectZero</span>)) &#123;</div><div class="line">        [transitionContext completeTransition:<span class="literal">YES</span>];</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">CGRect</span> initialFrame = <span class="keyword">self</span>.cellConvertFrame;</div><div class="line"></div><div class="line">    <span class="built_in">UIView</span> *containerView = [transitionContext containerView];</div><div class="line">    [containerView addSubview:toVC.view];</div><div class="line"></div><div class="line">    <span class="built_in">CGRect</span> finalFrame = [transitionContext finalFrameForViewController:toVC];</div><div class="line">    <span class="built_in">NSTimeInterval</span> duration = [<span class="keyword">self</span> transitionDuration:transitionContext];</div><div class="line"></div><div class="line">    toVC.view.center = <span class="built_in">CGPointMake</span>(initialFrame.origin.x + initialFrame.size.width/<span class="number">2</span>, initialFrame.origin.y + initialFrame.size.height/<span class="number">2</span>);</div><div class="line">    toVC.view.transform = <span class="built_in">CGAffineTransformMakeScale</span>(initialFrame.size.width/finalFrame.size.width, initialFrame.size.height/finalFrame.size.height);</div><div class="line"></div><div class="line">    [<span class="built_in">UIView</span> animateWithDuration:duration</div><div class="line">                          delay:<span class="number">0</span></div><div class="line">         usingSpringWithDamping:<span class="number">0.8</span></div><div class="line">          initialSpringVelocity:<span class="number">1</span></div><div class="line">                        options:<span class="built_in">UIViewAnimationOptionLayoutSubviews</span></div><div class="line">                     animations:^&#123;</div><div class="line">                         toVC.view.center = <span class="built_in">CGPointMake</span>(finalFrame.origin.x + finalFrame.size.width/<span class="number">2</span>, finalFrame.origin.y + finalFrame.size.height/<span class="number">2</span>);</div><div class="line">                         toVC.view.transform = <span class="built_in">CGAffineTransformMakeScale</span>(<span class="number">1</span>, <span class="number">1</span>);</div><div class="line">                     &#125; completion:^(<span class="built_in">BOOL</span> finished) &#123;</div><div class="line">                         [transitionContext completeTransition:<span class="literal">YES</span>];</div><div class="line">                     &#125;];</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>很简单.</p>
<p>消失的动画 同上边差不多</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">DismissScaleAnimation</span> ()</span></div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">DismissScaleAnimation</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">instancetype</span>)init &#123;</div><div class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</div><div class="line">        _centerFrame = <span class="built_in">CGRectMake</span>((ScreenWidth - <span class="number">5</span>)/<span class="number">2</span>, (ScreenHeight - <span class="number">5</span>)/<span class="number">2</span>, <span class="number">5</span>, <span class="number">5</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">NSTimeInterval</span>)transitionDuration:(<span class="keyword">id</span> &lt;<span class="built_in">UIViewControllerContextTransitioning</span>&gt;)transitionContext&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">0.25</span>f;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)animateTransition:(<span class="keyword">id</span> &lt;<span class="built_in">UIViewControllerContextTransitioning</span>&gt;)transitionContext&#123;</div><div class="line">    <span class="built_in">UIViewController</span> *fromVC = [transitionContext viewControllerForKey:<span class="built_in">UITransitionContextFromViewControllerKey</span>];</div><div class="line"><span class="comment">//    UINavigationController *toNavigation = (UINavigationController *)[transitionContext viewControllerForKey:UITransitionContextToViewControllerKey];</span></div><div class="line"><span class="comment">//    UIViewController *toVC = [toNavigation viewControllers].firstObject;</span></div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="built_in">UIView</span> *snapshotView;</div><div class="line">    <span class="built_in">CGFloat</span> scaleRatio;</div><div class="line">    <span class="built_in">CGRect</span> finalFrame = <span class="keyword">self</span>.finalCellFrame;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">self</span>.selectCell &amp;&amp; !<span class="built_in">CGRectEqualToRect</span>(finalFrame, <span class="built_in">CGRectZero</span>)) &#123;</div><div class="line">        snapshotView = [<span class="keyword">self</span>.selectCell snapshotViewAfterScreenUpdates:<span class="literal">NO</span>];</div><div class="line">        scaleRatio = fromVC.view.frame.size.width/<span class="keyword">self</span>.selectCell.frame.size.width;</div><div class="line">        snapshotView.layer.zPosition = <span class="number">20</span>;</div><div class="line">    &#125;<span class="keyword">else</span> &#123;</div><div class="line">        snapshotView = [fromVC.view snapshotViewAfterScreenUpdates:<span class="literal">NO</span>];</div><div class="line">        scaleRatio = fromVC.view.frame.size.width/ScreenWidth;</div><div class="line">        finalFrame = _centerFrame;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="built_in">UIView</span> *containerView = [transitionContext containerView];</div><div class="line">    [containerView addSubview:snapshotView];</div><div class="line">    </div><div class="line">    <span class="built_in">NSTimeInterval</span> duration = [<span class="keyword">self</span> transitionDuration:transitionContext];</div><div class="line">    </div><div class="line">    fromVC.view.alpha = <span class="number">0.0</span>f;</div><div class="line">    snapshotView.center = fromVC.view.center;</div><div class="line">    snapshotView.transform = <span class="built_in">CGAffineTransformMakeScale</span>(scaleRatio, scaleRatio);</div><div class="line">    [<span class="built_in">UIView</span> animateWithDuration:duration</div><div class="line">                          delay:<span class="number">0</span></div><div class="line">         usingSpringWithDamping:<span class="number">0.8</span></div><div class="line">          initialSpringVelocity:<span class="number">0.2</span></div><div class="line">                        options:<span class="built_in">UIViewAnimationOptionCurveEaseInOut</span></div><div class="line">                     animations:^&#123;</div><div class="line">                         snapshotView.transform = <span class="built_in">CGAffineTransformMakeScale</span>(<span class="number">1.0</span>f, <span class="number">1.0</span>f);</div><div class="line">                         snapshotView.frame = finalFrame;</div><div class="line">                     &#125; completion:^(<span class="built_in">BOOL</span> finished) &#123;</div><div class="line">                         [transitionContext finishInteractiveTransition];</div><div class="line">                         [transitionContext completeTransition:<span class="literal">YES</span>];</div><div class="line">                         [snapshotView removeFromSuperview];</div><div class="line">                     &#125;];</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>我们重点需要说一下 转场过渡的类<code>DragLeftInteractiveTransition</code>继承自<code>UIPercentDrivenInteractiveTransition</code>负责转场过程,</p>
<p>头文件的声明</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">DragLeftInteractiveTransition</span> : <span class="title">UIPercentDrivenInteractiveTransition</span></span></div><div class="line"></div><div class="line"><span class="comment">/** 是否正在拖动返回 标识是否正在使用转场的交互中 */</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">BOOL</span> isInteracting;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> 设置需要返回的VC</div><div class="line"> </div><div class="line"> @param viewController 控制器实例</div><div class="line"> */</div><div class="line">-(<span class="keyword">void</span>)wireToViewController:(<span class="built_in">UIViewController</span> *)viewController;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>实现</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">DragLeftInteractiveTransition</span> ()</span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIViewController</span> *presentingVC;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">CGPoint</span> viewControllerCenter;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">CALayer</span> *transitionMaskLayer;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">DragLeftInteractiveTransition</span></span></div><div class="line"></div><div class="line"><span class="meta">#pragma mark -</span></div><div class="line"><span class="meta">#pragma mark - override methods 复写方法</span></div><div class="line">-(<span class="built_in">CGFloat</span>)completionSpeed&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span> - <span class="keyword">self</span>.percentComplete;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)updateInteractiveTransition:(<span class="built_in">CGFloat</span>)percentComplete &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%.2f"</span>,percentComplete);</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)cancelInteractiveTransition &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"转场取消"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)finishInteractiveTransition &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"转场完成"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">- (<span class="built_in">CALayer</span> *)transitionMaskLayer &#123;</div><div class="line">    <span class="keyword">if</span> (_transitionMaskLayer == <span class="literal">nil</span>) &#123;</div><div class="line">        _transitionMaskLayer = [<span class="built_in">CALayer</span> layer];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> _transitionMaskLayer;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#pragma mark -</span></div><div class="line"><span class="meta">#pragma mark - private methods 私有方法</span></div><div class="line">- (<span class="keyword">void</span>)prepareGestureRecognizerInView:(<span class="built_in">UIView</span>*)view &#123;</div><div class="line">    <span class="built_in">UIPanGestureRecognizer</span> *gesture = [[<span class="built_in">UIPanGestureRecognizer</span> alloc] initWithTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(handleGesture:)];</div><div class="line">    [view addGestureRecognizer:gesture];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#pragma mark -</span></div><div class="line"><span class="meta">#pragma mark - event response 所有触发的事件响应 按钮、通知、分段控件等</span></div><div class="line">- (<span class="keyword">void</span>)handleGesture:(<span class="built_in">UIPanGestureRecognizer</span> *)gestureRecognizer &#123;</div><div class="line">    <span class="built_in">UIView</span> *vcView = gestureRecognizer.view;</div><div class="line">    <span class="built_in">CGPoint</span> translation = [gestureRecognizer translationInView:vcView.superview];</div><div class="line">    <span class="keyword">if</span>(!<span class="keyword">self</span>.isInteracting &amp;&amp;</div><div class="line">       (translation.x &lt; <span class="number">0</span> ||</div><div class="line">        translation.y &lt; <span class="number">0</span> ||</div><div class="line">        translation.x &lt; translation.y)) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">switch</span> (gestureRecognizer.state) &#123;</div><div class="line">        <span class="keyword">case</span> <span class="built_in">UIGestureRecognizerStateBegan</span>:&#123;</div><div class="line">            <span class="comment">//修复当从右侧向左滑动的时候的bug 避免开始的时候从又向左滑动 当未开始的时候</span></div><div class="line">            <span class="built_in">CGPoint</span> vel = [gestureRecognizer velocityInView:gestureRecognizer.view];</div><div class="line">            <span class="keyword">if</span> (!<span class="keyword">self</span>.isInteracting &amp;&amp; vel.x &lt; <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">self</span>.isInteracting = <span class="literal">NO</span>;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">self</span>.transitionMaskLayer.frame = vcView.frame;</div><div class="line">            <span class="keyword">self</span>.transitionMaskLayer.opaque = <span class="literal">NO</span>;</div><div class="line">            <span class="keyword">self</span>.transitionMaskLayer.opacity = <span class="number">1</span>;</div><div class="line">            <span class="keyword">self</span>.transitionMaskLayer.backgroundColor = [<span class="built_in">UIColor</span> whiteColor].CGColor; <span class="comment">//必须有颜色不能透明</span></div><div class="line">            [<span class="keyword">self</span>.transitionMaskLayer setNeedsDisplay];</div><div class="line">            [<span class="keyword">self</span>.transitionMaskLayer displayIfNeeded];</div><div class="line">            <span class="keyword">self</span>.transitionMaskLayer.anchorPoint = <span class="built_in">CGPointMake</span>(<span class="number">0.5</span>, <span class="number">0.5</span>);</div><div class="line">            <span class="keyword">self</span>.transitionMaskLayer.position = <span class="built_in">CGPointMake</span>(vcView.frame.size.width/<span class="number">2.0</span>f, vcView.frame.size.height/<span class="number">2.0</span>f);</div><div class="line">            vcView.layer.mask = <span class="keyword">self</span>.transitionMaskLayer;</div><div class="line">            vcView.layer.masksToBounds = <span class="literal">YES</span>;</div><div class="line">            </div><div class="line">            <span class="keyword">self</span>.isInteracting = <span class="literal">YES</span>;</div><div class="line">        &#125;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="built_in">UIGestureRecognizerStateChanged</span>: &#123;</div><div class="line">            <span class="built_in">CGFloat</span> progress = translation.x / [<span class="built_in">UIScreen</span> mainScreen].bounds.size.width;</div><div class="line">            progress = fminf(fmaxf(progress, <span class="number">0.0</span>), <span class="number">1.0</span>);</div><div class="line">            </div><div class="line">            <span class="built_in">CGFloat</span> ratio = <span class="number">1.0</span>f - progress*<span class="number">0.5</span>f;</div><div class="line">            [_presentingVC.view setCenter:<span class="built_in">CGPointMake</span>(_viewControllerCenter.x + translation.x * ratio, _viewControllerCenter.y + translation.y * ratio)];</div><div class="line">            _presentingVC.view.transform = <span class="built_in">CGAffineTransformMakeScale</span>(ratio, ratio);</div><div class="line">            [<span class="keyword">self</span> updateInteractiveTransition:progress];</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">case</span> <span class="built_in">UIGestureRecognizerStateCancelled</span>:</div><div class="line">        <span class="keyword">case</span> <span class="built_in">UIGestureRecognizerStateEnded</span>:&#123;</div><div class="line">            <span class="built_in">CGFloat</span> progress = translation.x / [<span class="built_in">UIScreen</span> mainScreen].bounds.size.width;</div><div class="line">            progress = fminf(fmaxf(progress, <span class="number">0.0</span>), <span class="number">1.0</span>);</div><div class="line">            <span class="keyword">if</span> (progress &lt; <span class="number">0.2</span>)&#123;</div><div class="line">                [<span class="built_in">UIView</span> animateWithDuration:progress</div><div class="line">                                      delay:<span class="number">0</span></div><div class="line">                                    options:<span class="built_in">UIViewAnimationOptionCurveEaseOut</span></div><div class="line">                                 animations:^&#123;</div><div class="line">                                     <span class="built_in">CGFloat</span> w = [<span class="built_in">UIScreen</span> mainScreen].bounds.size.width;</div><div class="line">                                     <span class="built_in">CGFloat</span> h = [<span class="built_in">UIScreen</span> mainScreen].bounds.size.height;</div><div class="line">                                     [<span class="keyword">self</span>.presentingVC.view setCenter:<span class="built_in">CGPointMake</span>(w/<span class="number">2</span>, h/<span class="number">2</span>)];</div><div class="line">                                     <span class="keyword">self</span>.presentingVC.view.transform = <span class="built_in">CGAffineTransformMakeScale</span>(<span class="number">1.0</span>f, <span class="number">1.0</span>f);</div><div class="line">                                 &#125; completion:^(<span class="built_in">BOOL</span> finished) &#123;</div><div class="line">                                     <span class="keyword">self</span>.isInteracting = <span class="literal">NO</span>;</div><div class="line">                                     [<span class="keyword">self</span> cancelInteractiveTransition];</div><div class="line">                                 &#125;];</div><div class="line">            &#125;<span class="keyword">else</span> &#123;</div><div class="line">                _isInteracting = <span class="literal">NO</span>;</div><div class="line">                [<span class="keyword">self</span> finishInteractiveTransition];</div><div class="line">                [_presentingVC dismissViewControllerAnimated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//移除 遮罩</span></div><div class="line">            [<span class="keyword">self</span>.transitionMaskLayer removeFromSuperlayer];</div><div class="line">            <span class="keyword">self</span>.transitionMaskLayer = <span class="literal">nil</span>;</div><div class="line">        &#125;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#pragma mark -</span></div><div class="line"><span class="meta">#pragma mark - public methods 公有方法</span></div><div class="line">-(<span class="keyword">void</span>)wireToViewController:(<span class="built_in">UIViewController</span> *)viewController &#123;</div><div class="line">    <span class="keyword">self</span>.presentingVC = viewController;</div><div class="line">    <span class="keyword">self</span>.viewControllerCenter = viewController.view.center;</div><div class="line">    [<span class="keyword">self</span> prepareGestureRecognizerInView:viewController.view];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>我们对外提供了一个<code>wireToViewController:</code>方法用于外部需要创建转场使用.</p>
<p>前面的代码我们发现有一处</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">[<span class="keyword">self</span>.leftDragInteractiveTransition wireToViewController:awemeVC];</div><div class="line">[<span class="keyword">self</span> presentViewController:awemeVC animated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</div></pre></td></tr></table></figure>
<p>这里就是需要把我们要弹出的上下滑VC实例传进来,进来之后为VC的<code>self.view</code>加个<code>pan</code>手势,</p>
<p>复写方法中我们可以看到相关开始结束 完成过程的百分比相关方法复写</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="meta">#pragma mark -</span></div><div class="line"><span class="meta">#pragma mark - override methods 复写方法</span></div><div class="line">-(<span class="built_in">CGFloat</span>)completionSpeed&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span> - <span class="keyword">self</span>.percentComplete;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)updateInteractiveTransition:(<span class="built_in">CGFloat</span>)percentComplete &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%.2f"</span>,percentComplete);</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)cancelInteractiveTransition &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"转场取消"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)finishInteractiveTransition &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"转场完成"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看是手势 出发前 先检查一下是否如下条件</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="built_in">UIView</span> *vcView = gestureRecognizer.view;</div><div class="line"><span class="built_in">CGPoint</span> translation = [gestureRecognizer translationInView:vcView.superview];</div><div class="line"><span class="keyword">if</span>(!<span class="keyword">self</span>.isInteracting &amp;&amp;</div><div class="line">   (translation.x &lt; <span class="number">0</span> ||</div><div class="line">    translation.y &lt; <span class="number">0</span> ||</div><div class="line">    translation.x &lt; translation.y)) &#123;</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>拿出手势作用的视图,然后坐标转换,判断当前是否已经开始了动画,如果没开始 或者x坐标 &lt; y坐标是判断当前是否是超过边界范围等等异常case处理.</p>
<p>开始的时候需要注意下</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//修复当从右侧向左滑动的时候的bug 避免开始的时候从又向左滑动 当未开始的时候</span></div><div class="line"><span class="built_in">CGPoint</span> vel = [gestureRecognizer velocityInView:gestureRecognizer.view];</div><div class="line"><span class="keyword">if</span> (!<span class="keyword">self</span>.isInteracting &amp;&amp; vel.x &lt; <span class="number">0</span>) &#123;</div><div class="line">    <span class="keyword">self</span>.isInteracting = <span class="literal">NO</span>;</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后 开始的时候加个蒙版做为view.mask 这样是为了解决tableView 超出contentSize的范围要隐藏</p>
<p>剩下的就是中间过程 </p>
<p><strong>关键的核心代码</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">[<span class="keyword">self</span> updateInteractiveTransition:progress];</div></pre></td></tr></table></figure>
<blockquote>
<p>更新转场的进度 这是这个类的自带方法,调用就行了</p>
</blockquote>
<p>最后 手势结束</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="built_in">CGFloat</span> progress = translation.x / [<span class="built_in">UIScreen</span> mainScreen].bounds.size.width;</div><div class="line">progress = fminf(fmaxf(progress, <span class="number">0.0</span>), <span class="number">1.0</span>);</div><div class="line"><span class="keyword">if</span> (progress &lt; <span class="number">0.2</span>)&#123;</div><div class="line">    [<span class="built_in">UIView</span> animateWithDuration:progress</div><div class="line">                          delay:<span class="number">0</span></div><div class="line">                        options:<span class="built_in">UIViewAnimationOptionCurveEaseOut</span></div><div class="line">                     animations:^&#123;</div><div class="line">                         <span class="built_in">CGFloat</span> w = [<span class="built_in">UIScreen</span> mainScreen].bounds.size.width;</div><div class="line">                         <span class="built_in">CGFloat</span> h = [<span class="built_in">UIScreen</span> mainScreen].bounds.size.height;</div><div class="line">                         [<span class="keyword">self</span>.presentingVC.view setCenter:<span class="built_in">CGPointMake</span>(w/<span class="number">2</span>, h/<span class="number">2</span>)];</div><div class="line">                         <span class="keyword">self</span>.presentingVC.view.transform = <span class="built_in">CGAffineTransformMakeScale</span>(<span class="number">1.0</span>f, <span class="number">1.0</span>f);</div><div class="line">                     &#125; completion:^(<span class="built_in">BOOL</span> finished) &#123;</div><div class="line">                         <span class="keyword">self</span>.isInteracting = <span class="literal">NO</span>;</div><div class="line">                         [<span class="keyword">self</span> cancelInteractiveTransition];</div><div class="line">                     &#125;];</div><div class="line">&#125;<span class="keyword">else</span> &#123;</div><div class="line">    _isInteracting = <span class="literal">NO</span>;</div><div class="line">    [<span class="keyword">self</span> finishInteractiveTransition];</div><div class="line">    [_presentingVC dismissViewControllerAnimated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</div><div class="line">&#125;</div><div class="line"><span class="comment">//移除 遮罩</span></div><div class="line">[<span class="keyword">self</span>.transitionMaskLayer removeFromSuperlayer];</div><div class="line"><span class="keyword">self</span>.transitionMaskLayer = <span class="literal">nil</span>;</div></pre></td></tr></table></figure>
<blockquote>
<p>这里设置0.2的容差 如果你觉得这个应该开放接口设置可自行封装.</p>
</blockquote>
<p>当用户取消的话记得调用<code>cancelInteractiveTransition</code>方法取消</p>
<p>完成的话调用<code>finishInteractiveTransition</code>完成转场</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>整个过程还是比较简单的 如果看过喵神的文章将会更加清晰的了解转场的三个过程<br>就是 弹出和消失动画 以及一个中间转场过程需要我们熟悉.</p>
<p>优化点: 在原开源工程中的demo转场右滑是有bug的,我做了一下如下判断</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//修复当从右侧向左滑动的时候的bug 避免开始的时候从又向左滑动 当未开始的时候</span></div><div class="line"><span class="built_in">CGPoint</span> vel = [gestureRecognizer velocityInView:gestureRecognizer.view];</div><div class="line"><span class="keyword">if</span> (!<span class="keyword">self</span>.isInteracting &amp;&amp; vel.x &lt; <span class="number">0</span>) &#123;</div><div class="line">    <span class="keyword">self</span>.isInteracting = <span class="literal">NO</span>;</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>vel</code>这个变量 其实是判断当我们从右侧划入返回.修复了原来开源的一个bug</p>
<p>还有 原来开源中<code>tableView</code>的<code>contentSize</code>以外 区域露在外部,我用了一个mask的蒙版遮住了显示在外的区域.</p>
<p>唯一有些许遗憾的地方是抖音的左滑返回时候,有背景遮盖透明的渐变.这里由于时间关系和篇幅限制我没有花足够的时间调研.后续完善,写的不好请大家多多指教</p>
<p><a href="https://github.com/sunyazhou13/AwemeDemoTransition" target="_blank" rel="external">最终得Demo在这里</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;这几天比较忙,今天给大家带来的是抖音的转场动画实现 废话不多说上图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubu
    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="抖音动画系列" scheme="https://www.sunyazhou.com/tags/%E6%8A%96%E9%9F%B3%E5%8A%A8%E7%94%BB%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>探测UIPanGesture的滑动方向</title>
    <link href="https://www.sunyazhou.com/2018/12/06/20181206Detecting-pan-gesture-direction/"/>
    <id>https://www.sunyazhou.com/2018/12/06/20181206Detecting-pan-gesture-direction/</id>
    <published>2018-12-06T05:59:46.000Z</published>
    <updated>2018-12-18T16:05:06.393Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这几天遇到一个问题 就是拖动手势作用在一个view上的时候 无法区分方向</p>
<p>于是找到stackOverFlow上的答案 记录一下</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)panRecognized:(<span class="built_in">UIPanGestureRecognizer</span> *)rec</div><div class="line">&#123;</div><div class="line">    <span class="built_in">CGPoint</span> vel = [rec velocityInView:<span class="keyword">self</span>.view];</div><div class="line">    <span class="keyword">if</span> (vel.x &gt; <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="comment">// user dragged towards the right 向右拖动</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">// user dragged towards the left 向左拖动</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="https://stackoverflow.com/questions/11777281/detecting-the-direction-of-pan-gesture-in-ios" target="_blank" rel="external">参考</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;这几天遇到一个问题 就是拖动手势作用在一个view上的时候 无法区分方向&lt;/p&gt;
&lt;p&gt;于是找到stackOverFlow上的答案 记录一下
    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>iOS抖音点赞动画实现</title>
    <link href="https://www.sunyazhou.com/2018/11/27/20181127LikeAnimation/"/>
    <id>https://www.sunyazhou.com/2018/11/27/20181127LikeAnimation/</id>
    <published>2018-11-27T03:16:14.000Z</published>
    <updated>2018-12-18T16:05:06.393Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>hi 大家好 又跟大家见面了,今天给大家分享的是抖音的点赞动画的实现, 废话不多说上图</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/76ba4614cb348633a74605650cb87898e5a28d56/20181127LikeAnimation/likeAnimation.gif" alt=""></p>
<p>本篇文章主要包含技术点:</p>
<ul>
<li>CAShapeLayer和贝赛尔曲线绘制三角形</li>
<li>组合动画的时间技巧</li>
</ul>
<p>我习惯写完文章的demo都附在文章底部,如果不想看原理的小伙伴可直接跳到底部找demo下载.</p>
<h1 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h1><p>首先 我们来详细分解一下这个动画 </p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/3e284f04ea28b305a0cfe2c25618fcc71685ab21/20181127LikeAnimation/likeAnimation2.gif" alt=""></p>
<blockquote>
<p>请仔细观察</p>
</blockquote>
<p>我们来看单独的一个动画 </p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/3e284f04ea28b305a0cfe2c25618fcc71685ab21/20181127LikeAnimation/likeAnimation3.gif" alt=""></p>
<blockquote>
<p>请仔细观看 我设置10秒的duration 以便于大家能看清楚</p>
</blockquote>
<h2 id="实现原理-1"><a href="#实现原理-1" class="headerlink" title="实现原理"></a>实现原理</h2><p>从上述两张图中,我们可以看到 它是一个 三角形的贝塞尔曲线 </p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/47fde336e6b929ef6163f87e248147d9ddf2354b/20181127LikeAnimation/likeAnimation4.png" alt=""></p>
<p>这样的动画需要经过:</p>
<ul>
<li>2π (360°)旋转一周</li>
<li>圆一周一共有六个 三角形的贝赛尔曲线图形形状.</li>
<li>一个动画组 内部包含缩放动画 从0~1的放大 ,动画如果执行10秒,那么 scale缩放动画执行 10*0.2 = 2秒, 动画组中还包含另一个动画是 从结束位置的动画到结尾消失的位置大小变化直到动画消失.</li>
<li>沿着圆形每 60°角度 创建一个上图的三角形图形.</li>
</ul>
<p>说了这么多 实际就是用<code>CABasicAnimation</code>的keypath是<code>path</code>和<code>CABasicAnimation</code>的<code>keypath</code>是<code>transform.scale</code>的动画组合在一起作用于一个三角形上,并且一共创建6个三角形图形.</p>
<p>结束的时候大概是这样的</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/8ad48f681be3c7d5bdb60eb3e8c5b3fbe15ec29f/20181127LikeAnimation/likeAnimation5.gif" alt=""></p>
<p>结束的时候实际上是一个从 上一次动画执行完成的path向 一条线上三个点的path过渡的过程,直到最后隐藏消失.</p>
<p>好下面我们来实现一下这个动画</p>
<blockquote>
<p>注意: 背景的❤️红心是 一张图不在本篇讲述范围</p>
</blockquote>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>首先我们子类话一个<code>ZanLikeView</code>继承自<code>UIView</code>并设置底部的图片和点击变换的❤️图片,就是两张UIImageView加手势,当点击的时候区分不同view的tag就知道哪个imageview点击,这样就可以做两张动画不同的效果了,不过这些可以参考demo.</p>
<p>我主要介绍核心代码</p>
<p>创建 <code>CAShapeLayer</code>用于做形状图形相关的图形动画.</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="built_in">CAShapeLayer</span> *layer = [[<span class="built_in">CAShapeLayer</span> alloc]init];</div><div class="line">layer.position = _likeBefore.center;</div><div class="line">layer.fillColor = [<span class="built_in">UIColor</span> redColor].CGColor;</div></pre></td></tr></table></figure>
<blockquote>
<p>颜色最终可对外暴露接口</p>
</blockquote>
<p>for循环每 30°角创建一个上述的三角形.我们需要创建 6个 就循环6次</p>
<p>创建初始位置的贝塞尔path</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="built_in">CGFloat</span> length = <span class="number">30</span>;</div><div class="line"><span class="built_in">CGFloat</span> duration = <span class="number">0.5</span>f;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">6</span>; i++) &#123;</div><div class="line">	<span class="built_in">CAShapeLayer</span> *layer = [[<span class="built_in">CAShapeLayer</span> alloc]init];</div><div class="line">	layer.position = _likeBefore.center;</div><div class="line">	layer.fillColor = [[<span class="built_in">UIColor</span> redColor].CGColor;</div><div class="line">	</div><div class="line">	<span class="comment">//...  1</span></div><div class="line">	<span class="comment">//...  2</span></div><div class="line">	<span class="comment">//...  3</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>这里我们一共创建6个shapeLayer的实例并填充成颜色,我们这里填充的是红色 其它的颜色可自行封装.<br>_likeBefore 是我们看到白色的❤️背景视图(UIImageView)</p>
</blockquote>
<p>下面 在<code>//...  1</code>的地方加入如下代码</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="built_in">UIBezierPath</span> *startPath = [<span class="built_in">UIBezierPath</span> bezierPath];</div><div class="line">[startPath moveToPoint:<span class="built_in">CGPointMake</span>(<span class="number">-2</span>, -length)];</div><div class="line">[startPath addLineToPoint:<span class="built_in">CGPointMake</span>(<span class="number">2</span>, -length)];</div><div class="line">[startPath addLineToPoint:<span class="built_in">CGPointMake</span>(<span class="number">0</span>, <span class="number">0</span>)];</div></pre></td></tr></table></figure>
<p>这行代码加完就是这样的图形</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/47fde336e6b929ef6163f87e248147d9ddf2354b/20181127LikeAnimation/likeAnimation4.png" alt=""></p>
<p>然后创建完成我们需要把path给layer.path. 记得转成CGPath</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">layer.path = startPath.CGPath;</div><div class="line">layer.transform = <span class="built_in">CATransform3DMakeRotation</span>(M_PI / <span class="number">3.0</span>f * i, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>);</div><div class="line">[<span class="keyword">self</span>.layer addSublayer:layer]</div></pre></td></tr></table></figure>
<blockquote>
<p>注: CATransform3DMakeRotation()函数 当x,y,z值为0时,代表在该轴方向上不进行旋转,当值为-1时,代表在该轴方向上进行逆时针旋转,当值为1时,代表在该轴方向上进行顺时针旋转<br>因为我们是需要60°创建一个layer所以需要顺时针 M_PI / 3.0f = 60°. 每循环一次则创建第N个角度<code>乘</code>60°.</p>
</blockquote>
<p>接着在<code>//...  2</code>添加如下代码</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//动画组</span></div><div class="line"><span class="built_in">CAAnimationGroup</span> *group = [[<span class="built_in">CAAnimationGroup</span> alloc] init];</div><div class="line">group.removedOnCompletion = <span class="literal">NO</span>;</div><div class="line">group.timingFunction = [<span class="built_in">CAMediaTimingFunction</span> functionWithName:kCAMediaTimingFunctionEaseInEaseOut];</div><div class="line">group.fillMode = kCAFillModeForwards;</div><div class="line">group.duration = duration;</div><div class="line"></div><div class="line"><span class="comment">//缩放动画</span></div><div class="line"><span class="built_in">CABasicAnimation</span> *scaleAnim = [<span class="built_in">CABasicAnimation</span> animationWithKeyPath:<span class="string">@"transform.scale"</span>];</div><div class="line">scaleAnim.fromValue = @(<span class="number">0.0</span>);</div><div class="line">scaleAnim.toValue = @(<span class="number">1.0</span>);</div><div class="line">scaleAnim.duration = duration * <span class="number">0.2</span>f; <span class="comment">//注意这里是在给定时长的地方前0.2f的时间里执行缩放</span></div></pre></td></tr></table></figure>
<blockquote>
<p>这里说下duration <em> 0.2f. 比如我给定 10秒的duration,那么 duration </em> 0.2 = 2 秒执行缩放.</p>
</blockquote>
<p>最后在<code>//...  3</code>的代码出加上如下代码</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//结束点</span></div><div class="line"><span class="built_in">UIBezierPath</span> *endPath = [<span class="built_in">UIBezierPath</span> bezierPath];</div><div class="line">[endPath moveToPoint:<span class="built_in">CGPointMake</span>(<span class="number">-2</span>, -length)];</div><div class="line">[endPath addLineToPoint:<span class="built_in">CGPointMake</span>(<span class="number">2</span>, -length)];</div><div class="line">[endPath addLineToPoint:<span class="built_in">CGPointMake</span>(<span class="number">0</span>, -length)];</div><div class="line">            </div><div class="line"><span class="built_in">CABasicAnimation</span> *pathAnim = [<span class="built_in">CABasicAnimation</span> animationWithKeyPath:<span class="string">@"path"</span>];</div><div class="line">pathAnim.fromValue = (__bridge <span class="keyword">id</span>)layer.path;</div><div class="line">pathAnim.toValue = (__bridge <span class="keyword">id</span>)endPath.CGPath;</div><div class="line">pathAnim.beginTime = duration * <span class="number">0.2</span>f;</div><div class="line">pathAnim.duration = duration * <span class="number">0.8</span>f;</div><div class="line">    </div><div class="line">[group setAnimations:@[scaleAnim, pathAnim]];</div><div class="line">[layer addAnimation:group forKey:<span class="literal">nil</span>];</div></pre></td></tr></table></figure>
<p>这几行代码的意识是 从我们上一个layer的path位置开始向我们结束位置的path过渡,并且注意开始时间<br><code>pathAnim.beginTime</code>是 duration <em> 0.2也就是说 在上一个动画结束的时间点才开始结束过渡,过渡的时长剩余是duration </em> 0.8.这样两个连贯在一起的动画就执行完了,最后把动画加到动画组 天加给layer.</p>
<p>下图是从开始到结束点过渡的动画.</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/8ad48f681be3c7d5bdb60eb3e8c5b3fbe15ec29f/20181127LikeAnimation/likeAnimation5.gif" alt=""></p>
<p>剩余的工作就是做个普通的动画的 基本没什么了.</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">[<span class="built_in">UIView</span> animateWithDuration:<span class="number">0.35</span>f</div><div class="line">                      delay:<span class="number">0.0</span>f</div><div class="line">                    options:<span class="built_in">UIViewAnimationOptionCurveEaseIn</span></div><div class="line">                 animations:^&#123;</div><div class="line">                     <span class="keyword">self</span>.likeAfter.transform = <span class="built_in">CGAffineTransformScale</span>(<span class="built_in">CGAffineTransformMakeRotation</span>(-M_PI_4), <span class="number">0.1</span>f, <span class="number">0.1</span>f);</div><div class="line">                 &#125;</div><div class="line">                 completion:^(<span class="built_in">BOOL</span> finished) &#123;</div><div class="line">                     [<span class="keyword">self</span>.likeAfter setHidden:<span class="literal">YES</span>];</div><div class="line">                     <span class="keyword">self</span>.likeBefore.userInteractionEnabled = <span class="literal">YES</span>;</div><div class="line">                     <span class="keyword">self</span>.likeAfter.userInteractionEnabled = <span class="literal">YES</span>;</div><div class="line">                 &#125;];</div></pre></td></tr></table></figure>
<h4 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h4><p>结束动画的开始时间和结束时间控制,恰到好处.</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>动画实现的细节需要研究和学习和实践,在这里感谢开源作者的代码给了思路, 我个人通过学习和模仿整理出原理写出代码校验并增加相关对外接口.</p>
<p><a href="https://github.com/sunyazhou13/LikeDemo" target="_blank" rel="external">点击下载Demo</a></p>
<p><a href="https://github.com/sunyazhou13/LikeDemo/archive/master.zip" target="_blank" rel="external">直接下载zip</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;hi 大家好 又跟大家见面了,今天给大家分享的是抖音的点赞动画的实现, 废话不多说上图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://r
    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="抖音动画系列" scheme="https://www.sunyazhou.com/tags/%E6%8A%96%E9%9F%B3%E5%8A%A8%E7%94%BB%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>iOS视频加载动画</title>
    <link href="https://www.sunyazhou.com/2018/11/14/20181114PlayLoadingAnimation/"/>
    <id>https://www.sunyazhou.com/2018/11/14/20181114PlayLoadingAnimation/</id>
    <published>2018-11-14T06:14:39.000Z</published>
    <updated>2018-12-18T16:05:06.392Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这几天一直跟开源的抖音demo斗智斗勇,今天跟大家分享的是抖音中或者快手中加载视频的动画 </p>
<p>上图看成品</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/a119e34c5b443ef40036554e5fa05fa9f7c707ce/20181114PlayLoadingAnimation/playloading.gif" alt=""></p>
<h1 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h1><p>首先我创建一个视图</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIView</span> *playLoadingView;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    </div><div class="line">    <span class="comment">//init player status bar</span></div><div class="line">    <span class="keyword">self</span>.playLoadingView = [[<span class="built_in">UIView</span> alloc]init];</div><div class="line">    <span class="keyword">self</span>.playLoadingView.backgroundColor = [<span class="built_in">UIColor</span> whiteColor];</div><div class="line">    [<span class="keyword">self</span>.playLoadingView setHidden:<span class="literal">YES</span>];</div><div class="line">    [<span class="keyword">self</span>.view addSubview:<span class="keyword">self</span>.playLoadingView];</div><div class="line">    </div><div class="line">    <span class="comment">//make constraintes</span></div><div class="line">    [<span class="keyword">self</span>.playLoadingView mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">        make.center.equalTo(<span class="keyword">self</span>.view);</div><div class="line">        make.width.mas_equalTo(<span class="number">1.0</span>f); <span class="comment">//宽 1 dp</span></div><div class="line">        make.height.mas_equalTo(<span class="number">0.5</span>f); <span class="comment">//高 0.5 dp</span></div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">    [<span class="keyword">self</span> startLoadingPlayAnimation:<span class="literal">YES</span>]; <span class="comment">//调用动画代码</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>这里我们可以看到 我们实际上创建的是一个 1pt宽度 0.5 pt的宽度 的视图</p>
</blockquote>
<p>紧接着动画实现的代码</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)startLoadingPlayAnimation:(<span class="built_in">BOOL</span>)isStart &#123;</div><div class="line">    <span class="keyword">if</span> (isStart) &#123;</div><div class="line">        <span class="keyword">self</span>.playLoadingView.backgroundColor = [<span class="built_in">UIColor</span> whiteColor];</div><div class="line">        <span class="keyword">self</span>.playLoadingView.hidden = <span class="literal">NO</span>;</div><div class="line">        [<span class="keyword">self</span>.playLoadingView.layer removeAllAnimations];</div><div class="line">        </div><div class="line">        <span class="built_in">CAAnimationGroup</span> *animationGroup = [[<span class="built_in">CAAnimationGroup</span> alloc] init];</div><div class="line">        animationGroup.duration = <span class="number">0.5</span>;</div><div class="line">        animationGroup.beginTime = <span class="built_in">CACurrentMediaTime</span>() + <span class="number">0.5</span>;</div><div class="line">        animationGroup.repeatCount = MAXFLOAT;</div><div class="line">        animationGroup.timingFunction = [<span class="built_in">CAMediaTimingFunction</span> functionWithName:kCAMediaTimingFunctionEaseInEaseOut];</div><div class="line">        </div><div class="line">        <span class="built_in">CABasicAnimation</span> *scaleAnimation = [<span class="built_in">CABasicAnimation</span> animation];</div><div class="line">        scaleAnimation.keyPath = <span class="string">@"transform.scale.x"</span>;</div><div class="line">        scaleAnimation.fromValue = @(<span class="number">1.0</span>f);</div><div class="line">        scaleAnimation.toValue = @(<span class="number">1.0</span>f * ScreenWidth);</div><div class="line">        </div><div class="line">        <span class="built_in">CABasicAnimation</span> *alphaAnimation = [<span class="built_in">CABasicAnimation</span> animation];</div><div class="line">        alphaAnimation.keyPath = <span class="string">@"opacity"</span>;</div><div class="line">        alphaAnimation.fromValue = @(<span class="number">1.0</span>f);</div><div class="line">        alphaAnimation.toValue = @(<span class="number">0.5</span>f);</div><div class="line">        </div><div class="line">        [animationGroup setAnimations:@[scaleAnimation, alphaAnimation]];</div><div class="line">        [<span class="keyword">self</span>.playLoadingView.layer addAnimation:animationGroup forKey:<span class="literal">nil</span>];</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        [<span class="keyword">self</span>.playLoadingView.layer removeAllAnimations];</div><div class="line">        <span class="keyword">self</span>.playLoadingView.hidden = <span class="literal">YES</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>完事 就这几行代码 搞定</p>
<p>其实核心的只有4行代码</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="built_in">CABasicAnimation</span> *scaleAnimation = [<span class="built_in">CABasicAnimation</span> animation];</div><div class="line">scaleAnimation.keyPath = <span class="string">@"transform.scale.x"</span>;</div><div class="line">scaleAnimation.fromValue = @(<span class="number">1.0</span>f);</div><div class="line">scaleAnimation.toValue = @(<span class="number">1.0</span>f * ScreenWidth);</div></pre></td></tr></table></figure>
<blockquote>
<p>关键在<code>scaleAnimation.keyPath = @&quot;transform.scale.x&quot;;</code> 这里我们要沿着x做缩放</p>
</blockquote>
<p>缩放的得值从 <strong>1~屏幕宽度</strong>, 当然值多大自己可以控制. </p>
<p>如果<code>@&quot;transform.scale.y&quot;</code> 则是沿着Y轴缩放</p>
<p>当然 如果写成<code>@&quot;transform.scale&quot;</code> 那就X,Y 一起缩放 大家可以试试.</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本篇的动画技巧是 缩放的 <code>transform.scale.y</code> 从一个点 做layer缩放 就会出现 加载效果.</p>
<p><a href="https://github.com/sunyazhou13/PlayLoadingDemo" target="_blank" rel="external">最后附上demo</a></p>
<p>感谢大家支持</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;这几天一直跟开源的抖音demo斗智斗勇,今天跟大家分享的是抖音中或者快手中加载视频的动画 &lt;/p&gt;
&lt;p&gt;上图看成品&lt;/p&gt;
&lt;p&gt;&lt;img
    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="抖音动画系列" scheme="https://www.sunyazhou.com/tags/%E6%8A%96%E9%9F%B3%E5%8A%A8%E7%94%BB%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>iOS所有Animation相关可用的Keypath</title>
    <link href="https://www.sunyazhou.com/2018/11/13/20181113AllKeypathOfCALayer/"/>
    <id>https://www.sunyazhou.com/2018/11/13/20181113AllKeypathOfCALayer/</id>
    <published>2018-11-13T03:46:45.000Z</published>
    <updated>2018-11-17T05:03:35.107Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在Core Animation中 我们经常使用CABasicAnimation或者它的子类做一些动画</p>
<p>一般情况下我们都要用到Keypath,最近在研究动画,想整理一下所有可用的Keypath在iOS的核心动画中.</p>
<h1 id="CALayer的相关属性"><a href="#CALayer的相关属性" class="headerlink" title="CALayer的相关属性"></a>CALayer的相关属性</h1><p>废话不多说 我们上一段代码演示一下 这篇的主题</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="built_in">CABasicAnimation</span> * scaleAnimation = [<span class="built_in">CABasicAnimation</span> animation];</div><div class="line">scaleAnimation.keyPath = <span class="string">@"transform.scale.x"</span>;</div><div class="line">scaleAnimation.fromValue = @(<span class="number">1.0</span>f);</div><div class="line">scaleAnimation.toValue = @(<span class="number">1.0</span>f * ScreenWidth);</div></pre></td></tr></table></figure>
<p>一般我们给一个View的Layer添加animation</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">[xxxView.layer addAnimation: scaleAnimation forKey:<span class="string">@"testAnimationName"</span>];</div></pre></td></tr></table></figure>
<p>这里面我们注意到<code>scaleAnimation.keyPath</code>它实际上是一个字符串 是一个被外部修改的成员变量的类似的东西,但是我们自己又不能随便想写写啥</p>
<p>这个实际上是一个layer的属性 或者成员变量.</p>
<h2 id="全部可修改的keypath有哪些呢？"><a href="#全部可修改的keypath有哪些呢？" class="headerlink" title="全部可修改的keypath有哪些呢？"></a>全部可修改的keypath有哪些呢？</h2><h3 id="CALayer-animatable-properties-动画有如下这些"><a href="#CALayer-animatable-properties-动画有如下这些" class="headerlink" title="CALayer animatable properties 动画有如下这些"></a>CALayer animatable properties 动画有如下这些</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">nchorPoint</div><div class="line">backgroundColor</div><div class="line">backgroundFilters</div><div class="line">borderColor</div><div class="line">borderWidth</div><div class="line">bounds</div><div class="line">compositingFilter</div><div class="line">contents</div><div class="line">contentsRect</div><div class="line">cornerRadius</div><div class="line">doubleSided</div><div class="line">filters</div><div class="line">frame</div><div class="line">hidden</div><div class="line">mask</div><div class="line">masksToBounds</div><div class="line">opacity</div><div class="line">position</div><div class="line">shadowColor</div><div class="line">shadowOffset</div><div class="line">shadowOpacity</div><div class="line">shadowPath</div><div class="line">shadowRadius</div><div class="line">sublayers</div><div class="line">sublayerTransform</div><div class="line">transform</div><div class="line">zPosition</div></pre></td></tr></table></figure>
<p>剩下的都是继承自CALayer</p>
<h3 id="CAEmitterLayer-animatable-properties"><a href="#CAEmitterLayer-animatable-properties" class="headerlink" title="CAEmitterLayer animatable properties:"></a>CAEmitterLayer animatable properties:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">emitterPosition</div><div class="line">emitterZPosition</div><div class="line">emitterSize</div></pre></td></tr></table></figure>
<h3 id="CAGradientLayer-animatable-properties"><a href="#CAGradientLayer-animatable-properties" class="headerlink" title="CAGradientLayer animatable properties"></a>CAGradientLayer animatable properties</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">colors</div><div class="line">locations</div><div class="line">endPoint</div><div class="line">startPoint</div></pre></td></tr></table></figure>
<h3 id="CAReplicatorLayer-animatable-properties"><a href="#CAReplicatorLayer-animatable-properties" class="headerlink" title="CAReplicatorLayer animatable properties"></a>CAReplicatorLayer animatable properties</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">instanceDelay</div><div class="line">instanceTransform</div><div class="line">instanceRedOffset</div><div class="line">instanceGreenOffset</div><div class="line">instanceBlueOffset</div><div class="line">instanceAlphaOffset</div></pre></td></tr></table></figure>
<h3 id="CAShapeLayer-animatable-properties"><a href="#CAShapeLayer-animatable-properties" class="headerlink" title="CAShapeLayer animatable properties"></a>CAShapeLayer animatable properties</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">fillColor</div><div class="line">lineDashPhase</div><div class="line">lineWidth</div><div class="line">miterLimit</div><div class="line">strokeColor</div><div class="line">strokeStart</div><div class="line">strokeEnd</div></pre></td></tr></table></figure>
<h3 id="CATextLayer-animatable-properties"><a href="#CATextLayer-animatable-properties" class="headerlink" title="CATextLayer animatable properties"></a>CATextLayer animatable properties</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">fontSize</div><div class="line">foregroundColor</div></pre></td></tr></table></figure>
<h3 id="CATransform3D-Key-Value-Coding-Extensions-KVC的-Keypath"><a href="#CATransform3D-Key-Value-Coding-Extensions-KVC的-Keypath" class="headerlink" title="CATransform3D Key-Value Coding Extensions(KVC的 Keypath)"></a>CATransform3D Key-Value Coding Extensions(KVC的 Keypath)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"></div><div class="line">rotation.x</div><div class="line">rotation.y</div><div class="line">rotation.z</div><div class="line">rotation</div><div class="line">scale.x</div><div class="line">scale.y</div><div class="line">scale.z</div><div class="line">scale</div><div class="line">translation.x</div><div class="line">translation.y</div><div class="line">translation.z</div></pre></td></tr></table></figure>
<h4 id="CGPoint-keyPaths"><a href="#CGPoint-keyPaths" class="headerlink" title="CGPoint keyPaths"></a>CGPoint keyPaths</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">x</div><div class="line">y</div></pre></td></tr></table></figure>
<h4 id="CGSize-keyPaths"><a href="#CGSize-keyPaths" class="headerlink" title="CGSize keyPaths"></a>CGSize keyPaths</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">width</div><div class="line">height</div></pre></td></tr></table></figure>
<h3 id="CGRect-keyPaths"><a href="#CGRect-keyPaths" class="headerlink" title="CGRect keyPaths"></a>CGRect keyPaths</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">origin</div><div class="line">origin.x</div><div class="line">origin.y</div><div class="line">size</div><div class="line">size.width</div><div class="line">size.height</div></pre></td></tr></table></figure>
<blockquote>
<p>还有一些附加可<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/CoreAnimation_guide/AnimatableProperties/AnimatableProperties.html" target="_blank" rel="external">参考</a>, 以及详细内容可以参考<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/CoreAnimation_guide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40004514-CH1-SW1" target="_blank" rel="external">官方文档</a>,以及一些<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/CoreAnimation_guide/Key-ValueCodingExtensions/Key-ValueCodingExtensions.html#//apple_ref/doc/uid/TP40004514-CH12-SW2" target="_blank" rel="external">结构体</a>.</p>
</blockquote>
<p>以上就是所有我目前找到的全部动画可用的<code>keypath</code>.</p>
<h2 id="可动画属性介绍"><a href="#可动画属性介绍" class="headerlink" title="可动画属性介绍"></a>可动画属性介绍</h2><h3 id="几何属性-Geometry-Properties"><a href="#几何属性-Geometry-Properties" class="headerlink" title="几何属性(Geometry Properties)"></a>几何属性(Geometry Properties)</h3><table>
<thead>
<tr>
<th>可用 Key Path</th>
<th>示意</th>
</tr>
</thead>
<tbody>
<tr>
<td>transform.rotation.x</td>
<td>按x轴旋转的弧度</td>
</tr>
<tr>
<td>transform.rotation.y</td>
<td>按y轴旋转的弧度</td>
</tr>
<tr>
<td>transform.rotation.z</td>
<td>按z轴旋转的弧度</td>
</tr>
<tr>
<td>transform.rotation</td>
<td>按z轴旋转的弧度, 和transform.rotation.z效果一样</td>
</tr>
<tr>
<td>transform.scale.x</td>
<td>在x轴按比例放大缩小</td>
</tr>
<tr>
<td>transform.scale.y</td>
<td>在y轴按比例放大缩小</td>
</tr>
<tr>
<td>transform.scale.z</td>
<td>在z轴按比例放大缩小</td>
</tr>
<tr>
<td>transform.scale</td>
<td>整体按比例放大缩小</td>
</tr>
<tr>
<td>transform.translation.x</td>
<td>沿x轴平移</td>
</tr>
<tr>
<td>transform.translation.y</td>
<td>沿y轴平移</td>
</tr>
<tr>
<td>transform.translation.z</td>
<td>沿z轴平移</td>
</tr>
<tr>
<td>transform.translation</td>
<td>x,y 坐标均发生改变</td>
</tr>
<tr>
<td>transform</td>
<td>CATransform3D 4xbounds4矩阵</td>
</tr>
<tr>
<td>bounds</td>
<td>layer大小</td>
</tr>
<tr>
<td>position</td>
<td>layer位置</td>
</tr>
<tr>
<td>anchorPoint</td>
<td>锚点位置</td>
</tr>
<tr>
<td>cornerRadius</td>
<td>圆角大小</td>
</tr>
<tr>
<td>zPosition</td>
<td>z轴位置</td>
</tr>
</tbody>
</table>
<blockquote>
<p>注意: 这里没有frame,layer的 frame 是不支持动画的，我们可以通过改变position和bounds来代替frame</p>
</blockquote>
<h3 id="Layer内容-Layer-Content"><a href="#Layer内容-Layer-Content" class="headerlink" title="Layer内容 (Layer Content)"></a>Layer内容 (Layer Content)</h3><table>
<thead>
<tr>
<th>可用 Key Path</th>
<th>示意</th>
</tr>
</thead>
<tbody>
<tr>
<td>contents</td>
<td>Layer内容，呈现在背景颜色之上</td>
</tr>
</tbody>
</table>
<h3 id="阴影属性-Shadow-Properties"><a href="#阴影属性-Shadow-Properties" class="headerlink" title="阴影属性 (Shadow Properties)"></a>阴影属性 (Shadow Properties)</h3><table>
<thead>
<tr>
<th>可用 Key Path</th>
<th>示意</th>
</tr>
</thead>
<tbody>
<tr>
<td>shadowColor</td>
<td>阴影颜色</td>
</tr>
<tr>
<td>shadowOffset</td>
<td>阴影偏移距离</td>
</tr>
<tr>
<td>shadowOpacity</td>
<td>阴影透明度</td>
</tr>
<tr>
<td>shadowRadius</td>
<td>阴影圆角</td>
</tr>
<tr>
<td>shadowPath</td>
<td>阴影轨迹</td>
</tr>
</tbody>
</table>
<h3 id="透明度-Opacity-Property"><a href="#透明度-Opacity-Property" class="headerlink" title="透明度 (Opacity Property)"></a>透明度 (Opacity Property)</h3><table>
<thead>
<tr>
<th>可用 Key Path</th>
<th>示意</th>
</tr>
</thead>
<tbody>
<tr>
<td>opacity</td>
<td>透明度</td>
</tr>
</tbody>
</table>
<h3 id="遮罩-Mask-Properties"><a href="#遮罩-Mask-Properties" class="headerlink" title="遮罩 (Mask Properties)"></a>遮罩 (Mask Properties)</h3><table>
<thead>
<tr>
<th>可用 Key Path</th>
<th>示意</th>
</tr>
</thead>
<tbody>
<tr>
<td>mask</td>
</tr>
</tbody>
</table>
<h3 id="ShapeLayer属性-ShapeLayer"><a href="#ShapeLayer属性-ShapeLayer" class="headerlink" title="ShapeLayer属性 (ShapeLayer)"></a>ShapeLayer属性 (ShapeLayer)</h3><table>
<thead>
<tr>
<th>可用 Key Path</th>
<th>示意</th>
</tr>
</thead>
<tbody>
<tr>
<td>fillColor</td>
<td>填充颜色</td>
</tr>
<tr>
<td>strokeColor</td>
<td>描边颜色</td>
</tr>
<tr>
<td>strokeStart</td>
<td>描边颜色开始 从无到有</td>
</tr>
<tr>
<td>strokeEnd</td>
<td>描边颜色结束 从有到无</td>
</tr>
<tr>
<td>lineWidth</td>
<td>路径的线宽</td>
</tr>
<tr>
<td>miterLimit</td>
<td>相交长度的最大值</td>
</tr>
<tr>
<td>lineDashPhase</td>
<td>虚线样式</td>
</tr>
</tbody>
</table>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以上是我 搜集整理 到的所有keypath仅供参考</p>
<p>多年前 我走在 辉煌国际到西二旗的大街上 脑袋里还在思考 为什么animation的这种keypath总是搞成字符串 整整就容易写错.今天自己的这篇文章给了答案,答案是 KVC的成员变量并没有直接获取变量名,而是要写成 字符串的变量名.内容通过字符串去做一些事情.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在Core Animation中 我们经常使用CABasicAnimation或者它的子类做一些动画&lt;/p&gt;
&lt;p&gt;一般情况下我们都要用到K
    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="macOS开发" scheme="https://www.sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>iOS抖音右下角专辑动画</title>
    <link href="https://www.sunyazhou.com/2018/11/08/20181108AwemeAlbumAnimation/"/>
    <id>https://www.sunyazhou.com/2018/11/08/20181108AwemeAlbumAnimation/</id>
    <published>2018-11-08T03:52:06.000Z</published>
    <updated>2018-12-18T16:05:06.391Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前两天分享了 抖音 上下滑切换 ,今天给和大家分享的是抖音右小角底部的专辑动画</p>
<p>上图看下</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/a26ecc741c10edcf564f1f3295b7afb6ebe018fc/20181108AwemeAlbumAnimation/final.gif" alt=""></p>
<p>再看下抖音的</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/1781036a179c21add298c201f41f70cc38ea6e4b/20181108AwemeAlbumAnimation/AlbumAnimation.gif" alt=""></p>
<h1 id="具体实现思路"><a href="#具体实现思路" class="headerlink" title="具体实现思路"></a>具体实现思路</h1><p>首先需要3涨素材 这个在demo中就可以找到哈</p>
<p>在文章底部demo中有</p>
<ol>
<li>ContrainerView</li>
<li>Background Layer </li>
<li>Album (UIImageView)</li>
</ol>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/9e8e3934b70146afaa22fc5373a54e9c561af355/20181108AwemeAlbumAnimation/album1.png" alt=""></p>
<p>我们首先写个 <code>MusicAlbumView</code> 继承自UIView</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MusicAlbumView</span> : <span class="title">UIView</span></span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIImageView</span>  *album;</div><div class="line"><span class="comment">// 开始动画 rate 动画时间系数</span></div><div class="line">- (<span class="keyword">void</span>)startAnimation:(<span class="built_in">CGFloat</span>)rate;</div><div class="line"><span class="comment">// 重置视图 删除所有已添加的动画组</span></div><div class="line">- (<span class="keyword">void</span>)resetView;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h3 id="并提供两个接口"><a href="#并提供两个接口" class="headerlink" title="并提供两个接口"></a>并提供两个接口</h3><ul>
<li>一个开始动画</li>
<li>一个重置动画</li>
</ul>
<p><code>album</code> 成员变量 是为了给外部加载网络图片使用 所以暴露在.h中, 例如下面的调用</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">__<span class="keyword">weak</span> __<span class="keyword">typeof</span>(<span class="keyword">self</span>) wself = <span class="keyword">self</span>;</div><div class="line"><span class="comment">//加载网络图</span></div><div class="line">[<span class="keyword">self</span>.musicAlbum.album sd_setImageWithURL:[<span class="built_in">NSURL</span> URLWithString:<span class="string">@"https://www.sunyazhou.com/images/logo2.jpg"</span>] completed:^(<span class="built_in">UIImage</span> * _Nullable image, <span class="built_in">NSError</span> * _Nullable error, SDImageCacheType cacheType, <span class="built_in">NSURL</span> * _Nullable imageURL) &#123;</div><div class="line">    <span class="keyword">if</span>(!error) &#123;</div><div class="line">        wself.musicAlbum.album.image = image;</div><div class="line">    &#125;</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<h3 id="下面我们来看下内部如何封装"><a href="#下面我们来看下内部如何封装" class="headerlink" title="下面我们来看下内部如何封装"></a>下面我们来看下内部如何封装</h3><p>首先我们要创建背景</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">instancetype</span>)initWithFrame:(<span class="built_in">CGRect</span>)frame &#123;</div><div class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> initWithFrame:frame];</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.noteLayers = [<span class="built_in">NSMutableArray</span> array];</div><div class="line">        <span class="comment">//专辑背景容器视图</span></div><div class="line">        <span class="keyword">self</span>.albumContainer =[[<span class="built_in">UIView</span> alloc]initWithFrame:<span class="keyword">self</span>.bounds];</div><div class="line">        [<span class="keyword">self</span> addSubview:<span class="keyword">self</span>.albumContainer];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>这里初始化的数组是为下面装动画layer使用 方便 Reset的时候 移除所有layer和动画</p>
</blockquote>
<p>一个产品背景容器UIView + 一个产品背景Layer + 一个个人头像背景UIImageView </p>
<p>我们依次把下面代码写在<code>[self addSubview:self.albumContainer]</code>底部</p>
<p>添加唱片背景</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//添加唱片icon的layer</span></div><div class="line"><span class="built_in">CALayer</span> *backgroudLayer = [<span class="built_in">CALayer</span> layer];</div><div class="line">backgroudLayer.frame = <span class="keyword">self</span>.bounds;</div><div class="line">backgroudLayer.contents = (<span class="keyword">id</span>)[<span class="built_in">UIImage</span> imageNamed:<span class="string">@"music_cover"</span>].CGImage;</div><div class="line">[<span class="keyword">self</span>.albumContainer.layer addSublayer:backgroudLayer];</div></pre></td></tr></table></figure>
<p>头像视图</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//放在唱片内部的图片</span></div><div class="line"><span class="built_in">CGFloat</span> w = <span class="built_in">CGRectGetWidth</span>(frame) / <span class="number">2.0</span>f;</div><div class="line"><span class="built_in">CGFloat</span> h = <span class="built_in">CGRectGetHeight</span>(frame) / <span class="number">2.0</span>f;</div><div class="line"><span class="built_in">CGRect</span> albumFrame = <span class="built_in">CGRectMake</span>(w / <span class="number">2.0</span>f, h / <span class="number">2.0</span>f, w, h);</div><div class="line"><span class="keyword">self</span>.album = [[<span class="built_in">UIImageView</span> alloc]initWithFrame:albumFrame];</div><div class="line"><span class="keyword">self</span>.album.contentMode = <span class="built_in">UIViewContentModeScaleAspectFill</span>;</div><div class="line">[<span class="keyword">self</span>.albumContainer addSubview:<span class="keyword">self</span>.album];</div><div class="line"><span class="keyword">self</span>.album.layer.cornerRadius = h / <span class="number">2.0</span>f;</div><div class="line"><span class="keyword">self</span>.album.layer.masksToBounds = <span class="literal">YES</span>;</div></pre></td></tr></table></figure>
<p>然后居中对齐.</p>
<h4 id="给self-albumContainer-layer加旋转"><a href="#给self-albumContainer-layer加旋转" class="headerlink" title="给self.albumContainer.layer加旋转"></a>给<code>self.albumContainer.layer</code>加旋转</h4><p>我们在外部调用startAnimation:方法的时候 给<code>self.albumContainer.layer</code>添加旋转动画旋转</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"></div><div class="line">- (<span class="keyword">void</span>)startAnimation:(<span class="built_in">CGFloat</span>)rate &#123;</div><div class="line">    <span class="built_in">CABasicAnimation</span>* rotationAnimation;</div><div class="line">    rotationAnimation = [<span class="built_in">CABasicAnimation</span> animationWithKeyPath:<span class="string">@"transform.rotation.z"</span>];</div><div class="line">    rotationAnimation.toValue = [<span class="built_in">NSNumber</span> numberWithFloat: M_PI * <span class="number">2.0</span>];</div><div class="line">    rotationAnimation.duration = <span class="number">3.0</span>f;</div><div class="line">    rotationAnimation.cumulative = <span class="literal">YES</span>;</div><div class="line">    rotationAnimation.repeatCount = MAXFLOAT;</div><div class="line">    [<span class="keyword">self</span>.albumContainer.layer addAnimation:rotationAnimation forKey:<span class="string">@"rotationAnimation"</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>加完效果是这样的</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/710440e9f7f36b2a30e54026fb73574c23bba37b/20181108AwemeAlbumAnimation/album2.gif" alt=""></p>
<h4 id="如何实现弧度动画"><a href="#如何实现弧度动画" class="headerlink" title="如何实现弧度动画"></a>如何实现弧度动画</h4><p>好 完成一半了 下面我们来说一下 弧度旋转.</p>
<p>现仔细观察一下动画的音符</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/e63191fa2982fc79925e0045c3e65ced9aec1db0/20181108AwemeAlbumAnimation/album3.gif" alt=""></p>
<p>这是一张音符动画 它的运动轨迹大概是这样的</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20181108AwemeAlbumAnimation/bezier.png" alt=""></p>
<p>我们其实用到的是贝塞尔曲线动画 (我画的不是很好 大家理解这个意思就好)</p>
<p>然后让音符的layer沿着 这个贝塞尔曲线做旋转… 其实是下面的一些列动作组合</p>
<p>这个需要一个动画组 包含如下动作 </p>
<ul>
<li>一个贝塞尔曲线运动的轨迹动画啊</li>
<li>旋转弧度 大概半圈 小一些 M_PI <em> 0.10 ~ M_PI </em> -0.10 之间旋转的动画</li>
<li>透明度 从0 到 1 在到 0 之间运动的透明度动画 </li>
<li>缩放动画 从开始 1x 到 2x 之间变化</li>
</ul>
<p>好我们来解决一下 关键的贝赛尔曲线</p>
<p>首先创建一个动画组 </p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="built_in">CAAnimationGroup</span> *animationGroup = [[<span class="built_in">CAAnimationGroup</span> alloc]init];</div><div class="line">animationGroup.duration = rate/<span class="number">4.0</span>f;</div><div class="line">animationGroup.beginTime = <span class="built_in">CACurrentMediaTime</span>() + delayTime;</div><div class="line">animationGroup.repeatCount = MAXFLOAT;</div><div class="line">animationGroup.removedOnCompletion = <span class="literal">NO</span>;</div><div class="line">animationGroup.fillMode = kCAFillModeForwards;</div><div class="line">animationGroup.timingFunction = [<span class="built_in">CAMediaTimingFunction</span> functionWithName:kCAMediaTimingFunctionLinear];</div></pre></td></tr></table></figure>
<blockquote>
<p>rate 外部传入 delayTime是 动画组开始动画的延迟的时间 我们设置 delayTime 为0就是不延时 下面解释为什么这么写</p>
</blockquote>
<p>创建一个 贝赛尔曲线东动画</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//bezier路径帧动画</span></div><div class="line"><span class="built_in">CAKeyframeAnimation</span> * pathAnimation = [<span class="built_in">CAKeyframeAnimation</span> animationWithKeyPath:<span class="string">@"position"</span>];</div></pre></td></tr></table></figure>
<p>然后把下面这坨代码加到 上面代码的底部</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="built_in">CGFloat</span> sideXLength = <span class="number">40.0</span>f;  <span class="comment">//X轴左右侧偏移量</span></div><div class="line"><span class="built_in">CGFloat</span> sideYLength = <span class="number">100.0</span>f; <span class="comment">//Y轴上下偏移量</span></div><div class="line"></div><div class="line"><span class="built_in">CGPoint</span> beginPoint = <span class="built_in">CGPointMake</span>(<span class="built_in">CGRectGetMidX</span>(<span class="keyword">self</span>.bounds) - <span class="number">5</span>,  <span class="comment">//贝赛尔曲线开始点CGRectGetMaxY(self.bounds));</span></div><div class="line"><span class="built_in">CGPoint</span> endPoint = <span class="built_in">CGPointMake</span>(beginPoint.x - sideXLength, beginPoint.y - sideYLength); <span class="comment">//贝塞尔曲线结束点</span></div><div class="line"><span class="built_in">NSInteger</span> controlLength = <span class="number">60</span>; <span class="comment">//贝塞尔曲线控制点长度</span></div><div class="line"><span class="built_in">CGPoint</span> controlPoint = <span class="built_in">CGPointMake</span>(beginPoint.x - sideXLength/<span class="number">2.0</span>f - controlLength, beginPoint.y - sideYLength/<span class="number">2.0</span>f + controlLength); <span class="comment">//贝塞尔曲线控制点</span></div><div class="line"></div><div class="line"><span class="built_in">UIBezierPath</span> *customPath = [<span class="built_in">UIBezierPath</span> bezierPath]; <span class="comment">//创建贝塞尔轨迹</span></div><div class="line">[customPath moveToPoint:beginPoint];</div><div class="line">[customPath addQuadCurveToPoint:endPoint controlPoint:controlPoint]; <span class="comment">//核心代码 二次曲线方程式 可以google查一下</span></div><div class="line"></div><div class="line">pathAnimation.path = customPath.CGPath; <span class="comment">//让动画沿着轨迹运动</span></div></pre></td></tr></table></figure>
<p>我来解释一下 关键变量</p>
<blockquote>
<p>beginPoint 开始点: 当前视图X坐标中心 向 左偏移 5dp (X轴是左右) Y的坐标是当前视图高度 就是最下面<br>endPoint 结束点: 开始点的X 减去 40左侧偏移(就是距离左侧更远) Y也是 减去偏移之后 到了 视图的外部 左上方.<br>controlPoint 控制点: 开始点 比如 X是 30 - 60/2.0 - 60 = -60,显然已经跑到最左边了 超出了视图范围, Y 后面是+ controlLength 说明是加大 Y坐标. </p>
</blockquote>
<p>大家可以不用理解这些细节 看下面图就好了 </p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/873e913c22600f5e48d394775ef370fff7811c96/20181108AwemeAlbumAnimation/bezier_new.png" alt=""></p>
<blockquote>
<p>customPath: 贝塞尔曲线对象</p>
</blockquote>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"></div><div class="line">[customPath moveToPoint:beginPoint];</div><div class="line"><span class="comment">//核心代码 二次曲线方程式 可以google查一下</span></div><div class="line">[customPath addQuadCurveToPoint:endPoint controlPoint:controlPoint];</div><div class="line"><span class="comment">//让动画沿着轨迹运动</span></div><div class="line">pathAnimation.path = customPath.CGPath;</div></pre></td></tr></table></figure>
<p>这就是 增加开始点 结束点 控制点之后的贝塞尔轨迹,然后 设置轨迹动画的path就完事了.</p>
<p>这一步搞完 然后 把<code>pathAnimation</code> 放到动画组中,然后创建一个 音符的layer添加动画组</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">[animationGroup setAnimations:@[pathAnimation]];</div><div class="line">    </div><div class="line"><span class="built_in">CAShapeLayer</span> *layer = [<span class="built_in">CAShapeLayer</span> layer];</div><div class="line">layer.contents = (__bridge <span class="keyword">id</span> _Nullable)([<span class="built_in">UIImage</span> imageNamed:imageName].CGImage);</div><div class="line">layer.frame = <span class="built_in">CGRectMake</span>(beginPoint.x, beginPoint.y, <span class="number">10</span>, <span class="number">10</span>);</div><div class="line">[<span class="keyword">self</span>.layer addSublayer:layer];</div><div class="line">[<span class="keyword">self</span>.noteLayers addObject:layer];</div><div class="line">[layer addAnimation:animationGroup forKey:<span class="literal">nil</span>];</div></pre></td></tr></table></figure>
<blockquote>
<p><code>[self.noteLayers addObject:layer];</code>这行代码是我们前面声明的全局变量 存layer,reset的时候删除相关layer和动画使用</p>
</blockquote>
<p>我们来看下 简单一个音符 沿着贝塞尔曲线运动</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/a4e5309311904071b7d20ece73e5bd3d88b736bd/20181108AwemeAlbumAnimation/album4.gif" alt=""></p>
<p>好下面的工作就是 加旋转 透明 缩放动画</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//旋转帧动画</span></div><div class="line"><span class="built_in">CAKeyframeAnimation</span> * rotationAnimation = [<span class="built_in">CAKeyframeAnimation</span> animationWithKeyPath:<span class="string">@"transform.rotation"</span>];</div><div class="line"><span class="comment">//这里实际上是控制动画开始弧度和结束弧度 M_PI(180°) 就是半圆 * 0.10 或者 * -0.10j是为了关键点上下偏移的18°的间隙</span></div><div class="line">[rotationAnimation setValues:@[</div><div class="line">                               [<span class="built_in">NSNumber</span> numberWithFloat:<span class="number">0</span>],</div><div class="line">                               [<span class="built_in">NSNumber</span> numberWithFloat:M_PI * <span class="number">0.10</span>],</div><div class="line">                               [<span class="built_in">NSNumber</span> numberWithFloat:M_PI * <span class="number">-0.10</span>]]];</div><div class="line"><span class="comment">//透明度帧动画</span></div><div class="line"><span class="built_in">CAKeyframeAnimation</span> * opacityAnimation = [<span class="built_in">CAKeyframeAnimation</span> animationWithKeyPath:<span class="string">@"opacity"</span>];</div><div class="line">[opacityAnimation setValues:@[</div><div class="line">                              [<span class="built_in">NSNumber</span> numberWithFloat:<span class="number">0</span>],</div><div class="line">                              [<span class="built_in">NSNumber</span> numberWithFloat:<span class="number">0.2</span>f],</div><div class="line">                              [<span class="built_in">NSNumber</span> numberWithFloat:<span class="number">0.7</span>f],</div><div class="line">                              [<span class="built_in">NSNumber</span> numberWithFloat:<span class="number">0.2</span>f],</div><div class="line">                              [<span class="built_in">NSNumber</span> numberWithFloat:<span class="number">0</span>]]];</div><div class="line"><span class="comment">//缩放帧动画</span></div><div class="line"><span class="built_in">CABasicAnimation</span> *scaleAnimation = [<span class="built_in">CABasicAnimation</span> animation];</div><div class="line">scaleAnimation.keyPath = <span class="string">@"transform.scale"</span>;</div><div class="line">scaleAnimation.fromValue = @(<span class="number">1.0</span>f);</div><div class="line">scaleAnimation.toValue = @(<span class="number">2.0</span>f);</div></pre></td></tr></table></figure>
<p>最后添把所有的动画添加到动画组</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">[animationGroup setAnimations:@[pathAnimation, scaleAnimation,  rotationAnimation,opacityAnimation]];</div></pre></td></tr></table></figure>
<blockquote>
<p>注意一下: 为了让音符的图片更生动我们需要把<code>layer.opacity = 0.0f;</code> 这个音符透明 从而用透明度帧动画控制透明.</p>
</blockquote>
<p>然后封装好方法 把上边我们做的贝塞尔曲线 透明 渐变 缩放  动画组都放在这个方法里面</p>
<p>完整代码如下</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)addNotoAnimation:(<span class="built_in">NSString</span> *)imageName</div><div class="line">               delayTime:(<span class="built_in">NSTimeInterval</span>)delayTime</div><div class="line">                    rate:(<span class="built_in">CGFloat</span>)rate&#123;</div><div class="line">    <span class="built_in">CAAnimationGroup</span> *animationGroup = [[<span class="built_in">CAAnimationGroup</span> alloc]init];</div><div class="line">    animationGroup.duration = rate/<span class="number">4.0</span>f;</div><div class="line">    animationGroup.beginTime = <span class="built_in">CACurrentMediaTime</span>() + delayTime;</div><div class="line">    animationGroup.repeatCount = MAXFLOAT;</div><div class="line">    animationGroup.removedOnCompletion = <span class="literal">NO</span>;</div><div class="line">    animationGroup.fillMode = kCAFillModeForwards;</div><div class="line">    animationGroup.timingFunction = [<span class="built_in">CAMediaTimingFunction</span> functionWithName:kCAMediaTimingFunctionLinear];</div><div class="line">    </div><div class="line">    <span class="comment">//bezier路径帧动画</span></div><div class="line">    <span class="built_in">CAKeyframeAnimation</span> * pathAnimation = [<span class="built_in">CAKeyframeAnimation</span> animationWithKeyPath:<span class="string">@"position"</span>];</div><div class="line">    </div><div class="line">    <span class="comment">//X轴左右侧偏移量</span></div><div class="line">    <span class="built_in">CGFloat</span> sideXLength = <span class="number">40.0</span>f;</div><div class="line">    <span class="comment">//Y轴上下偏移量</span></div><div class="line">    <span class="built_in">CGFloat</span> sideYLength = <span class="number">100.0</span>f;</div><div class="line">    </div><div class="line">    <span class="comment">//贝赛尔曲线开始点</span></div><div class="line">    <span class="built_in">CGPoint</span> beginPoint = <span class="built_in">CGPointMake</span>(<span class="built_in">CGRectGetMidX</span>(<span class="keyword">self</span>.bounds) - <span class="number">5</span>, <span class="built_in">CGRectGetMaxY</span>(<span class="keyword">self</span>.bounds));</div><div class="line">    <span class="comment">//贝塞尔曲线结束点</span></div><div class="line">    <span class="built_in">CGPoint</span> endPoint = <span class="built_in">CGPointMake</span>(beginPoint.x - sideXLength, beginPoint.y - sideYLength);</div><div class="line">    <span class="comment">//贝塞尔曲线控制点长度</span></div><div class="line">    <span class="built_in">NSInteger</span> controlLength = <span class="number">60</span>;</div><div class="line">    <span class="comment">//贝塞尔曲线控制点</span></div><div class="line">    <span class="built_in">CGPoint</span> controlPoint = <span class="built_in">CGPointMake</span>(beginPoint.x - sideXLength/<span class="number">2.0</span>f - controlLength, beginPoint.y - sideYLength/<span class="number">2.0</span>f + controlLength);</div><div class="line">    <span class="comment">//创建贝塞尔轨迹</span></div><div class="line">    <span class="built_in">UIBezierPath</span> *customPath = [<span class="built_in">UIBezierPath</span> bezierPath];</div><div class="line">    [customPath moveToPoint:beginPoint];</div><div class="line">    <span class="comment">//核心代码 二次曲线方程式 可以google查一下</span></div><div class="line">    [customPath addQuadCurveToPoint:endPoint controlPoint:controlPoint];</div><div class="line">    <span class="comment">//让动画沿着轨迹运动</span></div><div class="line">    pathAnimation.path = customPath.CGPath;</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="comment">//旋转帧动画</span></div><div class="line">    <span class="built_in">CAKeyframeAnimation</span> * rotationAnimation = [<span class="built_in">CAKeyframeAnimation</span> animationWithKeyPath:<span class="string">@"transform.rotation"</span>];</div><div class="line">    <span class="comment">//这里实际上是控制动画开始弧度和结束弧度 M_PI(180°) 就是半圆 * 0.10 或者 * -0.10j是为了关键点上下偏移的18°的间隙</span></div><div class="line">    [rotationAnimation setValues:@[</div><div class="line">                                   [<span class="built_in">NSNumber</span> numberWithFloat:<span class="number">0</span>],</div><div class="line">                                   [<span class="built_in">NSNumber</span> numberWithFloat:M_PI * <span class="number">0.10</span>],</div><div class="line">                                   [<span class="built_in">NSNumber</span> numberWithFloat:M_PI * <span class="number">-0.10</span>]]];</div><div class="line">    <span class="comment">//透明度帧动画</span></div><div class="line">    <span class="built_in">CAKeyframeAnimation</span> * opacityAnimation = [<span class="built_in">CAKeyframeAnimation</span> animationWithKeyPath:<span class="string">@"opacity"</span>];</div><div class="line">    [opacityAnimation setValues:@[</div><div class="line">                                  [<span class="built_in">NSNumber</span> numberWithFloat:<span class="number">0</span>],</div><div class="line">                                  [<span class="built_in">NSNumber</span> numberWithFloat:<span class="number">0.2</span>f],</div><div class="line">                                  [<span class="built_in">NSNumber</span> numberWithFloat:<span class="number">0.7</span>f],</div><div class="line">                                  [<span class="built_in">NSNumber</span> numberWithFloat:<span class="number">0.2</span>f],</div><div class="line">                                  [<span class="built_in">NSNumber</span> numberWithFloat:<span class="number">0</span>]]];</div><div class="line">    <span class="comment">//缩放帧动画</span></div><div class="line">    <span class="built_in">CABasicAnimation</span> *scaleAnimation = [<span class="built_in">CABasicAnimation</span> animation];</div><div class="line">    scaleAnimation.keyPath = <span class="string">@"transform.scale"</span>;</div><div class="line">    scaleAnimation.fromValue = @(<span class="number">1.0</span>f);</div><div class="line">    scaleAnimation.toValue = @(<span class="number">2.0</span>f);</div><div class="line">    </div><div class="line">    [animationGroup setAnimations:@[pathAnimation, scaleAnimation,  rotationAnimation,opacityAnimation]];</div><div class="line">    </div><div class="line">    <span class="built_in">CAShapeLayer</span> *layer = [<span class="built_in">CAShapeLayer</span> layer];</div><div class="line">    layer.opacity = <span class="number">0.0</span>f;</div><div class="line">    layer.contents = (__bridge <span class="keyword">id</span> _Nullable)([<span class="built_in">UIImage</span> imageNamed:imageName].CGImage);</div><div class="line">    layer.frame = <span class="built_in">CGRectMake</span>(beginPoint.x, beginPoint.y, <span class="number">10</span>, <span class="number">10</span>);</div><div class="line">    [<span class="keyword">self</span>.layer addSublayer:layer];</div><div class="line">    [<span class="keyword">self</span>.noteLayers addObject:layer];</div><div class="line">    [layer addAnimation:animationGroup forKey:<span class="literal">nil</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在我们对外提供的startAnimation:方法中调用</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)startAnimation:(<span class="built_in">CGFloat</span>)rate &#123;</div><div class="line">    rate = fabs(rate);  <span class="comment">//check 防止 rate输入为负值</span></div><div class="line">    [<span class="keyword">self</span> resetView];   <span class="comment">//首先重置动画</span></div><div class="line">   	<span class="comment">//这里调用</span></div><div class="line">	[<span class="keyword">self</span> addNotoAnimation:<span class="string">@"icon_home_musicnote1"</span> delayTime:<span class="number">0.0</span>f rate:rate];</div><div class="line">	<span class="comment">//。。。封面的旋转动画    </span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>写到这里大概就完成了一个音符的动画<br>如果像做多个音符动画 就多调用几次 然后控制好开始时间的延时</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">[<span class="keyword">self</span> addNotoAnimation:<span class="string">@"icon_home_musicnote1"</span> delayTime:<span class="number">0.0</span>f rate:rate];</div><div class="line">[<span class="keyword">self</span> addNotoAnimation:<span class="string">@"icon_home_musicnote2"</span> delayTime:<span class="number">1.0</span>f rate:rate];</div><div class="line">[<span class="keyword">self</span> addNotoAnimation:<span class="string">@"icon_home_musicnote1"</span> delayTime:<span class="number">2.0</span>f rate:rate];</div></pre></td></tr></table></figure>
<p><strong>写到这里可以看到我们实际上是 通过delayTime 延时(单位秒) 开控制 每个音符 距离上个音符的间隔时间,通过间隔时间来控制音符之间 交替 出现</strong>.</p>
<p>所以上面的动画组里面有这样一行代码</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">animationGroup.beginTime = <span class="built_in">CACurrentMediaTime</span>() + delayTime;</div></pre></td></tr></table></figure>
<p>就是基于当前的时间延迟1秒或者2秒来控制 </p>
<p>完成之后 就是这样了</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/a26ecc741c10edcf564f1f3295b7afb6ebe018fc/20181108AwemeAlbumAnimation/final.gif" alt=""></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>首先感谢开源的小伙伴 的代码,我认真研读了几遍也写了一些代码,有些东西真是 天下大事必做于细 天下难事必做于易的感受.</p>
<p>这里的代码实现主要分开 专辑图旋转和音符动画组的实现即可 </p>
<p>希望和大家分享 技术技巧.写的比较凌乱 我会逐渐提高这方面的能力.希望大家多多指教</p>
<p><a href="https://github.com/sunyazhou13/MusicAlbumViewDemo" target="_blank" rel="external">最终的demo</a></p>
<p>参考</p>
<p><a href="https://github.com/sunyazhou13/douyin-ios-objectc" target="_blank" rel="external">iOS高仿抖音app</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;前两天分享了 抖音 上下滑切换 ,今天给和大家分享的是抖音右小角底部的专辑动画&lt;/p&gt;
&lt;p&gt;上图看下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;h
    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="抖音动画系列" scheme="https://www.sunyazhou.com/tags/%E6%8A%96%E9%9F%B3%E5%8A%A8%E7%94%BB%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>iOS抖音的上下滑实现</title>
    <link href="https://www.sunyazhou.com/2018/11/06/20181106AwemeTopBottomScrollDemo/"/>
    <id>https://www.sunyazhou.com/2018/11/06/20181106AwemeTopBottomScrollDemo/</id>
    <published>2018-11-06T09:55:09.000Z</published>
    <updated>2018-12-18T16:05:06.391Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>一直一来都在 研究抖音App做的短视频 上下滑动 的技术实现, 今天写了个demo,方便学习技术技巧和记录知识,</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/d2b991b6d10e643c8e4c619cc913bbbaea19a534/20181106AwemeTopBottomScrollDemo/AwemeDemo1.gif" alt=""></p>
<h1 id="技术实现原理"><a href="#技术实现原理" class="headerlink" title="技术实现原理"></a>技术实现原理</h1><ul>
<li>UITableView </li>
</ul>
<p>其实就是一个UITableView改变上下显示范围. talk is cheap show me the code</p>
<p>我说话不绕弯子,代码如下 实现起来非常简单</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"></div><div class="line">_tableView = [[<span class="built_in">UITableView</span> alloc] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">0</span>, -SCREEN_HEIGHT, SCREEN_WIDTH, SCREEN_HEIGHT * <span class="number">5</span>)];</div><div class="line">_tableView.contentInset = <span class="built_in">UIEdgeInsetsMake</span>(SCREEN_HEIGHT, <span class="number">0</span>, SCREEN_HEIGHT * <span class="number">3</span>, <span class="number">0</span>);</div></pre></td></tr></table></figure>
<ol>
<li>初始化的时候,TableView放在屏幕外边.</li>
<li>contentInset 显示内容的内边距, 以此是 <code>上</code>, <code>左</code>, <code>下</code>,  <code>右</code>, 上边距 距离整好屏幕高度,底部 是 顶部边距(屏幕高度的 3倍) 方便滑动, 左右分别顶到两边 搞定.</li>
</ol>
<p>我画个图演示一下.</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/748bbcbbc7ef5e60d1b6844ab26b73d7debc06ca/20181106AwemeTopBottomScrollDemo/AwemeDemo2.png" alt=""></p>
<p>看到这张图 大家也许 已经明白了，最核心的地方是控制 TableView的上下边距,上边距留够一个屏幕高度,下边距留够下滑3屏左右的缓冲.</p>
<h1 id="说一下用到的技巧"><a href="#说一下用到的技巧" class="headerlink" title="说一下用到的技巧"></a>说一下用到的技巧</h1><p>创建tableView很简单 如果理解不了 可以下载文章末尾demo</p>
<p>有个小技巧是 如何做到 上下滑动 能够完整的 滑动到对应位置 整好 占满屏幕类似 开启了UIScrollView的 <code>pagingEnabled</code>.</p>
<h2 id="实现滑动的代理方法"><a href="#实现滑动的代理方法" class="headerlink" title="实现滑动的代理方法"></a>实现滑动的代理方法</h2><p>首先需要声明一个当前滑动页码的成员变量</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">NSInteger</span>  currentIndex;</div></pre></td></tr></table></figure>
<p>然后滑动代理停止的时候  判断一下</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="meta">#pragma mark -</span></div><div class="line"><span class="meta">#pragma mark - ScrollView delegate</span></div><div class="line">- (<span class="keyword">void</span>)scrollViewDidEndDragging:(<span class="built_in">UIScrollView</span> *)scrollView willDecelerate:(<span class="built_in">BOOL</span>)decelerate&#123;</div><div class="line">    <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class="line">        <span class="built_in">CGPoint</span> translatedPoint = [scrollView.panGestureRecognizer translationInView:scrollView];</div><div class="line">        <span class="comment">//UITableView禁止响应其他滑动手势</span></div><div class="line">        scrollView.panGestureRecognizer.enabled = <span class="literal">NO</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(translatedPoint.y &lt; <span class="number">-50</span> &amp;&amp; <span class="keyword">self</span>.currentIndex &lt; (kDataSourceCount - <span class="number">1</span>)) &#123;</div><div class="line">            <span class="keyword">self</span>.currentIndex ++;   <span class="comment">//向下滑动索引递增</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(translatedPoint.y &gt; <span class="number">50</span> &amp;&amp; <span class="keyword">self</span>.currentIndex &gt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">self</span>.currentIndex --;   <span class="comment">//向上滑动索引递减</span></div><div class="line">        &#125;</div><div class="line">        [<span class="built_in">UIView</span> animateWithDuration:<span class="number">0.15</span></div><div class="line">                              delay:<span class="number">0.0</span></div><div class="line">                            options:<span class="built_in">UIViewAnimationOptionCurveEaseOut</span> animations:^&#123;</div><div class="line">                                <span class="comment">//UITableView滑动到指定cell</span></div><div class="line">                                [<span class="keyword">self</span>.tableView scrollToRowAtIndexPath:[<span class="built_in">NSIndexPath</span> indexPathForRow:<span class="keyword">self</span>.currentIndex inSection:<span class="number">0</span>] atScrollPosition:<span class="built_in">UITableViewScrollPositionTop</span> animated:<span class="literal">NO</span>];</div><div class="line">                            &#125; completion:^(<span class="built_in">BOOL</span> finished) &#123;</div><div class="line">                                <span class="comment">//UITableView可以响应其他滑动手势</span></div><div class="line">                                scrollView.panGestureRecognizer.enabled = <span class="literal">YES</span>;</div><div class="line">                            &#125;];</div><div class="line">        </div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>这里的 <code>50</code> 实际上是你能允许滑动的最大触发区间.可以自己下载demo玩一下就知道了. </p>
</blockquote>
<p>基于滑动区间 做 加减 当前页码控制.然后 做个简单的UIView动画.</p>
<blockquote>
<p>注意: 开始动画的时候最好不要相应pan手势,结束动画的时候再恢复回去,这样可以避免一些不必要的收拾滑动引起的问题.</p>
</blockquote>
<h3 id="为什么要滑动页码self-currentIndex"><a href="#为什么要滑动页码self-currentIndex" class="headerlink" title="为什么要滑动页码self.currentIndex"></a>为什么要滑动页码<code>self.currentIndex</code></h3><p>因为我们要用KVO 来实现 页面变动驱动滑动的动画</p>
<p>在 viewDidLoad:方法中 我们有个setupView:方法中 有下段代码</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">[<span class="keyword">self</span> addObserver:<span class="keyword">self</span> forKeyPath:<span class="string">@"currentIndex"</span> options:<span class="built_in">NSKeyValueObservingOptionInitial</span>|<span class="built_in">NSKeyValueObservingOptionNew</span> context:<span class="literal">nil</span>];</div></pre></td></tr></table></figure>
<p><strong>是的我们要自己监听自己的成员变量去搞些事情</strong>.</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//观察currentIndex变化</span></div><div class="line">-(<span class="keyword">void</span>)observeValueForKeyPath:(<span class="built_in">NSString</span> *)keyPath ofObject:(<span class="keyword">id</span>)object change:(<span class="built_in">NSDictionary</span>&lt;<span class="built_in">NSKeyValueChangeKey</span>,<span class="keyword">id</span>&gt; *)change context:(<span class="keyword">void</span> *)context &#123;</div><div class="line">    <span class="keyword">if</span> ([keyPath isEqualToString:<span class="string">@"currentIndex"</span>]) &#123;</div><div class="line">        <span class="comment">//获取当前显示的cell</span></div><div class="line">        AwemeListCell *cell = [<span class="keyword">self</span>.tableView cellForRowAtIndexPath:[<span class="built_in">NSIndexPath</span> indexPathForRow:_currentIndex inSection:<span class="number">0</span>]];</div><div class="line">        __<span class="keyword">weak</span> <span class="keyword">typeof</span> (cell) wcell = cell;</div><div class="line">        __<span class="keyword">weak</span> <span class="keyword">typeof</span> (<span class="keyword">self</span>) wself = <span class="keyword">self</span>;</div><div class="line">        <span class="comment">//用cell控制相关视频播放</span></div><div class="line">        </div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> [<span class="keyword">super</span> observeValueForKeyPath:keyPath ofObject:object change:change context:context];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>demo中有这段代码 其实是为了以后 cell上方palyerView的时候 控制相应暂停或者停止 或者其他操作的行为. 这里后期我们完善</p>
</blockquote>
<h3 id="点击状态栏滑动到顶部"><a href="#点击状态栏滑动到顶部" class="headerlink" title="点击状态栏滑动到顶部"></a>点击状态栏滑动到顶部</h3><p>我们如何监听状态栏的事件?</p>
<p>我们当然可以设置TableView自动滑动到顶部.但是 我们怎么拦截下来这个事件去把我们 相关页码 <strong>置<code>0</code></strong></p>
<p>为什么置0呢?看下 下面这张图</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/ab61f58501e90d17c3dcc2af351eba13694a71ce/20181106AwemeTopBottomScrollDemo/AwemeDemo3_error.gif" alt=""></p>
<p>虽然我们能实现 自动滑动TableView到顶部 但是 我们拦截不到顶部状态栏点击的事件,在这个事件调用的地方 把当前页码置<code>0</code>.</p>
<h4 id="监听点击状态栏事件"><a href="#监听点击状态栏事件" class="headerlink" title="监听点击状态栏事件"></a>监听点击状态栏事件</h4><p>这里使用的是在AppDelegate 中 复写 touchesBagan:方法</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)touchesBegan:(<span class="built_in">NSSet</span>&lt;<span class="built_in">UITouch</span> *&gt; *)touches withEvent:(<span class="built_in">UIEvent</span> *)event &#123;</div><div class="line">    [<span class="keyword">super</span> touchesBegan:touches withEvent:event];</div><div class="line">    </div><div class="line">    <span class="comment">//当触摸状态栏的时候发送触摸通知 这样控制器就收到了点击事件</span></div><div class="line">    <span class="built_in">CGPoint</span> touchLocation = [[[event allTouches] anyObject] locationInView:<span class="keyword">self</span>.window];</div><div class="line">    <span class="built_in">CGRect</span> statusBarFrame = [<span class="built_in">UIApplication</span> sharedApplication].statusBarFrame;</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">CGRectContainsPoint</span>(statusBarFrame, touchLocation)) &#123;</div><div class="line">        [[<span class="built_in">NSNotificationCenter</span> defaultCenter] postNotificationName:StatusBarTouchBeginNotification object:<span class="literal">nil</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在这里我们判断点击区域是否在状态栏范围内,是的话我们发送通知.</p>
<p>在我们用到TableView的VC里面注册这个通知,然后 置<code>0</code>.</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="meta">#pragma mark -</span></div><div class="line"><span class="meta">#pragma mark - event response 所有触发的事件响应 按钮、通知、分段控件等</span></div><div class="line">- (<span class="keyword">void</span>)statusBarTouchBegin &#123;</div><div class="line">    _currentIndex = <span class="number">0</span>; <span class="comment">//KVO</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里我们置<code>0</code>处理.</p>
<blockquote>
<p>这里处理的方式简单粗暴,你有更好的实现方式可以底部评论,非常感谢.</p>
</blockquote>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以上是简单实现了抖音的上下滑,demo在下方, 下一期给大家演示更多细节,如果可能的话,最终搞出个视频放cell上 实现整个上下滑控制过程视频暂停 播放 停止等等,因为如果完整的实现抖音,需要很长的代码量,为了让大家一起学习,我把每个细节拆成一小节.单独写成文章讨论和学习.</p>
<p><a href="https://github.com/sunyazhou13/AwemeDemo" target="_blank" rel="external">抖音上下滑Demo</a></p>
<p>参考开源</p>
<p><a href="https://github.com/sshiqiao/douyin-ios-objectc" target="_blank" rel="external">抖音个人主页</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;一直一来都在 研究抖音App做的短视频 上下滑动 的技术实现, 今天写了个demo,方便学习技术技巧和记录知识,&lt;/p&gt;
&lt;p&gt;&lt;img s
    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="抖音动画系列" scheme="https://www.sunyazhou.com/tags/%E6%8A%96%E9%9F%B3%E5%8A%A8%E7%94%BB%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>iOS数字倍数动画</title>
    <link href="https://www.sunyazhou.com/2018/10/29/20181029LabelDanceAnimation/"/>
    <id>https://www.sunyazhou.com/2018/10/29/20181029LabelDanceAnimation/</id>
    <published>2018-10-29T10:13:15.000Z</published>
    <updated>2018-11-11T06:43:38.687Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>写了一个简单的利用 透明度和 缩放 实现的 数字倍数动画 </p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/0cca94607f36a130adc04b7882c5750ca7eb1139/20181029LabelDanceAnimation/danceLabel.gif" alt="demo"></p>
<h1 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h1><p>上代码 看比较清晰</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 数字跳动动画</span></div><div class="line">- (<span class="keyword">void</span>)labelDanceAnimation:(<span class="built_in">NSTimeInterval</span>)duration &#123;</div><div class="line">    <span class="comment">//透明度</span></div><div class="line">    <span class="built_in">CABasicAnimation</span> *opacityAnimation = [<span class="built_in">CABasicAnimation</span> animationWithKeyPath:<span class="string">@"opacity"</span>];</div><div class="line">    opacityAnimation.duration = <span class="number">0.4</span> * duration;</div><div class="line">    opacityAnimation.fromValue = @<span class="number">0.</span>f;</div><div class="line">    opacityAnimation.toValue = @<span class="number">1.</span>f;</div><div class="line">    </div><div class="line">    <span class="comment">//缩放</span></div><div class="line">    <span class="built_in">CAKeyframeAnimation</span> *scaleAnimation = [<span class="built_in">CAKeyframeAnimation</span> animationWithKeyPath:<span class="string">@"transform.scale"</span>];</div><div class="line">    scaleAnimation.duration = duration;</div><div class="line">    scaleAnimation.values = @[@<span class="number">3.</span>f, @<span class="number">1.</span>f, @<span class="number">1.2</span>f, @<span class="number">1.</span>f];</div><div class="line">    scaleAnimation.keyTimes = @[@<span class="number">0.</span>f, @<span class="number">0.16</span>f, @<span class="number">0.28</span>f, @<span class="number">0.4</span>f];</div><div class="line">    scaleAnimation.removedOnCompletion = <span class="literal">YES</span>;</div><div class="line">    scaleAnimation.fillMode = kCAFillModeForwards;</div><div class="line">    </div><div class="line">    <span class="built_in">CAAnimationGroup</span> *animationGroup = [<span class="built_in">CAAnimationGroup</span> animation];</div><div class="line">    animationGroup.animations = @[opacityAnimation, scaleAnimation];</div><div class="line">    animationGroup.duration = duration;</div><div class="line">    animationGroup.removedOnCompletion = <span class="literal">YES</span>;</div><div class="line">    animationGroup.fillMode = kCAFillModeForwards;</div><div class="line">    </div><div class="line">    [<span class="keyword">self</span>.comboLabel.layer addAnimation:animationGroup forKey:<span class="string">@"kComboAnimationKey"</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>利用一个透明度从 0 ~ 1之间的alpha,然后缩放 之后加到动画组实现一下就好了</p>
<blockquote>
<p>切记动画完成最好移除 否则可能引起动画内存问题</p>
</blockquote>
<p>这里设置斜体字体</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="keyword">self</span>.comboLabel.font = [<span class="built_in">UIFont</span> fontWithName:<span class="string">@"AvenirNext-BoldItalic"</span> size:<span class="number">50</span>];</div></pre></td></tr></table></figure>
<p>看着比较明显</p>
<p>最后按钮点击的时候调用</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">IBAction</span>)clickAction:(<span class="built_in">UIButton</span> *)sender &#123;</div><div class="line">    <span class="keyword">self</span>.danceCount++;</div><div class="line">    [<span class="keyword">self</span> labelDanceAnimation:<span class="number">0.4</span>];</div><div class="line">    <span class="keyword">self</span>.comboLabel.text = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"+  %tu"</span>,<span class="keyword">self</span>.danceCount];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果实现 dozen动画的话很简单, <strong>danceCount % 10 == 0</strong> 求模就行了.</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这个动画比较适合 有些直播场景的点击操作计数相关.感谢观看</p>
<p><a href="https://github.com/sunyazhou13/LiveComboLabel" target="_blank" rel="external">Demo在这里</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;写了一个简单的利用 透明度和 缩放 实现的 数字倍数动画 &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubuserc
    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="macOS开发" scheme="https://www.sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>iOS呼吸动画</title>
    <link href="https://www.sunyazhou.com/2018/09/29/20180929BreathAnimation/"/>
    <id>https://www.sunyazhou.com/2018/09/29/20180929BreathAnimation/</id>
    <published>2018-09-29T02:09:30.000Z</published>
    <updated>2018-11-11T06:43:38.687Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>快放假了, 怕十一文章更新不及时,早点完成文章,保证每个月 2篇的产出量, 今天给大家带来的是 呼吸动画, 做的不是特别好.</p>
<p>上图</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/43eb3d3df2ddda60a3ec26ba376755425ac88f7f/20180929BreathAnimation/breathAnimation.gif" alt=""></p>
<p>大概是这个样子 </p>
<h1 id="需求和实现思路"><a href="#需求和实现思路" class="headerlink" title="需求和实现思路"></a>需求和实现思路</h1><p>具体要求</p>
<ul>
<li>内部头像呼吸放大缩小 无限循环</li>
<li>每次放大同时需要背景还有一张图也放大 并且透明</li>
<li>点击缩放整个背景视图</li>
</ul>
<h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><p>首先 需要使用创建一个Layer 装第一个无限放大缩小的呼吸的图<br>背景也需要一个Layer 做 放大+透明度渐变的动画组并且也放置一张需要放大渐变的图片</p>
<p>最后点击触发. 添加一个一次性的缩放动画即可</p>
<h3 id="呼吸动画layer和动画"><a href="#呼吸动画layer和动画" class="headerlink" title="呼吸动画layer和动画"></a>呼吸动画layer和动画</h3><p>呼吸layer</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="built_in">CALayer</span> *layer = [<span class="built_in">CALayer</span> layer];</div><div class="line">layer.position = <span class="built_in">CGPointMake</span>(kHeartSizeWidth/<span class="number">2.0</span>f, kHeartSizeHeight/<span class="number">2.0</span>f);</div><div class="line">layer.bounds = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, kHeartSizeWidth/<span class="number">2.0</span>f, kHeartSizeHeight/<span class="number">2.0</span>f);</div><div class="line">layer.backgroundColor = [<span class="built_in">UIColor</span> clearColor].CGColor;</div><div class="line">layer.contents = (__bridge <span class="keyword">id</span> _Nullable)([<span class="built_in">UIImage</span> imageNamed:<span class="string">@"breathImage"</span>].CGImage);</div><div class="line">layer.contentsGravity = kCAGravityResizeAspect;</div><div class="line">[<span class="keyword">self</span>.heartView.layer addSublayer:layer];</div></pre></td></tr></table></figure>
<blockquote>
<p>kHeartSizeHeight 和kHeartSizeWidth 是常量 demo中写好了100</p>
</blockquote>
<p>加帧动画</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="built_in">CAKeyframeAnimation</span> *animation = [<span class="built_in">CAKeyframeAnimation</span> animationWithKeyPath:<span class="string">@"transform.scale"</span>];</div><div class="line">animation.values = @[@<span class="number">1.</span>f, @<span class="number">1.4</span>f, @<span class="number">1.</span>f];</div><div class="line">animation.keyTimes = @[@<span class="number">0.</span>f, @<span class="number">0.5</span>f, @<span class="number">1.</span>f];</div><div class="line">animation.duration = <span class="number">1</span>; <span class="comment">//1000ms</span></div><div class="line">animation.repeatCount = FLT_MAX;</div><div class="line">animation.timingFunction = [<span class="built_in">CAMediaTimingFunction</span> functionWithName:kCAMediaTimingFunctionEaseInEaseOut];</div><div class="line">[animation setValue:kBreathAnimationKey forKey:kBreathAnimationName];</div><div class="line">[layer addAnimation:animation forKey:kBreathAnimationKey];</div></pre></td></tr></table></figure>
<blockquote>
<p>差值器也可以自定义 例如:</p>
</blockquote>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"></div><div class="line">[<span class="built_in">CAMediaTimingFunction</span> functionWithControlPoints:<span class="number">0.33</span> :<span class="number">0</span> :<span class="number">0.67</span> :<span class="number">1</span>]</div></pre></td></tr></table></figure>
<p>这里我做的持续时常1秒 </p>
<h3 id="放大渐变动画group"><a href="#放大渐变动画group" class="headerlink" title="放大渐变动画group"></a>放大渐变动画group</h3><p>创建新layer</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="built_in">CALayer</span> *breathLayer = [<span class="built_in">CALayer</span> layer];</div><div class="line">breathLayer.position = layer.position;</div><div class="line">breathLayer.bounds = layer.bounds;</div><div class="line">breathLayer.backgroundColor = [<span class="built_in">UIColor</span> clearColor].CGColor;</div><div class="line">breathLayer.contents = (__bridge <span class="keyword">id</span> _Nullable)([<span class="built_in">UIImage</span> imageNamed:<span class="string">@"breathImage"</span>].CGImage);</div><div class="line">breathLayer.contentsGravity = kCAGravityResizeAspect;</div><div class="line">[<span class="keyword">self</span>.heartView.layer insertSublayer:breathLayer below:layer];</div><div class="line"><span class="comment">//[self.heartView.layer addSublayer:breathLayer];</span></div></pre></td></tr></table></figure>
<blockquote>
<p>这里用的是放在 呼吸layer后边 如果想放在呼吸layer前边 就把里面注释打开 然后注掉 inert那行代码</p>
</blockquote>
<p>动画组 包含 放大 渐变</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//缩放</span></div><div class="line"><span class="built_in">CAKeyframeAnimation</span> *scaleAnimation = [<span class="built_in">CAKeyframeAnimation</span> animationWithKeyPath:<span class="string">@"transform.scale"</span>];</div><div class="line">scaleAnimation.values = @[@<span class="number">1.</span>f, @<span class="number">2.4</span>f];</div><div class="line">scaleAnimation.keyTimes = @[@<span class="number">0.</span>f,@<span class="number">1.</span>f];</div><div class="line">scaleAnimation.duration = animation.duration;</div><div class="line">scaleAnimation.repeatCount = FLT_MAX;</div><div class="line">scaleAnimation.timingFunction = [<span class="built_in">CAMediaTimingFunction</span> functionWithName:kCAMediaTimingFunctionEaseIn];</div><div class="line"><span class="comment">//透明度</span></div><div class="line"><span class="built_in">CAKeyframeAnimation</span> *opacityAnimation = [<span class="built_in">CAKeyframeAnimation</span> animation];</div><div class="line">opacityAnimation.keyPath = <span class="string">@"opacity"</span>;</div><div class="line">opacityAnimation.values = @[@<span class="number">1.</span>f, @<span class="number">0.</span>f];</div><div class="line">opacityAnimation.duration = <span class="number">0.4</span>f;</div><div class="line">opacityAnimation.keyTimes = @[@<span class="number">0.</span>f, @<span class="number">1.</span>f];</div><div class="line">opacityAnimation.repeatCount = FLT_MAX;</div><div class="line">opacityAnimation.duration = animation.duration;</div><div class="line">opacityAnimation.timingFunction = [<span class="built_in">CAMediaTimingFunction</span> functionWithName:kCAMediaTimingFunctionEaseIn];</div><div class="line"></div><div class="line"><span class="comment">//动画组</span></div><div class="line"><span class="built_in">CAAnimationGroup</span> *scaleOpacityGroup = [<span class="built_in">CAAnimationGroup</span> animation];</div><div class="line">scaleOpacityGroup.animations = @[scaleAnimation, opacityAnimation];</div><div class="line">scaleOpacityGroup.removedOnCompletion = <span class="literal">NO</span>;</div><div class="line">scaleOpacityGroup.fillMode = kCAFillModeForwards;</div><div class="line">scaleOpacityGroup.duration = animation.duration;</div><div class="line">scaleOpacityGroup.repeatCount = FLT_MAX;</div><div class="line">[breathLayer addAnimation:scaleOpacityGroup forKey:kBreathScaleName];</div></pre></td></tr></table></figure>
<h3 id="点击缩放动画"><a href="#点击缩放动画" class="headerlink" title="点击缩放动画"></a>点击缩放动画</h3><p>跟第一个一样 只不过 执行次数默认一次 执行完就可以了</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)shakeAnimation &#123;</div><div class="line">    <span class="built_in">CAKeyframeAnimation</span> *animation = [<span class="built_in">CAKeyframeAnimation</span> animationWithKeyPath:<span class="string">@"transform.scale"</span>];</div><div class="line">    animation.values = @[@<span class="number">1.0</span>f, @<span class="number">0.8</span>f, @<span class="number">1.</span>f];</div><div class="line">    animation.keyTimes = @[@<span class="number">0.</span>f,@<span class="number">0.5</span>f, @<span class="number">1.</span>f];</div><div class="line">    animation.duration = <span class="number">0.35</span>f;</div><div class="line">    animation.timingFunctions = @[[<span class="built_in">CAMediaTimingFunction</span> functionWithName:kCAMediaTimingFunctionEaseInEaseOut],[<span class="built_in">CAMediaTimingFunction</span> functionWithName:kCAMediaTimingFunctionEaseInEaseOut]];</div><div class="line">    [<span class="keyword">self</span>.heartView.layer addAnimation:animation forKey:<span class="string">@""</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>手势触发的时候 调用一下</p>
<h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><p>在开发动画的时候遇到 都一个动画 要执行 呼吸 </p>
<p>呼吸如果duration 到中间的话 比如1秒 那么0.5秒的时候 它就需要折回 </p>
<p>那么第二个动画刚刚执行到一半,就会感觉很奇怪</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/ba57cc09ea58317c4cef38da51c1824ddc977f39/20180929BreathAnimation/aniamation.jpeg" alt=""></p>
<p>如果<strong>渐变动画</strong>执行0.5秒的话 它是重复的 那么他就重新开始 相当于 呼吸折回的时候它又重新开开始渐变</p>
<h4 id="怎么解决呢？"><a href="#怎么解决呢？" class="headerlink" title="怎么解决呢？"></a>怎么解决呢？</h4><p>我们把0.5秒的动画加到 动画组里面,然后给动画组设置的时长保持和呼吸动画 一样,这样剩余的0.5的时候 渐变动画是不会重新开始的.</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>动画很久没玩了 基本都忘了一干二净了,以后要勤加练习,多出文章和demo,记录一些更多的知识技巧.</p>
<p>博客像车一样,要是不是的时候经常保养,才能走更远的路,记录更多的美好.</p>
<p>全文完</p>
<p><a href="https://github.com/sunyazhou13/BreathAnimation" target="_blank" rel="external">Demo在这里下载</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;快放假了, 怕十一文章更新不及时,早点完成文章,保证每个月 2篇的产出量, 今天给大家带来的是 呼吸动画, 做的不是特别好.&lt;/p&gt;
&lt;p&gt;
    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="macOS开发" scheme="https://www.sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>iOS扩大UIButton的点击的响应范围</title>
    <link href="https://www.sunyazhou.com/2018/09/20/20180920IncreasingTapAreaOfButton/"/>
    <id>https://www.sunyazhou.com/2018/09/20/20180920IncreasingTapAreaOfButton/</id>
    <published>2018-09-20T01:40:06.000Z</published>
    <updated>2018-09-24T08:16:46.426Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>开发过程中经常遇到<code>UIButton</code>点击区域太小 又不想 改动按钮的大小.</p>
<p>今天的文章和大家分享一下解决这种问题的代码</p>
<h1 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h1><ul>
<li>子类话UIButton 复写 它的<code>hitTest:</code>方法</li>
<li>子类话UIButton 复写 point:inside:withEvent: 方法</li>
</ul>
<h2 id="第一种方式"><a href="#第一种方式" class="headerlink" title="第一种方式"></a>第一种方式</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">hitTest</span><span class="params">(<span class="number">_</span> point: CGPoint, with event: UIEvent?)</span></span> -&gt; <span class="type">UIView</span>? &#123;</div><div class="line">	<span class="keyword">let</span> biggerButtonFrame = theButton.frame.insetBy(dx: -<span class="number">30</span>, dy: -<span class="number">30</span>) <span class="comment">// 1	</span></div><div class="line">	<span class="keyword">if</span> biggerButtonFrame.<span class="built_in">contains</span>(point) &#123; <span class="comment">// 2</span></div><div class="line">		<span class="keyword">return</span> theButton <span class="comment">// 3</span></div><div class="line">	&#125;		</div><div class="line">	<span class="keyword">return</span> <span class="keyword">super</span>.hitTest(point, with: event) <span class="comment">// 4</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><ol>
<li>让theButton的 x 扩大 30, y 扩大 30 (正数为缩小 负数为放大. 然后宽高 分别是2 <em> 30和 2 </em> 30)</li>
</ol>
</li>
<li><ol>
<li>判断点击的位置是否在放大完的frame内.</li>
</ol>
</li>
<li><ol>
<li>如果是 就返回button</li>
</ol>
</li>
<li><ol>
<li>不是的话让事件继续传递</li>
</ol>
</li>
</ul>
<blockquote>
<p>注意:<em>这里没判断 theButton.alpha == 0 和 theButton.userInterface.. ==  YES 还有它是否可见之类的,请自行判断</em></p>
</blockquote>
<h2 id="第二种方式"><a href="#第二种方式" class="headerlink" title="第二种方式"></a>第二种方式</h2><p>复写UIView的point:方法</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">point</span><span class="params">(inside point: CGPoint, with event: UIEvent?)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">	<span class="keyword">let</span> biggerFrame = bounds.insetBy(dx: -<span class="number">30</span>, dy: -<span class="number">30</span>)</div><div class="line"></div><div class="line">	<span class="keyword">return</span> biggerFrame.<span class="built_in">contains</span>(point)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>OC的版本是这样</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="built_in">BOOL</span>)pointInside:(<span class="built_in">CGPoint</span>)point withEvent:(<span class="built_in">UIEvent</span> *)event &#123;</div><div class="line">	<span class="comment">//这里写上 </span></div><div class="line">	</div><div class="line">	<span class="built_in">CGRectInset</span>(&lt;<span class="meta">#CGRect rect#&gt;, <span class="meta-string">&lt;#CGFloat dx#&gt;</span>, <span class="meta-string">&lt;#CGFloat dy#&gt;</span>)</span></div><div class="line">	...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>但是 第二种方式 其实 是 hitTest:方法调用之前UIView的判断,它判断当前点击的point是否在这个UIView上.</p>
<p>不过 还是推荐第一种方式</p>
<h2 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h2><p>其实 最核心的代码是</p>
<p>CGRectInset(&lt;#CGRect rect#&gt;, &lt;#CGFloat dx#&gt;, &lt;#CGFloat dy#&gt;)</p>
<blockquote>
<p>CGRect CGRectOffset(CGRect rect, CGFloat dx, CGFloat dy)是以rect为中心，根据dx和dy来实现缩小。</p>
</blockquote>
<p>如果dx 和 dy是负数 则放大 ,正数则缩小</p>
<p>但是大家可能很疑惑 那宽度和高度怎么 缩小放大</p>
<p>首先: 我们明确 这个API的含义 只要传入正数 它就缩放 那么 宽高也会适当前传入的dx和dy来决定 缩放比</p>
<p>因为是中心点缩放 所以宽高 <strong>要 X 2</strong>,因为有两侧嘛,左侧缩小30右侧也需要缩小30,上部和底部是一样的.</p>
<p>大家可自行查阅google看下</p>
<p><a href="https://rolandleth.com/increasing-the-tap-area-of-a-uibutton" target="_blank" rel="external">参考Increasing the tap area of a UIButton</a><br><a href="https://mp.weixin.qq.com/s/9rvSRt4kfpy7e87EJoaJOQ" target="_blank" rel="external">参考 iOS触摸事件全家桶</a></p>
<p>全文完</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;开发过程中经常遇到&lt;code&gt;UIButton&lt;/code&gt;点击区域太小 又不想 改动按钮的大小.&lt;/p&gt;
&lt;p&gt;今天的文章和大家分享一下解
    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="macOS开发" scheme="https://www.sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>iOS键盘动画细节</title>
    <link href="https://www.sunyazhou.com/2018/09/18/20180918KeyboardAnimation/"/>
    <id>https://www.sunyazhou.com/2018/09/18/20180918KeyboardAnimation/</id>
    <published>2018-09-18T01:49:58.000Z</published>
    <updated>2018-09-24T08:16:46.426Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/3c30ff9ede53ff83c4dd1d31ec6e75b27bb5d3f3/20180918KeyboardAnimation/keyboard1.png" alt=""></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>很久没写技术文章里,本篇记录了一下一个键盘弹出的小细节动画,像微信一样流程</p>
<p>上图</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/23780124887263a4f9a87f094f061bbd564129c3/20180918KeyboardAnimation/keyboardAnimation.gif" alt=""></p>
<h1 id="动画细节代码"><a href="#动画细节代码" class="headerlink" title="动画细节代码"></a>动画细节代码</h1><p>细节核心主要是通知中的一些key</p>
<ul>
<li>动画时长</li>
<li>动画的出现方式</li>
</ul>
<p>…</p>
<p>下面的通知是接收 键盘将要出现的通知<code>UIKeyboardWillShowNotification</code></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">[[<span class="built_in">NSNotificationCenter</span> defaultCenter] addObserver:<span class="keyword">self</span></div><div class="line">                                             selector:<span class="keyword">@selector</span>(didReceiveKeyboardShowNotification:)</div><div class="line">                                                 name:<span class="built_in">UIKeyboardWillShowNotification</span></div><div class="line">                                               object:<span class="literal">nil</span>];</div></pre></td></tr></table></figure>
<p>然后是实现的核心代码</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)didReceiveKeyboardShowNotification:(<span class="built_in">NSNotification</span> *)noti &#123;</div><div class="line">    <span class="built_in">NSDictionary</span> *userInfo = noti.userInfo;</div><div class="line">    <span class="built_in">NSTimeInterval</span> animationDuration;</div><div class="line">    <span class="built_in">UIViewAnimationCurve</span> animationCurve;</div><div class="line">    <span class="built_in">CGRect</span> keyboardFrame;</div><div class="line">    [[userInfo objectForKey:<span class="built_in">UIKeyboardAnimationCurveUserInfoKey</span>] getValue:&amp;animationCurve];</div><div class="line">    [[userInfo objectForKey:<span class="built_in">UIKeyboardAnimationDurationUserInfoKey</span>] getValue:&amp;animationDuration];</div><div class="line">    [[userInfo objectForKey:<span class="built_in">UIKeyboardFrameEndUserInfoKey</span>] getValue:&amp;keyboardFrame];</div><div class="line">    </div><div class="line">    <span class="built_in">UIViewAnimationOptions</span> animationOptions = animationCurve &lt;&lt; <span class="number">16</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">self</span>.bottomConstrains.offset = -<span class="built_in">CGRectGetHeight</span>(keyboardFrame);</div><div class="line">    [<span class="built_in">UIView</span> animateWithDuration:animationDuration delay:<span class="number">0.</span> options:animationOptions animations:^&#123;</div><div class="line">        [<span class="keyword">self</span>.view setNeedsUpdateConstraints];</div><div class="line">        [<span class="keyword">self</span>.view layoutIfNeeded];</div><div class="line">    &#125; completion:^(<span class="built_in">BOOL</span> finished) &#123;</div><div class="line">        </div><div class="line">    &#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>self.bottomConstrains.offset = -CGRectGetHeight(keyboardFrame); 是我写的约束 详细请参考demo</p>
</blockquote>
<p>键盘消失也是一样的 <code>UIKeyboardWillHideNotification</code> 接收这个key</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">[[<span class="built_in">NSNotificationCenter</span> defaultCenter] addObserver:<span class="keyword">self</span></div><div class="line">                                             selector:<span class="keyword">@selector</span>(didReceiveKeyboardHideNotification:)</div><div class="line">                                                 name:<span class="built_in">UIKeyboardWillHideNotification</span></div><div class="line">                                               object:<span class="literal">nil</span>];</div></pre></td></tr></table></figure>
<p>消失的时候 把约束偏移量设置<code>0</code>即可</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)didReceiveKeyboardHideNotification:(<span class="built_in">NSNotification</span> *)noti &#123;</div><div class="line">    <span class="built_in">NSDictionary</span> *userInfo = noti.userInfo;</div><div class="line">    <span class="built_in">NSTimeInterval</span> animationDuration;</div><div class="line">    <span class="built_in">UIViewAnimationCurve</span> animationCurve;</div><div class="line">    <span class="built_in">CGRect</span> keyboardFrame;</div><div class="line">    [[userInfo objectForKey:<span class="built_in">UIKeyboardAnimationCurveUserInfoKey</span>] getValue:&amp;animationCurve];</div><div class="line">    [[userInfo objectForKey:<span class="built_in">UIKeyboardAnimationDurationUserInfoKey</span>] getValue:&amp;animationDuration];</div><div class="line">    [[userInfo objectForKey:<span class="built_in">UIKeyboardFrameEndUserInfoKey</span>] getValue:&amp;keyboardFrame];</div><div class="line">    </div><div class="line">    <span class="built_in">UIViewAnimationOptions</span> animationOptions = animationCurve &lt;&lt; <span class="number">16</span>;</div><div class="line">    <span class="keyword">self</span>.bottomConstrains.offset = <span class="number">0</span>;</div><div class="line">    [<span class="built_in">UIView</span> animateWithDuration:animationDuration delay:<span class="number">0.</span> options:animationOptions animations:^&#123;</div><div class="line">        [<span class="keyword">self</span>.view setNeedsUpdateConstraints];</div><div class="line">        [<span class="keyword">self</span>.view layoutIfNeeded];</div><div class="line">    &#125; completion:^(<span class="built_in">BOOL</span> finished) &#123;</div><div class="line">        </div><div class="line">    &#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>self.bottomConstrains.offset = 0; //设置偏移量会原来位置</p>
</blockquote>
<p>利用Masonry做的动画</p>
<p>最后 别忘记移除通知</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)dealloc &#123;</div><div class="line">    [[<span class="built_in">NSNotificationCenter</span> defaultCenter] removeObserver:<span class="keyword">self</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>键盘弹出这个微小的细节 很容易被大家忽视,写这篇文章是为了记录知识和技巧,希望各位多多指教</p>
<p><a href="https://github.com/sunyazhou13/KeyboardAnimation" target="_blank" rel="external">Demo点击这里下载</a></p>
<p>全文完</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/3c30ff9ede53ff83c4dd1d31ec6e75b27bb5d3f3/20180918Key
    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="macOS开发" scheme="https://www.sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>船与灯塔</title>
    <link href="https://www.sunyazhou.com/2018/09/02/20180902Beacon/"/>
    <id>https://www.sunyazhou.com/2018/09/02/20180902Beacon/</id>
    <published>2018-09-02T04:12:51.000Z</published>
    <updated>2018-09-02T04:20:37.405Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20180902Beacon/beacon.jpg" alt=""></p>
<p>荷兰🇳🇱被称为”海上马车夫”，今天讲述的故事与海上马车夫的有关的爱情故事，但它属于东方，属于中国。</p>
<h1 id="船🚢"><a href="#船🚢" class="headerlink" title="船🚢"></a>船🚢</h1><p>它是一搜小船，船上有两只船桨，这艘船从驶出造船厂的时候，就被定义为普通货物运输船只，载重不超过1吨，造这艘船的主人希望能靠这只船养家糊口，但又舍不得花更多的钱买好的木料来制造它。</p>
<h1 id="灯塔"><a href="#灯塔" class="headerlink" title="灯塔"></a>灯塔</h1><p>这是一座集成很多高新科技的灯塔，塔基可以在海上漂浮，自动平衡系统让他在海浪的动荡中稳如泰山，灯塔的父母距离这座新的灯塔不远，形成海上灯塔群，发出很强的激光束，指明航线方向，这坐新的灯塔还能发出加密的无线电信号，这座灯塔通过自身的太阳能外壳和风力发电机提供电力，还能通过坐落于港口海岸线的父母灯塔群无线传输电力给自己充电。只要她觉得电力不足，她就可以移动回父母灯塔群的无线充电有效范围补充能量，在众多灯塔群中，有两座地面灯塔为她提供稳定的电力输送。这座灯塔很幸福。但这座灯塔喜欢游弋在距离父母灯塔不远的浅海区，距离灯塔不超过几海里的范围内。</p>
<h1 id="邂逅那只船"><a href="#邂逅那只船" class="headerlink" title="邂逅那只船"></a>邂逅那只船</h1><p>同在浅海区，有一天这只船在海上的一次风急浪高的夜晚迷失了方向，那只移动的灯塔发现了它，并回应了灯光交换信令，渐渐地，这艘船能识别这个灯塔发出的灯光束，船渐渐地喜欢上了这座移动的灯塔，这座灯塔也很钦佩这艘船，他能在如此大的风浪中屹立不沉，可是船自己深深地知道，自己是载货船，只有通过拉更多的货才能让主人把自己改造成更大的舰船，灯塔看出了船眼中的迷茫，说:”你可以留在浅海区，拉着普通的货物，我的灯塔父母那里是一座港口，他们也许有些小的货物可以给你”，船心里也很想留在这座灯塔附近的港口做一些普通的货物运输，可是船出身寒微，怕被灯塔父母看不起，加之这座港口的贸易很不透明，只有有关系的船才能得到好的货物，船的自尊心受到了极大打击，决心一定要成为一艘旗舰，才有资格去这座港口拉重达几十吨的集装箱，去赢得灯塔父母和灯塔的尊重。就这样那天的风浪过后，船离开了这座灯塔，去了很多像这只小船组成的小船群队。</p>
<h1 id="海上漂泊"><a href="#海上漂泊" class="headerlink" title="海上漂泊"></a>海上漂泊</h1><p>在大海上运送完全超载的货物，过着漂流的生活，举目无亲，背井离乡，由于每次都拉超载的货物，船每次都打肿脸充胖子的运自己运不动的货物，每次触礁都撞得遍体鳞伤，渐渐地船学会了自我修复和疗伤，就这样船的主人赚了第一桶金，打算改造升级这艘木船，把他变成一艘铁甲舰船，去掉了双桨，还用发动机提供动力，这艘船的灯光系统不知为何，对那座灯塔发出的光有一种特殊的能力，识别率能达到200%.可是对其它灯塔的光束识别基本50%都达不到，船主人对这套灯光系统简直食之无用弃之可惜。可是船自己满足，知道灯光识别系统还在我就不会失去方向，我就能运送更重的货物，我就能看到那座灯塔，那座悬浮的灯塔。</p>
<p>刚货运不久，船给灯塔发出了无线电信号，请求灯塔能否和她一样来这座大的港口指名方向，船内心是没有底的，不知道新的港口是好是坏，只是这里的贸易很发达可以积累更多资本，灯塔发来反馈信号，表达了灯塔不想来到新港口的意愿，船很伤心，也很无助，伤心的是自己太弱小，无助的是就算灯塔来了船也给不了灯塔需要的一切电力和希望。不过船内心没有放弃，只要努力才能得到那些需要的一切。</p>
<p>第一次运送货物回到港口，船身已经从木板换成了轻型铁甲，可以运载不超过10吨的货物，当他第一次回到港口时，灯光系统识别那座灯塔发出的光束很精准，甚至光的色彩都可以模拟变换，用船的心里话说，我甚至可以识别那座灯塔光闪烁快慢，闪烁次数分别代表什么意思，以及最重要的是我能解密出她发出的加密信号。那座灯塔也很高兴，那艘很不一样的船回应她的速度很快很精准，也许这座灯塔的光线专为那艘船而发。</p>
<p>船停靠在港口一周时间，然后又要再一次的出海航行，船这一周想了很多，”我纵然能运重10吨的货物，可是马达还达不到指定的节数，速度不够快”(节 是指船只航行速度的单位，类似汽车的马力是多少匹)，就这样道别了灯塔又开始扬帆起航。</p>
<p>在海上航行的时候，船一直思考一个问题，我为什么要放弃这些美好，是因为过上更好的生活吗？是为了把自身打造成旗舰去拉货吗？还是因为贫穷我需要自我救赎的脱贫致富？</p>
<p>在航行中，船会间隔一定时间给灯塔发送无线电波，从而证明他的存在。</p>
<p>在航行的几年中，灯塔很孤独，船也一样孤独，突然有一天船从其它船那里得知灯塔旁边出现了一座新的灯塔，船伤心了，自己没有机会去灯塔父母那里赢得他们的尊重了，于是船卸载了旧的灯光识别系统，卸载了无线电台收发器。直到一段时间以后船换上了新的无线电台和灯光系统，从光谱中删除了那座移动的灯塔的全部信道和交换秘钥，从此失去了一切和那座灯塔的联系。</p>
<p>每次运送货物的周期大概需要在海上航行一年，每年船都会回到浅海区的港口一次看望那座灯塔，远远的望着她，但那座灯塔心里了解，那艘船一年一定有一次会回到这里，只是它不发出光而已。</p>
<p>突然有一天船听说新建在悬浮灯塔旁边的新灯塔因为施工时间紧任务重导致质量不合格而坍塌，船为那座悬浮的灯塔深深地捏了一把汗，她没事吧？我是不是应该在这个时候跟她说句话，安慰一下她，可是我的无线电系统中已经没有了她的信道和交换秘钥。我比她都伤心，在她需要我的光束的时候我居然发不出来任何她需要的光束，让我唯一能有欣慰的是，她还有父母灯塔为她提供地面电力输送，保障她没有被坍塌的风险。</p>
<p>就这样时光过了4年2个月，在这四年中船在每个航行的夜晚时不时的做同一个梦，梦到那座移动的灯塔在发出寻找他的光束，他回应了这灯塔以同样的光束和无线电信号，互相拥抱着哭泣。每次梦里醒来，船的眼角里含着眼泪（当我写到这里时眼角里已经流出了眼泪），每次醒来船都会发出一次信号，记录下时间，就这样4年中梦到了灯塔15次，每次都是很伤心，船也许永远也想不明白自己到底做错了什么，怎么永远忘不掉那永不磨灭的电波，怎么永远也没有机会赢得属于自己的尊重，船的四年中不断完善自己的缺陷，把自己从轻型铁甲舰升级成了巡洋舰，但船的内心依然没有丝毫的高兴，即便自己能拉千吨货物，万吨排量，几千节速度，成为战列舰又能怎样，能换回那座悬浮的灯塔吗？不能，因为船很失败，一辈子也许都是载集装箱的命运，运更多的货物，船沉默了，船很想击沉自己永远沉没。</p>
<p>船试图启用新的灯光系统尝试发出那座灯塔需要的光束和新的无线电台接收系统，从其它友船那里找到这座灯塔信号频道和光谱。不久收到了悬浮灯塔的应答，船内心很矛盾，很高兴，很心酸，很无助，得知那座新灯塔倒塌后海洋总署联合地面港口以及父母灯塔，为悬浮灯塔建造了一座新的灯塔，并且用钢缆固定塔基，让她不在孤独，不在风浪的洗礼中摇摆不定。</p>
<p>灯塔也许不知道船的灯光系统中只换了灯芯和灯罩还有线路，灯光的芯片依然还是原来的芯片，只是现在仅仅能识别90%的那座灯塔光束。船的内心是替灯塔高兴的，她终于有了她想要的一切。但船也许很伤心，他的那座灯塔已经倒塌了，再也不能在海中为船指明方向了，船也不得不找下一座灯塔…</p>
<h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>这艘船叫”良工”号。</p>
<p>真人故事改编，版权所有翻版必究。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.gi
    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="文学" scheme="https://www.sunyazhou.com/tags/%E6%96%87%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>iOS中CPU线程调试高级技巧</title>
    <link href="https://www.sunyazhou.com/2018/08/17/20180817CPU-thread-debug/"/>
    <id>https://www.sunyazhou.com/2018/08/17/20180817CPU-thread-debug/</id>
    <published>2018-08-17T09:19:23.000Z</published>
    <updated>2018-08-31T00:29:32.840Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近在开发直播,发现CPU性能被打满后导致CPU降频,发热严重,然后卡顿…</p>
<p>为了定位这个问题我们花费了至少 3天的时间 一点一点跟踪CPU的线程代码,当遇到C++的thread的时候没有符号表,只能看见一坨对象地址,除此以外连个方法名都没有的时候真是手足无措.本篇介绍一个高级调试 方法,使用符号表和相关 指令寻踪 相关代码调用,写的不好 大佬们请轻喷.代码相关过程感谢同事 陈豪的大力支持.</p>
<h1 id="Talk-is-cheap-show-me-the-code"><a href="#Talk-is-cheap-show-me-the-code" class="headerlink" title="Talk is cheap show me the code"></a>Talk is cheap show me the code</h1><p>我们的实现思路是找到动态库的首地址调用从此入手用相关指令恢复</p>
<h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><ul>
<li>build setting中开启符号表</li>
</ul>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/6db967f376eddf5c04bda7db38be27b07f2d48bc/20180817CPU-thread-debug/enable_dysm.png" alt=""></p>
<h2 id="1-导入头文件"><a href="#1-导入头文件" class="headerlink" title="1.导入头文件"></a>1.导入头文件</h2><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;mach-o/dyld.h&gt;</span></span></div></pre></td></tr></table></figure>
<p>这是mac os的可执行文件的动态链接库头文件 内部内建函数有几个我们需要用到</p>
<h2 id="2-复制下面代码到你的相关调用的地方"><a href="#2-复制下面代码到你的相关调用的地方" class="headerlink" title="2.复制下面代码到你的相关调用的地方"></a>2.复制下面代码到你的相关调用的地方</h2><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//1</span></div><div class="line">uint32_t count = _dyld_image_count();</div><div class="line">DDLogInfo(<span class="string">@"Dyld image count %d"</span>, count);</div><div class="line"><span class="comment">//2</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</div><div class="line">    <span class="keyword">char</span> *image_name = (<span class="keyword">char</span> *)_dyld_get_image_name(i);</div><div class="line">    <span class="comment">//3</span></div><div class="line">    <span class="keyword">const</span> <span class="keyword">struct</span> mach_header *mh = _dyld_get_image_header(i);</div><div class="line">    intptr_t vmaddr_slide = _dyld_get_image_vmaddr_slide(i);</div><div class="line">    <span class="comment">//4</span></div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"Image name %s at address 0x%llx and ASLR slide 0x%lx.\n"</span>,</div><div class="line">              image_name, (mach_vm_address_t)mh, vmaddr_slide);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我解释一下以上代码  </p>
<ul>
<li>1.拿出当前镜像数量  </li>
<li>2.遍历镜像  </li>
<li>3.获取镜像首地址  </li>
<li>4.打印  </li>
</ul>
<p>然后运行你的程序</p>
<p>然后看下控制台 过滤一下 ASLR我们log中的键入内容</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/08f5465b5d977904da7f3acf876cb6efcd11bf0b/20180817CPU-thread-debug/consolo_debug.png" alt=""></p>
<p>然后 点击 工程中的Product </p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/08f5465b5d977904da7f3acf876cb6efcd11bf0b/20180817CPU-thread-debug/products.png" alt=""></p>
<p>右键 show in finder</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/08f5465b5d977904da7f3acf876cb6efcd11bf0b/20180817CPU-thread-debug/product_dir.png" alt=""></p>
<p>下一步骤 打开终端 cd 到这这个目录(可以打开终端 输入 cd 空格 拖拽那个文件夹)</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/08f5465b5d977904da7f3acf876cb6efcd11bf0b/20180817CPU-thread-debug/dir_final.png" alt=""></p>
<p>然后 <code>pwd</code>一下 看看</p>
<h2 id="3-控制台搜索相关我们打印log的代码"><a href="#3-控制台搜索相关我们打印log的代码" class="headerlink" title="3.控制台搜索相关我们打印log的代码"></a>3.控制台搜索相关我们打印log的代码</h2><p>找到我们第一条首地址</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/536c82a196f36b0b4634d6825ee3e297d66e3830/20180817CPU-thread-debug/importent.png" alt=""></p>
<blockquote>
<p>注意:<strong>这一步非常重要 如果不好使,请重试几次.</strong></p>
</blockquote>
<h4 id="拿出main函数的首地址-ASLR中搜搜的-首地址然后复制-回到终端中输入"><a href="#拿出main函数的首地址-ASLR中搜搜的-首地址然后复制-回到终端中输入" class="headerlink" title="拿出main函数的首地址 ASLR中搜搜的 首地址然后复制 回到终端中输入"></a>拿出main函数的首地址 ASLR中搜搜的 首地址然后复制 <strong>回到终端中输入</strong></h4><figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">atos -arch arm64 -o com_kwai_gif.app.dSYM/Contents/Resources/DWARF/com_kwai_gif -l  0x1006b8000</div></pre></td></tr></table></figure>
<blockquote>
<p>注意:<strong>这里是符号表路径</strong>,如果不知道在哪里找到请google一下.</p>
</blockquote>
<p>我们来测试一下 好不好使</p>
<p>首先在控制台顶部的面板点击</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/08f5465b5d977904da7f3acf876cb6efcd11bf0b/20180817CPU-thread-debug/breakpoint1.png" alt=""></p>
<p>然后 在 consolo中输入 <code>bt</code> </p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/08f5465b5d977904da7f3acf876cb6efcd11bf0b/20180817CPU-thread-debug/main.png" alt=""></p>
<p>如果看到 如下内容说明已经成功.</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/08f5465b5d977904da7f3acf876cb6efcd11bf0b/20180817CPU-thread-debug/main_result.png" alt=""></p>
<h2 id="4-真机运行-找出未知线程"><a href="#4-真机运行-找出未知线程" class="headerlink" title="4.真机运行 找出未知线程"></a>4.真机运行 找出未知线程</h2><p>首先点击Xcode工程中的Profile运行<code>instruments</code>,我这里是运行工程之后 Xcode9.4可以无缝转换到<code>instruments</code></p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/ffdc3d690a4b68cd3d26a1148e81e5817044442c/20180817CPU-thread-debug/instruments0.png" alt=""></p>
<p>我们找到相关线程 没有名称也不知道对象叫什么 就一个十六进制地址</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/ffdc3d690a4b68cd3d26a1148e81e5817044442c/20180817CPU-thread-debug/instruments2.png" alt=""></p>
<p>我们随便找个地址 在终端中输入 </p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/ffdc3d690a4b68cd3d26a1148e81e5817044442c/20180817CPU-thread-debug/instruments3.png" alt=""></p>
<p>好了 如果有问题 请删除product和符号表重新编译</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>CPU调试的过程非常麻烦,而且中间过程的代码多数都是C++的调用,主要是线程消耗的开销,中有很多收获希望大家多多指教.</p>
<p>全文完</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近在开发直播,发现CPU性能被打满后导致CPU降频,发热严重,然后卡顿…&lt;/p&gt;
&lt;p&gt;为了定位这个问题我们花费了至少 3天的时间 一点一
    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="macOS开发" scheme="https://www.sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Taptic Engine振动反馈</title>
    <link href="https://www.sunyazhou.com/2018/08/13/20180813TapticEngineFeedback/"/>
    <id>https://www.sunyazhou.com/2018/08/13/20180813TapticEngineFeedback/</id>
    <published>2018-08-13T06:28:04.000Z</published>
    <updated>2018-08-31T00:29:32.839Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/6215324852334218b2d9908f39be966090de2f33/20180813TapticEngineFeedback/taptic_engine.jpg" alt=""></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Taptic Engine 是苹果产品上推出的全新震动模块，该元件最早出现在 Apple Watch 中。iPhone 6s 和 iPhone 6s Plus 中，也同样内置了Taptic Engine，在设计上有所升级。</p>
<p>Taptic Engine 振动模块为 Apple Watch 以及 iPhone 6s、iPhone 7 提供了 Force Touch 以及 3D Touch，不同的屏幕操作，可以感受到不同的振动触觉效果，带来更好的用户体验</p>
<h1 id="触觉振动体验"><a href="#触觉振动体验" class="headerlink" title="触觉振动体验"></a>触觉振动体验</h1><h2 id="振动代码-旧方案"><a href="#振动代码-旧方案" class="headerlink" title="振动代码(旧方案)"></a>振动代码(旧方案)</h2><p>调用这行代码虽然可以振动 但是它属于长振动</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">AudioServicesPlaySystemSound(kSystemSoundID_Vibrate);</div></pre></td></tr></table></figure>
<h2 id="振动代码-新方案"><a href="#振动代码-新方案" class="headerlink" title="振动代码(新方案)"></a>振动代码(新方案)</h2><p>iOS10 引入了一种新的、产生触觉反馈的方式， 帮助用户认识到不同的震动反馈有不同的含义 。这个功能的核心就是由 UIFeedbackGenerator 提供。</p>
<p><code>UIFeedbackGenerator</code> 可以帮助你实现 <code>haptic feedback</code>。它的要求是：</p>
<ul>
<li>支持 Taptic Engine 机型 (iPhone 7 以及 iPhone 7 Plus).</li>
<li>app 需要在前台运行</li>
<li>系统 Taptic setting 需要开启</li>
</ul>
<blockquote>
<p>下图开启 声音与触感<br>手机 – 设置 – 声音与触感 – 系统触感反馈(打开)<br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/a8bed46d914016aaeb13aa7bac8d7b4c9e287dba/20180813TapticEngineFeedback/setting.png" alt=""></p>
</blockquote>
<h3 id="调用相关振动代码实现振动功能"><a href="#调用相关振动代码实现振动功能" class="headerlink" title="调用相关振动代码实现振动功能"></a>调用相关振动代码实现振动功能</h3><p><code>UIFeedbackGenerator</code> 子类有:</p>
<ul>
<li>UIImpactFeedbackGenerator</li>
<li>UISelectionFeedbackGenerator</li>
<li>UINotificationFeedbackGenerator</li>
</ul>
<h4 id="UIImpactFeedbackGenerator振动"><a href="#UIImpactFeedbackGenerator振动" class="headerlink" title="UIImpactFeedbackGenerator振动"></a>UIImpactFeedbackGenerator振动</h4><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="built_in">UIImpactFeedbackGenerator</span> *generator = [[<span class="built_in">UIImpactFeedbackGenerator</span> alloc] initWithStyle: <span class="built_in">UIImpactFeedbackStyleLight</span>];</div><div class="line">[generator impactOccurred];</div></pre></td></tr></table></figure>
<p>振动style有三种枚举</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSInteger</span>, <span class="built_in">UIImpactFeedbackStyle</span>) &#123;</div><div class="line">    <span class="built_in">UIImpactFeedbackStyleLight</span>,</div><div class="line">    <span class="built_in">UIImpactFeedbackStyleMedium</span>,</div><div class="line">    <span class="built_in">UIImpactFeedbackStyleHeavy</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<blockquote>
<p>基本每次振动相当于创建一个实例调用一次方法就行了,如果觉得性能更好的设计可以搞成成员变量</p>
</blockquote>
<p>反馈结果</p>
<table>
<thead>
<tr>
<th>UIImpactFeedbackGenerator</th>
<th>UIImpactFeedbackStyleLight</th>
<th>UIImpactFeedbackStyleMedium</th>
<th>UIImpactFeedbackStyleHeavy</th>
</tr>
</thead>
<tbody>
<tr>
<td>iPhone 7（iOS 10）及以上机型</td>
<td>微弱短振</td>
<td>中等短振</td>
<td>明显短振</td>
</tr>
<tr>
<td>iPhone 6s Puls（iOS 9）</td>
<td>长振</td>
<td>长振</td>
<td>长振</td>
</tr>
<tr>
<td>iPhone 6（iOS 10）</td>
<td>无振动</td>
<td>无振动</td>
<td>无振动</td>
</tr>
</tbody>
</table>
<h4 id="UISelectionFeedbackGenerator振动"><a href="#UISelectionFeedbackGenerator振动" class="headerlink" title="UISelectionFeedbackGenerator振动"></a>UISelectionFeedbackGenerator振动</h4><p>这里我试图搞成成员变量模拟手势拖拽 振动</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UISelectionFeedbackGenerator</span> *feedbackGesGenerator;</div></pre></td></tr></table></figure>
<p>事件相应</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">IBAction</span>)gestrueHandle:(<span class="built_in">UIGestureRecognizer</span> *)sender &#123;</div><div class="line">    <span class="keyword">switch</span> (sender.state) &#123;</div><div class="line">        <span class="keyword">case</span> <span class="built_in">UIGestureRecognizerStateBegan</span>:</div><div class="line">            </div><div class="line">            <span class="comment">// Instantiate a new generator.</span></div><div class="line">            <span class="keyword">self</span>.feedbackGesGenerator = [[<span class="built_in">UISelectionFeedbackGenerator</span> alloc] init];</div><div class="line">            </div><div class="line">            <span class="comment">// Prepare the generator when the gesture begins.</span></div><div class="line">            [<span class="keyword">self</span>.feedbackGesGenerator prepare];</div><div class="line">            </div><div class="line">            <span class="keyword">break</span>;</div><div class="line">            </div><div class="line">        <span class="keyword">case</span> <span class="built_in">UIGestureRecognizerStateChanged</span>: &#123;</div><div class="line">            </div><div class="line">            <span class="comment">// Check to see if the selection has changed...</span></div><div class="line">           </div><div class="line">                <span class="comment">// Trigger selection feedback.</span></div><div class="line">                [<span class="keyword">self</span>.feedbackGesGenerator selectionChanged];</div><div class="line">                </div><div class="line">                <span class="comment">// Keep the generator in a prepared state.</span></div><div class="line">                [<span class="keyword">self</span>.feedbackGesGenerator prepare];</div><div class="line">            </div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="keyword">break</span>;</div><div class="line">            </div><div class="line">        <span class="keyword">case</span> <span class="built_in">UIGestureRecognizerStateCancelled</span>:</div><div class="line">        <span class="keyword">case</span> <span class="built_in">UIGestureRecognizerStateEnded</span>:</div><div class="line">        <span class="keyword">case</span> <span class="built_in">UIGestureRecognizerStateFailed</span>:</div><div class="line">            </div><div class="line">            <span class="comment">// Release the current generator.</span></div><div class="line">            <span class="keyword">self</span>.feedbackGesGenerator = <span class="literal">nil</span>;</div><div class="line">            </div><div class="line">            <span class="keyword">break</span>;</div><div class="line">            </div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            </div><div class="line">            <span class="comment">// Do nothing.</span></div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>注意: <strong>这里调用了一下<code>[self.feedbackGesGenerator prepare]</code>方法让振动引擎准备就绪,方便下次快速启动</strong>这个方法是父类的方法</p>
</blockquote>
<h4 id="UINotificationFeedbackGenerator振动"><a href="#UINotificationFeedbackGenerator振动" class="headerlink" title="UINotificationFeedbackGenerator振动"></a>UINotificationFeedbackGenerator振动</h4><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="built_in">UINotificationFeedbackGenerator</span> *notifiFeedBack = [[<span class="built_in">UINotificationFeedbackGenerator</span> alloc] init];</div><div class="line">    [notifiFeedBack notificationOccurred:<span class="built_in">UINotificationFeedbackTypeWarning</span>];</div></pre></td></tr></table></figure>
<p>同样<code>UINotificationFeedbackType</code>也是三种枚举</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSInteger</span>, <span class="built_in">UINotificationFeedbackType</span>) &#123;</div><div class="line">    <span class="built_in">UINotificationFeedbackTypeSuccess</span>,</div><div class="line">    <span class="built_in">UINotificationFeedbackTypeWarning</span>,</div><div class="line">    <span class="built_in">UINotificationFeedbackTypeError</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>几种不同的振动API 可以视情况而使用, 比较常用的是 <code>UIImpactFeedbackGenerator</code>, 当然也可以随意使用注意操作系统判断检查。</p>
<p>例如:</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="keyword">if</span> (@available(iOS <span class="number">10.0</span>, *)) &#123;</div><div class="line">	<span class="comment">//写相关振动代码</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>全文完</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/6215324852334218b2d9908f39be966090de2f33/20180813Tap
    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>利用UIToolBar做高斯模糊背景</title>
    <link href="https://www.sunyazhou.com/2018/07/23/20180723ToolBar-Blur/"/>
    <id>https://www.sunyazhou.com/2018/07/23/20180723ToolBar-Blur/</id>
    <published>2018-07-23T10:22:05.000Z</published>
    <updated>2018-08-04T06:34:54.028Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/360cb7db556ac95a3d8e2028e7027cdcf1378d51/20180723ToolBar-Blur/blur.gif" alt=""></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="built_in">UIView</span> *)containerBackgroundView &#123;</div><div class="line">    <span class="keyword">if</span> (!_containerBackgroundView) &#123;</div><div class="line">        <span class="built_in">UIToolbar</span> *toolBar = [[<span class="built_in">UIToolbar</span> alloc] initWithFrame:<span class="built_in">CGRectZero</span>];</div><div class="line">        toolBar.barStyle = <span class="built_in">UIBarStyleBlack</span>;</div><div class="line">        toolBar.clipsToBounds = <span class="literal">YES</span>;</div><div class="line">        _containerBackgroundView = toolBar;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> _containerBackgroundView;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>也可以使用<code>UIBlurEffect</code></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="built_in">UIBlurEffect</span> *blurEffect = [<span class="built_in">UIBlurEffect</span> effectWithStyle:<span class="built_in">UIBlurEffectStyleLight</span>];</div><div class="line"><span class="built_in">UIVisualEffectView</span> *blurView = [[<span class="built_in">UIVisualEffectView</span> alloc] initWithEffect:blurEffect];</div><div class="line">blurView.frame = myView.bounds;</div><div class="line">[myView addSubview:blurView];</div></pre></td></tr></table></figure>
<p>UIBlurEffectStyle </p>
<ul>
<li><p>UIBlurEffectStyleExtraLight,//额外亮度，（高亮风格）</p>
</li>
<li><p>UIBlurEffectStyleLight,//亮风格</p>
</li>
<li><p>UIBlurEffectStyleDark//暗风格</p>
</li>
</ul>
<blockquote>
<p>UIBlurEffect 不能调节模糊半径</p>
</blockquote>
<p>如果要调整模糊半径</p>
<p>可以对图片进行高斯模糊</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">-(<span class="built_in">UIImage</span> *)convertToBlurImage:(<span class="built_in">UIImage</span> *)image&#123;</div><div class="line">    <span class="built_in">CIFilter</span> *gaussianBlurFilter = [<span class="built_in">CIFilter</span> filterWithName:<span class="string">@"CIGaussianBlur"</span>];</div><div class="line">    [gaussianBlurFilter setDefaults];</div><div class="line">    <span class="built_in">CIImage</span> *inputImage = [<span class="built_in">CIImage</span> imageWithCGImage:[image <span class="built_in">CGImage</span>]];</div><div class="line">    [gaussianBlurFilter setValue:inputImage forKey:kCIInputImageKey];</div><div class="line">    [gaussianBlurFilter setValue:@<span class="number">5</span> forKey:kCIInputRadiusKey];</div><div class="line">    <span class="built_in">CIImage</span> *outputImage = [gaussianBlurFilter outputImage];</div><div class="line">    <span class="built_in">CIContext</span> *context   = [<span class="built_in">CIContext</span> contextWithOptions:<span class="literal">nil</span>];</div><div class="line">    <span class="built_in">CGImageRef</span> cgimg     = [context createCGImage:outputImage fromRect:[inputImage extent]];  <span class="comment">// note, use input image extent if you want it the same size, the output image extent is larger</span></div><div class="line">    <span class="built_in">UIImage</span> *convertedImage = [<span class="built_in">UIImage</span> imageWithCGImage:cgimg];</div><div class="line">    <span class="keyword">return</span> convertedImage;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>核心代码是<code>[gaussianBlurFilter setValue:@5 forKey:kCIInputRadiusKey]</code>;</p>
<p>但是我测试100也没啥问题 没有测试出最大值</p>
<p>以上是几种高斯模糊的相关代码 </p>
<p>全文完</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/360cb7db556ac95a3d8e2028e7027cdcf1378d51/20180723Too
    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="macOS开发" scheme="https://www.sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Linux 终端 Bash 常用快捷键介绍及经验</title>
    <link href="https://www.sunyazhou.com/2018/07/18/20180718Linux-Bash/"/>
    <id>https://www.sunyazhou.com/2018/07/18/20180718Linux-Bash/</id>
    <published>2018-07-18T01:29:39.000Z</published>
    <updated>2018-08-04T06:34:54.028Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/fb11c210541063b65b788d918ab299cea1f4373f/20180718Linux-Bash/2013-05-20-linux_logo-on-centos5.png" alt=""></p>
<h1 id="bash及其特性"><a href="#bash及其特性" class="headerlink" title="bash及其特性"></a>bash及其特性</h1><ul>
<li><a href="http://cn.linux.vbird.org/linux_basic/0320bash.php" target="_blank" rel="external">bash</a>实质上是一个可执行程序，一个用户的工作环境。</li>
<li>在每一个shell下可以再打开一个shell，新打开的shell可以称为子shell，每一个shell之间是相互独立的。</li>
<li>可以使用pstree命令查看当前shell下的子shell个数。</li>
</ul>
<h3 id="1-最重要的自动补全"><a href="#1-最重要的自动补全" class="headerlink" title="1. 最重要的自动补全"></a>1. 最重要的自动补全</h3><table>
<thead>
<tr>
<th>命令</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>Tab</td>
<td>自动补全</td>
</tr>
</tbody>
</table>
<h3 id="2-编辑跳转"><a href="#2-编辑跳转" class="headerlink" title="2. 编辑跳转"></a>2. 编辑跳转</h3><table>
<thead>
<tr>
<th>命令</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>Ctrl + A</td>
<td>跳转到当前行首</td>
</tr>
<tr>
<td>Ctrl + E</td>
<td>跳转到当前行末</td>
</tr>
<tr>
<td>Alt + F</td>
<td>将光标在当前行上向后移动一个单词</td>
</tr>
<tr>
<td>Alt + B</td>
<td>将光标在当前行上向前移动一个单词</td>
</tr>
<tr>
<td>Ctrl + W</td>
<td>删除当前光标前的一个单词</td>
</tr>
<tr>
<td>Ctrl + K</td>
<td>删除当前光标后的内容</td>
</tr>
<tr>
<td>Ctrl + U</td>
<td>清除整行</td>
</tr>
<tr>
<td>Ctrl + L</td>
<td>清屏，类似于 clear 命令</td>
</tr>
<tr>
<td>Ctrl + H</td>
<td>退格，类似于 backspace 键</td>
</tr>
<tr>
<td>Ctrl + T</td>
<td>将当前光标前的两个字符互换位置</td>
</tr>
<tr>
<td>Esc + T</td>
<td>将当前光标前的两个单词互换位置</td>
</tr>
</tbody>
</table>
<p><code>Ctrl + W</code> 和 <code>Ctrl + U</code> 相当常用。拼写错是很常见的事。</p>
<p><code>Ctrl + L</code> 也不用多说。</p>
<h3 id="3-进程相关"><a href="#3-进程相关" class="headerlink" title="3. 进程相关"></a>3. 进程相关</h3><table>
<thead>
<tr>
<th>命令</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>Ctrl + C</td>
<td>终止当前进程</td>
</tr>
<tr>
<td>Ctrl + Z</td>
<td>将当前进程在后台挂起</td>
</tr>
<tr>
<td>Ctrl + D</td>
<td>退出当前 Shell，类似于 exit 命令</td>
</tr>
</tbody>
</table>
<p><code>Ctrl + C</code> 是向当前运行的进程发送 SIGINT 信号，终止进程。</p>
<blockquote>
<p>SIGINT - This signal is the same as pressing ctrl-c. On some systems, “delete” + “break” sends the same signal to the process. The process is interrupted and stopped. However, the process can ignore this signal.</p>
</blockquote>
<p><code>Ctrl + Z</code> 并不结束进程，而是挂起在后台。之后仍然可以通过 <code>fg</code>命令恢复。对应的信号是 SIGTSTP。</p>
<h3 id="3-搜索使用过的命令（特别推荐）"><a href="#3-搜索使用过的命令（特别推荐）" class="headerlink" title="3. 搜索使用过的命令（特别推荐）"></a>3. 搜索使用过的命令（特别推荐）</h3><table>
<thead>
<tr>
<th>命令</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>Ctrl + R</td>
<td>用于搜索之前使用过的命令</td>
</tr>
</tbody>
</table>
<p>我经常用 <code>history</code> 查看历史命令，其实已经有现成的快捷键可以用。</p>
<p>按下 <code>Ctrl + R</code> 之后，输入查询的关键字，如果不符合，可以继续按 <code>Ctrl + R</code> 进行遍历。</p>
<p>这个命令其实也是通过 <code>history</code> 记录来查询的。如果不喜欢这种方式，可以直接 <code>history | grep xxx</code> 也是不错的。</p>
<p><a href="https://www.linuxidc.com/Linux/2017-11/148262.htm" target="_blank" rel="external">参考 Linux公社</a></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这些命令对工作效率提升很显著,需要反复学习牢记,文章最后推荐大家关注<code>Linux公社</code>这个具有历史人文精神的Linux社区, 它让我学到不少东西.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/fb11c210541063b65b788d918ab299cea1f4373f/20180718Lin
    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="macOS开发" scheme="https://www.sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Objective-C中使用正则去除非数字字母汉字</title>
    <link href="https://www.sunyazhou.com/2018/06/25/20180625FilterString/"/>
    <id>https://www.sunyazhou.com/2018/06/25/20180625FilterString/</id>
    <published>2018-06-25T10:35:17.000Z</published>
    <updated>2018-06-26T13:48:16.801Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今天碰到个需求,PM要求输入框中取出非字母数字汉字的输入.</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/0c00202bcba36a3821f799a16e006f467c33a9fc/20180625FilterString/RegularExpressDemo.gif" alt=""></p>
<p>带着这个疑问开始今天的文章</p>
<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>创建个demo 代码如下</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> <span class="built_in">UITextField</span> *input;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> <span class="built_in">UILabel</span> *label;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    <span class="keyword">self</span>.input.delegate = <span class="keyword">self</span>;</div><div class="line">    [<span class="keyword">self</span>.input addTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(textChange:) forControlEvents:<span class="built_in">UIControlEventEditingChanged</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//当文本内容改变时调用</span></div><div class="line">- (<span class="keyword">void</span>)textChange:(<span class="built_in">UITextField</span> *)textField</div><div class="line">&#123;</div><div class="line">    <span class="comment">//这里调用相关方法过滤字符串显示出来</span></div><div class="line">    <span class="keyword">self</span>.label.text = <span class="comment">//...;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在网上找了一圈大多都是使用谓词去判断时候包含,没有几个给出相应的处理字符串.</p>
<p>我找到了3种 处理字符串的方式</p>
<ul>
<li>方案1 使用谓词过滤</li>
<li>方案2 使用正则过滤增加寻找的字符串长度</li>
<li>方案3 使用正则精简过滤字符串</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">方案<span class="number">1</span></div><div class="line">- (<span class="built_in">NSString</span> *)filterString1:(<span class="built_in">NSString</span> *)str &#123;</div><div class="line">    <span class="built_in">NSString</span> *regex = <span class="string">@"^[a-zA-Z0-9\u4e00-\u9fa5]+"</span>;</div><div class="line">    <span class="built_in">NSPredicate</span> *pred = [<span class="built_in">NSPredicate</span> predicateWithFormat:<span class="string">@"SELF MATCHES %@"</span>, regex];</div><div class="line">    <span class="built_in">NSMutableString</span> * retStr = [<span class="built_in">NSMutableString</span> string];</div><div class="line">    <span class="keyword">for</span>(<span class="built_in">NSInteger</span> i=<span class="number">0</span>; i&lt; [str length];i++)&#123;</div><div class="line">        <span class="built_in">NSRange</span> range = <span class="built_in">NSMakeRange</span>(i, <span class="number">1</span>);</div><div class="line">        <span class="built_in">NSString</span> *character = [str substringWithRange:range];</div><div class="line">        <span class="keyword">if</span>([pred evaluateWithObject:character])</div><div class="line">        &#123;</div><div class="line">            [retStr appendString:character];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> retStr;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>这种方式虽然能实现 但是代码略显冗长,不过能就解决问题</p>
</blockquote>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//方案2</span></div><div class="line">- (<span class="built_in">NSString</span> *)filterString2:(<span class="built_in">NSString</span> *)str &#123;</div><div class="line">    <span class="built_in">NSString</span> *regex = <span class="string">@"[^a-zA-Z0-9\u4e00-\u9fa5]"</span>;</div><div class="line">    <span class="built_in">NSMutableString</span> *mstr = [<span class="built_in">NSMutableString</span> stringWithFormat:<span class="string">@"%@"</span>, str];</div><div class="line">    <span class="built_in">NSUInteger</span> i = [mstr replaceOccurrencesOfString:regex withString:<span class="string">@""</span> options:<span class="built_in">NSRegularExpressionSearch</span> range:<span class="built_in">NSMakeRange</span>(<span class="number">0</span>, mstr.length)];</div><div class="line">    <span class="keyword">return</span> [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@-长度:%zd"</span>,mstr,i];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>同样的方法使用正则<code>replaceOccurrencesOfString:withString:options:range:</code>方法替换字符串</p>
</blockquote>
<p>下面我们精简到2行代码</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//方案3</span></div><div class="line">- (<span class="built_in">NSString</span> *)filterString3:(<span class="built_in">NSString</span> *)str &#123;</div><div class="line">    <span class="built_in">NSString</span> *regex = <span class="string">@"[^a-zA-Z0-9\u4e00-\u9fa5]"</span>;</div><div class="line">    <span class="keyword">return</span> [str stringByReplacingOccurrencesOfString:regex withString:<span class="string">@""</span> options:<span class="built_in">NSRegularExpressionSearch</span> range:<span class="built_in">NSMakeRange</span>(<span class="number">0</span>, str.length)];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>最终方案3 得到的预期结果还是不错,推荐使用</p>
</blockquote>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>有些问题都是在工作中遇到,希望记录下来一起分享和学习.</p>
<p>全完完</p>
<p><a href="https://github.com/sunyazhou13/RegularExpressDemo" target="_blank" rel="external">Demo在这里</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;今天碰到个需求,PM要求输入框中取出非字母数字汉字的输入.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubuserc
    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="macOS开发" scheme="https://www.sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>使用NSAttributeString实现不同颜色大小显示</title>
    <link href="https://www.sunyazhou.com/2018/06/15/20180615NSAttributeString/"/>
    <id>https://www.sunyazhou.com/2018/06/15/20180615NSAttributeString/</id>
    <published>2018-06-15T02:10:58.000Z</published>
    <updated>2018-06-17T08:28:16.706Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20180615NSAttributeString/richtext.png" alt=""></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近开发需求遇到一个比较简单但又棘手的问题.先看需求</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/b20f325385e063624b16aa726df0077209327fb0/20180615NSAttributeString/NSAttributeString1.png" alt=""></p>
<p>一个<code>UILabel</code>显示不同大小颜色的字符串,当然我们首先的想到属性字符串,但是注意: 我们这里要处理国际化完成的字符串也就是说：</p>
<p>必须在国际化完成以后才能追加我们的逻辑,而不是一上来就加属性字符串</p>
<p>比如:  <code>2分14秒</code> or <code>2min14secs</code></p>
<p>也就是给我们的是一个  <code>&quot;2分14秒&quot;</code>字符串 我们需要匹配range来修改或者替换. 带着这个疑问开始今天的文章?</p>
<h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><p>孔圣贤有云:”举一隅不以三隅反，则不复也。”  </p>
<blockquote>
<p>出自《论语·第七章·述而篇》</p>
</blockquote>
<p>为了不愧对圣贤对我的期待我把 这个问题定位升级成 4个等级</p>
<ul>
<li>Level 1  最优解,时间复杂度最低,效率最高</li>
<li>Level 2  非最优解,时间复杂度最低,效率高</li>
<li>Level 3  都一般</li>
<li>Level 4  简单粗暴</li>
</ul>
<p>我想到了以下至少两种方法</p>
<ol>
<li>通过计算出来的时间  eg: <code>分</code> <code>秒</code>   字符串 range去国际化处理完的字符串去匹配修改</li>
<li>用正则匹配数字</li>
<li>用谓词匹配数字</li>
<li>level4太业余了不敢想向一个工作好几年的开发者还写出这么打脸的代码</li>
</ol>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>在工程中拖拽了一个label</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> <span class="built_in">UILabel</span> *label;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line"> </div><div class="line"> 	<span class="comment">//调用</span></div><div class="line">    <span class="built_in">NSAttributedString</span> *resultTime = [<span class="keyword">self</span> formattedCurrentTime:<span class="number">133</span>];</div><div class="line">    <span class="keyword">self</span>.label.attributedText = resultTime;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="方案1-字符串range匹配"><a href="#方案1-字符串range匹配" class="headerlink" title="方案1: 字符串range匹配"></a>方案1: 字符串range匹配</h3><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> 返回当前时间格式</div><div class="line"> @return 返回组装好的字符串</div><div class="line"> */</div><div class="line">- (<span class="built_in">NSAttributedString</span> *)formattedCurrentTime:(<span class="built_in">NSTimeInterval</span>)timeInterval &#123;</div><div class="line">    </div><div class="line">    <span class="built_in">NSUInteger</span> time = (<span class="built_in">NSUInteger</span>)timeInterval;</div><div class="line">    <span class="built_in">NSInteger</span> minutes = (time / <span class="number">60</span>) % <span class="number">60</span>;</div><div class="line">    <span class="built_in">NSInteger</span> seconds = time % <span class="number">60</span>;</div><div class="line">    <span class="built_in">NSString</span> *minStr = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@" %zd "</span>,minutes];</div><div class="line">    <span class="built_in">NSString</span> *secStr = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@" %zd "</span>,seconds];</div><div class="line">    <span class="comment">//假设这就是我们国际化后的字符串</span></div><div class="line">    <span class="built_in">NSString</span> *localizedFormatString = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@分%@秒"</span>,minStr,secStr];</div><div class="line">    <span class="built_in">NSMutableAttributedString</span> *attributeStr = [[<span class="built_in">NSMutableAttributedString</span> alloc] initWithString:localizedFormatString];</div><div class="line">    <span class="built_in">NSRange</span> minRange, secRange;</div><div class="line">    <span class="keyword">if</span> (@available(iOS <span class="number">9.0</span>, *)) &#123;</div><div class="line">        minRange = [localizedFormatString localizedStandardRangeOfString:minStr];</div><div class="line">        secRange = [localizedFormatString localizedStandardRangeOfString:secStr];</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        minRange = [localizedFormatString rangeOfString:minStr];</div><div class="line">        secRange = [localizedFormatString rangeOfString:secStr];</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">NSDictionary</span> *timeAttrs = @&#123; <span class="built_in">NSForegroundColorAttributeName</span> : [<span class="built_in">UIColor</span> redColor],</div><div class="line">                                 <span class="built_in">NSFontAttributeName</span> : [<span class="built_in">UIFont</span> systemFontOfSize:<span class="number">40.0</span>f]&#125;;</div><div class="line">    [attributeStr addAttributes:timeAttrs range:minRange];</div><div class="line">    [attributeStr addAttributes:timeAttrs range:secRange];    </div><div class="line">    <span class="keyword">return</span> [[<span class="built_in">NSAttributedString</span> alloc] initWithAttributedString:attributeStr];;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看下显示结果</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/18f973e4bf79ada776e8bbe9fb845a66375100d1/20180615NSAttributeString/first_arrtributestring.png" alt=""></p>
<blockquote>
<p>是不是看上去很好</p>
</blockquote>
<p>但我认为这并不完美,这种搞法虽然简单直接,但是过于依赖<code>minStr</code>和<code>secStr</code>的原始range,基于iOS9之后提供的API计算<code>range</code></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="keyword">if</span> (@available(iOS <span class="number">9.0</span>, *)) &#123;</div><div class="line">    minRange = [localizedFormatString localizedStandardRangeOfString:minStr];</div><div class="line">    secRange = [localizedFormatString localizedStandardRangeOfString:secStr];</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    minRange = [localizedFormatString rangeOfString:minStr];</div><div class="line">    secRange = [localizedFormatString rangeOfString:secStr];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>注意:<em>API平台区分</em></p>
</blockquote>
<p>但是这么实现有个Bug 当遇到同样字符串的时候就会匹配错位, 如图</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/ce8515d36cdf420cbe900bc3e4e73c3cfbda7ef6/20180615NSAttributeString/%08NSAttributeString_bug.png" alt=""></p>
<p>错误的原因显然大家都了解</p>
<p>字符串 “0” 的range相同了,但就解决这个问题而言,简单判断一下range然后截取字符串向后跳跃length继续截取获取能实现,但这显然很啰嗦,万一有一天 你遇到的是 “<code>0小时0分12秒</code>“这种字符串那该如何写呢？</p>
<p>是不是要递归的遍历一遍然后挨个取<code>Range</code> 做属性修改?</p>
<p>这样的结果显然不但代码啰嗦 实现起来成本还是比较高的,对代码阅读性都有很大影响(写得好的代码除外哈). </p>
<h5 id="那怎么不啰嗦呢"><a href="#那怎么不啰嗦呢" class="headerlink" title="那怎么不啰嗦呢?"></a>那怎么不啰嗦呢?</h5><p>有一种搞法就是 用两个不同的字符占位.然后 国际化完成之后取Range,再然后替换文字,搞法虽然low点,但是时间复杂度降低了不少,还是可以考虑的.代码我就不写了 我怕小伙伴review代码的时候会虐我.继续往下看</p>
<p><strong>评级: Level 2</strong></p>
<p>那如何不依赖range解决这种问题呢？</p>
<h3 id="方案2-正则匹配"><a href="#方案2-正则匹配" class="headerlink" title="方案2: 正则匹配"></a>方案2: 正则匹配</h3><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> 返回当前时间格式</div><div class="line"> @return 返回组装好的字符串</div><div class="line"> */</div><div class="line">- (<span class="built_in">NSAttributedString</span> *)formattedCurrentTime:(<span class="built_in">NSTimeInterval</span>)timeInterval &#123;</div><div class="line">    </div><div class="line">    <span class="built_in">NSUInteger</span> time = (<span class="built_in">NSUInteger</span>)timeInterval;</div><div class="line">    <span class="built_in">NSInteger</span> minutes = (time / <span class="number">60</span>) % <span class="number">60</span>;</div><div class="line">    <span class="built_in">NSInteger</span> seconds = time % <span class="number">60</span>;</div><div class="line">    <span class="built_in">NSString</span> *minStr = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@" %zd "</span>,minutes];</div><div class="line">    <span class="built_in">NSString</span> *secStr = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@" %zd "</span>,seconds];</div><div class="line">    <span class="comment">//假设这就是我们国际化后的字符串</span></div><div class="line">    <span class="built_in">NSString</span> *localizedFormatString = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@分%@秒"</span>,minStr,secStr];</div><div class="line">    <span class="built_in">NSMutableAttributedString</span> *attributeStr = [[<span class="built_in">NSMutableAttributedString</span> alloc] initWithString:localizedFormatString];</div><div class="line">    <span class="built_in">NSDictionary</span> *timeAttrs = @&#123; <span class="built_in">NSForegroundColorAttributeName</span> : [<span class="built_in">UIColor</span> redColor],</div><div class="line">                                 <span class="built_in">NSFontAttributeName</span> : [<span class="built_in">UIFont</span> systemFontOfSize:<span class="number">40.0</span>f]&#125;;    </div><div class="line">    <span class="comment">/** 方案2 **/</span></div><div class="line">    <span class="built_in">NSError</span> *error = <span class="literal">nil</span>;</div><div class="line">    <span class="built_in">NSRegularExpression</span> *reg = [<span class="built_in">NSRegularExpression</span> regularExpressionWithPattern:<span class="string">@"[0-9]+"</span> options:<span class="built_in">NSRegularExpressionCaseInsensitive</span> error:&amp;error];</div><div class="line">    <span class="keyword">if</span> (error == <span class="literal">nil</span>) &#123;</div><div class="line">        <span class="built_in">NSArray</span> *matches = [reg matchesInString:localizedFormatString options:<span class="built_in">NSMatchingReportCompletion</span> range:<span class="built_in">NSMakeRange</span>(<span class="number">0</span>, localizedFormatString.length)];</div><div class="line">        <span class="keyword">for</span> (<span class="built_in">NSTextCheckingResult</span> *match <span class="keyword">in</span> matches) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="built_in">NSUInteger</span> i = <span class="number">0</span>; i &lt; match.numberOfRanges; i++) &#123;</div><div class="line">                <span class="built_in">NSRange</span> range = [match rangeAtIndex:i];</div><div class="line">                <span class="keyword">if</span> (range.location != <span class="built_in">NSNotFound</span>) &#123;</div><div class="line">                    [attributeStr addAttributes:timeAttrs range:range];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> [[<span class="built_in">NSAttributedString</span> alloc] initWithAttributedString:attributeStr];;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看下显示结果</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/85f7a4f8f09e10c1603968555d86a0128c98696f/20180615NSAttributeString/second_attributestring.png" alt=""></p>
<p>完美实现</p>
<blockquote>
<p>这种方案缺点就是,时间复杂度高了一些,需要每次正则遍历<br>有点是扩展性好一点,万一有一天PM又提了需求要做成 <code>A1</code> <code>B2</code> <code>C3</code> <code>XXX#话题</code>这种，那一定会出坑</p>
</blockquote>
<p>但我第一次这么实现被小伙伴嘲笑很业余.确实很业余,但它能避免方案1中的bug.而且相当精确.</p>
<p><strong>评级: Level 2</strong></p>
<h3 id="方案3-谓词匹配"><a href="#方案3-谓词匹配" class="headerlink" title="方案3: 谓词匹配"></a>方案3: 谓词匹配</h3><p>这种搞法我没尝试,估计会比 方案1和方案2都快一些和简单直接一些,时间太紧张算了,期待评论轻喷吧！</p>
<h3 id="方案4-简单粗暴"><a href="#方案4-简单粗暴" class="headerlink" title="方案4: 简单粗暴"></a>方案4: 简单粗暴</h3><p>就搞 4个label. 我都想象到了被实习生嘲讽+打脸的搞法发生在一个工作好几年开发者身上是多么惨痛的画面. 放弃这种low的搞法</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>最终解决问题的方案还是方案2:正则匹配比较靠谱,而且一劳永逸</p>
<p>本篇主要蛋疼的问题是 国际化后的字符串返回结果后,对返回的结果进行加工处理.</p>
<p>没有做到Level 1级的做法很是遗憾,愧对圣贤. 希望小伙伴多提提建议.</p>
<p><a href="https://github.com/sunyazhou13/NSAttributeStringDemo" target="_blank" rel="external">Demo</a>在这里找到</p>
<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>格式化时间的代码</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> 返回时间格式 HH:mm:ss</div><div class="line"> @return 返回组装好的字符串</div><div class="line"> */</div><div class="line">- (<span class="built_in">NSString</span> *)formattedCurrentTime &#123;</div><div class="line">    <span class="built_in">NSUInteger</span> time = (<span class="built_in">NSUInteger</span>)<span class="keyword">self</span>.recorder.currentTime;</div><div class="line">    <span class="built_in">NSInteger</span> hours = (time / <span class="number">3600</span>);</div><div class="line">    <span class="built_in">NSInteger</span> minutes = (time / <span class="number">60</span>) % <span class="number">60</span>;</div><div class="line">    <span class="built_in">NSInteger</span> seconds = time % <span class="number">60</span>;</div><div class="line">    </div><div class="line">    <span class="built_in">NSString</span> *format = <span class="string">@"%02i:%02i:%02i"</span>;</div><div class="line">    <span class="keyword">return</span> [<span class="built_in">NSString</span> stringWithFormat:format, hours, minutes, seconds];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>全文完</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20180615NSAttributeString/richtext.png&quot; alt=&quot;
    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="macOS开发" scheme="https://www.sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Swift4.2中的随机数</title>
    <link href="https://www.sunyazhou.com/2018/06/08/20180608Swift-Random2/"/>
    <id>https://www.sunyazhou.com/2018/06/08/20180608Swift-Random2/</id>
    <published>2018-06-08T01:18:03.000Z</published>
    <updated>2018-06-17T08:28:16.706Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/dac725ebc1b0f7a6a6c99265f76153b5bfb6d09d/20180608Swift-Random2/whatisnewinswift.png" alt=""></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在上一篇文章发布不久WWDC2018就拉开了序幕,让我觉得有一点比较蛋疼的(a bit of pain) 是swift4.2中增加了系统的随机数支持.所以不得不完善的好上一篇文章的缺漏和新技术的研究学习.特此新发一篇新的随机数文章以彰其咎.</p>
<h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><ul>
<li>Xcode10或者更高版本 </li>
<li>Swift4.2</li>
<li>使用Xcode中的Playground</li>
</ul>
<h2 id="生成随机数"><a href="#生成随机数" class="headerlink" title="生成随机数"></a>生成随机数</h2><p>在上一篇中我们大部分时间都在围绕<a href="https://man.openbsd.org/arc4random.3" target="_blank" rel="external">arcrandom()</a>函数来介绍随机数.当然也有它的一些变种.eg：arc4random_uniform(),rand(),random().但无论如何这些函数多数都是系统级函数。</p>
<p>在swift4.2中 所有的 数字类型(就是普通数据类型中代表数字的)都有一个静态方法<code>random(in:)</code>,这个方法将接收一个范围(Range)或者开闭范围,返回一个无序的随机数(a uniform distribution). 这些随机函数将会包含在swift的标准库中,如果跨平台的话标准库函数都是一致的,不像上面介绍的系统随机函数.</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="type">Int</span>.random(<span class="keyword">in</span>: <span class="number">1</span>...<span class="number">1000</span>) <span class="comment">//→ 580</span></div><div class="line"><span class="type">Double</span>.random(<span class="keyword">in</span>: <span class="number">0</span>..&lt;<span class="number">1</span>) <span class="comment">//→ 0.3211009027224093</span></div><div class="line"><span class="type">UInt32</span>.random(<span class="keyword">in</span>: <span class="number">0xD800</span>...<span class="number">0xDFFF</span>) <span class="comment">//→ 56324</span></div></pre></td></tr></table></figure>
<h3 id="模偏差-Modulo-bias"><a href="#模偏差-Modulo-bias" class="headerlink" title="模偏差(Modulo bias)"></a>模偏差(Modulo bias)</h3><p>以下代码演示了我们常用的取模 方式随机</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="comment">// Wrong! ❌</span></div><div class="line"><span class="keyword">let</span> between0And5 = <span class="type">UInt8</span>.random() % <span class="number">6</span></div></pre></td></tr></table></figure>
<p>这种随机数 有可能不够均匀分布,这种非均匀分布的方式就叫<a href="https://www.quora.com/What-is-modulo-bias" target="_blank" rel="external"><code>模偏差</code></a>.</p>
<p>那如何解决这种莫偏差的问题呢?</p>
<p>在swift中就是用我上边介绍的方法.</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="comment">// Correct ✅</span></div><div class="line"><span class="keyword">let</span> between0And5 = <span class="type">UInt8</span>.random(<span class="keyword">in</span>: <span class="number">0</span>..&lt;<span class="number">6</span>) <span class="comment">// → 5</span></div></pre></td></tr></table></figure>
<p>如果我们需要随机一个<code>数字数据类型</code>全范围的随机数的话可以使用 <code>.min ... .max</code>来进行范围随机. 如下代码:</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> between0And255 = <span class="type">UInt8</span>.random(<span class="keyword">in</span>: .<span class="built_in">min</span> ... .<span class="built_in">max</span>) <span class="comment">// → 190</span></div></pre></td></tr></table></figure>
<h3 id="Bool值随机"><a href="#Bool值随机" class="headerlink" title="Bool值随机"></a>Bool值随机</h3><p>虽然这种类型完全可以用 %2 ==0 或者 %2==0 来解决,但是swift还是很负责任的帮我们做到了这一点, 举个<code>抛硬币</code>场景的随机例子:</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">coinToss</span><span class="params">(<span class="built_in">count</span> tossCount: Int)</span></span> -&gt; (heads: <span class="type">Int</span>, tails: <span class="type">Int</span>) &#123;</div><div class="line">    <span class="keyword">var</span> result = (heads: <span class="number">0</span>, tails: <span class="number">0</span>)</div><div class="line">    <span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> <span class="number">0</span>..&lt;tossCount &#123;</div><div class="line">        <span class="keyword">let</span> toss = <span class="type">Bool</span>.random()</div><div class="line">        <span class="keyword">if</span> toss &#123;</div><div class="line">            result.heads += <span class="number">1</span></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            result.tails += <span class="number">1</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> (heads, tails) = coinToss(<span class="built_in">count</span>: <span class="number">100</span>)</div><div class="line"></div><div class="line"><span class="comment">// → (heads 54, tails 46)</span></div></pre></td></tr></table></figure>
<blockquote>
<p>heads → 人头面<br>tails → 背面</p>
</blockquote>
<h3 id="容器类型的元素随机-Random-collection-elements"><a href="#容器类型的元素随机-Random-collection-elements" class="headerlink" title="容器类型的元素随机(Random collection elements)"></a>容器类型的元素随机(Random collection elements)</h3><p>首先大家可以<a href="https://developer.apple.com/documentation/swift/collection" target="_blank" rel="external"><code>Collection</code></a>理解成一个集成<code>NSObject</code>的类实现了容器协议的类型.eg: 数组，字典等等。。。。</p>
<p>这些<code>Collection</code> 类型都有一个<code>randomElement()</code>方法(可以看下上一篇文章末尾介绍的10个字符串的数).这个函数返回一个<code>Optional</code>可选类型.因为<code>Collection</code>可能为空.</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> emptyRange = <span class="number">10</span>..&lt;<span class="number">10</span></div><div class="line">emptyRange.isEmpty <span class="comment">// → true</span></div><div class="line">emptyRange.randomElement() <span class="comment">// → nil</span></div></pre></td></tr></table></figure>
<blockquote>
<p>可以看到元素随机为nil</p>
</blockquote>
<p>我们举个上一节的例子还测试一下</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="string">"0"</span>, <span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>, <span class="string">"4"</span>, <span class="string">"5"</span>, <span class="string">"6"</span>, <span class="string">"7"</span>, <span class="string">"8"</span>, <span class="string">"9"</span>]</div><div class="line"><span class="keyword">let</span> randomElement = arr.randomElement()!  <span class="comment">// → "8"</span></div></pre></td></tr></table></figure>
<p>举个字符串emotion表情的demo</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> emotions = <span class="string">"😀😂😊😍🤪😎😩😭😡"</span></div><div class="line"><span class="keyword">let</span> randomEmotion = emotions.randomElement()! <span class="comment">// → "😡"</span></div></pre></td></tr></table></figure>
<h3 id="Shuffling-集合随机排列-洗牌算法"><a href="#Shuffling-集合随机排列-洗牌算法" class="headerlink" title="Shuffling 集合随机排列(洗牌算法)"></a>Shuffling 集合随机排列(洗牌算法)</h3><p>使用<a href="https://developer.apple.com/documentation/swift/sequence/2996816-shuffled" target="_blank" rel="external">shuffled()</a>方法去随机排列一个序列或容易.</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><div class="line">(<span class="number">1</span>...<span class="number">20</span>).shuffled() </div><div class="line"><span class="comment">// → numbers is now [16, 9, 2, 18, 5, 13, 8, 11, 17, 3, 6, 1, 14, 7, 10, 15, 20, 19, 12, 4]</span></div></pre></td></tr></table></figure>
<p>以上实现了一个类似洗牌算法的排序 1~20 之间的数 注意：左右都是闭区间(闭区间包含本身) 因为这里用的是<code>...</code>,不理解大家可以查找一下swift相关区间标识的知识.</p>
<h2 id="随机数生成的协议（Random-number-generators）"><a href="#随机数生成的协议（Random-number-generators）" class="headerlink" title="随机数生成的协议（Random number generators）"></a>随机数生成的协议（Random number generators）</h2><p><code>Random number generators</code>简称<code>RNG</code>,以下简称<code>RNG</code>.</p>
<h3 id="默认的RNG"><a href="#默认的RNG" class="headerlink" title="默认的RNG"></a>默认的RNG</h3><p>以上介绍的使用方法都是被定义在swift的标准库中的方法. 叫<a href="https://forums.swift.org/t/se-0202-amendment-proposal-rename-random-to-defaultrandomnumbergenerator/12942" target="_blank" rel="external">Random.default</a></p>
<p><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0202-random-unification.md" target="_blank" rel="external">SE-0202</a> 讨论了这种默认随机的一些问题</p>
<p>我在这里简要一下</p>
<blockquote>
<p>The aspiration is that this RNG should be cryptographically secure, provide reasonable performance, and should be thread safe. If a vendor is unable to provide these goals, they should document it clearly. … if an RNG on a platform has the possibility of failing, then it must fail [i.e. trap] when it is unable to complete its operation.<br>大概意思就是 高性能,高安全性,线程安全…. </p>
</blockquote>
<h3 id="自定义RNGs"><a href="#自定义RNGs" class="headerlink" title="自定义RNGs"></a>自定义RNGs</h3><p>对于大多数简单的用例，缺省的RNG应该是正确的选择。但是，如果您的代码对随机数生成器有特殊的要求，比如特定的算法或用可重复的种子初始化RNG的能力，那么您就可以通过采用随机数生成器协议来实现自己的RNG。协议只有一个要求:<code>next()</code>方法，该方法产生<code>8个新的字节随机数</code>:</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">protocol</span> <span class="title">RandomNumberGenerator</span> </span>&#123;</div><div class="line">    <span class="comment">/// Returns a value from a uniform, independent</span></div><div class="line">    <span class="comment">/// distribution of binary data.</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">next</span><span class="params">()</span></span> -&gt; <span class="type">UInt64</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>注意:协议需要统一的分布。其思想是，需要具有非均匀分布的随机值的用户可以在第二步将期望的分布应用到均匀分布随机性序列里。<br>就是如果想按照自己的方法随机需要吧next()函数写上,写好泛型函数规则就行了.</p>
</blockquote>
<h3 id="使用自定义随机RNG"><a href="#使用自定义随机RNG" class="headerlink" title="使用自定义随机RNG"></a>使用自定义随机RNG</h3><p>所有用于生成随机值的标准库api都提供了允许用户传入自定义随机数生成器的方法重载。例如，Int类型有以下两种方法:</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Int</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">random</span><span class="params">(<span class="keyword">in</span> range: Range&lt;Int&gt;)</span></span> -&gt; <span class="type">Int</span> &#123; ... &#125;</div><div class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">random</span>&lt;T&gt;<span class="params">(<span class="keyword">in</span> range: Range&lt;Int&gt;,</span></span></div><div class="line">        using generator: <span class="keyword">inout</span> T) -&gt; <span class="type">Int</span></div><div class="line">        <span class="keyword">where</span> <span class="type">T</span>: <span class="type">RandomNumberGenerator</span> &#123; ... &#125;</div><div class="line">    <span class="comment">// The overloads that take a ClosedRange are not shown</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个<code>generator</code>参数需要总是传入<a href="https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID545" target="_blank" rel="external"><code>inout</code></a>,因为在产生新的随机性时，RNGs通常会改变它们的状态。</p>
<p>下面看下我们怎么调用自定义随机, 我们需要创建一个可变的并且满足inout的要求的方法.</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> mersenneTwister = <span class="type">MersenneTwisterRNG</span>(...) <span class="comment">// assume this exists</span></div><div class="line"><span class="type">Int</span>.random(<span class="keyword">in</span>: <span class="number">10</span>..&lt;<span class="number">20</span>, using: &amp;mersenneTwister)</div></pre></td></tr></table></figure>
<h3 id="在自有类型中生成随机值"><a href="#在自有类型中生成随机值" class="headerlink" title="在自有类型中生成随机值"></a>在自有类型中生成随机值</h3><p>通过上面我们了解到</p>
<p>自定义随机协议需要满足两个标准库模式的步骤:</p>
<ul>
<li>提供静态随机方法<code>random() -&gt; Self</code> 这个方法使用默认的RNG,如果我们规范随机范围的时候这个函数能补充额外参数.以便于我们规范随机的range.  </li>
<li>提供第二个方法<code>random&lt;T: RandomNumberGenerator&gt;(using generator: inout T) -&gt; Self</code>这个是生成默认随机数的核心方法.</li>
</ul>
<p>举个扑克游戏中的枚举例子, 这里面我们可以充分利用<a href="https://github.com/apple/swift-evolution/blob/master/proposals/0194-derived-collection-of-enum-cases.md" target="_blank" rel="external"><code>Swift4.2</code></a>中的<a href="https://developer.apple.com/documentation/swift/caseiterable" target="_blank" rel="external">allCase</a>属性.</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Suit</span>: <span class="title">String</span>, <span class="title">CaseIterable</span> </span>&#123;</div><div class="line">    <span class="keyword">case</span> diamonds = <span class="string">"♦"</span></div><div class="line">    <span class="keyword">case</span> clubs = <span class="string">"♣"</span></div><div class="line">    <span class="keyword">case</span> hearts = <span class="string">"♥"</span></div><div class="line">    <span class="keyword">case</span> spades = <span class="string">"♠"</span></div><div class="line">    </div><div class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">random</span><span class="params">()</span></span> -&gt; <span class="type">Suit</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="type">Suit</span>.random(using: &amp;<span class="type">Random</span>.<span class="keyword">default</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">random</span>&lt;T: RandomNumberGenerator&gt;</span></div><div class="line">        <span class="params">(using generator: <span class="keyword">inout</span> T)</span> -&gt; <span class="type">Suit</span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">// Force-unwrap can't fail as long as the</span></div><div class="line">        <span class="comment">// enum has at least one case.</span></div><div class="line">        <span class="keyword">return</span> allCases.randomElement(using: &amp;generator)!</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> randomSuit = <span class="type">Suit</span>.random() <span class="comment">// → clubs</span></div><div class="line">randomSuit.rawValue <span class="comment">// → "♠"</span></div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本篇补充了新版Swift4.2中对标准库中的随机函数支持,也介绍了洗牌函数默认随机均匀排列,希望小伙伴们看完有所收获,有问题还请多多指教</p>
<p>全文完</p>
<p><a href="https://oleb.net/blog/2018/06/random-numbers-in-swift/" target="_blank" rel="external">参考</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/dac725ebc1b0f7a6a6c99265f76153b5bfb6d09d/20180608Swi
    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="macOS开发" scheme="https://www.sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
</feed>
