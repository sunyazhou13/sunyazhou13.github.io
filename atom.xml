<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>東引甌越</title>
  <subtitle>不断学习, 与时俱进. - 始于2017</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.sunyazhou.com/"/>
  <updated>2019-11-27T14:24:05.022Z</updated>
  <id>https://www.sunyazhou.com/</id>
  
  <author>
    <name>sunyazhou</name>
    <email>sunyazhou13@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用Masonry约束实现简单的高级拖拽视图</title>
    <link href="https://www.sunyazhou.com/2019/09/26/20190926MasonryPanViewDemo/"/>
    <id>https://www.sunyazhou.com/2019/09/26/20190926MasonryPanViewDemo/</id>
    <published>2019-09-26T12:05:20.000Z</published>
    <updated>2019-11-27T14:24:05.022Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/7ba7422a28bf99800889c69175423c274ed649b3/20190926MasonryPanViewDemo/panviewdemo.gif"></p>
<h1 id="前言">前言</h1>
<p>本文具有强烈的个人感情色彩,如有观看不适,请尽快关闭. 本文仅作为个人学习记录使用,也欢迎在许可协议范围内转载或使用,请尊重版权并且保留原文链接,谢谢您的理解合作. 如果您觉得本站对您能有帮助,您可以使用RSS方式订阅本站,这样您将能在第一时间获取本站信息.</p>
<h2 id="背景">背景</h2>
<p>最近开发遇到一个上图的需求,做一个挂件能四处拖动并且上边还时不时的展示一个tips气泡的<code>Label</code>,在尽量使用少的代码来实现这个功能,作为我手一名iOS开发人员必须严格考究这个需求,显然这有点麻烦,一贯懒惰我的实在不想计算哪个边哪个角甚至滑动到哪里的<code>frame</code>,计算frame这既听起来可笑又觉的没什么技术含量. 为了让代码量少并且能满足需求,我选择使用Masonry来实现这个功能</p>
<h2 id="开搞">开搞</h2>
<p>首先我搞起之前我建议大家看下<a href="http://tutuge.me/" target="_blank" rel="external">土土哥</a>的<a href="http://tutuge.me/tags/Masonry/" target="_blank" rel="external">有趣的Autolayout示例1~5Masonry实现文章</a>,本文也是参考土土哥的文章学习写出的,见笑了各位,个人认为土土哥的文章简直就是Masonry自动布局的样板教程,强烈建议入门的小伙伴或者高手经常复写.</p>
<p>下面的图是土土哥实现的demo<br>
<img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/9e8d67bc843f2afc69cad61704396a1378fba6cc/20190926MasonryPanViewDemo/tutugeMasonry1.gif"> <img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/9e8d67bc843f2afc69cad61704396a1378fba6cc/20190926MasonryPanViewDemo/tutugeMasonry2.gif"></p>
<p>但我的问题是怎么保证那个tip的气泡label左右拖拽能辗转腾挪的允许logo图像之间有<code>旷量移动</code></p>
<h2 id="代码实现旷量移动">代码实现旷量移动</h2>
<p>首先我们创建一个demo,很简单VC的demo就行 创建相关绿色背景视图和图像imageView以及tipLabel的气泡视图,具体代码我贴了出来,我就不啰嗦如何创建其它视图了xib拖拽一下就行了.</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"ViewController.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;Masonry/Masonry.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>  ) <span class="keyword">IBOutlet</span> <span class="built_in">UIView</span>        *greenView;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>  ) <span class="keyword">IBOutlet</span> <span class="built_in">UIImageView</span>   *widgetView;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>  ) <span class="keyword">IBOutlet</span> <span class="built_in">UILabel</span>       *bubbleTitleLabel;</div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) MASConstraint *leftConstraint; <span class="comment">//左侧约束变量</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) MASConstraint *topConstraint;  <span class="comment">//顶部约束变量</span></div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>这里可以看到有两个<code>leftConstraint</code>和<code>topConstraint</code>的约束全局变量,这两个就是实现拖拽的时候改变约束的偏移量来实现的.具体代码如下</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="built_in">CGFloat</span> screenWidth = [<span class="built_in">UIScreen</span> mainScreen].bounds.size.width;</div><div class="line"><span class="built_in">CGFloat</span> screenHeight = [<span class="built_in">UIScreen</span> mainScreen].bounds.size.height;</div><div class="line">[<span class="keyword">self</span>.widgetView mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">    <span class="comment">// 设置边界条件约束，保证内容可见，优先级1000</span></div><div class="line">    make.left.greaterThanOrEqualTo(<span class="keyword">self</span>.greenView.mas_left);</div><div class="line">    make.right.lessThanOrEqualTo(<span class="keyword">self</span>.greenView.mas_right);</div><div class="line">    make.top.greaterThanOrEqualTo(<span class="keyword">self</span>.greenView.mas_top);</div><div class="line">    make.bottom.lessThanOrEqualTo(<span class="keyword">self</span>.greenView.mas_bottom);</div><div class="line">    </div><div class="line">    <span class="keyword">self</span>.leftConstraint = make.centerX.equalTo(<span class="keyword">self</span>.greenView.mas_left).with.offset(screenWidth - <span class="number">20</span>).priorityHigh(); <span class="comment">// 优先级要比边界条件低</span></div><div class="line">    <span class="keyword">self</span>.topConstraint = make.centerY.equalTo(<span class="keyword">self</span>.greenView.mas_top).with.offset(screenHeight - <span class="number">100</span>).priorityHigh(); <span class="comment">// 优先级要比边界条件低</span></div><div class="line">    make.width.height.mas_equalTo(@<span class="number">100</span>);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<p>上边的<code>greaterThanOrEqualTo</code>和<code>lessThanOrEqualTo</code>都是限制挂件的可滑动范围,而最后的<code>make.centerX/Y.equalTo</code>是限制挂件的默认位置,我让它默认在右下角,所以通过偏移量移动过去</p>
<blockquote>
<p>注意:这里有个坑就是因为这个东西能四处滑动 所以基本需要锁定<code>left</code>和<code>top</code>,我发现只有通过offset移动才能确定最初位置,如果equalTo直接写成xxxview的bottom或者right是滑动不了的,仔细思考一下masonry就知道为啥了.</p>
</blockquote>
<p>然后添加手势并实现相关滑动事件即可实现滑动</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="built_in">UIPanGestureRecognizer</span> *pan = [[<span class="built_in">UIPanGestureRecognizer</span> alloc] initWithTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(panWithGesture:)];</div><div class="line">[<span class="keyword">self</span>.greenView addGestureRecognizer:pan];</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)panWithGesture:(<span class="built_in">UIPanGestureRecognizer</span> *)pan &#123;</div><div class="line">    <span class="built_in">CGPoint</span> touchPoint = [pan locationInView:<span class="keyword">self</span>.greenView];</div><div class="line">    <span class="keyword">self</span>.leftConstraint.offset = touchPoint.x;</div><div class="line">    <span class="keyword">self</span>.topConstraint.offset = touchPoint.y;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="旷量label的约束">旷量Label的约束</h4>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">[<span class="keyword">self</span>.bubbleTitleLabel mas_remakeConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">	make.height.equalTo(@<span class="number">26</span>);</div><div class="line">	make.bottom.equalTo(<span class="keyword">self</span>.widgetView.mas_top);</div><div class="line">	make.left.greaterThanOrEqualTo(<span class="keyword">self</span>.greenView.mas_left).offset(<span class="number">0</span>);</div><div class="line">	make.right.lessThanOrEqualTo(<span class="keyword">self</span>.greenView.mas_right).offset(<span class="number">0</span>);</div><div class="line">	make.centerX.lessThanOrEqualTo(<span class="keyword">self</span>.widgetView.mas_right).offset(<span class="number">10</span>);</div><div class="line">	make.centerX.greaterThanOrEqualTo(<span class="keyword">self</span>.widgetView.mas_left).offset(<span class="number">-10</span>);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<p>想要实现旷量移动必须增加更多的约束限制</p>
<p>这里就增加了</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">make.centerX.lessThanOrEqualTo(<span class="keyword">self</span>.widgetView.mas_right).offset(<span class="number">10</span>);</div><div class="line">make.centerX.greaterThanOrEqualTo(<span class="keyword">self</span>.widgetView.mas_left).offset(<span class="number">-10</span>);</div></pre></td></tr></table></figure>
<p>这样就实现了 左右超过滑动便宜还依然控制着tip的label左右移动范围.</p>
<h1 id="总结">总结</h1>
<p>经过工作中遇到的问题实例,学习了一些Masonry的技巧,希望和大家分享,demo我已放到下面 喜欢自行下载学习.</p>
<p><a href="https://github.com/sunyazhou13/PanViewDemo" target="_blank" rel="external">demo下载</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/7ba7422a28bf99800889c69175423c274ed649b3/20190926Mas
    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="macOS开发" scheme="https://www.sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>UITraitCollection详解</title>
    <link href="https://www.sunyazhou.com/2019/09/16/20190916UITraitCollection/"/>
    <id>https://www.sunyazhou.com/2019/09/16/20190916UITraitCollection/</id>
    <published>2019-09-16T10:49:05.000Z</published>
    <updated>2019-11-27T14:24:05.021Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/47b603f535020f06f999ad34f5070646fdfd3562/20190916UITraitCollection/UITraitCollection1.png"></p>
<h1 id="前言">前言</h1>
<p>本文具有强烈的个人感情色彩,如有观看不适,请尽快关闭. 本文仅作为个人学习记录使用,也欢迎在许可协议范围内转载或使用,请尊重版权并且保留原文链接,谢谢您的理解合作. 如果您觉得本站对您能有帮助,您可以使用RSS方式订阅本站,这样您将能在第一时间获取本站信息.</p>
<h2 id="先说问题">先说问题</h2>
<p>最近在适配iOS13 有个<code>Dark Mode</code>的暗黑模式, 为了适配这个模式不得不在UIView和UIViewController以及UIWindow中复写如下方法</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)traitCollectionDidChange:(<span class="built_in">UITraitCollection</span> *)previousTraitCollection &#123;</div><div class="line">    [<span class="keyword">super</span> traitCollectionDidChange:previousTraitCollection];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里有个<code>UITraitCollection</code>的类以前从来没有仔细研究,今天详细研究一下.</p>
<blockquote>
<p>Trait 特性 特点</p>
</blockquote>
<p>显然 这个类是一个UIKit中用于处理苹果手机的一些特性的储存与UI相关的配置, 大家有没有想过如果你在iOS修改通用中的某些系统设置,比如(下图) 对比度、全局字体大小,这个我们开发人员怎么处理.</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/47b603f535020f06f999ad34f5070646fdfd3562/20190916UITraitCollection/UITraitCollection2.gif"></p>
<p>这些系统的特性修改就放到这个<code>UITraitCollection</code>中,这个类也就是我们经常在VC和View中经常用到而大家往往容易忽略的,下面简单记录一下这些特性都有哪些</p>
<h2 id="uitraitcollection-api介绍">UITraitCollection API介绍</h2>
<h4 id="判断当前设备时-iphoneipadtvcarplay-的配置">判断当前设备时 iPhone/iPad/tv/carPlay 的配置</h4>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">+ (<span class="built_in">UITraitCollection</span> *)traitCollectionWithUserInterfaceIdiom:(<span class="built_in">UIUserInterfaceIdiom</span>)idiom;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">UIUserInterfaceIdiom</span> userInterfaceIdiom; <span class="comment">// unspecified: UIUserInterfaceIdiomUnspecified</span></div></pre></td></tr></table></figure>
<h4 id="关于布局方向的配置">关于布局方向的配置</h4>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">+ (<span class="built_in">UITraitCollection</span> *)traitCollectionWithLayoutDirection:(<span class="built_in">UITraitEnvironmentLayoutDirection</span>)layoutDirection API_AVAILABLE(ios(<span class="number">10.0</span>));</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">UITraitEnvironmentLayoutDirection</span> layoutDirection API_AVAILABLE(ios(<span class="number">10.0</span>)); <span class="comment">// unspecified: UITraitEnvironmentLayoutDirectionUnspecified</span></div></pre></td></tr></table></figure>
<h4 id="图片-scale-的配置">图片 Scale 的配置</h4>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">+ (<span class="built_in">UITraitCollection</span> *)traitCollectionWithDisplayScale:(<span class="built_in">CGFloat</span>)scale;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">CGFloat</span> displayScale; <span class="comment">// unspecified: 0.0</span></div></pre></td></tr></table></figure>
<h4 id="布局-size-class-的配置">布局 Size Class 的配置</h4>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">+ (<span class="built_in">UITraitCollection</span> *)traitCollectionWithHorizontalSizeClass:(<span class="built_in">UIUserInterfaceSizeClass</span>)horizontalSizeClass;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">UIUserInterfaceSizeClass</span> horizontalSizeClass; <span class="comment">// unspecified: UIUserInterfaceSizeClassUnspecified</span></div><div class="line"></div><div class="line">+ (<span class="built_in">UITraitCollection</span> *)traitCollectionWithVerticalSizeClass:(<span class="built_in">UIUserInterfaceSizeClass</span>)verticalSizeClass;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">UIUserInterfaceSizeClass</span> verticalSizeClass; <span class="comment">// unspecified: UIUserInterfaceSizeClassUnspecified</span></div></pre></td></tr></table></figure>
<h4 id="force-touch-是否可用的配置">Force Touch 是否可用的配置</h4>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">+ (<span class="built_in">UITraitCollection</span> *)traitCollectionWithForceTouchCapability:(<span class="built_in">UIForceTouchCapability</span>)capability API_AVAILABLE(ios(<span class="number">9.0</span>));</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">UIForceTouchCapability</span> forceTouchCapability API_AVAILABLE(ios(<span class="number">9.0</span>)); <span class="comment">// unspecified: UIForceTouchCapabilityUnknown</span></div></pre></td></tr></table></figure>
<h4 id="全局字体大小的配置">全局字体大小的配置</h4>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">+ (<span class="built_in">UITraitCollection</span> *)traitCollectionWithPreferredContentSizeCategory:(<span class="built_in">UIContentSizeCategory</span>)preferredContentSizeCategory API_AVAILABLE(ios(<span class="number">10.0</span>));</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>, <span class="keyword">readonly</span>) <span class="built_in">UIContentSizeCategory</span> preferredContentSizeCategory API_AVAILABLE(ios(<span class="number">10.0</span>)); <span class="comment">// unspecified: UIContentSizeCategoryUnspecified</span></div></pre></td></tr></table></figure>
<h4 id="色域的配置">色域的配置</h4>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"></div><div class="line">+ (<span class="built_in">UITraitCollection</span> *)traitCollectionWithDisplayGamut:(<span class="built_in">UIDisplayGamut</span>)displayGamut API_AVAILABLE(ios(<span class="number">10.0</span>));</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">UIDisplayGamut</span> displayGamut API_AVAILABLE(ios(<span class="number">10.0</span>)); <span class="comment">// unspecified: UIDisplayGamutUnspecified</span></div></pre></td></tr></table></figure>
<h4 id="是否开启高对比度的配置">是否开启高对比度的配置</h4>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">+ (<span class="built_in">UITraitCollection</span> *)traitCollectionWithAccessibilityContrast:(<span class="built_in">UIAccessibilityContrast</span>)accessibilityContrast API_AVAILABLE(ios(<span class="number">13.0</span>), tvos(<span class="number">13.0</span>)) API_UNAVAILABLE(watchos);</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">UIAccessibilityContrast</span> accessibilityContrast API_AVAILABLE(ios(<span class="number">13.0</span>), tvos(<span class="number">13.0</span>)) API_UNAVAILABLE(watchos); <span class="comment">// unspecified: UIAccessibilityContrastUnspecified</span></div></pre></td></tr></table></figure>
<h4 id="全局字重的配置">全局字重的配置</h4>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">+ (<span class="built_in">UITraitCollection</span> *)traitCollectionWithLegibilityWeight:(<span class="built_in">UILegibilityWeight</span>)legibilityWeight API_AVAILABLE(ios(<span class="number">13.0</span>), tvos(<span class="number">13.0</span>), watchos(<span class="number">6.0</span>));</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">UILegibilityWeight</span> legibilityWeight API_AVAILABLE(ios(<span class="number">13.0</span>), tvos(<span class="number">13.0</span>), watchos(<span class="number">6.0</span>)); <span class="comment">// unspecified: UILegibilityWeightUnspecified</span></div></pre></td></tr></table></figure>
<h4 id="主题的配置">主题的配置</h4>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">+ (<span class="built_in">UITraitCollection</span> *)traitCollectionWithUserInterfaceStyle:(<span class="built_in">UIUserInterfaceStyle</span>)userInterfaceStyle API_AVAILABLE(tvos(<span class="number">10.0</span>)) API_AVAILABLE(ios(<span class="number">12.0</span>)) API_UNAVAILABLE(watchos);</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">UIUserInterfaceStyle</span> userInterfaceStyle API_AVAILABLE(tvos(<span class="number">10.0</span>)) API_AVAILABLE(ios(<span class="number">12.0</span>)) API_UNAVAILABLE(watchos); <span class="comment">// unspecified: UIUserInterfaceStyleUnspecified</span></div></pre></td></tr></table></figure>
<h3 id="如何获取-uitraitcollection">如何获取 UITraitCollection</h3>
<p><code>UITraitCollection</code>本身是一个配置的集合，每个 <code>UIView</code>/<code>UIViewController</code>都有自己的 <code>UITraitCollection</code>对象，并将自己的<code>UITraitCollection</code>传递给子<code>UIView</code>/<code>UIViewController</code>作为默认值。</p>
<ul>
<li>可以通过 <code>UIView</code>/<code>UIViewController</code>的属性 <code>traitCollection</code> 获取到当前视图的 UITraitCollection 对象</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    <span class="keyword">self</span>.traitCollection <span class="comment">//拿到当前得</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>可以通过子类重写如下方法的方式监控 traitCollection 属性的变化</li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)traitCollectionDidChange:(<span class="built_in">UITraitCollection</span> *)previousTraitCollection &#123;</div><div class="line">    [<span class="keyword">super</span> traitCollectionDidChange:previousTraitCollection];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>获取全局的<code>UITraitCollection</code></li>
</ul>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">[<span class="built_in">UITraitCollection</span> currentTraitCollection];</div></pre></td></tr></table></figure>
<h2 id="技巧">技巧</h2>
<p>如果要在UIViewController中更新状态栏 当设置完style的时候可以调用</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">[<span class="keyword">self</span> setNeedsStatusBarAppearanceUpdate];</div></pre></td></tr></table></figure>
<h1 id="总结">总结</h1>
<p>通过简单的学习<code>UITraitCollection</code>又深刻学习了一下这个类,希望以后能记录一下学过的知识.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/47b603f535020f06f999ad34f5070646fdfd3562/20190916UIT
    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="macOS开发" scheme="https://www.sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>从零学习OpenGLES的纹理渲染</title>
    <link href="https://www.sunyazhou.com/2019/09/06/20190906OpenGLESDemo1/"/>
    <id>https://www.sunyazhou.com/2019/09/06/20190906OpenGLESDemo1/</id>
    <published>2019-09-06T02:19:48.000Z</published>
    <updated>2019-11-27T14:24:05.021Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/d906db5da48581d2dd96615aeb5122c0e6265304/20190906OpenGLESDemo1/sunyazhou_logo_glsl.jpeg"></p>
<h1 id="前言">前言</h1>
<p>很久没用OpenGL了 记录一下学习GLSL代码和实现</p>
<h2 id="objctive-c代码">Objctive-C代码</h2>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"ViewController.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;GLKit/GLKit.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">//顶点结构体类型</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</div><div class="line">    GLKVector3 positionCoord; <span class="comment">// (x,y,z)</span></div><div class="line">    GLKMatrix2 textureCoord; <span class="comment">// (u, v)</span></div><div class="line">    </div><div class="line">&#125; SenceVertex;</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) SenceVertex *vertices; <span class="comment">//顶点数组</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) EAGLContext *context;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></div><div class="line"></div><div class="line"><span class="meta">#pragma mark -</span></div><div class="line"><span class="meta">#pragma mark - override methods 复写方法</span></div><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    <span class="keyword">self</span>.view.backgroundColor = [<span class="built_in">UIColor</span> whiteColor];</div><div class="line">    [<span class="keyword">self</span> commonInit];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#pragma mark -</span></div><div class="line"><span class="meta">#pragma mark - private methods 私有方法</span></div><div class="line">- (<span class="keyword">void</span>)commonInit &#123;</div><div class="line">    <span class="comment">// 创建上下文 使用 2.0版本</span></div><div class="line">    <span class="keyword">self</span>.context = [[EAGLContext alloc] initWithAPI:kEAGLRenderingAPIOpenGLES2];</div><div class="line">    [EAGLContext setCurrentContext:<span class="keyword">self</span>.context];</div><div class="line">    </div><div class="line">    <span class="comment">//创建顶点数组</span></div><div class="line">    <span class="keyword">self</span>.vertices = malloc(<span class="keyword">sizeof</span>(SenceVertex) * <span class="number">4</span>); <span class="comment">//4个顶点</span></div><div class="line">    </div><div class="line">    <span class="keyword">self</span>.vertices[<span class="number">0</span>] = (SenceVertex)&#123;&#123;<span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>&#125;,&#123; <span class="number">0</span>, <span class="number">1</span> &#125;&#125;; <span class="comment">//左上角</span></div><div class="line">    <span class="keyword">self</span>.vertices[<span class="number">1</span>] = (SenceVertex)&#123;&#123;<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">0</span>&#125;,&#123;<span class="number">0</span> ,<span class="number">0</span>&#125;&#125;; <span class="comment">//左下角</span></div><div class="line">    <span class="keyword">self</span>.vertices[<span class="number">2</span>] = (SenceVertex)&#123;&#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>&#125;,&#123;<span class="number">1</span>, <span class="number">1</span>&#125;&#125;; <span class="comment">//右上角</span></div><div class="line">    <span class="keyword">self</span>.vertices[<span class="number">3</span>] = (SenceVertex)&#123;&#123;<span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>&#125;,&#123;<span class="number">1</span>, <span class="number">0</span>&#125;&#125;; <span class="comment">//右下角</span></div><div class="line">    </div><div class="line">    <span class="comment">//创建一个展示纹理的layer</span></div><div class="line">    </div><div class="line">    <span class="built_in">CAEAGLLayer</span> *layer = [<span class="built_in">CAEAGLLayer</span> layer];</div><div class="line">    layer.frame = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">100</span>, <span class="keyword">self</span>.view.frame.size.width, <span class="keyword">self</span>.view.frame.size.width);</div><div class="line">    layer.contentsScale = [[<span class="built_in">UIScreen</span> mainScreen] scale]; <span class="comment">//设置缩放比例，不设置的话，纹理会失真</span></div><div class="line">    </div><div class="line">    [<span class="keyword">self</span>.view.layer addSublayer:layer];</div><div class="line">    </div><div class="line">    <span class="comment">// 绑定纹理到输出layer</span></div><div class="line">    [<span class="keyword">self</span> bindRenderLayer:layer];</div><div class="line">    </div><div class="line">    <span class="comment">// 读取纹理</span></div><div class="line">    <span class="built_in">NSString</span> *imagePath = [[[<span class="built_in">NSBundle</span> mainBundle] resourcePath] stringByAppendingPathComponent:<span class="string">@"logo.png"</span>];</div><div class="line">    <span class="built_in">UIImage</span> *image = [<span class="built_in">UIImage</span> imageWithContentsOfFile:imagePath];</div><div class="line">    GLuint textureID = [<span class="keyword">self</span> createTextureWithImage:image];</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="comment">// 设置视口尺寸</span></div><div class="line">    </div><div class="line">    glViewport(<span class="number">0</span>, <span class="number">0</span>, <span class="keyword">self</span>.drawableWidth, <span class="keyword">self</span>.drawableHeight);</div><div class="line">    </div><div class="line">    <span class="comment">// 编译链接 着色器</span></div><div class="line">    GLuint program = [<span class="keyword">self</span> programWithShaderName:<span class="string">@"glsl"</span>];</div><div class="line">    glUseProgram(program);</div><div class="line">    </div><div class="line">    <span class="comment">// 获取shader 中的参数 然后传数据进去</span></div><div class="line">    GLuint positionSlot = glGetAttribLocation(program, <span class="string">"Position"</span>); <span class="comment">//获取顶点着色器的位置</span></div><div class="line">    GLuint textureCoordsSlot = glGetAttribLocation(program, <span class="string">"TextureCoords"</span>); <span class="comment">//获取顶点着色器中的纹理坐标</span></div><div class="line"></div><div class="line">    GLuint textureSlot = glGetUniformLocation(program, <span class="string">"Texture"</span>); <span class="comment">//获取片元着色器纹理变量</span></div><div class="line"></div><div class="line">    <span class="comment">//将纹理 ID 传给着色器程序</span></div><div class="line">    glActiveTexture(GL_TEXTURE0);</div><div class="line">    glBindTexture(GL_TEXTURE_2D, textureID);</div><div class="line">    glUniform1i(textureSlot, <span class="number">0</span>); <span class="comment">// 将textureSlot 赋值为 0, 而 0 与 GL_TEXTURE0 对应,这里如果写1,就是GL_TEXTURE1</span></div><div class="line">    </div><div class="line">    <span class="comment">// 创建顶点缓存</span></div><div class="line">    GLuint vertexBuffer;</div><div class="line">    glGenBuffers(<span class="number">1</span>, &amp;vertexBuffer);</div><div class="line">    glBindBuffer(GL_ARRAY_BUFFER, vertexBuffer);</div><div class="line">    GLsizeiptr bufferSizeBytes = <span class="keyword">sizeof</span>(SenceVertex) * <span class="number">4</span>;</div><div class="line">    glBufferData(GL_ARRAY_BUFFER, bufferSizeBytes, <span class="keyword">self</span>.vertices, GL_STATIC_DRAW);</div><div class="line">    </div><div class="line">    <span class="comment">// 设置顶点数据</span></div><div class="line">    glEnableVertexAttribArray(positionSlot);</div><div class="line">    glVertexAttribPointer(positionSlot, <span class="number">3</span>, GL_FLOAT, GL_FALSE, <span class="keyword">sizeof</span>(SenceVertex), <span class="literal">NULL</span> + offsetof(SenceVertex, positionCoord));</div><div class="line">    </div><div class="line">    <span class="comment">// 设置纹理数据</span></div><div class="line">    glEnableVertexAttribArray(textureCoordsSlot);</div><div class="line">    glVertexAttribPointer(textureCoordsSlot, <span class="number">2</span>, GL_FLOAT, GL_FALSE, <span class="keyword">sizeof</span>(SenceVertex), <span class="literal">NULL</span> + offsetof(SenceVertex, textureCoord));</div><div class="line">    </div><div class="line">    <span class="comment">// 开始绘制</span></div><div class="line">    glDrawArrays(GL_TRIANGLE_STRIP, <span class="number">0</span>, <span class="number">4</span>);</div><div class="line">    </div><div class="line">    <span class="comment">// 将绑定</span></div><div class="line">    [<span class="keyword">self</span>.context presentRenderbuffer:GL_RENDERBUFFER];</div><div class="line">    </div><div class="line">    <span class="comment">//删除顶点缓存</span></div><div class="line">    glDeleteBuffers(<span class="number">1</span>, &amp;vertexBuffer);</div><div class="line">    vertexBuffer = <span class="number">0</span>;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//绑定图像要输出的 layer</span></div><div class="line">- (<span class="keyword">void</span>)bindRenderLayer:(<span class="built_in">CALayer</span> &lt;EAGLDrawable&gt; *)layer &#123;</div><div class="line">    GLuint frameBuffer; <span class="comment">//帧缓冲</span></div><div class="line">    GLuint renderBuffer; <span class="comment">//渲染缓冲</span></div><div class="line"></div><div class="line">    <span class="comment">//绑定渲染缓冲到 输出的layer</span></div><div class="line">    glGenRenderbuffers(<span class="number">1</span>, &amp;renderBuffer);</div><div class="line">    glBindRenderbuffer(GL_RENDERBUFFER, renderBuffer);</div><div class="line">    [<span class="keyword">self</span>.context renderbufferStorage:GL_RENDERBUFFER fromDrawable:layer];</div><div class="line">    </div><div class="line">    <span class="comment">//将渲染缓冲附着在帧缓冲上</span></div><div class="line">    glGenFramebuffers(<span class="number">1</span>, &amp;frameBuffer);</div><div class="line">    glBindFramebuffer(GL_FRAMEBUFFER, frameBuffer);</div><div class="line">    glFramebufferRenderbuffer(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_RENDERBUFFER, renderBuffer);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 通过一个图片 创建纹理</span></div><div class="line">- (GLuint)createTextureWithImage:(<span class="built_in">UIImage</span> *)image &#123;</div><div class="line">    <span class="comment">// 将 UIImage 转换为 CGImageRef</span></div><div class="line">    <span class="built_in">CGImageRef</span> cgImageRef = [image <span class="built_in">CGImage</span>];</div><div class="line">    GLuint width = (GLuint)<span class="built_in">CGImageGetWidth</span>(cgImageRef);</div><div class="line">    GLuint height = (GLuint)<span class="built_in">CGImageGetHeight</span>(cgImageRef);</div><div class="line">    <span class="built_in">CGRect</span> rect = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, width, height);</div><div class="line">    </div><div class="line">    <span class="comment">// 绘制图片</span></div><div class="line">    <span class="built_in">CGColorSpaceRef</span> colorSpace = <span class="built_in">CGColorSpaceCreateDeviceRGB</span>();</div><div class="line">    <span class="keyword">void</span> *imageData = malloc(width * height * <span class="number">4</span>);</div><div class="line">    <span class="built_in">CGContextRef</span> context = <span class="built_in">CGBitmapContextCreate</span>(imageData, width, height, <span class="number">8</span>, width * <span class="number">4</span>, colorSpace, kCGImageAlphaPremultipliedLast | kCGBitmapByteOrder32Big);</div><div class="line">    <span class="built_in">CGContextTranslateCTM</span>(context, <span class="number">0</span>, height);</div><div class="line">    <span class="built_in">CGContextScaleCTM</span>(context, <span class="number">1.0</span>f, <span class="number">-1.0</span>f);</div><div class="line">    <span class="built_in">CGColorSpaceRelease</span>(colorSpace);</div><div class="line">    <span class="built_in">CGContextClearRect</span>(context, rect);</div><div class="line">    <span class="built_in">CGContextDrawImage</span>(context, rect, cgImageRef);</div><div class="line"></div><div class="line">    <span class="comment">// 生成纹理</span></div><div class="line">    GLuint textureID;</div><div class="line">    glGenTextures(<span class="number">1</span>, &amp;textureID);</div><div class="line">    glBindTexture(GL_TEXTURE_2D, textureID);</div><div class="line">    glTexImage2D(GL_TEXTURE_2D, <span class="number">0</span>, GL_RGBA, width, height, <span class="number">0</span>, GL_RGBA, GL_UNSIGNED_BYTE, imageData); <span class="comment">// 将图片数据写入纹理缓存</span></div><div class="line">    </div><div class="line">    <span class="comment">// 设置如何把纹素映射成像素</span></div><div class="line">    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);</div><div class="line">    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);</div><div class="line">    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);</div><div class="line">    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);</div><div class="line">    </div><div class="line">    <span class="comment">// 解绑</span></div><div class="line">    glBindTexture(GL_TEXTURE_2D, <span class="number">0</span>);</div><div class="line">    </div><div class="line">    <span class="comment">// 释放内存</span></div><div class="line">    <span class="built_in">CGContextRelease</span>(context);</div><div class="line">    free(imageData);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> textureID;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 将一个顶点着色器和片元着色器挂在到一个着色器程序上, 并返回程序的 id</span></div><div class="line">- (GLuint)programWithShaderName:(<span class="built_in">NSString</span> *)shaderName &#123;</div><div class="line">    <span class="comment">// 编译两个着色器</span></div><div class="line">    GLuint vertexShader = [<span class="keyword">self</span> compileShaderWithName:shaderName type:GL_VERTEX_SHADER];</div><div class="line">    GLuint fragmentShader = [<span class="keyword">self</span> compileShaderWithName:shaderName type:GL_FRAGMENT_SHADER];</div><div class="line">    </div><div class="line">    <span class="comment">// 挂载 shader 到 program 上</span></div><div class="line">    GLuint program = glCreateProgram();</div><div class="line">    glAttachShader(program, vertexShader);</div><div class="line">    glAttachShader(program, fragmentShader);</div><div class="line">    </div><div class="line">    <span class="comment">// 链接 program</span></div><div class="line">    glLinkProgram(program);</div><div class="line">    </div><div class="line">    <span class="comment">// 检查链接是否成功</span></div><div class="line">    GLint linkSuccess;</div><div class="line">    glGetProgramiv(program, GL_LINK_STATUS, &amp;linkSuccess);</div><div class="line">    <span class="keyword">if</span> (linkSuccess == GL_FALSE) &#123;</div><div class="line">        GLchar messages[<span class="number">256</span>];</div><div class="line">        glGetProgramInfoLog(program, <span class="keyword">sizeof</span>(messages), <span class="number">0</span>, &amp;messages[<span class="number">0</span>]);</div><div class="line">        <span class="built_in">NSString</span> *messageString = [<span class="built_in">NSString</span> stringWithUTF8String:messages];</div><div class="line">        <span class="built_in">NSAssert</span>(<span class="literal">NO</span>, <span class="string">@"program链接失败：%@"</span>, messageString);</div><div class="line">        exit(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> program;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 编译一个 shader，并返回 shader 的 id</span></div><div class="line">- (GLuint)compileShaderWithName:(<span class="built_in">NSString</span> *)name type:(GLenum)shaderType &#123;</div><div class="line">    <span class="comment">// 查找 shader 文件</span></div><div class="line">    <span class="built_in">NSString</span> *shaderPath = [[<span class="built_in">NSBundle</span> mainBundle] pathForResource:name ofType:shaderType == GL_VERTEX_SHADER ? <span class="string">@"vsh"</span> : <span class="string">@"fsh"</span>]; <span class="comment">// 根据不同的类型确定后缀名</span></div><div class="line">    <span class="built_in">NSError</span> *error;</div><div class="line">    <span class="built_in">NSString</span> *shaderString = [<span class="built_in">NSString</span> stringWithContentsOfFile:shaderPath encoding:<span class="built_in">NSUTF8StringEncoding</span> error:&amp;error];</div><div class="line">    <span class="keyword">if</span> (!shaderString) &#123;</div><div class="line">        <span class="built_in">NSAssert</span>(<span class="literal">NO</span>, <span class="string">@"读取shader失败"</span>);</div><div class="line">        exit(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 创建一个 shader 对象</span></div><div class="line">    GLuint shader = glCreateShader(shaderType);</div><div class="line">    </div><div class="line">    <span class="comment">// 获取 shader 的内容</span></div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *shaderStringUTF8 = [shaderString UTF8String];</div><div class="line">    <span class="keyword">int</span> shaderStringLength = (<span class="keyword">int</span>)[shaderString length];</div><div class="line">    glShaderSource(shader, <span class="number">1</span>, &amp;shaderStringUTF8, &amp;shaderStringLength);</div><div class="line">    </div><div class="line">    <span class="comment">// 编译shader</span></div><div class="line">    glCompileShader(shader);</div><div class="line">    </div><div class="line">    <span class="comment">// 查询 shader 是否编译成功</span></div><div class="line">    GLint compileSuccess;</div><div class="line">    glGetShaderiv(shader, GL_COMPILE_STATUS, &amp;compileSuccess);</div><div class="line">    <span class="keyword">if</span> (compileSuccess == GL_FALSE) &#123;</div><div class="line">        GLchar messages[<span class="number">256</span>];</div><div class="line">        glGetShaderInfoLog(shader, <span class="keyword">sizeof</span>(messages), <span class="number">0</span>, &amp;messages[<span class="number">0</span>]);</div><div class="line">        <span class="built_in">NSString</span> *messageString = [<span class="built_in">NSString</span> stringWithUTF8String:messages];</div><div class="line">        <span class="built_in">NSAssert</span>(<span class="literal">NO</span>, <span class="string">@"shader编译失败：%@"</span>, messageString);</div><div class="line">        exit(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> shader;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#pragma mark -</span></div><div class="line"><span class="meta">#pragma mark - public methods 公有方法</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#pragma mark -</span></div><div class="line"><span class="meta">#pragma mark - getters and setters 设置器和访问器</span></div><div class="line"><span class="comment">// 获取渲染缓存宽度</span></div><div class="line">- (GLint)drawableWidth &#123;</div><div class="line">    GLint backingWidth;</div><div class="line">    glGetRenderbufferParameteriv(GL_RENDERBUFFER, GL_RENDERBUFFER_WIDTH, &amp;backingWidth);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> backingWidth;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 获取渲染缓存高度</span></div><div class="line">- (GLint)drawableHeight &#123;</div><div class="line">    GLint backingHeight;</div><div class="line">    glGetRenderbufferParameteriv(GL_RENDERBUFFER, GL_RENDERBUFFER_HEIGHT, &amp;backingHeight);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> backingHeight;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#pragma mark -</span></div><div class="line"><span class="meta">#pragma mark - life cycle 视图的生命周期</span></div><div class="line">- (<span class="keyword">void</span>)dealloc &#123;</div><div class="line">    <span class="keyword">if</span> ([EAGLContext currentContext] == <span class="keyword">self</span>.context) &#123;</div><div class="line">        [EAGLContext setCurrentContext:<span class="literal">nil</span>];</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//释放结构体内存的数组 需要手动free</span></div><div class="line">    <span class="keyword">if</span> (_vertices) &#123;</div><div class="line">        free(_vertices);</div><div class="line">        _vertices = <span class="literal">nil</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h3 id="顶点着色器">顶点着色器</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">attribute vec4 Position;</div><div class="line">attribute vec2 TextureCoords;</div><div class="line">varying vec2 TextureCoordsVarying;</div><div class="line"></div><div class="line">void main (void) &#123;</div><div class="line">    gl_Position = Position;</div><div class="line">    TextureCoordsVarying = TextureCoords;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="片元着色器">片元着色器</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">precision mediump float;</div><div class="line"></div><div class="line">uniform sampler2D Texture;</div><div class="line">varying vec2 TextureCoordsVarying;</div><div class="line"></div><div class="line">void main (void) &#123;</div><div class="line">    vec4 mask = texture2D(Texture, TextureCoordsVarying);</div><div class="line">    gl_FragColor = vec4(mask.rgb, 1.0);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="总结">总结</h1>
<p>最近一有时间就尽量研习图形图像相关的技术,本文具有强烈的个人感情色彩,如有观看不适,请尽快关闭. 本文仅作为个人学习记录使用,也欢迎在许可协议范围内转载或使用,请尊重版权并且保留原文链接,谢谢您的理解合作. 如果您觉得本站对您能有帮助,您可以使用RSS方式订阅本站,这样您将能在第一时间获取本站信息.</p>
<p><a href="https://github.com/sunyazhou13/GLSLDemo1" target="_blank" rel="external">Demo</a></p>
<p><a href="http://www.lymanli.com/2019/02/17/ios-opengles-render-texture/" target="_blank" rel="external">学习参考</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/d906db5da48581d2dd96615aeb5122c0e6265304/20190906Ope
    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="macOS开发" scheme="https://www.sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>做一个简单的Loading动画</title>
    <link href="https://www.sunyazhou.com/2019/07/26/20190726LoadingAnimationI/"/>
    <id>https://www.sunyazhou.com/2019/07/26/20190726LoadingAnimationI/</id>
    <published>2019-07-26T03:13:44.000Z</published>
    <updated>2019-11-27T14:24:05.021Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/c85027ac27deef00d0e98c5a4f898d5dd2642146/20190726LoadingAnimationI/circle-loading-animation.png"></p>
<h1 id="前言">前言</h1>
<p>由于最近工作忙到坐地铁回家都能睡着,博客没能及时更新,今天抽个时间写个加载动画,废话不多说上图.</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/1ecb815a4985fcf281d399f42686c277189593cd/20190726LoadingAnimationI/LoadingAnimation1.gif"></p>
<p>(颜色可以自定义哈,非常简单,小白自己可以随便改)</p>
<h1 id="开始">开始</h1>
<p>创建一个UIView的子类<code>UILoadingView</code>(名字最好不要带<code>UI</code>开头哈,我这是为了玩 大家理解就行),然后添加两个接口</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">UILoadingView</span> : <span class="title">UIView</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)startLoading; <span class="comment">//1</span></div><div class="line">- (<span class="keyword">void</span>)stopLoading;  <span class="comment">//2</span></div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<blockquote>
<ol type="1">
<li>开始动画</li>
<li>结束动画</li>
</ol>
</blockquote>
<p>实现的.m文件中我们需要用到<code>CAReplicatorLayer</code>,主要是看上边的小圆点比较多,用<code>CAReplicatorLayer</code>可以帮助我们自动创建多个小圆点实例.</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">UILoadingView</span> ()</span></div><div class="line"></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">CAReplicatorLayer</span> *replicatorLayer;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">UILoadingView</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">instancetype</span>)initWithFrame:(<span class="built_in">CGRect</span>)frame &#123;</div><div class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> initWithFrame:frame];</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</div><div class="line">        [<span class="keyword">self</span> setupSubviews];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)awakeFromNib &#123;</div><div class="line">    [<span class="keyword">super</span> awakeFromNib];</div><div class="line">    [<span class="keyword">self</span> setupSubviews];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)setupSubviews &#123;</div><div class="line">	<span class="comment">//这里要补全代码 创建需要的视图 继续往下看</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h3 id="创建子视图">创建子视图</h3>
<p>首先我们需要创建一个replicatorLayer的实例对象,然后向这个对象上添加一个圆点的,并错开角度.这里用到的知识点基本就是position和bounds啥关系.这里我不想啰嗦了大家自行google就行了.上代码</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)setupSubviews &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.replicatorLayer == <span class="literal">nil</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.replicatorLayer = [<span class="built_in">CAReplicatorLayer</span> layer];</div><div class="line">        <span class="keyword">self</span>.replicatorLayer.backgroundColor = [<span class="built_in">UIColor</span> clearColor].CGColor;</div><div class="line">        [<span class="keyword">self</span>.layer addSublayer:<span class="keyword">self</span>.replicatorLayer];</div><div class="line">        <span class="keyword">self</span>.replicatorLayer.bounds = <span class="keyword">self</span>.bounds;</div><div class="line">        <span class="keyword">self</span>.replicatorLayer.position = <span class="keyword">self</span>.center;</div><div class="line">        <span class="built_in">NSInteger</span> instanceCount = <span class="number">15</span>;  <span class="comment">//1</span></div><div class="line">        <span class="keyword">self</span>.replicatorLayer.instanceCount = instanceCount; <span class="comment">//</span></div><div class="line">        <span class="keyword">self</span>.replicatorLayer.instanceTransform = <span class="built_in">CATransform3DMakeRotation</span>(M_PI * <span class="number">2</span> / instanceCount, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>); <span class="comment">//2</span></div><div class="line">        <span class="keyword">self</span>.replicatorLayer.instanceDelay = <span class="number">1</span> / (instanceCount * <span class="number">1.0</span>); <span class="comment">//2</span></div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    <span class="comment">//圆点</span></div><div class="line">    <span class="built_in">CALayer</span> *circle = [<span class="built_in">CALayer</span> layer];</div><div class="line">    circle.bounds = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">10</span>);</div><div class="line">    circle.cornerRadius = <span class="number">5</span>;</div><div class="line">    circle.position = <span class="built_in">CGPointZero</span>;</div><div class="line">    circle.backgroundColor = [<span class="keyword">self</span> randomColor].CGColor;</div><div class="line">    circle.name = kCircleName; <span class="comment">//3  设置layer的唯一标识 </span></div><div class="line">    [<span class="keyword">self</span>.replicatorLayer addSublayer:circle];</div><div class="line">    <span class="comment">//小技巧 刚开始的动画不是很自然，那是因为小圆点的初始比例是1,让小圆点的初始比例为0.01</span></div><div class="line">    circle.transform = <span class="built_in">CATransform3DMakeScale</span>(<span class="number">0.01</span>, <span class="number">0.01</span>, <span class="number">0.01</span>); <span class="comment">//5</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<ol type="1">
<li>1处的代码是让<code>CAReplicatorLayer</code>帮我们创建指定数量的实例对象(我们添加的原点就是它需要的也就是说它帮你创建了instanceCount个实例对象)</li>
<li>2处代码 是设置错开的角度（2π 是 360°, 如果需要一圈创建指定数量的圆点 那么 instanceCount/2π 就是每个圆的角度,这里很重要 认真学习一下.）</li>
<li>3处代码是给这个layer设置一个唯一标识 一会儿要通过方法找到它,如果 不这样做你就要搞个成员变量去存一下,如果用成员变量存储的话注意内存引用关系,我这里不推荐成员变量的搞法.</li>
<li>4处代码主要是解决动画不自然,因为添加动画的圆点的初始比例是1,只有第一次开始的时候很愣.</li>
</ol>
</blockquote>
<h4 id="找到圆点layer">找到圆点layer</h4>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="built_in">CALayer</span> *)findCircleLayer &#123;</div><div class="line">    <span class="keyword">for</span> (<span class="built_in">CALayer</span> *layer <span class="keyword">in</span> [<span class="keyword">self</span>.replicatorLayer sublayers]) &#123;</div><div class="line">        <span class="keyword">if</span> ([[layer name] isEqualToString:kCircleName]) &#123;</div><div class="line">            <span class="keyword">return</span> layer;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们用的时候调用这个方法 找一下我们添加上去的layer即可</p>
<h4 id="实现对外暴露的方法">实现对外暴露的方法</h4>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)startLoading &#123;</div><div class="line">    <span class="built_in">CALayer</span> *circleLayer = [<span class="keyword">self</span> findCircleLayer];</div><div class="line">    <span class="keyword">if</span> (circleLayer &amp;&amp; ![[circleLayer animationKeys] containsObject:kScaleAnimationKey]) &#123;</div><div class="line">        <span class="comment">//加动画</span></div><div class="line">        <span class="built_in">CABasicAnimation</span> *scale = [<span class="built_in">CABasicAnimation</span> animationWithKeyPath:<span class="string">@"transform.scale"</span>];</div><div class="line">        scale.fromValue = @(<span class="number">1</span>);</div><div class="line">        scale.toValue = @(<span class="number">0.1</span>);</div><div class="line">        scale.duration = <span class="number">1</span>;</div><div class="line">        scale.repeatCount = HUGE;</div><div class="line">        [circleLayer addAnimation:scale forKey:kScaleAnimationKey];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)stopLoading &#123;</div><div class="line">    <span class="built_in">CALayer</span> *circleLayer = [<span class="keyword">self</span> findCircleLayer];</div><div class="line">    <span class="keyword">if</span> (circleLayer &amp;&amp; [[circleLayer animationKeys] containsObject:kScaleAnimationKey]) &#123;</div><div class="line">        [circleLayer removeAnimationForKey:kScaleAnimationKey];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>kScaleAnimationKey 常量自行定义即可.</p>
</blockquote>
<h4 id="支持autolayout">支持AutoLayout</h4>
<p>目前大家用的比较多的是<code>Masonry</code>,所以这里使用<code>Masonry</code>自动布局, 使用自动布局主要是是为了方便外部调用的时候外部视图使用了自动布局,那么内部就需要更新相关<code>layer</code>的<code>frame</code>.具体代码如下</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)layoutSubviews &#123;</div><div class="line">    [<span class="keyword">super</span> layoutSubviews];</div><div class="line">    </div><div class="line">    [<span class="built_in">CATransaction</span> begin];</div><div class="line">    [<span class="built_in">CATransaction</span> setDisableActions:<span class="literal">YES</span>];</div><div class="line">    <span class="keyword">self</span>.replicatorLayer.bounds = <span class="keyword">self</span>.bounds;</div><div class="line">    <span class="keyword">self</span>.replicatorLayer.position = <span class="built_in">CGPointMake</span>(<span class="built_in">CGRectGetWidth</span>(<span class="keyword">self</span>.bounds)/<span class="number">2</span>, <span class="built_in">CGRectGetHeight</span>(<span class="keyword">self</span>.bounds)/<span class="number">2</span>);</div><div class="line">    </div><div class="line">    <span class="built_in">CALayer</span> *circleLayer = [<span class="keyword">self</span> findCircleLayer];</div><div class="line">    <span class="keyword">if</span> (circleLayer) &#123;</div><div class="line">        circleLayer.position = <span class="built_in">CGPointMake</span>(<span class="keyword">self</span>.frame.size.width / <span class="number">2</span>, <span class="keyword">self</span>.frame.size.height/<span class="number">2</span> - <span class="number">40</span>); <span class="comment">//距离圆心 40pt</span></div><div class="line">    &#125;</div><div class="line">    [<span class="built_in">CATransaction</span> commit];</div><div class="line">    [<span class="keyword">self</span>.replicatorLayer layoutSublayers];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里使用了 隐式动画和显式动画相关的知识</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">[<span class="built_in">CATransaction</span> begin];</div><div class="line">[<span class="built_in">CATransaction</span> setDisableActions:<span class="literal">YES</span>];</div><div class="line"></div><div class="line"><span class="comment">//... 这里修改相关动画参数 </span></div><div class="line"></div><div class="line">[<span class="built_in">CATransaction</span> commit];</div></pre></td></tr></table></figure>
<p>因为有可能layer在动画中,如果在动画中一般在这里需要加上<code>事务</code>修改这样才会更顺畅自然. 可以看到我上边的代码注释写的<code>40pt</code>的距离 实际上是圆心距离我们上边做的原点layer的的距离,大家可自行修改.</p>
<h1 id="总结">总结</h1>
<p>由于最近在研究一<a href="https://juejin.im/post/5c1bbec66fb9a049cb18b64c" target="_blank" rel="external">音频波形</a>的动画效果,想实现一个类似网易云音乐的黑胶唱片效果,可是用到的知识有点忘记,用此片文章来回顾复习一下动画的知识,也是为了很久没更新的博客更新一下,记录一下经常忘记的小技巧</p>
<p>Demo我给在下面也把相关的文章参考 放在下方,有兴趣大家可以学习一下.</p>
<p><a href="https://github.com/sunyazhou13/UILoadingView" target="_blank" rel="external">loading动画Demo</a></p>
<p><a href="http://www.devtalking.com/articles/calayer-animation-replicator-animation/" target="_blank" rel="external">参考</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/c85027ac27deef00d0e98c5a4f898d5dd2642146/20190726Loa
    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="iOS动画" scheme="https://www.sunyazhou.com/tags/iOS%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7安装iptables防火墙</title>
    <link href="https://www.sunyazhou.com/2019/05/28/20190528CentosIptables/"/>
    <id>https://www.sunyazhou.com/2019/05/28/20190528CentosIptables/</id>
    <published>2019-05-28T02:06:24.000Z</published>
    <updated>2019-11-27T14:24:05.021Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言">前言</h1>
<p>最近翻墙总不稳定 最后发现是防火墙配置问题今天 记录一下</p>
<h2 id="配置">配置</h2>
<p>CentOS7默认的防火墙不是iptables,而是firewalle.</p>
<p>安装iptable iptable-service</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line"><span class="comment">#先检查是否安装了iptables</span></div><div class="line">service iptables status</div><div class="line"><span class="comment">#安装iptables</span></div><div class="line">yum install -y iptables</div><div class="line"><span class="comment">#升级iptables</span></div><div class="line">yum update iptables </div><div class="line"><span class="comment">#安装iptables-services</span></div><div class="line">yum install iptables-services</div></pre></td></tr></table></figure>
<h2 id="禁用停止自带的firewalld服务">禁用/停止自带的firewalld服务</h2>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line"><span class="comment">#停止firewalld服务</span></div><div class="line">systemctl stop firewalld</div><div class="line"><span class="comment">#禁用firewalld服务</span></div><div class="line">systemctl mask firewalld</div></pre></td></tr></table></figure>
<h2 id="设置现有规则">设置现有规则</h2>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line"><span class="comment">#查看iptables现有规则</span></div><div class="line">iptables -L -n</div><div class="line"><span class="comment">#先允许所有,不然有可能会杯具</span></div><div class="line">iptables -P INPUT ACCEPT</div><div class="line"><span class="comment">#清空所有默认规则</span></div><div class="line">iptables -F</div><div class="line"><span class="comment">#清空所有自定义规则</span></div><div class="line">iptables -X</div><div class="line"><span class="comment">#所有计数器归0</span></div><div class="line">iptables -Z</div><div class="line"><span class="comment">#允许来自于lo接口的数据包(本地访问)</span></div><div class="line">iptables -A INPUT -i lo -j ACCEPT</div><div class="line"><span class="comment">#开放22端口</span></div><div class="line">iptables -A INPUT -p tcp --dport 22 -j ACCEPT</div><div class="line"><span class="comment">#开放21端口(FTP)</span></div><div class="line">iptables -A INPUT -p tcp --dport 21 -j ACCEPT</div><div class="line"><span class="comment">#开放80端口(HTTP)</span></div><div class="line">iptables -A INPUT -p tcp --dport 80 -j ACCEPT</div><div class="line"><span class="comment">#开放443端口(HTTPS)</span></div><div class="line">iptables -A INPUT -p tcp --dport 443 -j ACCEPT</div><div class="line"><span class="comment">#允许ping</span></div><div class="line">iptables -A INPUT -p icmp --icmp-type 8 -j ACCEPT</div><div class="line"><span class="comment">#允许接受本机请求之后的返回数据 RELATED,是为FTP设置的</span></div><div class="line">iptables -A INPUT -m state --state  RELATED,ESTABLISHED -j ACCEPT</div><div class="line"><span class="comment">#其他入站一律丢弃</span></div><div class="line">iptables -P INPUT DROP</div><div class="line"><span class="comment">#所有出站一律绿灯</span></div><div class="line">iptables -P OUTPUT ACCEPT</div><div class="line"><span class="comment">#所有转发一律丢弃</span></div><div class="line">iptables -P FORWARD DROP</div></pre></td></tr></table></figure>
<h2 id="其他规则设定">其他规则设定</h2>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line"><span class="comment">#如果要添加内网ip信任（接受其所有TCP请求）</span></div><div class="line">iptables -A INPUT -p tcp -s 45.96.174.68 -j ACCEPT</div><div class="line"><span class="comment">#过滤所有非以上规则的请求</span></div><div class="line">iptables -P INPUT DROP</div><div class="line"><span class="comment">#要封停一个IP，使用下面这条命令：</span></div><div class="line">iptables -I INPUT -s ***.***.***.*** -j DROP</div><div class="line"><span class="comment">#要解封一个IP，使用下面这条命令:</span></div><div class="line">iptables -D INPUT -s ***.***.***.*** -j DROP</div></pre></td></tr></table></figure>
<h2 id="保存规则设定">保存规则设定</h2>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line"><span class="comment">#保存上述规则</span></div><div class="line">service iptables save</div></pre></td></tr></table></figure>
<h2 id="开启iptables服务">开启iptables服务</h2>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line"><span class="comment">#注册iptables服务</span></div><div class="line"><span class="comment">#相当于以前的chkconfig iptables on</span></div><div class="line">systemctl <span class="built_in">enable</span> iptables.service</div><div class="line"><span class="comment">#开启服务</span></div><div class="line">systemctl start iptables.service</div><div class="line"><span class="comment">#查看状态</span></div><div class="line">systemctl status iptables.service</div></pre></td></tr></table></figure>
<h2 id="解决vsftpd在iptables开启后无法使用被动模式的问题">解决vsftpd在iptables开启后,无法使用被动模式的问题</h2>
<p>1.首先在/etc/sysconfig/iptables-config中修改或者添加以下内容</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line"><span class="comment">#添加以下内容,注意顺序不能调换</span></div><div class="line">IPTABLES_MODULES=<span class="string">"ip_conntrack_ftp"</span></div><div class="line">IPTABLES_MODULES=<span class="string">"ip_nat_ftp"</span></div></pre></td></tr></table></figure>
<p>2.重新设置iptables设置</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">iptables -A INPUT -m state --state  RELATED,ESTABLISHED -j ACCEPT</div></pre></td></tr></table></figure>
<h3 id="以下为完整设置脚本">以下为完整设置脚本</h3>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line">iptables -P INPUT ACCEPT</div><div class="line">iptables -F</div><div class="line">iptables -X</div><div class="line">iptables -Z</div><div class="line">iptables -A INPUT -i lo -j ACCEPT</div><div class="line">iptables -A INPUT -p tcp --dport 22 -j ACCEPT</div><div class="line">iptables -A INPUT -p tcp --dport 21 -j ACCEPT</div><div class="line">iptables -A INPUT -p tcp --dport 80 -j ACCEPT</div><div class="line">iptables -A INPUT -p tcp --dport 443 -j ACCEPT</div><div class="line">iptables -A INPUT -p icmp --icmp-type 8 -j ACCEPT</div><div class="line">iptables -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT</div><div class="line">iptables -P INPUT DROP</div><div class="line">iptables -P OUTPUT ACCEPT</div><div class="line">iptables -P FORWARD DROP</div><div class="line">service iptables save</div><div class="line">systemctl restart iptables.service</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;
&lt;p&gt;最近翻墙总不稳定 最后发现是防火墙配置问题今天 记录一下&lt;/p&gt;
&lt;h2 id=&quot;配置&quot;&gt;配置&lt;/h2&gt;
&lt;p&gt;CentOS7默认的防火墙不是iptables,而是firewalle.&lt;/p&gt;
&lt;p&gt;安装iptable iptable
    
    </summary>
    
      <category term="linux" scheme="https://www.sunyazhou.com/categories/linux/"/>
    
    
      <category term="macOS开发" scheme="https://www.sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="shell" scheme="https://www.sunyazhou.com/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>Cleaner For Xcode编译</title>
    <link href="https://www.sunyazhou.com/2019/05/17/20190517CleanerForXcodeBuild/"/>
    <id>https://www.sunyazhou.com/2019/05/17/20190517CleanerForXcodeBuild/</id>
    <published>2019-05-17T08:37:43.000Z</published>
    <updated>2019-11-27T14:24:05.020Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/18892e73bf7f0e113b0fe700afa62e43fe29272c/20190517CleanerForXcodeBuild/cleanerforxcode.png"></p>
<h1 id="前言">前言</h1>
<p>最近公司给配发一个最新版的macbook pro, 然后经过一顿折腾以后发现原来的软件 无法 迁移过来或者迁移起来比较费劲.于是就有了这篇文章.</p>
<h2 id="背景">背景</h2>
<p>由于mac磁盘空间有限,不得不借助一些第三方软件清理磁盘,尤其对于一个iOS开发者来说,固态硬盘128G的mac我只能说公司太抠了,就是能安装个Xcode干活,其余的我觉得我的256G的iPhone X足够应付了</p>
<p>Xcode是占用mac空间最大的app,无论从内存、磁盘io、系统资源 全部都能排第一.因为平时都用真机运行所以Xcode自带的模拟器也排不上用场还占用了一些磁盘空间,几年前有封面的这个软件叫Cleaner For Xcode.</p>
<p>是个开源的并且用React Native写的,我觉得很好用,不过这个开发者不够厚道,在mac的 app store 标价 $0.99。</p>
<p>真的我说这个作者你真不够厚道你都open source 了为啥不打个 release包 广大 mac上的小伙伴用呢.于是 今天有点时间 我配上RN环境 誓死编译出一个app<strong>免费</strong>给大家使用.</p>
<h2 id="过程">过程</h2>
<p>话说我真不想装RN 太浪费磁盘空间 还浪费时间,迫不得已 经过一番折腾 遇到好多坑</p>
<h4 id="填坑经历">填坑经历</h4>
<p>0.45以上的RN 需要 boost 库,这个库 翻墙都很费劲 下载。。。Done.</p>
<p>又要安装 yarn、node、npm、看门狗 watchdag。。。 Done.</p>
<p>编辑错误, Xcode10.12.1 目前最新版 各种编译选项 静态分析 Done.</p>
<p>大概过了 30分钟 终于 折腾 出一个app</p>
<h1 id="总结">总结</h1>
<p><a href="https://pan.baidu.com/s/1BClEjWLHS3htvKXoM11UjQ" target="_blank" rel="external">链接https://pan.baidu.com/s/1BClEjWLHS3htvKXoM11UjQ</a> 提取码: <code>uhns</code></p>
<p>各位拿去不用客气</p>
<p>其实就是了解删除 Xcode每个目录都存储什么缓存 没事删除一下 搞个好看的UI.作者 是有点蛋疼 这么简单的功能 一个shell或者objc几行代码搞定 非要大动干戈用RN. 然后还很不厚道的开源,这种开发者真是蛋疼.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/18892e73bf7f0e113b0fe700afa62e43fe29272c/20190517Cle
    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="macOS开发" scheme="https://www.sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Windows装机教程</title>
    <link href="https://www.sunyazhou.com/2019/04/24/20190424WindowsResources/"/>
    <id>https://www.sunyazhou.com/2019/04/24/20190424WindowsResources/</id>
    <published>2019-04-24T03:26:34.000Z</published>
    <updated>2019-11-27T14:24:05.020Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言">前言</h1>
<p>为了解决每次都重装windows电脑系统浪费时间,干脆整理一篇文章记录一下,方便后续修电脑总忘记各种工具</p>
<h3 id="pe安装系统教程">PE安装系统教程</h3>
<p>PE工具箱制作</p>
<p>主要步骤：</p>
<ul>
<li>第一步:制作前的软件、硬件准备：8G及以上U盘一个都可以， 一台可正常可上网的电脑</li>
<li>第二步:用电脑店U盘启动制作工具制作启动U盘</li>
<li>第三步:下载您需要的系统文件并复制到U盘中</li>
<li>第四步:进入BIOS设置U盘启动顺序</li>
<li>第五步:在进入WIN10 PE模式分区安装系统即可</li>
<li>第六步:系统激活问题</li>
<li>第七步:安装驱动问题</li>
</ul>
<h2 id="制作工具箱教程">制作工具箱教程</h2>
<p>首先先下载一个制作启动工具的软件：</p>
<p>下载地址:链接：<a href="http://www.usbrun.com/" target="_blank" rel="external">http://www.usbrun.com/</a></p>
<p><img src="http://ww1.sinaimg.cn/large/bf8500b1gy1g2dkgqy53nj20qn0d7gu0.jpg"></p>
<p>下载精简版本好后 先把杀毒软件关掉 ！！ 双击安装一下此软件到电脑上 ，安装好软件后打开 ，如果软件提示更新，可以忽略，不需要更新！！</p>
<p>把U盘插上 &gt;【注：U盘会格式化，有资料先拷贝出来保存避免被格式掉了】</p>
<p>要是看不到设备的话， 把U盘重新插一下</p>
<p><img src="http://ww1.sinaimg.cn/large/bf8500b1gy1g2dkgqtg3cj20km0efwih.jpg"></p>
<p>点一键制作然后等制作完成就OK！！ 制作完成之后 点一下模拟启动看下U盘能不能启动，能的话就OK。关掉即可</p>
<h2 id="下载系统步骤">下载系统步骤</h2>
<p>下面选1个需要的系统版本下载 (U盘容量够大两个系统都可以下载使用 此PE支持原版系统安装)</p>
<p>WIN7 64位（B360B450锐龙二代CPU主板不支持） 系统下载连接：<a href="http://www.jsgho.net/win7/jsy/35178.html" target="_blank" rel="external">链接</a>(技术员纯净版)</p>
<p><img src="http://ww1.sinaimg.cn/large/bf8500b1gy1g2dkknutp5j20le07ndhs.jpg"></p>
<p><img src="http://ww1.sinaimg.cn/large/bf8500b1gy1g2dkknlhboj20nr0543yh.jpg"></p>
<h2 id="win710-64位">WIN7~10 64位</h2>
<p>专业版 下载地址：<a href="http://msdn.itellyou.cn/" target="_blank" rel="external">http://msdn.itellyou.cn/</a></p>
<p>可复制此磁力链接使用迅雷新建下载：</p>
<p>ed2k://|file|cn_windows_10_business_edition_version_1803_updated_sep_2018_x64_dvd_07b164ed.iso|5229189120|5CC3C32DB198D647DCED4B0EB96B8547|/</p>
<p>下载参考：</p>
<p><img src="http://ww1.sinaimg.cn/large/bf8500b1gy1g2dkmns9ewj20w60n5djh.jpg"></p>
<p>下载好的系统直接拷贝到您刚刚制作好的的U盘里，随便放什么位置都可以。</p>
<p><img src="http://ww1.sinaimg.cn/large/bf8500b1gy1g2dkmnyn49j20q10hztgf.jpg"></p>
<h2 id="设置u盘启动步骤">设置U盘启动步骤</h2>
<p>制作好的U盘插上您需要装系统的电脑上，以下主板U盘快捷启动按键 华硕启动快捷键：F8<br>
技嘉、微星、七彩虹、昂达、华擎、映泰 点击：F11<br>
品牌机：惠普、惠普、戴尔、联想、神州 点击：F12</p>
<p>以下华硕主板快捷启动菜单选择进入U盘PE参考图，这是一个开机启动设备选项，我们选择刚刚做好的U盘 ADATA USB Flash Drlve(14800MB)按回车即可</p>
<blockquote>
<p>（注意：选择不带UEFI的选项）</p>
</blockquote>
<p><img src="http://ww1.sinaimg.cn/large/bf8500b1gy1g2dkogn1kzj20pc0ige62.jpg"></p>
<p>出现U盘启动界面 如下图选择 启动WIN10 PE X 64 ，别的不用去选择。</p>
<p><img src="http://ww1.sinaimg.cn/large/bf8500b1gy1g2dkogdvc2j20kg0feaot.jpg"></p>
<h2 id="分区安装系统步骤">分区安装系统步骤</h2>
<p>进去PE之后 我们就要对新硬盘 进行一个分区操作了</p>
<blockquote>
<p>【如果是老硬盘，有分区的 那可以省略这一步 直接按照下面装系统】</p>
</blockquote>
<p>这里采用的是一个三星120G的固态硬盘，<strong>一般为了发回固态最大性能，都要在主板预先开启AHCI模式和分区的时候选择4K对齐</strong>，另外3.0的数据线和主板必须支持3.0的接口。</p>
<p>AHCI模式是主板自带的 新主板都支持 ，如果有的老的主板是IDE的预先设置好，华硕技嘉B250等以上主板 默认都是AHCI模式不需要更改</p>
<p>就要首先打开DG分区工具箱进行分区处理 ，如下图</p>
<p><img src="http://ww1.sinaimg.cn/large/bf8500b1gy1g2dkql68yej2087095n03.jpg"></p>
<p>点击分区工具 之后 会看到您的硬盘 这时候 可以选择您的新硬盘之后 点击上面的快速分区 如下图</p>
<p><img src="http://ww1.sinaimg.cn/large/bf8500b1gy1g2dkqlcps7j20sk0le0vb.jpg"></p>
<p>在新的页面中 你可以选择分几个区 多少容量 都可以自行填写 别的不需要去改变 ，另外右下角 就是4K对齐，只许勾选即可，如下图</p>
<blockquote>
<p>注：固态硬盘需要选择4K，机械硬盘不用现在 ，选择了会导致进不了系统</p>
</blockquote>
<p><img src="http://ww1.sinaimg.cn/large/bf8500b1gy1g2dkqlfbuwj20sg0lcdix.jpg"></p>
<p>分区好后关闭分区接口窗口看下一步操作</p>
<h2 id="安装系统镜像步骤">安装系统镜像步骤</h2>
<p>打开桌面上的电脑店一键还原，如下图</p>
<ul>
<li>①选择系统镜像文件，等待自动识别和挂载后再次选择系统版本。</li>
<li>②选择需要安装系统的分区。[可以根据分区容量格式信息来判断分区]</li>
<li>③点击执行按钮等待系统安装完成后重启拔掉U盘。</li>
</ul>
<p><img src="http://ww1.sinaimg.cn/large/bf8500b1gy1g2dkteiu6oj20sh0lcndo.jpg"><br>
<img src="http://ww1.sinaimg.cn/large/bf8500b1gy1g2dktdvyxqj20sg0lcjz6.jpg"><br>
<img src="http://ww1.sinaimg.cn/large/bf8500b1gy1g2dktdt7xvj20sg0ldqaq.jpg"><br>
<img src="http://ww1.sinaimg.cn/large/bf8500b1gy1g2dktdmj5lj20s70lcwmd.jpg"><br>
<img src="http://ww1.sinaimg.cn/large/bf8500b1gy1g2dktddlauj20se0lc0wb.jpg"><br>
<img src="http://ww1.sinaimg.cn/large/bf8500b1gy1g2dktdxzdgj20sg0ldgtn.jpg"></p>
<blockquote>
<p>PS：等进度条走完了 提示重启的时候一定要拔掉U盘 再重启哦！！之后就可以正常进入安装系统过程了，等待大概5-10分钟左右装好重启即可正常使用了</p>
</blockquote>
<p>免责条款 &gt; (本作品仅限网友交流安装系统经验，或可作临时安装测试PC硬件之用，请在安装后24小时内删除，若需要长期使用，请购买正版系统及软件。)</p>
<h2 id="激活系统步骤">激活系统步骤</h2>
<p>激活工具箱下载连接： <a href="https://pan.baidu.com/s/1i47JsOl" target="_blank" rel="external">win7~win10激活工具</a></p>
<h2 id="华硕主板网卡驱动安装步骤">华硕主板网卡驱动安装步骤</h2>
<p>教程连接：<a href="http://note.youdao.com/noteshare?id=40345f63671ea936740aa771cca2d438" target="_blank" rel="external">http://note.youdao.com/noteshare?id=40345f63671ea936740aa771cca2d438</a></p>
<p>建议上网其他驱动问题下载：<a href="http://www.drivergenius.com/" target="_blank" rel="external">驱动精灵 标准版</a></p>
<h1 id="总结">总结</h1>
<p>每次装机总忘记一些流程 这里记录下来</p>
<p><a href="https://note.youdao.com/ynoteshare1/index.html?id=e0f8c30393c4f069555d286020f9d394&amp;type=note" target="_blank" rel="external">参考 PE安装系统教程</a><br>
<a href="http://05aebac1.wiz03.com/share/s/05HHH13zK4EY2bE37Q00RO3H1CvO101754vQ2bNyFE2nhALV?tdsourcetag=s_pcqq_aiomsg" target="_blank" rel="external">U盘刻录安装原版系统教程</a><br>
<a href="http://msdn.itellyou.cn/" target="_blank" rel="external">I tell you神奇的镜像下载网站 绝对纯洁</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;
&lt;p&gt;为了解决每次都重装windows电脑系统浪费时间,干脆整理一篇文章记录一下,方便后续修电脑总忘记各种工具&lt;/p&gt;
&lt;h3 id=&quot;pe安装系统教程&quot;&gt;PE安装系统教程&lt;/h3&gt;
&lt;p&gt;PE工具箱制作&lt;/p&gt;
&lt;p&gt;主要步骤：&lt;/p&gt;

    
    </summary>
    
      <category term="windows装机" scheme="https://www.sunyazhou.com/categories/windows%E8%A3%85%E6%9C%BA/"/>
    
    
      <category term="win7" scheme="https://www.sunyazhou.com/tags/win7/"/>
    
  </entry>
  
  <entry>
    <title>AVRoutePickerView</title>
    <link href="https://www.sunyazhou.com/2019/04/17/20190417AVRoutePickerView/"/>
    <id>https://www.sunyazhou.com/2019/04/17/20190417AVRoutePickerView/</id>
    <published>2019-04-17T07:19:52.000Z</published>
    <updated>2019-11-27T14:24:05.020Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/b0103699818f9d0cf124236b1693aca4fae22bad/20190417AVRoutePickerView/cover_album.jpg"></p>
<h1 id="前言">前言</h1>
<p>最近无意中看了一下AVKit发现内部增加了很多新的内容.其中有个<code>AVRoutePickerView</code>的UI控件,打算研究一下. 其实这个很常见就在系统的控制中心 下拉屏幕就能看见 当你连接耳机或者无线蓝牙设备的时候.</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/13eb2699ea561fa3020d4611f9464c4f02aa0c96/20190417AVRoutePickerView/RouteChange2.gif"></p>
<p>这里网易云音乐中有实践的例子</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/13eb2699ea561fa3020d4611f9464c4f02aa0c96/20190417AVRoutePickerView/RouteChange1.gif"></p>
<p>这个控件主要用于AirPlay投屏 和音频的线路切换</p>
<p>那么我今天就跟大家一起学习一下这个新的控件</p>
<h2 id="代码实现">代码实现</h2>
<p>导入<code>#import &lt;AVKit/AVKit.h&gt;</code></p>
<p>剩下的就是创建实例调用方法</p>
<p>这里用ViewController做示例</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()  &lt;<span class="title">AVRoutePickerViewDelegate</span>&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (@available(iOS <span class="number">11.0</span>, *)) &#123;</div><div class="line">        <span class="built_in">AVRoutePickerView</span> *routerPickerView = [[<span class="built_in">AVRoutePickerView</span> alloc] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>)];</div><div class="line">        routerPickerView.activeTintColor = [<span class="built_in">UIColor</span> cyanColor];</div><div class="line">        routerPickerView.delegate = <span class="keyword">self</span>;</div><div class="line">        [<span class="keyword">self</span>.view addSubview:routerPickerView];</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// Fallback on earlier versions</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//AirPlay界面弹出时回调</span></div><div class="line">- (<span class="keyword">void</span>)routePickerViewWillBeginPresentingRoutes:(<span class="built_in">AVRoutePickerView</span> *)routePickerView API_AVAILABLE(ios(<span class="number">11.0</span>))&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"Airplay视图弹出"</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">//AirPlay界面结束时回调</span></div><div class="line">- (<span class="keyword">void</span>)routePickerViewDidEndPresentingRoutes:(<span class="built_in">AVRoutePickerView</span> *)routePickerView API_AVAILABLE(ios(<span class="number">11.0</span>))&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"Airplay视图弹回"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>添加完之后运行如下</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/526b8265245ebd6cd4c51c591720868eff8d2d60/20190417AVRoutePickerView/routechange3.gif"></p>
<p><code>AVRoutePickerView</code>这个View提供的API 就两个颜色值剩下的啥都没有,啥都改不了,那怎么才能实现网易云音乐那样自定义图标呢？</p>
<h5 id="添加自定义视图">添加自定义视图</h5>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="built_in">UIImageView</span> *imageView = [[<span class="built_in">UIImageView</span> alloc] initWithFrame:routerPickerView.bounds];</div><div class="line">        imageView.image = [<span class="built_in">UIImage</span> imageNamed:<span class="string">@"logo2"</span>];</div><div class="line">        [routerPickerView addSubview:imageView];</div></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/526b8265245ebd6cd4c51c591720868eff8d2d60/20190417AVRoutePickerView/routechange4.gif"></p>
<p>自己加个图标即可.</p>
<h1 id="总结">总结</h1>
<p>此控件只适用于iOS11以后,使用的时候 记得加可用性检测API</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="keyword">if</span> (@available(iOS <span class="number">11.0</span>, *)) &#123;</div><div class="line">	<span class="comment">//这里写创建视图代码</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个控件在多数场景上提升了用户体验,比如音视频类app经常频繁接线控或者蓝牙耳机,那么对这个有要求的可以试试.感谢支持!</p>
<p><a href="https://github.com/sunyazhou13/AVRoutePickerViewDemo" target="_blank" rel="external">demo点击这里下载</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/b0103699818f9d0cf124236b1693aca4fae22bad/20190417AVR
    
    </summary>
    
      <category term="AVKit" scheme="https://www.sunyazhou.com/categories/AVKit/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="macOS开发" scheme="https://www.sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>iOS抖音滚动字幕</title>
    <link href="https://www.sunyazhou.com/2019/03/21/20190321UIScrollTextDemo/"/>
    <id>https://www.sunyazhou.com/2019/03/21/20190321UIScrollTextDemo/</id>
    <published>2019-03-21T01:50:20.000Z</published>
    <updated>2019-03-27T13:25:06.834Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/74173425cf3b36cfe3ca5895322534c073110e22/20190321UIScrollTextDemo/CALayer_proSwift_ru_hsuie-2.png"></p>
<h1 id="前言">前言</h1>
<p>很久没更新博客了(家里事情比较多时间太紧迫加上工作时间有限),今天给大家带来的是抖音得滚动字幕,也就是音乐专辑的专辑名称 废话不多说上图</p>
<p>抖音如下<br>
<img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/a3d901e656f38c50dd52ea42306cad6527f99739/20190321UIScrollTextDemo/douyin_scroll_text.gif"></p>
<p>系统的滚动字幕如下</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/a8d850a7f752b71fa29b9f069baaeef2e14ecf7d/20190321UIScrollTextDemo/scrolltextdemo4.gif"></p>
<p>本篇完成之后如下<br>
<img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/a3d901e656f38c50dd52ea42306cad6527f99739/20190321UIScrollTextDemo/me_scroll_text.gif"></p>
<ul>
<li>支持蒙版渐变模糊 可调节</li>
<li>支持富文本字符串用于显示表情或者图片</li>
</ul>
<h1 id="开篇">开篇</h1>
<p>整个实现比较简单 不超过 200行代码</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/bf6d749844033ba3b0c074559db978a18121f467/20190321UIScrollTextDemo/scrolltextdemo1.gif"></p>
<p>首先我们要用到两个CALayer</p>
<ul>
<li><code>CATextLayer</code> 用于展示文本</li>
<li><code>CAGradientLayer</code> 用于给文本加蒙版</li>
</ul>
<p>然后我们新建一个<code>UIScrollTextView</code>继承自<code>UIView</code>(我这是纯娱乐写成UI前缀大家可自行封装哈.)</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">UIScrollTextView</span> : <span class="title">UIView</span></span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>  ) <span class="built_in">NSString</span>           *text;   <span class="comment">//1</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIColor</span>            *textColor; <span class="comment">//2</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIFont</span>             *font;  <span class="comment">//3</span></div><div class="line"> </div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSAttributedString</span> *attrString; <span class="comment">//4</span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> 渐变开始的距离(0~0.5) 推荐 0.0x eg:0.026,</div><div class="line"> 如果设置成1的时候视图不够长会出现溢出得情况 不推荐超出范围</div><div class="line"> */</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">CGFloat</span>            fade; <span class="comment">//5</span></div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>对外暴露的接口</p>
<ul>
<li>1.显示的文本内容</li>
<li>2.文本颜色</li>
<li>3.文本字体</li>
<li>4.属性字符串 自行可控颜色字体和样式</li>
<li>5.蒙版渐变模糊的 渐变长度</li>
</ul>
<p>首先大家可以先忽略这些对外暴露的接口 到.m中看实现如下</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">UIScrollTextView</span> ()</span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">CATextLayer</span>  *textLayer; <span class="comment">//文本layer  </span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">CAGradientLayer</span> *gradientLayer; <span class="comment">//蒙版渐变layer</span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">CGFloat</span>      textSeparateWidth; <span class="comment">//文本分割宽度</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">CGFloat</span>      textWidth;   <span class="comment">//文本宽度</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">CGFloat</span>      textHeight;  <span class="comment">//文本高度</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">CGRect</span>       textLayerFrame; <span class="comment">//文本layer的frame</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">CGFloat</span>      translationX; <span class="comment">//文字位置游标</span></div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>在<code>initWithFrame:</code>;和<code>awakeFromNib</code>方法中 初始化一些成员变量</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">instancetype</span>)initWithFrame:(<span class="built_in">CGRect</span>)frame &#123;</div><div class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> initWithFrame:frame];</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</div><div class="line">        [<span class="keyword">self</span> configProperty];<span class="comment">//初始化成员变量 //1</span></div><div class="line">        [<span class="keyword">self</span> initLayer]; <span class="comment">//2</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)configProperty &#123;</div><div class="line">    _text = <span class="string">@""</span>;</div><div class="line">    _textColor = [<span class="built_in">UIColor</span> whiteColor];</div><div class="line">    _font = [<span class="built_in">UIFont</span> systemFontOfSize:<span class="number">14.0</span>];</div><div class="line">    <span class="keyword">self</span>.textSeparateWidth = [kSeparateText calculateSingleLineSizeFromFont:<span class="keyword">self</span>.font].width;</div><div class="line">    _fade = <span class="number">0.026</span>;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>1.configProperty方法 初始化默认值</li>
<li>2.initLayer方法创建我们需要的2个layer &gt; configProperty方法 初始化成员变量最好用<code>_</code>下划线 这样不会触发<code>setter</code>因为我们很多的代码都是写在setter和getter中</li>
</ul>
<h4 id="初始化layer">初始化Layer</h4>
<p>下面我们重点看下<code>initLayer</code></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)initLayer &#123;</div><div class="line">    <span class="comment">//文本layer  1</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.textLayer == <span class="literal">nil</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.textLayer = [[<span class="built_in">CATextLayer</span> alloc] init];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">self</span>.textLayer.alignmentMode = kCAAlignmentNatural; <span class="comment">//设置文字对齐模式 自然对齐</span></div><div class="line">    <span class="keyword">self</span>.textLayer.truncationMode = kCATruncationNone;  <span class="comment">//设置截断模式</span></div><div class="line">    <span class="keyword">self</span>.textLayer.wrapped = <span class="literal">NO</span>; <span class="comment">//是否折行</span></div><div class="line">    <span class="keyword">self</span>.textLayer.contentsScale = [<span class="built_in">UIScreen</span> mainScreen].scale;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.textLayer.superlayer == <span class="literal">nil</span>) &#123;</div><div class="line">        [<span class="keyword">self</span>.layer addSublayer:<span class="keyword">self</span>.textLayer];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//渐变 2</span></div><div class="line">    <span class="keyword">self</span>.gradientLayer = [<span class="built_in">CAGradientLayer</span> layer];</div><div class="line">    <span class="keyword">self</span>.gradientLayer.shouldRasterize = <span class="literal">YES</span>;</div><div class="line">    <span class="keyword">self</span>.gradientLayer.rasterizationScale = [<span class="built_in">UIScreen</span> mainScreen].scale;</div><div class="line">    <span class="keyword">self</span>.gradientLayer.startPoint = <span class="built_in">CGPointMake</span>(<span class="number">0.0</span>f, <span class="number">0.5</span>f); <span class="comment">//3</span></div><div class="line">    <span class="keyword">self</span>.gradientLayer.endPoint = <span class="built_in">CGPointMake</span>(<span class="number">1.0</span>f, <span class="number">0.5</span>f);  <span class="comment">//4</span></div><div class="line">    <span class="keyword">id</span> transparent = (<span class="keyword">id</span>)[<span class="built_in">UIColor</span> clearColor].CGColor; <span class="comment">// 5</span></div><div class="line">    <span class="keyword">id</span> opaque = (<span class="keyword">id</span>)[<span class="built_in">UIColor</span> blackColor].CGColor; <span class="comment">//5</span></div><div class="line">    <span class="keyword">self</span>.gradientLayer.colors = @[transparent, opaque, opaque, transparent]; <span class="comment">// 6</span></div><div class="line">    <span class="keyword">self</span>.gradientLayer.locations = @[@<span class="number">0</span>,@(<span class="keyword">self</span>.fade),@(<span class="number">1</span>-<span class="keyword">self</span>.fade),@<span class="number">1</span>]; <span class="comment">// 7</span></div><div class="line">    <span class="keyword">self</span>.layer.mask = <span class="keyword">self</span>.gradientLayer; <span class="comment">//8</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>代码<code>1</code>处 创建<code>CATextLayer</code>和我们创建其它CALayer一样没啥好说的,设置折行、对齐、截断...</p>
<p>代码<code>2</code>处 这里重点说一下这个<code>CAGradientLayer</code></p>
<p>代码<code>3</code>和<code>4</code>处是设置蒙版渐变 的开始方向和结束方向. (以屏幕左下角为原点0,0计算 到屏幕右上角1，1)</p>
<blockquote>
<p>如果开始点是(0.0,0.5)结束点是(1.0,0.5)是横向渐变<br>
如果开始点是(0.5,0)结束点是(0.5,1)是纵向渐变<br>
这两个点决定了渐变的方向</p>
</blockquote>
<p>我们可以把代码去掉运行看下不加蒙版的效果图 如下:</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/6e4cfde36e70fcae28eea1be9ec30b45b2ff8889/20190321UIScrollTextDemo/scrolltextdemo2.gif"></p>
<p>这里我用cyan颜色区域代表视图的大小,文本不加蒙版实际上超出显示范围的.</p>
<blockquote>
<p>注意: 动画不是这个layer自带,是我们自己加的代码,往下看 有代码</p>
</blockquote>
<p>代码<code>5</code>处代码 是给当前渐变layer加渐变颜色 实现蒙版模糊遮盖的效果</p>
<p>代码<code>6</code>处 把对于的颜色的数组中给<code>gradientLayer.colors</code></p>
<p>代码<code>7</code>处 对应 代码<code>6</code>处 配合使用,就做到了我们两边渐变遮盖的效果</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/31e8bdd5de62b4a84ed7be97154bb99f61abb8ab/20190321UIScrollTextDemo/scrolltextdemo3.gif"></p>
<p>上图就是我们下面代码的效果,我们加了4个点</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="keyword">self</span>.gradientLayer.colors = @[transparent, opaque, opaque, transparent]; <span class="comment">// 6</span></div><div class="line"><span class="keyword">self</span>.gradientLayer.locations = @[@<span class="number">0</span>,@(<span class="keyword">self</span>.fade),@(<span class="number">1</span>-<span class="keyword">self</span>.fade),@<span class="number">1</span>]; <span class="comment">// 7</span></div></pre></td></tr></table></figure>
<h4 id="更新layer布局">更新layer布局</h4>
<p>这里我们要在layoutSubviews方法中计算出正确的布局坐标,因为外部有可能使用autolayout布局.</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)layoutSubviews &#123;</div><div class="line">    [<span class="keyword">super</span> layoutSubviews];</div><div class="line">    </div><div class="line">    [<span class="built_in">CATransaction</span> begin];</div><div class="line">    [<span class="built_in">CATransaction</span> setDisableActions:<span class="literal">YES</span>];</div><div class="line">    <span class="built_in">CGFloat</span> textLayerFrameY = <span class="built_in">CGRectGetHeight</span>(<span class="keyword">self</span>.bounds)/<span class="number">2</span> - <span class="built_in">CGRectGetHeight</span>(<span class="keyword">self</span>.textLayer.bounds) / <span class="number">2</span>;</div><div class="line">    <span class="keyword">self</span>.textLayer.frame = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, textLayerFrameY, <span class="built_in">CGRectGetWidth</span>(<span class="keyword">self</span>.textLayerFrame), <span class="built_in">CGRectGetHeight</span>(<span class="keyword">self</span>.textLayerFrame));</div><div class="line">    <span class="keyword">self</span>.gradientLayer.frame = <span class="keyword">self</span>.bounds;</div><div class="line">    [<span class="built_in">CATransaction</span> commit];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里代码主要是更新gradientLayer 和textLayer的frame. 并</p>
<h5 id="为什么要用catransaction">为什么要用CATransaction?</h5>
<p>因为我们要在动画进行中手动改变动画的参数详情参考<a href="http://jefferyfan.github.io/2016/06/27/programing/iOS/CATransaction/" target="_blank" rel="external">设置动画参数</a></p>
<h3 id="剩下的主要有3个工作">剩下的主要有3个工作</h3>
<ul>
<li>绘制文本layer,就是把想显示的字符串给self.textLayer.string</li>
<li>添加滚动动画</li>
<li>成员变量的setter中调用绘制文本layer和滚动动画方法</li>
</ul>
<h5 id="添加drawtextlayer私有方法">添加drawTextLayer私有方法</h5>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//拼装文本</span></div><div class="line">- (<span class="keyword">void</span>)drawTextLayer &#123;</div><div class="line">    <span class="keyword">self</span>.textLayer.foregroundColor = <span class="keyword">self</span>.textColor.CGColor;</div><div class="line">    <span class="built_in">CFStringRef</span> fontName = (__bridge <span class="built_in">CFStringRef</span>)<span class="keyword">self</span>.font.fontName;</div><div class="line">    <span class="built_in">CGFontRef</span> fontRef = <span class="built_in">CGFontCreateWithFontName</span>(fontName);</div><div class="line">    <span class="keyword">self</span>.textLayer.font = fontRef;</div><div class="line">    <span class="keyword">self</span>.textLayer.fontSize = <span class="keyword">self</span>.font.pointSize;</div><div class="line">    <span class="built_in">CGFontRelease</span>(fontRef);</div><div class="line">    <span class="comment">// 1</span></div><div class="line">    <span class="keyword">self</span>.textLayer.string = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@%@%@%@%@"</span>,_text,kSeparateText,_text,kSeparateText,_text];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里注意 <code>1</code> 处 代码 干了两件事</p>
<ul>
<li>拼接文本</li>
<li>给layer.string</li>
</ul>
<p>格式拼接 <strong>文本+3个空格+文本+3个空格+文本</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="built_in">NSString</span> * <span class="keyword">const</span> kSeparateText          = <span class="string">@"   "</span>;   <span class="comment">//3个空格</span></div></pre></td></tr></table></figure>
<blockquote>
<p>kSeparateText 是个常量</p>
</blockquote>
<h5 id="添加文本滚动动画">添加文本滚动动画</h5>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)startAnimation &#123;</div><div class="line">    <span class="keyword">if</span> ([<span class="keyword">self</span>.textLayer animationForKey:kTextLayerAnimationKey]) &#123;</div><div class="line">        [<span class="keyword">self</span>.textLayer removeAnimationForKey:kTextLayerAnimationKey];</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">CABasicAnimation</span> *animation = [<span class="built_in">CABasicAnimation</span> animation];</div><div class="line">    animation.keyPath = <span class="string">@"transform.translation.x"</span>; <span class="comment">//沿着X轴运动</span></div><div class="line">    animation.fromValue = @(<span class="keyword">self</span>.bounds.origin.x);</div><div class="line">    animation.toValue = @(<span class="keyword">self</span>.bounds.origin.x - <span class="keyword">self</span>.translationX);</div><div class="line">    animation.duration = <span class="keyword">self</span>.textWidth * <span class="number">0.035</span>f;</div><div class="line">    animation.repeatCount = MAXFLOAT;</div><div class="line">    animation.removedOnCompletion = <span class="literal">NO</span>;</div><div class="line">    animation.fillMode = kCAFillModeForwards;</div><div class="line">    animation.timingFunction = [<span class="built_in">CAMediaTimingFunction</span> functionWithName:kCAMediaTimingFunctionLinear];</div><div class="line">    [<span class="keyword">self</span>.textLayer addAnimation:animation forKey:kTextLayerAnimationKey];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里给<code>self.textLayer</code>加一个CABasicAnimation,让它沿着X轴运动,当然如果大家喜欢后续我添加多个方向类似<a href="https://github.com/sunyazhou13/MarqueeLabel" target="_blank" rel="external">MarqueeLabel滚动文本</a>一样,不过我觉得<a href="https://github.com/sunyazhou13/MarqueeLabel" target="_blank" rel="external">MarqueeLabel滚动文本</a>的实现太复杂,不够接地气,这个简单的动画效果还是要自己写比较靠谱.</p>
<blockquote>
<p>给self.textLayer添加动画即可,相信大家非常了解iOS动画我就不一一介绍了.</p>
</blockquote>
<h5 id="成员变量的setter中调用绘制文本layer和滚动动画方法">成员变量的setter中调用绘制文本layer和滚动动画方法</h5>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)setText:(<span class="built_in">NSString</span> *)text &#123;</div><div class="line">    _text = text;</div><div class="line">    <span class="comment">//计算单行文本大小</span></div><div class="line">    <span class="built_in">CGSize</span> size = [text calculateSingleLineSizeWithAttributeText:_font];</div><div class="line">    _textWidth = size.width;</div><div class="line">    _textHeight = size.height;</div><div class="line">    _textLayerFrame = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, _textWidth * <span class="number">3</span> + _textSeparateWidth * <span class="number">2</span>, _textHeight);</div><div class="line">    _translationX = _textWidth + _textSeparateWidth;</div><div class="line">    [<span class="keyword">self</span> drawTextLayer];</div><div class="line">    [<span class="keyword">self</span> startAnimation];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里每次给当前视图设置相关文本的时候 setter处,就调用一下 渲染文本和动画.这样可以对外部暴露相关接口实时修改实时生效.至于其它的属性字符串,字体等也要最后追加上</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">[<span class="keyword">self</span> drawTextLayer];</div><div class="line">[<span class="keyword">self</span> startAnimation];</div></pre></td></tr></table></figure>
<p>因为改动对文本大小有影响</p>
<p>文字的计算大小这里用的是 CoreText,支持多行和单行</p>
<p>属性字符串也一样就不写在这里了. 详细代码demo我已经把它写到文章下方 大家自行加载学习即可</p>
<p>最终效果 <img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/a3d901e656f38c50dd52ea42306cad6527f99739/20190321UIScrollTextDemo/me_scroll_text.gif"></p>
<h1 id="总结">总结</h1>
<p>由于业余时间有限,没能1个月稳定更新2偏文章,请各位同仁理解,抖音系列动画需要先写demo然后仔细研究,最终才形成文章.制作不易,本篇也参考了开源代码和一些滚动字幕的库.由于演示的不完美,有些类还有可扩展空间,比如 开始动画和结束动画对外暴露接口,比如像系统那样的自然添加动画组. 本篇感谢开源作者<a href="https://github.com/sshiqiao/douyin-ios-objectc" target="_blank" rel="external">qiaoshi</a>,因为作者写的不是很完美我学习研究一下,增加了渐变效果和属性字符串得支持.</p>
<p><a href="https://github.com/sunyazhou13/UIScrollTextDemo" target="_blank" rel="external">本篇demo</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/74173425cf3b36cfe3ca5895322534c073110e22/20190321UIS
    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="抖音动画系列" scheme="https://www.sunyazhou.com/tags/%E6%8A%96%E9%9F%B3%E5%8A%A8%E7%94%BB%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>Mac上的一些好软件推荐</title>
    <link href="https://www.sunyazhou.com/2019/02/15/20190215Tools/"/>
    <id>https://www.sunyazhou.com/2019/02/15/20190215Tools/</id>
    <published>2019-02-15T02:40:15.000Z</published>
    <updated>2019-02-16T05:59:28.804Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言">前言</h1>
<p>新年第一篇 把自己用的比较好的工具都记录下来</p>
<h2 id="截屏-snipaste">截屏 Snipaste</h2>
<p>没当没有网络的时候 或者拿到新mac的时候由于没有什么软件截屏,不得不用QQ或者微信自带的截屏.这就逼着我不得不安装这两个app，有了Snipaste 跟截屏说再见吧</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/8fc0ac07afdde666f0175c27f191e7b6037a85d1/20190215Tools/snipaste.png"></p>
<p>Snipaste是一个小巧强大的截图软件，可以直接对截图进行打码、标注、分享，而不用先保存到本地.</p>
<p>使用方法是按住<code>Fn</code>+<code>F1</code> 就出现了截屏页面大家可以试试</p>
<p><a href="https://www.snipaste.com/" target="_blank" rel="external">下载地址</a></p>
<h2 id="快捷键查看器cheatsheet">快捷键查看器CheatSheet</h2>
<p>CheatSheet可以快速调出当前软件支持的快捷键，长按command即可，简单实用。</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/8fc0ac07afdde666f0175c27f191e7b6037a85d1/20190215Tools/CheatSheet.png"></p>
<blockquote>
<p>使用之前必须在隐藏策略和安全性那个地方给这个加上访问权限才可以 具体有图片提示按照图片操作即可</p>
</blockquote>
<p><a href="https://www.mediaatelier.com/CheatSheet/" target="_blank" rel="external">下载地址</a></p>
<h2 id="下载工具-folx">下载工具 Folx</h2>
<p>迅雷的替代品，支持BT下载，遇到迅雷无法下载的资源时，可以尝试一下Folx，免费版就可以满足基本需求</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/8fc0ac07afdde666f0175c27f191e7b6037a85d1/20190215Tools/Folx.png"></p>
<p>对于一个曾经在百度网盘搬过砖的程序员 文件上传下载这种最基础的业务必须玩的很溜,当年迅雷有意让我去面试被我拒绝,主要是公司距离住的地方太远,但是从文件下载限速的策略上我觉得是迅雷还是不足以驱动互联网前进的方向,这种第三方的folx完全彻底取代了迅雷.</p>
<p><a href="https://mac.eltima.com/cn/torrent-client.html" target="_blank" rel="external">下载地址</a></p>
<h2 id="视频播放器iina">视频播放器IINA</h2>
<p>IINA被很多人认为是Mac端的最强视频播放器，简洁无广告，并且功能强大，支持在线字幕的功能，值得尝试</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/8fc0ac07afdde666f0175c27f191e7b6037a85d1/20190215Tools/IINA.png"></p>
<p>各种使用还行</p>
<p><a href="https://iina.io/" target="_blank" rel="external">下载地址</a></p>
<h2 id="mactracker">Mactracker</h2>
<p>Mactracker提供了苹果全系列产品的所有信息，包括性能参数、售价等。可以进行检索，还有发布的时间顺序，方便查看。这个软件也有iOS版。</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/8fc0ac07afdde666f0175c27f191e7b6037a85d1/20190215Tools/Mactracker.jpeg"></p>
<p>做为一个iOS开发者,如果不能实时了解水果公司得各种产品的积极动向我觉得是一种不积极的工作表现,这个软件可以实时的查看苹果目前的所有发不过的型号等等info.</p>
<p><a href="https://itunes.apple.com/cn/app/mactracker/id430255202?mt=12" target="_blank" rel="external">下载地址iTunes</a></p>
<h2 id="图片水印批量添加工具-photobulk">图片水印批量添加工具 PhotoBulk</h2>
<p>PhotoBulk可以对图片进行批量处理，比如批量加水印，只要设置好了固定的水印内容、大小、位置，就可以一键生成带水印的图片，十分方便。</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/8fc0ac07afdde666f0175c27f191e7b6037a85d1/20190215Tools/PhotoBulk.jpeg"></p>
<p><a href="https://itunes.apple.com/cn/app/photobulk-watermark-in-batch/id537211143?mt=12" target="_blank" rel="external">下载地址(收费软件)</a></p>
<h2 id="解压缩">解压缩</h2>
<p>Mac对压缩文件的格式支持不足，只支持zip，借助The Unarchiver可以补足这个缺陷，它支持常见的zip、rar、7z等常见格式，可以完成压缩、解压等工作</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/8fc0ac07afdde666f0175c27f191e7b6037a85d1/20190215Tools/The%20Unarchiver.png"></p>
<p><a href="https://itunes.apple.com/cn/app/the-unarchiver/id425424353?mt=12" target="_blank" rel="external">下载地址</a></p>
<h2 id="mac上管理android的文件管理-handshaker">mac上管理android的文件管理 handshaker</h2>
<p>锤子科技出品的文件管理软件，用于在Mac电脑上管理Android手机内容，功能强大，可以互传文件、分类管理。</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/8fc0ac07afdde666f0175c27f191e7b6037a85d1/20190215Tools/HandShaker.jpeg"></p>
<p><a href="https://www.smartisan.com/apps/#/handshaker" target="_blank" rel="external">下载地址</a></p>
<h2 id="mac-视频转gif-工具-gif-brewery-3">mac 视频转gif 工具 GIF Brewery 3</h2>
<p>Mac上最强大的GIF图处理工具，可以将视频转为GIF，对尺寸、大小、起止点等进行设置，之前是付费软件，现在免费提供。</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/8fc0ac07afdde666f0175c27f191e7b6037a85d1/20190215Tools/GIF%20Brewery%203.png"></p>
<blockquote>
<p>这个软件不错 我经常写博客配图就是录制成mov转成gif</p>
</blockquote>
<p><a href="">下载地址</a></p>
<h2 id="mac上音量分别控制-background-music">mac上音量分别控制 Background Music</h2>
<p>Background Music的功能非常简单，在MacBook中分别控制不同软件的音量，就像Android手机和Windows电脑一样。</p>
<figure>
<img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/8fc0ac07afdde666f0175c27f191e7b6037a85d1/20190215Tools/Background%20Music.jpeg" alt="Background Music"><figcaption>Background Music</figcaption>
</figure>
<p>我经常用企业IM 但总是因为聊天软件的声音太大 影响体验,没想到还有这种细致入微的app专门解决了这个痛点.</p>
<p><a href="https://github.com/kyleneideck/BackgroundMusic/releases" target="_blank" rel="external">下载地址</a></p>
<h2 id="第三方网易云音乐">第三方网易云音乐</h2>
<p>第三方的网易云音乐播放器，界面经过重新设计，喜欢的朋友可以尝试一下。</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/8fc0ac07afdde666f0175c27f191e7b6037a85d1/20190215Tools/ieaseMusic.png"></p>
<p>这个第三方的过于花哨 不实用,不如不装.</p>
<p><a href="https://github.com/trazyn/ieaseMusic" target="_blank" rel="external">下载地址</a></p>
<h1 id="总结">总结</h1>
<p>有很多软件没有及时整理 有时间会不定时更新 多谢支持</p>
<p><a href="https://onevcat.com/apps/" target="_blank" rel="external">喵神的工具集合</a><br>
<a href="https://www.ithome.com/0/409/410.htm" target="_blank" rel="external">参考ithome</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;
&lt;p&gt;新年第一篇 把自己用的比较好的工具都记录下来&lt;/p&gt;
&lt;h2 id=&quot;截屏-snipaste&quot;&gt;截屏 Snipaste&lt;/h2&gt;
&lt;p&gt;没当没有网络的时候 或者拿到新mac的时候由于没有什么软件截屏,不得不用QQ或者微信自带的截屏.这
    
    </summary>
    
      <category term="神兵利器" scheme="https://www.sunyazhou.com/categories/%E7%A5%9E%E5%85%B5%E5%88%A9%E5%99%A8/"/>
    
    
      <category term="macOS开发" scheme="https://www.sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>2018年终总结</title>
    <link href="https://www.sunyazhou.com/2018/12/28/20181228FinalSummary/"/>
    <id>https://www.sunyazhou.com/2018/12/28/20181228FinalSummary/</id>
    <published>2018-12-28T15:04:41.000Z</published>
    <updated>2019-03-09T04:39:33.600Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/9e263dd6fbfaf3cb12eee6ebcbfff3519dc5f9eb/20181231FinalSummary/1500x500.JPEG"></p>
<h1 id="前言">前言</h1>
<blockquote>
<p><strong>埋头苦干尽五年,晨起面镜白发先.</strong><br>
<strong>一年到头不见泪,岁月荏苒冬却寒.</strong><br>
<strong>仿佛回到一三年,北京站前望着天.</strong><br>
<strong>北漂掘金那刻起,人生已无再少年.</strong></p>
</blockquote>
<p><img src="https://ws1.sinaimg.cn/mw690/bf8500b1ly1fya3hev8jmg208004dkjm.gif"></p>
<p><em>我要是能像你那么潇洒就好了,有时候你能做的事情我却做不到,我相信正义,可是没人相信我...</em></p>
<p><strong>这一年过的像网速一样快,看着年末又到了,我依然得墨守陈规的交出我的2018年终总结</strong></p>
<h2 id="回顾">2018回顾</h2>
<p>这一年的清单如下:</p>
<ul>
<li>工作</li>
<li>演唱会</li>
<li>读书</li>
<li>技术</li>
<li>坚持</li>
<li>生活</li>
<li>故事</li>
<li>百年</li>
<li>总结</li>
</ul>
<p>很精彩...</p>
<h2 id="工作">工作</h2>
<p>这一年我很动荡,4月份从金山云到了快手.负责开发快手iOS国内版App的直播业务.我是一个不太喜欢换工作的人.从百度一路走来,回头看除了心酸和热泪盈眶...</p>
<p>来到了快手,感觉到这个公司确实很有意思,是参加工作以来我认为最值得去的一个公司,因为我在与一群清华的学子为伍,与北邮的小伙伴肩并肩,这里基本50%都是清华系,老实说,当我面试的时候从上午10点面到下午4点多,我都不知道我是怎么面过的时候,我真的想放弃了,如果不面吐的面试那只能算唠嗑.团队的中坚力量来自于麻省理工学院,以及Facebook来的大佬.这其实是一种收获,一种能与世界顶尖大学的毕业生一起工作的机会,虽然我的工作经历算不上有多好,不过能与这样的小伙伴为伍我应该感到荣幸,当然自己不能太low.他们身上有我值得学习地方,我不喜欢横向对比,只喜欢纵向对比,对比那些比我优秀的人.</p>
<blockquote>
<p>北邮(北京邮电大学)被誉为计算机界的黄埔军校,录入分数仅次于清华几分.</p>
</blockquote>
<p>说完了我的感受,我再说一下这家公司的价值观,从我肤浅的认知价值观来看这家公司,确实很值得__尊重__,我只说两点:</p>
<ul>
<li>第一:接地气,如果你喜欢抖音,那我只能说你太不切实际,因为抖音的美女瘦身都是AI通过肢体识别实现的,换句话说你在被忽悠,再说抖音的视频中的内容,豪车,豪宅,高贵轻奢的生活,品质高档的餐厅...__我就想问你,中国有多少人能过的上你在抖音视频中能看到的生活,你能吗？你能开着劳斯莱斯有事没事的炫耀吗?__快手不一样,这里你能看到底层的劳动人民为了美好的生活而付出的实践行动,他们没有好的背景,他们真的只有背影,那种背影就是他们拍摄的视频的时候,这就是他们真实生活的写照...</li>
<li>第二:不像主播倾斜流量.基本不签约明星,名人,让每个普通人能凭借自己的本领脱颖而出,这换句话说就是在用互联网帮助每个人得到公平.(倾斜流量就是把一些高端名人推荐给你让你默认就关注他就跟微博似的最后整的都没法正常说话发东西.全是劈天盖地的牛皮癣广告)</li>
</ul>
<blockquote>
<p>回头再来看看BAT 哪家敢站出来说自己做到了上边这两点.做到了的在底部评论区扣1.</p>
</blockquote>
<p>今年来快手又两件事让我很高兴</p>
<ul>
<li>杭州之旅</li>
<li>快手家乡</li>
</ul>
<h4 id="南下杭州">南下杭州</h4>
<p>刚到这家公司不久就赶上了Team Building(团队建设),去杭州 我从未去过杭州,第一站是杭州的海宁</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/5b7ec1d2b93ef37e0298da61b8ca8d2fead18ac1/20181231FinalSummary/haining.jpg"></p>
<blockquote>
<p>当年孙中山先生就是在这里下车去钱塘江观潮</p>
</blockquote>
<p>西塘,在家乡我习惯了23年的低矮平房,从未见过如下得建筑风格,这种徽系的白墙瓦房有一种中国地方的特色</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/d7b92c1b06942ffcae31bb001359836d2030e016/20181231FinalSummary/hangzhou2.jpg"> &gt; 真是栏杆拍遍吴钩看了，无人会登临意,休说鲈鱼堪脍尽西风季鹰归未...</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/d7b92c1b06942ffcae31bb001359836d2030e016/20181231FinalSummary/hangzhou1.jpg"></p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/fc87f192bde618d91574bf116c58409d5e4f1023/20181231FinalSummary/hangzhou3.jpg"></p>
<p>这里曾经是__伍子胥（公元前559年—公元前484年,大约是春秋末年）<strong> 兴修的水利工程,我对春秋末年吴王夫差越王勾践的故事记忆犹新,但对吴国的风土人情的认知仅限于上学时候读的</strong>《史记》__内容描述,从未亲自来到这里.虽然我的认知十分肤浅,但看到了江南风情的别具一格还是令我肃然起敬,从北京到杭州的列车上,途径山东泰山,苏州的姑苏城,上海的长江流域.长江三角洲的确不同于我的家乡东北,这里物流车辆远高于在东北的任何高速,从这一点就可以客观的发现江浙一带经济比东北要发达的多.这一路我几乎一夜没睡,各地都在大兴土木搞基建,火车途径每一个城市附近周边都很明显的发现塔吊楼房,正在施工作业.</p>
<p>江南的风景如画的确如此.</p>
<p><strong>杭州之旅我路过了钱塘江</strong></p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/5b7ec1d2b93ef37e0298da61b8ca8d2fead18ac1/20181231FinalSummary/qiantangriver.jpg"></p>
<p>这一幕让我不禁的想起初一时候清晨背诵的一首白居易的《钱塘湖春行》</p>
<p>当我身临其境的感受钱塘江的时候,我只有一个感慨,此情此景如果我是白居易我也一样能做出一首诗,这一幕也许在东北几乎是感受不到的.对于一个东北的孩子,让他有诗人的灵感的前提是他需要有这样的环境和人文历史.我喜欢比较我的家乡和我去过的所有地方,在我的家乡冰天雪地,夏季没有像江南的小桥流水人家,没有古道西风瘦马,更没有夕阳西下断肠人在天涯...我的家乡只有黑土地和森林,以及一望无际的平原,唯一一条松花江还只是我们从电视上才能感受到唯一人文地理.地域的文化差距是截然不同的,但是我们的初中依然要学习白居易的《钱塘湖春行》这种以我看来就是为了应付考试的任务文章已经脱离地域特色,变得毫无意义.我并不是偏激,学识渊博是好的,但是,需要了解自己的生活地域和文化我认为比背诵白居易的《钱塘湖春行》更有意义.</p>
<h4 id="快手家乡">快手家乡</h4>
<p>今年晚些时候, 快手征求全公司员工意见,为一部分员工的家乡树立广告牌,我很幸运,成为了其中之一</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/13fb4cba3ab24f4d00201b7dae171b65633c06f6/20181231FinalSummary/kwaihometown.JPG"></p>
<p>我也从未想过有一天我能登上海伦的京都广告牌,成为快手的形象代言人之一,这要是在百度估计即便升到T8也未曾有如此这般的待遇吧! 真的很感谢快手,<strong>这是一家有人文主义精神和艺术气质的公司.</strong></p>
<p>工作的内容大概就介绍这么多吧! 现在的工作和团队还是不错的.就像我前边说的那样,与清华的学子为伍,与北邮的小伙伴肩并肩.这一切不是每个人都能在工作中遇到的.</p>
<h2 id="演唱会">演唱会</h2>
<p>今年夏天,伍佰在北京五棵松体育馆 凯迪拉克中心开个人演唱会,这么多年我从未参加过任何一个明星真正意义上的演唱会.2013年的时候刘德华在北京开个人演唱会,由于当时没有舍得花钱买票,所以至今都觉得遗憾,当时刘德华的门票 ￥980一张. 如今伍佰的演唱会门票￥680一张,我买了两张,这一次说什么也要去看一看,以前因为工作没多久,花钱的确不敢大手大脚.</p>
<p>首席看台</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/42510f7a70af133d03d2a2060f3604e7163be3aa/20181231FinalSummary/chinablue2.jpg"></p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/42510f7a70af133d03d2a2060f3604e7163be3aa/20181231FinalSummary/chinablue3.jpg"></p>
<p>我记得第一次听伍佰的歌的时候是2000年左右,那时候我寄人篱下在我舅家东胜村,去双胜去上初中初一,有一次去一个叫镇东的地方全班同学都去听文艺演出,我坐在拖拉机的后车斗上,唱着伍佰的《白鸽》那时候还不知道MP3是什么东西,能听上这首录用磁带已经很满足了</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/61ad05a558d65fd4714b431755cbd8cfd810ca53/20181231FinalSummary/opentheshow.gif"></p>
<p>在伍佰的演唱会上开场的第二首想起的就是这首《白鸽》,唱出我的初中回忆,那个时候很穷,后来才知道还有一首成名曲叫《挪威的森林》.</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/42510f7a70af133d03d2a2060f3604e7163be3aa/20181231FinalSummary/chinablue1.gif"></p>
<p>当全场一起演唱挪威的森林的时候 那种场合的效果,绝对比KTV好多了.真的是前所未有,老实说 现场的声音算是原声了,这场演唱会真的值得.</p>
<p>伍佰说:"他的歌曲99%都是自己的原创" 不过仔细听过他的歌曲 真的很多经典<br>
这中间伍佰唱了一首我第一感觉我没听过的歌曲,但是很好听,后来才得知叫__《被动》__,推荐给你们听听.</p>
<h2 id="读书">读书</h2>
<p>这一年严格意义上来说我的眼睛很疼,每天至少14小时对着显示器,所以我列举了一些今年连看带听的书籍.</p>
<p>《晚清的最后十八年4》<br>
<img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/2e584f112f9b0f935c97330a521b0c3ee4536ab6/20181231FinalSummary/wanqing.jpg"></p>
<p>《曾国藩》<br>
<img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/c0bcc0e89234e74891d378696d8a596e72e27f31/20181231FinalSummary/zengguofan.jpg"></p>
<p>《晚清重臣李鸿章》<br>
<img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/c0bcc0e89234e74891d378696d8a596e72e27f31/20181231FinalSummary/lepetit.jpg"></p>
<p>《毛泽东传》<br>
<img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20181231FinalSummary/maozedong.jpg"></p>
<p>《周总理的最后600天》<br>
<img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/68128680d7b63955098277c9815c07eedff64f14/20181231FinalSummary/zhouzongli.jpg"></p>
<p>《普京传记》<br>
<img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/68128680d7b63955098277c9815c07eedff64f14/20181231FinalSummary/%D0%92%D0%BB%D0%B0%D0%B4%D0%B8%D0%BC%D0%B8%D1%80%D0%92%D0%BB%D0%B0%D0%B4%D0%B8%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B8%D1%87%D0%9F%D1%83%D1%82%D0%B8%D0%BD.jpg"></p>
<p>《习近平的七年知青岁月》<br>
<img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/68128680d7b63955098277c9815c07eedff64f14/20181231FinalSummary/xijinping.jpg"></p>
<p>《乔布斯传》<br>
<img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/68128680d7b63955098277c9815c07eedff64f14/20181231FinalSummary/jobs.jpg"></p>
<p>《货币战争1~5部》<br>
<img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/68128680d7b63955098277c9815c07eedff64f14/20181231FinalSummary/currency_wars.jpg"></p>
<p>《拿破仑传》<br>
<img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/68128680d7b63955098277c9815c07eedff64f14/20181231FinalSummary/Napol%C3%A9onBonaparte.jpg"></p>
<p>《李嘉诚传》<br>
<img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/68128680d7b63955098277c9815c07eedff64f14/20181231FinalSummary/superlee.jpg"></p>
<h4 id="晚清的最后十八年-第4部">晚清的最后十八年 第4部</h4>
<p>去年我读完了1~3部,可是那时候还没有完整版的第4部,这本书俞敏洪都亲自推荐,最后一部绝对殿堂班史诗级没有之一,读完最后一部才了解,原来康有为是个喜欢办事总打脸的人,根本做不到严于利己.原来孙中山其实并没有教科书上那样有多好,反而我觉得辛亥革命得归功于袁世凯,因为晚清是中国历史上像西方文明进军最恢宏得时代,袁世凯主张君主立宪保全皇族脸面,而黎洪元这些后来者为了掩盖造反的事实主张共和,葬送大清王朝最快的一个人是载沣(北京恭亲王府就是这个人的,最后捐给了中国人民政府)，就是他曾经去德国,德国沙皇让他下跪他保持了中华民族的尊严没有下跪,得到了德国皇帝得尊重,对这个人还是中国最后一个皇帝溥仪得父亲.总之这些 细节都会在这本书上说到.</p>
<p>从第一部介绍北洋舰队到介绍各种巡洋舰 驱逐舰 护卫舰 鱼雷艇... 这4部书简直完整的记录了中国清朝末期从中日甲午战争到辛亥革命全程记录.值得一看,强烈推荐</p>
<p>如果非要我写出推荐的理由,那我只能拿一张照片说明一下:</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/218720dd578111252efde67a95bcdfb1fedb2077/20181231FinalSummary/Krupp.jpg"></p>
<p>这是我今年10月份去天津市津南区小镇站 小站练兵园(袁世凯曾经练兵的地方)拍摄的德国克虏伯公司1860左右生产的野炮.</p>
<p>北洋时期的军舰巡洋舰大部分来自德国克虏伯公司,从这门炮的制造工艺来推测当时的工业制造程度和北洋海军的军事装备基本算是中国近代史亚洲第一的强国了.我们不是打不过日本,我们打不过的是清朝内部的腐败.</p>
<h4 id="曾国藩传">曾国藩传</h4>
<p>如果要问我为什么如此这般推荐曾国藩,我只能说,这是我认为清朝历史上屈指可数的名臣,作为清朝经历过三代皇帝的变更,三朝大臣,恪尽职守兢兢业业,嘉庆皇帝说作为大清帝国的大臣必须得干啥啥行,曾国藩从0开始学习建筑学,从0开始学习西方文明,从0开始学习任何别人能擅长自己不擅长的东西.儒士中的典范,曾子的后人.练习新军评定太平天国起义.麾下基本招纳当时神舟各路领域第一的人才,比如我们化学上的元素周期表,就是当时在曾国藩幕府效力的科学家<a href="https://baike.baidu.com/item/%E5%BE%90%E5%AF%BF/3672479?fr=aladdin" target="_blank" rel="external">徐寿</a>所做,如果不是这个人我们今天看到化学元素将是英文符号,不会全部都带金字旁.作为老师,他教出中国近代文明学贯中西的伟大门生<a href="https://zh.wikipedia.org/wiki/%E6%9D%8E%E9%B4%BB%E7%AB%A0" target="_blank" rel="external">李鸿章</a>,功勋卓著.可是后来的人们因为曾国藩没有处理好<a href="https://zh.wikipedia.org/wiki/%E5%A4%A9%E6%B4%A5%E6%95%99%E6%A1%88" target="_blank" rel="external">天津教案事件</a>而倍受争议,我认为不是处理不好,真正的原因是因为__弱国无外交__,是慈禧想让曾国藩来收拾这个烂摊子刻意把这事让曾国藩当替罪羊.换作今天就是,有时候人非圣贤孰能无过,得倍受争议的活着,这显然不是曾国藩的本意,以曾国藩大人的原则和立场绝不是因为这事被别人抛石子而不去为之,相反曾大人敢于直面惨淡的人生,敢于正视淋漓的献血.如果那时候是现在习大大的中国,曾大人也会像外交官王毅一样敢于跟世界任何一个国家平起平坐. 这是我钦佩这位伟人不为人知的一面.</p>
<p>所以为了表达我对曾大人的尊重我送曾大人一副对联:</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/45604ae3bd82a1e2d71c15873023b9140761581f/20181231FinalSummary/zengguofan1.jpg"></p>
<p><strong>求忠臣必于孝子之门</strong><br>
<strong>凡秀才当以天下为任</strong></p>
<h4 id="晚清重臣李鸿章">晚清重臣李鸿章</h4>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/c0bcc0e89234e74891d378696d8a596e72e27f31/20181231FinalSummary/lepetit1.jpg"></p>
<p>这位慈祥的老人,改变了中国近代史,被西方人誉为"东方的脾斯麦",中国第一位登上美国时代周刊封面人物,中国历史上第一位欧洲考察的人,第一位... 总计创造 了 47个 中国第一.</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/c0bcc0e89234e74891d378696d8a596e72e27f31/20181231FinalSummary/lepetit2.jpg"> &gt; 访问香港的李鸿章与香港总督卜力会面，站与李鸿章右侧者为刘学询，1900年7月。</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/c0bcc0e89234e74891d378696d8a596e72e27f31/20181231FinalSummary/ChineseMinisterLi%20HongzhangAndPrinceBismarck.jpg"> &gt; 为了表示对李鸿章的尊重和敬意，俾斯麦的着装极为庄重，穿上了他极少穿的盛装——德皇所赐玉冕、红鹰大十字宝星，手拿大玉，腰挂宝剑。两人见面后，首先互相问候对方身体如何，交流了各自的身心健康问题。</p>
<p>脾斯麦被誉为 德国的铁血宰相,简直跟李鸿章一模一样经历三朝德皇,欧洲动荡,苦战多年终于换来了德国的统一.</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/c0bcc0e89234e74891d378696d8a596e72e27f31/20181231FinalSummary/Bismarck%2COttoF%C3%BCrst_von_und%20LiHungChang.jpg"> &gt; 李鸿章与俾斯麦在首相府阳台</p>
<p>我用了这么多篇幅来介绍这位晚清名臣,我为什么这么崇拜这个人?</p>
<p>对,你问到了重点,我告诉你答案.</p>
<p>在我们的工作生活中,我们所从事的劳动基本都是西方文明的产物吧,计算机,物理化学,各种高科技,电路,哪种我们从几千年的中国的文化洗礼中能找到.我们饱读了中国的四书五经,可是我们反问过自己吗？读了这么多年书,没有从本质或者说从实际的实践中改变或者提过生产力,电脑,智能手机都是西方发明的,我们的时代已经进入了全盘西化的教育模式了</p>
<p>我们学习的英文 这东西我们的古典文学中根本找不到一个字母是能跟英语扯上关系的,我们今天用的汉语拼音是建国后和民国时期的产物.</p>
<p>在我自己的工作中经常会经历或者遭遇一些困难难以在断时间内克服或者解决,这个时候我就在反问自己,我怎么读了这么多年书连一个最简单的计算机理论问题都解决不了,回头想想计算机从发明的那一刻起到现在才几十年,我们从小就没有经历过计算的玩法,原理和制造,从某种意义上来说我们算不算是落后与西方文明,计算机不是中国人发明的,我们先要了解英语,了解和计算打交道的电脑语言,了解如何编写这种语言跟计算机交流,每当这个时候我内心是脆弱的,我的脆弱来自于我不够深入了解计算机内部,从我小的时候读的书都是千字文,跟这个东西扯不上关系,我应该找一个人作为我前进的榜样,这个人是谁呢,是谁在中国历史上第一位敢于学习西方文明,学贯中西,学习西方的先进文化,技术...制造自己的国家的计算机.我觉得这个人非李鸿章莫属,他虽然没有造计算机,但是他每天的工作都是面对着自己极大挑战的任务,他每天要处理洋人的事物,从德国克虏伯公司购买军舰创造北洋舰队,创办江南制造总局制造枪械兵器.用今天的话说,你首先得有车床,得有冶炼金属的技艺,得有技术,这位李大人可谓是中国第一个敢于解放思想观念接受西方文化和教育.学习西方先进文明技术来改造清朝的能臣了.</p>
<p>在西学东进的浪潮中,敢于像西方学习得人,非李鸿章莫属,我心中佩服这样的人,我今天工作中遇到的困难都是来自于西方的文明技术.有时候我们对于一些困难感到恐惧,其实恐惧源于未知,你不知道这么操作会意味着什么感到心理没底,主要的原因是我们还没有完全驾驭这一切.努力弄懂深入研究实践得到结论才是唯一的解决方式.</p>
<h5 id="用实力去赢得别人的尊重">用实力去赢得别人的尊重</h5>
<p>晚清重臣李鸿章为了练军(淮军)去镇压太平天国农民起义,自己回安徽在没有经费和职权得前提下,操练了一只新军,每次镇压太平天国起义总是败多胜少,最后迫于无奈解散了队伍,自己去投奔了恩师 曾国藩,那时候曾国藩也是练习了自己的一只新军-湘军,曾大人也跟李鸿章一样没有经费,但是各路大臣回乡操练新军中,几乎都像李鸿章一样失败,只有曾国藩的湘军不太一样,当李鸿章落魄投奔恩师的时候,曾国藩内心无比高兴,因为在某种重要的决策上他的门生李鸿章原胜于自己,李鸿章投奔门房军营去见恩师,曾国藩故意当什么都没发生,简单吩咐门房说我太忙让 少荃(李鸿章 字少荃)去临营寒舍歇息,待我有空便去探望.在曾国藩的幕府 接纳清朝大臣必须 鸣礼炮 多少响,迎接仪式必须隆重,李鸿章当时还算是一个不大的官员,按照朝廷礼节得 鸣礼炮隆重接待的,在曾国藩这里基本就跟个兵卒来了一样没啥反应,这李鸿章心理十分难受,第二天 一早,左宗棠平定西北叛乱回来,来见曾国藩,曾国藩的迎接仪式远比想象中要隆重,鸣礼炮多少响。。。迎接仪式非常隆重,这一幕李鸿章看眼在里,苦在心里,一个左宗棠连我一半的官职都不到,恩师居然这么隆重接待,我来了恩师当什么都没发生,恩师是带我登上文学殿大学士的人,是我科举考试中对我严加管教,教授我生存本领的人,现在这般场景,怎让我不心酸,哎 看来__我还得有自己的军队,打出几次胜仗,得有实力这样才能得到恩师得认可,才能去赢得别人的尊重__.我现在什么都没有,左宗棠带领一群兵卒都这么嚣张... 李鸿章当时的心酸我看完了这段故事我很理解,我相信看到这里的你也一样感同身受.</p>
<p>其实曾国藩的良苦用心李鸿章当时还没察觉到,作为自己的门生没有谁比曾国藩更了解李鸿章了,曾国藩为了磨平李鸿章的棱角让他受如此这么心酸,就让他尝尝这是啥滋味,让他懂得__人就得用实力去赢得别人的尊重__.</p>
<p>曾国藩和李鸿章的故事一开始很抵触西方文明,到最后疲于应对再到主动出击,再到学贯中西,要不是洋人的船坚炮利那怎么会有李鸿章,怎么会诞生『中国的铁血宰相脾斯麦』.李鸿章在洋务运动中开创了多少个第一,回头再看看我的成长史又开创了多少第一,第一次背井离乡,第一次加入Baidu,比较早的接触iOS开发,第一次用博客记录知识技艺,第一次走出农村用计算机技术改变命运,成为村里人的希望,我完全就是再走李鸿章的老路,希望走在成为圣贤的路上,这条路上一定没有『前方300米有闯红灯拍照』,有前人的经验让我很幸运,但再往后会遇到前人都没经历过得东西,我将成为别人的前人.</p>
<p>故事讲完了</p>
<p>我们再来看看今天的我们,我们心目中按照王阳明的《知行合一》大家也都佩服有实力的人吧.<br>
如果你觉得一个富二代 爹妈在一线二线城市给他买套房 帮他摆平了他需要的一切,这个人还没个正经工作,每天都过着养尊处优的生活你会佩服他吗？这不就是我们身边的一些人嘛? 我相信你一定不佩服他,你佩服他的是他有如此有正事的父母.</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/ef7d1636166dc587859a78cda527113bd85c8ead/20181231FinalSummary/five-year_plan.jpeg"></p>
<p>我从2013年开始制定自己的第一个五年计划,现在2018年了,我没有给自己一个满意的答卷,看着我的五年计划 勉强完成70%的程度,我很惭愧. 我承认我说了大话,我向那些看到我制定五年计划的各位,以及我的高中老师,深表歉意. 我确实在富二代的面前抬不起头,我的父亲没有正事,一切需要我自己白手起家.</p>
<p>于是我给自己写了句座右铭: <strong>埋头苦干十年,与富二代抬头相见.</strong></p>
<h4 id="毛泽东传">毛泽东传</h4>
<p>这是我今年的地四本书,听完感觉毛爷爷的故事,真的不容易,这个人很有气魄和诗人才华.在内外交困的新中国如果从零开始着手准备未来几十年的任务是不容易的,毛爷爷做到.从小生活在地主的家庭中没有因为父亲的小农思想而影响.</p>
<h4 id="周总理的最后600天">周总理的最后600天</h4>
<p>这位共和国总理的声音你都需要听到,这也是我第一次听到周总理的原声录音,在最后的600多天的日子里,这位总理可谓鞠躬尽瘁日理万机,与江青团伙斗智斗勇,努力纠正文革的错误,把共和国的重任一步一步交给邓小平,没有小平爷爷的改革开放,那你今天也许就不会看到我写的博客文章来总结我的2018,周总理的勤俭值得我去学习,由于医疗条件不是很完备,当时的新中国还没有能力制造一些高级药品,周总理的药都是国外进口,可是这位总理节俭到当药片掉地上很珍惜的捡起来吃,他说,我多么希望我们共和国也能制造这种药去帮助那些像我一样受病痛折磨的人民.在最后的岁月里与病魔坚强抗争.</p>
<p>为了纪念这位伟人,我认真的听完讲解周总理的最后岁月,我很荣幸能在中国国家博物馆里找到总理的几件物品,让我瞻仰一下这位共和国总理的爱戴人民的精神和气质.</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/a55bae832166b756dc2b68c32b93560c9ccde8ba/20181231FinalSummary/hatOfZhouPrimeMinister.jpg"></p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/a55bae832166b756dc2b68c32b93560c9ccde8ba/20181231FinalSummary/hatOfZhouPrimeMinister2.JPG"></p>
<p>这是周总理参加日内瓦会议的礼帽 也就是下面这张我们在初高中历史书上经常看到的</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/a3454b2b00ff269f32b025ee9ffcdfd092bafab2/20181231FinalSummary/hatOfZhouPrimeMinister3.JPG"></p>
<p><em>图片引用自百度百科</em></p>
<p>我相信你看到这位共和国总理也会情不自禁的潸然泪下,他的声音你需要听到.</p>
<h4 id="普京传记">普京传记</h4>
<p>这位前克格勃特工,俄罗斯的硬汉,对于苏联集体后的经济重建,强硬铁腕解决俄罗斯寡头的财务霸权,车臣战争的终结者,克里米亚地区的国际精神,敢于在世界上与美国强硬对抗. 普京传记确实记录的很详细,不过 就我个人观点 俄罗斯现在国民经济没有改善多好,依然是两架马车式的发展. 为了了解世界的历史和欧洲的地理我今年 学习很多欧洲的内容, 这本书就是在学习范围内.</p>
<h4 id="习近平的七年知青岁月">习近平的七年知青岁月</h4>
<p>在我小时候父母经常跟我说学习不好就挑大粪,但是我要说的是这位现任中华人民共和国共和国的主席就是曾经挑过粪,在陕北梁家河一步一步从知青下乡到村支书再到加入中国共产党,恢复高考继续上清华学习,最终成为中华人民共和国的国家主席,这一路走真的很不平凡,这本书让我记忆犹新的一个故事值得我们每个人去学习.</p>
<p>当年习大大 作为知青刚下乡, 由于不够了解农村的百姓的生活,加上陕北十分贫困,知青们需要自己学会做饭,自己学会捡柴烧火,由于第一次没有经验,刚去梁家河的一段日子赶上陕北下雨, 做饭的柴都被雨淋湿了,没办法引火,知青们你瞅瞅我我瞅瞅你,互相不知所措,这种日子实在太过艰难, 习大大下乡的时候满满的一包又一包的都是书,在这段日子里白天干农活晚上吃完饭还要继续学习,由于没有什么吃的晚上学到很晚的时候会觉得饿,就简单 锅里放点水 放里两碎玉米,柴这种资源是有限的 所以煮完的玉米 也不知熟没熟就吃了,这段艰苦的生活我相信在看这篇文章的年轻人也许都理解不了,但是过的确实无比艰难,由于陕北的底线多山和高坡 不能积水加上田地是有限的,习大大带领全村的人民修堤坝蓄水灌溉,然后开垦农田.习大大深知陕北为什么贫穷因为百姓的田地实在太少,只能像大地要粮食,建完堤坝开山拓田地,办沼气池,当年还没有好的机械,全部都是人工挑这粪便装到沼气坑.沼气池需要技术,习大大又探访四川学习办沼气的经验,沼气池刚投入使用之前需要把沼气弄个洞来检测沼气是否能够达标使用,习大大亲自开洞,当时由于池内压力很大,喷了一身粪汤, 看到这的时候我不仅感叹,中国能有以为这样的主席太幸运了,这个人可真是深入基层劳动,敢于干最脏最累的活,一般干这种活的人他肯定知道底层人民的疾苦,他也一定知道如果带领祖国的广大人民脱贫致富.</p>
<p>如果放到现在你让一个年轻人去农村赶上下雨天做饭的柴都淋湿,根本点不着火做饭,这种苦日子真没几年轻人尝过,更别说办沼气池挑粪了.</p>
<p>即便你心目中的政府有多么贪腐,我觉得习大大不会,他尝过太多人没吃过的苦,受到过文革父亲的影响入了N次党才最终成功,这段经历不寻常,如果不了解这位国家领导人的历史,那我们也不会懂得现在的辛福来的多么不容易.现在其实比习大大的过去幸福多了,但是社会主义初级阶段就这样,先能解决温饱,摆脱贫困,然后再去研究奔小康发家致富,我希望习大大的人生经历能让每个人都知道,所以这本书强烈推荐.</p>
<h4 id="乔布斯传">乔布斯传</h4>
<p>作为一名 苹果开发者 如果不去了解创造苹果的人其实是一种悲哀,乔布斯的个人性格非常极端追求绝对机制,如果没有这么刻薄的追求就不会有今天的iPhone, 当然光有这种气质是不够的,需要有技术驱动,沃兹尼亚克就是其中之一.数学天才,第一台 Apple I 就是这个大神手工做的,用芯片叠加,电路设计.....</p>
<p>乔布斯是一个极具 "现实扭曲立场"的人,(接地气一点就是能忽悠),作为孤儿的乔布斯深受养父的影响,他父亲是一个木匠,这个人说:"做什么其实跟做家具是一样的,衣柜的背板不容易被人所看见,但是衣柜的外表质量也要跟内在的背板一样的品质",所以你今天拆开苹果的任何设备看看电路板就知道,黑色PCB印刷,内部电路设置和元器件都十分整齐,真的跟衣柜的背板一样质量. 例如: iPhone 4/4s</p>
<p>这是唯一两部乔布斯在世时发布的最后两样产品,但是现在的库克也许没有100%的遵照乔布斯的人格和习惯以及追求,整的现在的苹果手机国产的质量总出问题.这要是在乔布斯时代我相信这即便有也可以全部换新而且很少能出问题.</p>
<p>由于性格的极端和追求的极致导致 苹果的同事把被乔布斯伤害的同事称为"低通滤波器"(无论如何大声或者激烈大家都很低调平和的处理)</p>
<p>乔布斯的一生是不是传奇我不知道,我觉得至少我通过苹果的这副键盘敲出了一栋100w+楼房.</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/7a51ed176820e66e48ec015069843b0686a5e2f0/20181231FinalSummary/applekeyboard.png"></p>
<p>是的 我是一个Apple iOS Developer,这位伟人不为人知的一面的值得学习.</p>
<h4 id="货币战争15部">货币战争1~5部</h4>
<p>这几部货币战争非常好,虽然以小说的形式出现,但是作者自述说如果以真实的材料出现那么银行家基本不会让这本书出版,往往小说的形式可以逃避它.</p>
<p>一部世界经济的必须经典, 英格兰银行...罗斯柴尔德家族...布雷顿森林体系...世界经济的金本位,银本位还有我国的以物资为本位的人民币,这些背后的价值都在这本书中一一列举.</p>
<h4 id="拿破仑传">拿破仑传</h4>
<p>这位活跃在欧洲半个世纪的法兰西缔造者,大约活跃在中国的清朝中晚期,出生在法国南部的科西嘉岛的拿破仑,一路驰骋政府整片西欧领土,没一次的战争都以胜利为结尾,但是因为最后的一次滑铁卢战役而毁于一生,其实我们应该 以"不以成败论英雄"的态度来欣赏这位战斗勇士.</p>
<p>为了更多的了解欧洲,我需要了解那里的人文和地理,所以这本书值得一看</p>
<h4 id="李嘉诚传">李嘉诚传</h4>
<p>最后要说说这位励志伟人李嘉诚,这位李超人简直称霸香港又温文尔雅,其实李超人的祖先时清朝时期的文官拔贡出身(可以理解为有文化有学识的秀才).这位伟人征服全港,无论做人做事都勤勤恳恳踏踏实实,从一家做塑胶花厂商到最后收购港灯,英资企业,汇丰银行的长期合作伙伴,怡和置地,再到香港的房地产...以及收购希尔顿酒店....太多太长一言难尽</p>
<p>这里要说一下这个怡和置地,它的前身是<a href="https://baike.baidu.com/item/%E6%80%A1%E5%92%8C%E6%B4%8B%E8%A1%8C/5039743?fr=aladdin" target="_blank" rel="external">怡和洋行</a>(英资企业)由两名苏格兰裔英国人威廉·渣甸（William Jardine，1784年～1843年）及詹姆士·马地臣（James Matheson，一译“孖地臣”，1796年～1878年）在中国广州创办,就是当年林则徐虎门销烟,捣毁东印度公司的鸦片,实际上背后是怡和洋行在掌控,因为林则徐侵犯了怡和洋行的利益在华利益,这位渣甸老板在英国女皇面前游说,挑起了1840年的鸦片战争.</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/f654b576ec4663c04c56eb2c121d5d98ba46ec32/20181231FinalSummary/yihe.jpg"></p>
<p>怡和洋行旧址 <em>图片引自百度百科</em></p>
<p>李嘉诚的一生真的从无到有,邻近坎坷,稳扎稳打,一步一步吞并收购.</p>
<p>让我印象深刻的是怡和大班 纽碧坚 跟李嘉诚的合作...</p>
<p>绝对励志的人生奋斗史 值得一看</p>
<h2 id="技术">技术</h2>
<p>这一年在技术上投入和收益没有明显提升,不过我给自己的定下的OKR(Object key result一种工作目标的实现方式类似KPI)是每个月保证产出两篇技术文章,至少有一篇质量较高经过这一年的技术写作,还是很有收获的,我从没想过能用博客记录我的生活中的点点滴滴,大多都是技术相关很少写个人生活,除了年终总结以外基本都是iOS相关的技术,不过整体上个人感觉还是很水的,2019年需要比现在更有质量和深度.</p>
<p>为了奖励自己一年的技术进步和对写作的坚持,2018年我买了有一个BOSE降噪耳机(￥1888),作为程序员只有几样东西视为珍宝</p>
<ul>
<li>1.机械键盘</li>
<li>2.降噪耳机</li>
</ul>
<p>这一年坚持学习python和机器学习,但是明显的进步并不多,只是稍稍了解了一些数据挖掘和加工数据.不过目前负责快手的直播业务让我锻炼了很多,每一次开发遇到的问题我都会记下来,业余时间写demo然后发表文章到博客记录世界记录你.</p>
<p>不过对比去年的KPI指标</p>
<p>去年的KPI如下:</p>
<ul>
<li>swift4 进阶看完</li>
<li>iOS Core Animation 看完</li>
<li>Learn AV Foundation 要写几篇博客从上次段的位置续上</li>
<li>学会Python和数据挖掘 为机器学习做铺垫</li>
<li>多媒体相关技术深耕</li>
<li>英语水平再提高一个level</li>
</ul>
<p>显然我没有完成30%,很惭愧,所以我把目标实现的方式从KPI变成了OKR.这样弹性实现目标以便能更好的实现2019年的目标.</p>
<p>这一年我很败家,买了一堆破烂花了不少钱</p>
<p><strong>机械键盘</strong></p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/56e5c68e0b83c60ff00f960a24097fe14bb2e90a/20181231FinalSummary/keyboard.jpg"></p>
<blockquote>
<p>这机械键盘,确实很好,周末在家写代码非常流畅顺手.￥519</p>
</blockquote>
<p><strong>iPhone X 256G 美版</strong></p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/56e5c68e0b83c60ff00f960a24097fe14bb2e90a/20181231FinalSummary/iPhoneX.JPG"> &gt; 同事去美国帮忙代购的,作为一个iOS developer,我也是忍受了4年iPhone6,确实卡的不行了,￥8000</p>
<p><strong>Apple Watch 3</strong></p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/56e5c68e0b83c60ff00f960a24097fe14bb2e90a/20181231FinalSummary/AppleWatch3.jpg"></p>
<blockquote>
<p>这个我认为基本没啥用,就能戴在手上看个点儿,其余的功能都用不了,￥3188</p>
</blockquote>
<p><strong>PC</strong></p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/56e5c68e0b83c60ff00f960a24097fe14bb2e90a/20181231FinalSummary/PC.jpg"> &gt; 为了学习机器学习买了个1050Ti,很久没DIY了,整套自己的买的装的.16G DDR4 2400内存,240G+120G两块三星固态硬盘,i5 8400 CPU, 技嘉Z370主板 总造价 ￥5547.<br>
&gt; 我已经把旧的那个200+贱卖了.</p>
<p><strong>BOSE 降噪耳机</strong></p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/56e5c68e0b83c60ff00f960a24097fe14bb2e90a/20181231FinalSummary/bose.jpg"> &gt; 双11 打算买个程序员梦想中的耳机 ￥1888</p>
<p><strong>小牛 N1s 动力版</strong></p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/56e5c68e0b83c60ff00f960a24097fe14bb2e90a/20181231FinalSummary/n1s.jpg"> &gt; 上班的代步工具.￥7399</p>
<p>今年败家花了 ￥26541.</p>
<p>然而这里面我觉得最好用的东西,一个是小牛的这个电动车,一个是降噪耳机,至于手机我觉得对于一个像我这样穿31块钱林甸鞋的人,拿着一个8000多的 iPhone X 无疑是更加鲜明的证明我是一个十足的屌丝.电动车这个东西实在解决了我很多忙,上下班无论去哪里都很方便,降噪耳机则是在工作中能很安静投入的工作.至于机械键盘 显然没啥用,但是苹果的键盘更贵,想想还是算了,也算值得吧.最没啥用的就是PC 和那块手表,这两样东西是我买东西的一个败笔.</p>
<p>买了这么多破烂,花了不少钱,然后我发现有些东西一定要物尽其用.如果花了很多钱却没有发挥有用的价值显然就是一种不理性的消费..</p>
<h2 id="坚持">坚持</h2>
<p>每年教师节我都会给一位初中的语文老师打电话问候一下,我一直连续坚持了11年.我觉得我的初中学习真的很差,没有给这位老师留下过太好的印象,我想弥补一下,想创造一项记录,这项记录是要做在这位老师的学生中连续坚持一句问候的学生,之不之一我不知道,未来如果能的话我会尽量坚持下去,希望这位老师记得这位学生很平凡,但却做了一件不平凡的事情,希望这位老师记得这位学生来自第二良种场.</p>
<p>在我的人生目标中需要树立一个二良人都佩服的榜样.这位榜样就是发生在这座几乎地图都没有导航路线且被中国忽略的村庄.我梦想有一天衣锦还乡的那一天能为二良建造一座计算机博物馆,在这座博物馆中你可以尽情的学习计算机类的书籍.像我一样用所学的知识改变自己的命运.</p>
<p>因为在我上学的红光农场初中,二良的学生受到了太多不平等不公正的待遇,这不禁让我潸然泪下,为什么我们就在红光农场这座邻近的农场村庄抬不起头来,是因为我们落后,落后就要挨打,就要受到不公正的待遇,为了改变这一切需要我们忍受"韩信的胯下之辱".</p>
<p>在这所中学,老师们只对亲信子弟负责,对该农场的子弟次之,再次才能轮到像二良这种借读的学生中学习好的学生,至于像我这种既无背景也没关系,又学习不好的学生这种歧视真的刻骨铭心,参加工作后也依然没有忘记,为什么同样是中国人还搞这么具体的地域歧视.</p>
<p>我希望我能用自己的实践证明给这位老师看,看看到底是红光的学生坚持11年给您打电话还是二良的学生能坚持11年给你打电话,<strong>人活的要用实力去赢得别人佩服和尊重</strong>,我希望虽然二良和红光地域的经济差距很大,但是每个地域都有其独特性,没有哪里比哪里高低贵贱之分,要相互融合互相尊重.</p>
<p>少一些教育资源的倾斜,让每个学生都能得到公正平等的待遇.</p>
<h2 id="生活">生活</h2>
<p>我认为人生有两堂选修课</p>
<ul>
<li>1.装修</li>
<li>2.做饭</li>
</ul>
<h4 id="装修">装修</h4>
<p>从17年买房到现在房子还没有下来,如果是毛坯房的话,需要自己学会装修.</p>
<p>厨房: 集成灶、消毒柜、蒸烤箱 水槽、净水器、垃圾处理器...</p>
<p>这堂课只有两种人可以逃避</p>
<ul>
<li>有钱人</li>
<li>买二手房的人</li>
</ul>
<p>显然我不是这两种人,既没钱也没买二手房,需要经历有限的装修经费,捉襟见肘的装修.</p>
<p>在房子没下来之前我经常抽出时间了解一些相关的装修经验,我想装完修也许就成了半个装修工.</p>
<h4 id="做饭">做饭</h4>
<p>这是一件只要有一个人需要干的活.</p>
<p>如果不去了解如何下厨做饭,那也许一辈子过的很平庸,如果不去了解毛葱和小葱大葱到底做饭好不好吃,什么样的葱适合做什么样的菜那么人就不会有太多的成长.</p>
<p>显然上面的两堂课我没有逃课.</p>
<p>所谓生活,有的年轻人认为我们不需要做成功人士,享受现在的静好不就可以了么,是的你能享受现在的美好那么一定有人替你砥砺前行,那个人要么是你父母要么是你爱人.</p>
<p>没有被生活折磨过只有两种可能</p>
<ul>
<li>第一 有人替你扛着</li>
<li>第二 别着急 还没轮到你</li>
</ul>
<p>家人总有用钱的时候,在中国 一场大病能摧毁一个中产阶级的家庭.即便是现在的医保力度很大,但是还是经不起大风大浪</p>
<p>在家里的老人总说钱买不来幸福, 我想说:『钱买不来100%的幸福,成长后99%的烦恼都是因为没钱』.</p>
<p>我现在懂得什么叫选择比努力更重要了,努力是为了让自己有更多选择的权利.</p>
<h2 id="故事">故事</h2>
<p>有一个同学,我4年零2个月没有联系,时间过的真快 一晃 快5年了,我又重新加了一下微信,为了纪念这位同学,我撰写了一篇题材为《船与灯塔》的剧本.</p>
<p>这么多年我总结的真理是:"父母一定要有正事,如果没有正事那子女就得为父母的没正事买单,因为父母没有积攒下儿女未来几十年需要发展的经济基础,显然儿女就得白手起家从零开始".</p>
<h2 id="百年">百年</h2>
<p>今年的十一假期我去了阔别11年的天津,去看看07年去过的身影,11年前还没有GPS定位的地图,我却依然能找到方向.</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/3bc95da6f8fb8b7cb7c10d1c2e0c428d5b575044/20181231FinalSummary/sun.JPG"></p>
<p>这是我在天津找到家族百年以来唯一留下仅存的几张照片,我曾祖父,曾祖母,我的父亲和姑姑.现在看到这显得无比珍贵.</p>
<p>我的祖先是闯关东去的东北,家谱记载地址:山东省青州府寿光县孙家神庙,甸子北住.</p>
<p>也就是现在的:山东省潍坊市青州市寿光县孙家村</p>
<p>但是我搜索地图发现了至少3处</p>
<p>第一处</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/f173d0b32c3aa7a39bc1a1c7f1ff24b6ed8d13f9/20181231FinalSummary/hometown1.png"></p>
<p>第二处</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/f173d0b32c3aa7a39bc1a1c7f1ff24b6ed8d13f9/20181231FinalSummary/hometown2.png"></p>
<p>第三处</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/8a00db92a789d99e2c0e43841d48bad35e2b76a8/20181231FinalSummary/hometown.png"></p>
<p>这里最有可能的是第一处 因为靠近河流有河流地面过渡区(甸子),经过百年的地域变化,可能河流流量减少,地表高处水面,时间长了形成村落和耕地.</p>
<p>这里如今已经高铁建成,成为了祖国的蔬菜之乡,我为此感到欣慰,也许1900年左右我的祖先曾经生活在这里.</p>
<p>我的曾祖父来到东北的时候赶上了日本占领东三省,那时候也许迫于生计和民族的沦落,不得不为日本人工作,也就是在现在的黑龙江省海伦市海北镇十三井子村,日本人在这里养军马,前面是东方红水库,我的曾祖父练就一身打铁的手艺,为军马钉马掌,因为东北很冷,路面结冰,防止马打滑,所以钉马掌是其中的任务之一,上边中间这张照片,是当年仅存到现在的一张日本为工匠照的相片.</p>
<p>想想那个时候真是国破山河在,家书抵万金.这位老人也许经历过晚清覆灭,中华民国的初建到军阀混战,在到新中国的成立,历经3个朝代的更迭.</p>
<p>也许换做普通人都活不到一个朝代的覆灭</p>
<p>不过打铁的手艺可是传承3代人,我的爷爷,叔父,现在到我的哥哥,如果在现代应该成为工匠,希望有一天我的计算机博物馆中,能存放着家族打铁工艺的绝唱.</p>
<p>曾祖父那一代人活的不容易.</p>
<h2 id="总结">总结</h2>
<p>这一年我写了很多技术的文章,我不想在年终总结中还谈论技术,应该记录一些生活的美好回忆.</p>
<p>去年的这个时候我给自己的定下的KPI今年显然没有完成</p>
<p>2019年希望能不断学习,与时俱进,学会更多有用的知识来提高影响力.</p>
<p>最后,幸福是奋斗出来的,还得撸起袖子加油干,得敢于直面惨淡的人生,敢于用实力去赢得别人的尊重,这样才能成为自己羡慕的别人.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/9e263dd6fbfaf3cb12eee6ebcbfff3519dc5f9eb/20181231Fin
    
    </summary>
    
      <category term="记录世界记录你" scheme="https://www.sunyazhou.com/categories/%E8%AE%B0%E5%BD%95%E4%B8%96%E7%95%8C%E8%AE%B0%E5%BD%95%E4%BD%A0/"/>
    
    
      <category term="生活" scheme="https://www.sunyazhou.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="年终总结" scheme="https://www.sunyazhou.com/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>iOS抖音的转场动画</title>
    <link href="https://www.sunyazhou.com/2018/12/21/20181221AwemeTransition/"/>
    <id>https://www.sunyazhou.com/2018/12/21/20181221AwemeTransition/</id>
    <published>2018-12-21T02:12:07.000Z</published>
    <updated>2018-12-24T14:05:50.935Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言">前言</h1>
<p>这几天比较忙,今天给大家带来的是抖音的转场动画实现 废话不多说上图</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/e2c340e680ad8308f23aa1ba8d3e8197847dcfec/20181219AwemeTransition/transition1.gif"> <img src="https://ws1.sinaimg.cn/large/bf8500b1ly1fyc09rh2cog20630at7wm.gif"></p>
<p>这里需要用到前一篇文章的上下滑<a href="https://github.com/sunyazhou13/AwemeDemo" target="_blank" rel="external">demo</a></p>
<p>学习这篇文章之前推荐看下喵神的<a href="https://onevcat.com/2013/10/vc-transition-in-ios7/" target="_blank" rel="external">iOS7中的ViewController转场切换</a></p>
<p>如果对转场不是很了解的话可能学习会有一些难度和疑问.</p>
<h2 id="转场调用代码">转场调用代码</h2>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"></div><div class="line">- (<span class="keyword">void</span>)collectionView:(<span class="built_in">UICollectionView</span> *)collectionView didSelectItemAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath &#123;</div><div class="line">    AwemeListViewController *awemeVC = [[AwemeListViewController alloc] init];</div><div class="line">    awemeVC.transitioningDelegate = <span class="keyword">self</span>; <span class="comment">//0</span></div><div class="line">    </div><div class="line">    <span class="comment">// 1</span></div><div class="line">    <span class="built_in">UICollectionViewCell</span> *cell = [collectionView cellForItemAtIndexPath:indexPath];</div><div class="line">    <span class="comment">// 2</span></div><div class="line">    <span class="built_in">CGRect</span> cellFrame = cell.frame;</div><div class="line">    <span class="comment">// 3</span></div><div class="line">    <span class="built_in">CGRect</span> cellConvertedFrame = [collectionView convertRect:cellFrame toView:collectionView.superview];</div><div class="line">    </div><div class="line">    <span class="comment">//弹窗转场</span></div><div class="line">    <span class="keyword">self</span>.presentScaleAnimation.cellConvertFrame = cellConvertedFrame; <span class="comment">//4</span></div><div class="line">    </div><div class="line">    <span class="comment">//消失转场</span></div><div class="line">    <span class="keyword">self</span>.dismissScaleAnimation.selectCell = cell; <span class="comment">// 5</span></div><div class="line">    <span class="keyword">self</span>.dismissScaleAnimation.originCellFrame  = cellFrame; <span class="comment">//6</span></div><div class="line">    <span class="keyword">self</span>.dismissScaleAnimation.finalCellFrame = cellConvertedFrame; <span class="comment">//7</span></div><div class="line">    </div><div class="line">    awemeVC.modalPresentationStyle = <span class="built_in">UIModalPresentationOverCurrentContext</span>; <span class="comment">//8</span></div><div class="line">    <span class="keyword">self</span>.modalPresentationStyle = <span class="built_in">UIModalPresentationCurrentContext</span>; <span class="comment">//9</span></div><div class="line">    </div><div class="line">    [<span class="keyword">self</span>.leftDragInteractiveTransition wireToViewController:awemeVC];</div><div class="line">    [<span class="keyword">self</span> presentViewController:awemeVC animated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>0</code> 处代码使我们需要把当前的类做为转场的代理<br>
<code>1</code> 这里我们要拿出cell这个view<br>
<code>2</code> 拿出当前Cell的frame坐标<br>
<code>3</code> cell的坐标转成屏幕坐标<br>
<code>4</code> 设置弹出时候需要cell在屏幕的位置坐标<br>
<code>5</code> 设置消失转场需要的选中cell视图<br>
<code>6</code> 设置消失转场原始cell坐标位置<br>
<code>7</code> 设置消失转场最终得cell屏幕坐标位置 用于消失完成回到原来位置的动画<br>
<code>8</code> 设置弹出得vc弹出样式 这个用于显示弹出VC得时候 默认底部使blua的高斯模糊<br>
<code>9</code> 设置当前VC的模态弹出样式为当前的弹出上下文</p>
<blockquote>
<p>5~7 步设置的消失转场动画 下面会讲解</p>
</blockquote>
<p>这里我们用的是前面讲上下滑的VC对象 大家不必担心 当它是一个普通的UIViewController即可</p>
<p>## 实现转场所需要的代理</p>
<p>首先在需要实现<code>UIViewControllerTransitioningDelegate</code>这个代理</p>
<p><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"> <span class="meta">#pragma mark -</span></div><div class="line"><span class="meta">#pragma mark - UIViewControllerAnimatedTransitioning Delegate</span></div><div class="line">- (<span class="keyword">nullable</span> <span class="keyword">id</span> &lt;<span class="built_in">UIViewControllerAnimatedTransitioning</span>&gt;)animationControllerForPresentedController:(<span class="built_in">UIViewController</span> *)presented presentingController:(<span class="built_in">UIViewController</span> *)presenting sourceController:(<span class="built_in">UIViewController</span> *)source &#123;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.presentScaleAnimation; <span class="comment">//present VC</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">nullable</span> <span class="keyword">id</span> &lt;<span class="built_in">UIViewControllerAnimatedTransitioning</span>&gt;)animationControllerForDismissedController:(<span class="built_in">UIViewController</span> *)dismissed &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.dismissScaleAnimation; <span class="comment">//dismiss VC</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">nullable</span> <span class="keyword">id</span> &lt;<span class="built_in">UIViewControllerInteractiveTransitioning</span>&gt;)interactionControllerForDismissal:(<span class="keyword">id</span> &lt;<span class="built_in">UIViewControllerAnimatedTransitioning</span>&gt;)animator &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.leftDragInteractiveTransition.isInteracting? <span class="keyword">self</span>.leftDragInteractiveTransition: <span class="literal">nil</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里面我们看到我们分别返回了</p>
<ul>
<li>弹出动画实例<code>self.presentScaleAnimation</code></li>
<li>dismiss动画实例<code>self.dismissScaleAnimation</code></li>
<li>以及<code>self.leftDragInteractiveTransition</code>实例用于负责转场切换的具体实现</li>
</ul>
<p>所以我们需要在 当前的VC中声明3个成员变量 并初始化</p>
<p><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) PresentScaleAnimation *presentScaleAnimation;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) DismissScaleAnimation *dismissScaleAnimation;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) DragLeftInteractiveTransition *leftDragInteractiveTransition;</div></pre></td></tr></table></figure></p>
<p>并在<code>viewDidLoad:</code>方法中初始化一下</p>
<p><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"> <span class="comment">//转场的两个动画</span></div><div class="line"><span class="keyword">self</span>.presentScaleAnimation = [[PresentScaleAnimation alloc] init];</div><div class="line"><span class="keyword">self</span>.dismissScaleAnimation = [[DismissScaleAnimation alloc] init];</div><div class="line"><span class="keyword">self</span>.leftDragInteractiveTransition = [DragLeftInteractiveTransition new];</div></pre></td></tr></table></figure></p>
<p>这里我说一下这三个成员都负责啥事</p>
<p>首先<code>DragLeftInteractiveTransition</code>类负责转场的 手势 过程,就是pan手势在这个类里面实现,并继承自<code>UIPercentDrivenInteractiveTransition</code>类,这是iOS7以后系统提供的转场基类必须在<code>interactionControllerForDismissal:</code>代理协议中返回这个类或者子类的实例对象,所以我们生成一个成员变量<code>self.leftDragInteractiveTransition</code></p>
<p>其次是弹出present和消失dismiss的动画类,这俩类其实是负责简单的手势完成之后的动画.</p>
<p>这两个类都是继承自NSObject并实现<code>UIViewControllerAnimatedTransitioning</code>协议的类,这个协议里面有 需要你复写某些方法返回具体的动画执行时间,和中间过程中我们需要的相关的容器视图以及控制器的视图实例,当我们自己执行完成之后调用相关的block回答告知转场是否完成就行了.</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">@implementation</span> <span class="title">PresentScaleAnimation</span></span></div><div class="line"></div><div class="line">- (<span class="built_in">NSTimeInterval</span>)transitionDuration:(<span class="keyword">id</span> &lt;<span class="built_in">UIViewControllerContextTransitioning</span>&gt;)transitionContext&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">0.3</span>f;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)animateTransition:(<span class="keyword">id</span> &lt;<span class="built_in">UIViewControllerContextTransitioning</span>&gt;)transitionContext&#123;</div><div class="line">    <span class="built_in">UIViewController</span> *toVC = [transitionContext viewControllerForKey:<span class="built_in">UITransitionContextToViewControllerKey</span>];    </div><div class="line">    <span class="keyword">if</span> (<span class="built_in">CGRectEqualToRect</span>(<span class="keyword">self</span>.cellConvertFrame, <span class="built_in">CGRectZero</span>)) &#123;</div><div class="line">        [transitionContext completeTransition:<span class="literal">YES</span>];</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">CGRect</span> initialFrame = <span class="keyword">self</span>.cellConvertFrame;</div><div class="line"></div><div class="line">    <span class="built_in">UIView</span> *containerView = [transitionContext containerView];</div><div class="line">    [containerView addSubview:toVC.view];</div><div class="line"></div><div class="line">    <span class="built_in">CGRect</span> finalFrame = [transitionContext finalFrameForViewController:toVC];</div><div class="line">    <span class="built_in">NSTimeInterval</span> duration = [<span class="keyword">self</span> transitionDuration:transitionContext];</div><div class="line"></div><div class="line">    toVC.view.center = <span class="built_in">CGPointMake</span>(initialFrame.origin.x + initialFrame.size.width/<span class="number">2</span>, initialFrame.origin.y + initialFrame.size.height/<span class="number">2</span>);</div><div class="line">    toVC.view.transform = <span class="built_in">CGAffineTransformMakeScale</span>(initialFrame.size.width/finalFrame.size.width, initialFrame.size.height/finalFrame.size.height);</div><div class="line"></div><div class="line">    [<span class="built_in">UIView</span> animateWithDuration:duration</div><div class="line">                          delay:<span class="number">0</span></div><div class="line">         usingSpringWithDamping:<span class="number">0.8</span></div><div class="line">          initialSpringVelocity:<span class="number">1</span></div><div class="line">                        options:<span class="built_in">UIViewAnimationOptionLayoutSubviews</span></div><div class="line">                     animations:^&#123;</div><div class="line">                         toVC.view.center = <span class="built_in">CGPointMake</span>(finalFrame.origin.x + finalFrame.size.width/<span class="number">2</span>, finalFrame.origin.y + finalFrame.size.height/<span class="number">2</span>);</div><div class="line">                         toVC.view.transform = <span class="built_in">CGAffineTransformMakeScale</span>(<span class="number">1</span>, <span class="number">1</span>);</div><div class="line">                     &#125; completion:^(<span class="built_in">BOOL</span> finished) &#123;</div><div class="line">                         [transitionContext completeTransition:<span class="literal">YES</span>];</div><div class="line">                     &#125;];</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>很简单.</p>
<p>消失的动画 同上边差不多</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">DismissScaleAnimation</span> ()</span></div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">DismissScaleAnimation</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">instancetype</span>)init &#123;</div><div class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</div><div class="line">        _centerFrame = <span class="built_in">CGRectMake</span>((ScreenWidth - <span class="number">5</span>)/<span class="number">2</span>, (ScreenHeight - <span class="number">5</span>)/<span class="number">2</span>, <span class="number">5</span>, <span class="number">5</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">NSTimeInterval</span>)transitionDuration:(<span class="keyword">id</span> &lt;<span class="built_in">UIViewControllerContextTransitioning</span>&gt;)transitionContext&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">0.25</span>f;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)animateTransition:(<span class="keyword">id</span> &lt;<span class="built_in">UIViewControllerContextTransitioning</span>&gt;)transitionContext&#123;</div><div class="line">    <span class="built_in">UIViewController</span> *fromVC = [transitionContext viewControllerForKey:<span class="built_in">UITransitionContextFromViewControllerKey</span>];</div><div class="line"><span class="comment">//    UINavigationController *toNavigation = (UINavigationController *)[transitionContext viewControllerForKey:UITransitionContextToViewControllerKey];</span></div><div class="line"><span class="comment">//    UIViewController *toVC = [toNavigation viewControllers].firstObject;</span></div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="built_in">UIView</span> *snapshotView;</div><div class="line">    <span class="built_in">CGFloat</span> scaleRatio;</div><div class="line">    <span class="built_in">CGRect</span> finalFrame = <span class="keyword">self</span>.finalCellFrame;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">self</span>.selectCell &amp;&amp; !<span class="built_in">CGRectEqualToRect</span>(finalFrame, <span class="built_in">CGRectZero</span>)) &#123;</div><div class="line">        snapshotView = [<span class="keyword">self</span>.selectCell snapshotViewAfterScreenUpdates:<span class="literal">NO</span>];</div><div class="line">        scaleRatio = fromVC.view.frame.size.width/<span class="keyword">self</span>.selectCell.frame.size.width;</div><div class="line">        snapshotView.layer.zPosition = <span class="number">20</span>;</div><div class="line">    &#125;<span class="keyword">else</span> &#123;</div><div class="line">        snapshotView = [fromVC.view snapshotViewAfterScreenUpdates:<span class="literal">NO</span>];</div><div class="line">        scaleRatio = fromVC.view.frame.size.width/ScreenWidth;</div><div class="line">        finalFrame = _centerFrame;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="built_in">UIView</span> *containerView = [transitionContext containerView];</div><div class="line">    [containerView addSubview:snapshotView];</div><div class="line">    </div><div class="line">    <span class="built_in">NSTimeInterval</span> duration = [<span class="keyword">self</span> transitionDuration:transitionContext];</div><div class="line">    </div><div class="line">    fromVC.view.alpha = <span class="number">0.0</span>f;</div><div class="line">    snapshotView.center = fromVC.view.center;</div><div class="line">    snapshotView.transform = <span class="built_in">CGAffineTransformMakeScale</span>(scaleRatio, scaleRatio);</div><div class="line">    [<span class="built_in">UIView</span> animateWithDuration:duration</div><div class="line">                          delay:<span class="number">0</span></div><div class="line">         usingSpringWithDamping:<span class="number">0.8</span></div><div class="line">          initialSpringVelocity:<span class="number">0.2</span></div><div class="line">                        options:<span class="built_in">UIViewAnimationOptionCurveEaseInOut</span></div><div class="line">                     animations:^&#123;</div><div class="line">                         snapshotView.transform = <span class="built_in">CGAffineTransformMakeScale</span>(<span class="number">1.0</span>f, <span class="number">1.0</span>f);</div><div class="line">                         snapshotView.frame = finalFrame;</div><div class="line">                     &#125; completion:^(<span class="built_in">BOOL</span> finished) &#123;</div><div class="line">                         [transitionContext finishInteractiveTransition];</div><div class="line">                         [transitionContext completeTransition:<span class="literal">YES</span>];</div><div class="line">                         [snapshotView removeFromSuperview];</div><div class="line">                     &#125;];</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>我们重点需要说一下 转场过渡的类<code>DragLeftInteractiveTransition</code>继承自<code>UIPercentDrivenInteractiveTransition</code>负责转场过程,</p>
<p>头文件的声明</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">DragLeftInteractiveTransition</span> : <span class="title">UIPercentDrivenInteractiveTransition</span></span></div><div class="line"></div><div class="line"><span class="comment">/** 是否正在拖动返回 标识是否正在使用转场的交互中 */</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">BOOL</span> isInteracting;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> 设置需要返回的VC</div><div class="line"> </div><div class="line"> @param viewController 控制器实例</div><div class="line"> */</div><div class="line">-(<span class="keyword">void</span>)wireToViewController:(<span class="built_in">UIViewController</span> *)viewController;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>实现</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">DragLeftInteractiveTransition</span> ()</span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIViewController</span> *presentingVC;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">CGPoint</span> viewControllerCenter;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">CALayer</span> *transitionMaskLayer;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">DragLeftInteractiveTransition</span></span></div><div class="line"></div><div class="line"><span class="meta">#pragma mark -</span></div><div class="line"><span class="meta">#pragma mark - override methods 复写方法</span></div><div class="line">-(<span class="built_in">CGFloat</span>)completionSpeed&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span> - <span class="keyword">self</span>.percentComplete;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)updateInteractiveTransition:(<span class="built_in">CGFloat</span>)percentComplete &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%.2f"</span>,percentComplete);</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)cancelInteractiveTransition &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"转场取消"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)finishInteractiveTransition &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"转场完成"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">- (<span class="built_in">CALayer</span> *)transitionMaskLayer &#123;</div><div class="line">    <span class="keyword">if</span> (_transitionMaskLayer == <span class="literal">nil</span>) &#123;</div><div class="line">        _transitionMaskLayer = [<span class="built_in">CALayer</span> layer];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> _transitionMaskLayer;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#pragma mark -</span></div><div class="line"><span class="meta">#pragma mark - private methods 私有方法</span></div><div class="line">- (<span class="keyword">void</span>)prepareGestureRecognizerInView:(<span class="built_in">UIView</span>*)view &#123;</div><div class="line">    <span class="built_in">UIPanGestureRecognizer</span> *gesture = [[<span class="built_in">UIPanGestureRecognizer</span> alloc] initWithTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(handleGesture:)];</div><div class="line">    [view addGestureRecognizer:gesture];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#pragma mark -</span></div><div class="line"><span class="meta">#pragma mark - event response 所有触发的事件响应 按钮、通知、分段控件等</span></div><div class="line">- (<span class="keyword">void</span>)handleGesture:(<span class="built_in">UIPanGestureRecognizer</span> *)gestureRecognizer &#123;</div><div class="line">    <span class="built_in">UIView</span> *vcView = gestureRecognizer.view;</div><div class="line">    <span class="built_in">CGPoint</span> translation = [gestureRecognizer translationInView:vcView.superview];</div><div class="line">    <span class="keyword">if</span>(!<span class="keyword">self</span>.isInteracting &amp;&amp;</div><div class="line">       (translation.x &lt; <span class="number">0</span> ||</div><div class="line">        translation.y &lt; <span class="number">0</span> ||</div><div class="line">        translation.x &lt; translation.y)) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">switch</span> (gestureRecognizer.state) &#123;</div><div class="line">        <span class="keyword">case</span> <span class="built_in">UIGestureRecognizerStateBegan</span>:&#123;</div><div class="line">            <span class="comment">//修复当从右侧向左滑动的时候的bug 避免开始的时候从又向左滑动 当未开始的时候</span></div><div class="line">            <span class="built_in">CGPoint</span> vel = [gestureRecognizer velocityInView:gestureRecognizer.view];</div><div class="line">            <span class="keyword">if</span> (!<span class="keyword">self</span>.isInteracting &amp;&amp; vel.x &lt; <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">self</span>.isInteracting = <span class="literal">NO</span>;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">self</span>.transitionMaskLayer.frame = vcView.frame;</div><div class="line">            <span class="keyword">self</span>.transitionMaskLayer.opaque = <span class="literal">NO</span>;</div><div class="line">            <span class="keyword">self</span>.transitionMaskLayer.opacity = <span class="number">1</span>;</div><div class="line">            <span class="keyword">self</span>.transitionMaskLayer.backgroundColor = [<span class="built_in">UIColor</span> whiteColor].CGColor; <span class="comment">//必须有颜色不能透明</span></div><div class="line">            [<span class="keyword">self</span>.transitionMaskLayer setNeedsDisplay];</div><div class="line">            [<span class="keyword">self</span>.transitionMaskLayer displayIfNeeded];</div><div class="line">            <span class="keyword">self</span>.transitionMaskLayer.anchorPoint = <span class="built_in">CGPointMake</span>(<span class="number">0.5</span>, <span class="number">0.5</span>);</div><div class="line">            <span class="keyword">self</span>.transitionMaskLayer.position = <span class="built_in">CGPointMake</span>(vcView.frame.size.width/<span class="number">2.0</span>f, vcView.frame.size.height/<span class="number">2.0</span>f);</div><div class="line">            vcView.layer.mask = <span class="keyword">self</span>.transitionMaskLayer;</div><div class="line">            vcView.layer.masksToBounds = <span class="literal">YES</span>;</div><div class="line">            </div><div class="line">            <span class="keyword">self</span>.isInteracting = <span class="literal">YES</span>;</div><div class="line">        &#125;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="built_in">UIGestureRecognizerStateChanged</span>: &#123;</div><div class="line">            <span class="built_in">CGFloat</span> progress = translation.x / [<span class="built_in">UIScreen</span> mainScreen].bounds.size.width;</div><div class="line">            progress = fminf(fmaxf(progress, <span class="number">0.0</span>), <span class="number">1.0</span>);</div><div class="line">            </div><div class="line">            <span class="built_in">CGFloat</span> ratio = <span class="number">1.0</span>f - progress*<span class="number">0.5</span>f;</div><div class="line">            [_presentingVC.view setCenter:<span class="built_in">CGPointMake</span>(_viewControllerCenter.x + translation.x * ratio, _viewControllerCenter.y + translation.y * ratio)];</div><div class="line">            _presentingVC.view.transform = <span class="built_in">CGAffineTransformMakeScale</span>(ratio, ratio);</div><div class="line">            [<span class="keyword">self</span> updateInteractiveTransition:progress];</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">case</span> <span class="built_in">UIGestureRecognizerStateCancelled</span>:</div><div class="line">        <span class="keyword">case</span> <span class="built_in">UIGestureRecognizerStateEnded</span>:&#123;</div><div class="line">            <span class="built_in">CGFloat</span> progress = translation.x / [<span class="built_in">UIScreen</span> mainScreen].bounds.size.width;</div><div class="line">            progress = fminf(fmaxf(progress, <span class="number">0.0</span>), <span class="number">1.0</span>);</div><div class="line">            <span class="keyword">if</span> (progress &lt; <span class="number">0.2</span>)&#123;</div><div class="line">                [<span class="built_in">UIView</span> animateWithDuration:progress</div><div class="line">                                      delay:<span class="number">0</span></div><div class="line">                                    options:<span class="built_in">UIViewAnimationOptionCurveEaseOut</span></div><div class="line">                                 animations:^&#123;</div><div class="line">                                     <span class="built_in">CGFloat</span> w = [<span class="built_in">UIScreen</span> mainScreen].bounds.size.width;</div><div class="line">                                     <span class="built_in">CGFloat</span> h = [<span class="built_in">UIScreen</span> mainScreen].bounds.size.height;</div><div class="line">                                     [<span class="keyword">self</span>.presentingVC.view setCenter:<span class="built_in">CGPointMake</span>(w/<span class="number">2</span>, h/<span class="number">2</span>)];</div><div class="line">                                     <span class="keyword">self</span>.presentingVC.view.transform = <span class="built_in">CGAffineTransformMakeScale</span>(<span class="number">1.0</span>f, <span class="number">1.0</span>f);</div><div class="line">                                 &#125; completion:^(<span class="built_in">BOOL</span> finished) &#123;</div><div class="line">                                     <span class="keyword">self</span>.isInteracting = <span class="literal">NO</span>;</div><div class="line">                                     [<span class="keyword">self</span> cancelInteractiveTransition];</div><div class="line">                                 &#125;];</div><div class="line">            &#125;<span class="keyword">else</span> &#123;</div><div class="line">                _isInteracting = <span class="literal">NO</span>;</div><div class="line">                [<span class="keyword">self</span> finishInteractiveTransition];</div><div class="line">                [_presentingVC dismissViewControllerAnimated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//移除 遮罩</span></div><div class="line">            [<span class="keyword">self</span>.transitionMaskLayer removeFromSuperlayer];</div><div class="line">            <span class="keyword">self</span>.transitionMaskLayer = <span class="literal">nil</span>;</div><div class="line">        &#125;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#pragma mark -</span></div><div class="line"><span class="meta">#pragma mark - public methods 公有方法</span></div><div class="line">-(<span class="keyword">void</span>)wireToViewController:(<span class="built_in">UIViewController</span> *)viewController &#123;</div><div class="line">    <span class="keyword">self</span>.presentingVC = viewController;</div><div class="line">    <span class="keyword">self</span>.viewControllerCenter = viewController.view.center;</div><div class="line">    [<span class="keyword">self</span> prepareGestureRecognizerInView:viewController.view];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>我们对外提供了一个<code>wireToViewController:</code>方法用于外部需要创建转场使用.</p>
<p>前面的代码我们发现有一处</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">[<span class="keyword">self</span>.leftDragInteractiveTransition wireToViewController:awemeVC];</div><div class="line">[<span class="keyword">self</span> presentViewController:awemeVC animated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</div></pre></td></tr></table></figure>
<p>这里就是需要把我们要弹出的上下滑VC实例传进来,进来之后为VC的<code>self.view</code>加个<code>pan</code>手势,</p>
<p>复写方法中我们可以看到相关开始结束 完成过程的百分比相关方法复写</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="meta">#pragma mark -</span></div><div class="line"><span class="meta">#pragma mark - override methods 复写方法</span></div><div class="line">-(<span class="built_in">CGFloat</span>)completionSpeed&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span> - <span class="keyword">self</span>.percentComplete;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)updateInteractiveTransition:(<span class="built_in">CGFloat</span>)percentComplete &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%.2f"</span>,percentComplete);</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)cancelInteractiveTransition &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"转场取消"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)finishInteractiveTransition &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"转场完成"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看是手势 出发前 先检查一下是否如下条件</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="built_in">UIView</span> *vcView = gestureRecognizer.view;</div><div class="line"><span class="built_in">CGPoint</span> translation = [gestureRecognizer translationInView:vcView.superview];</div><div class="line"><span class="keyword">if</span>(!<span class="keyword">self</span>.isInteracting &amp;&amp;</div><div class="line">   (translation.x &lt; <span class="number">0</span> ||</div><div class="line">    translation.y &lt; <span class="number">0</span> ||</div><div class="line">    translation.x &lt; translation.y)) &#123;</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>拿出手势作用的视图,然后坐标转换,判断当前是否已经开始了动画,如果没开始 或者x坐标 &lt; y坐标是判断当前是否是超过边界范围等等异常case处理.</p>
<p>开始的时候需要注意下</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//修复当从右侧向左滑动的时候的bug 避免开始的时候从又向左滑动 当未开始的时候</span></div><div class="line"><span class="built_in">CGPoint</span> vel = [gestureRecognizer velocityInView:gestureRecognizer.view];</div><div class="line"><span class="keyword">if</span> (!<span class="keyword">self</span>.isInteracting &amp;&amp; vel.x &lt; <span class="number">0</span>) &#123;</div><div class="line">    <span class="keyword">self</span>.isInteracting = <span class="literal">NO</span>;</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后 开始的时候加个蒙版做为view.mask 这样是为了解决tableView 超出contentSize的范围要隐藏</p>
<p>剩下的就是中间过程</p>
<p><strong>关键的核心代码</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">[<span class="keyword">self</span> updateInteractiveTransition:progress];</div></pre></td></tr></table></figure>
<blockquote>
<p>更新转场的进度 这是这个类的自带方法,调用就行了</p>
</blockquote>
<p>最后 手势结束</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="built_in">CGFloat</span> progress = translation.x / [<span class="built_in">UIScreen</span> mainScreen].bounds.size.width;</div><div class="line">progress = fminf(fmaxf(progress, <span class="number">0.0</span>), <span class="number">1.0</span>);</div><div class="line"><span class="keyword">if</span> (progress &lt; <span class="number">0.2</span>)&#123;</div><div class="line">    [<span class="built_in">UIView</span> animateWithDuration:progress</div><div class="line">                          delay:<span class="number">0</span></div><div class="line">                        options:<span class="built_in">UIViewAnimationOptionCurveEaseOut</span></div><div class="line">                     animations:^&#123;</div><div class="line">                         <span class="built_in">CGFloat</span> w = [<span class="built_in">UIScreen</span> mainScreen].bounds.size.width;</div><div class="line">                         <span class="built_in">CGFloat</span> h = [<span class="built_in">UIScreen</span> mainScreen].bounds.size.height;</div><div class="line">                         [<span class="keyword">self</span>.presentingVC.view setCenter:<span class="built_in">CGPointMake</span>(w/<span class="number">2</span>, h/<span class="number">2</span>)];</div><div class="line">                         <span class="keyword">self</span>.presentingVC.view.transform = <span class="built_in">CGAffineTransformMakeScale</span>(<span class="number">1.0</span>f, <span class="number">1.0</span>f);</div><div class="line">                     &#125; completion:^(<span class="built_in">BOOL</span> finished) &#123;</div><div class="line">                         <span class="keyword">self</span>.isInteracting = <span class="literal">NO</span>;</div><div class="line">                         [<span class="keyword">self</span> cancelInteractiveTransition];</div><div class="line">                     &#125;];</div><div class="line">&#125;<span class="keyword">else</span> &#123;</div><div class="line">    _isInteracting = <span class="literal">NO</span>;</div><div class="line">    [<span class="keyword">self</span> finishInteractiveTransition];</div><div class="line">    [_presentingVC dismissViewControllerAnimated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</div><div class="line">&#125;</div><div class="line"><span class="comment">//移除 遮罩</span></div><div class="line">[<span class="keyword">self</span>.transitionMaskLayer removeFromSuperlayer];</div><div class="line"><span class="keyword">self</span>.transitionMaskLayer = <span class="literal">nil</span>;</div></pre></td></tr></table></figure>
<blockquote>
<p>这里设置0.2的容差 如果你觉得这个应该开放接口设置可自行封装.</p>
</blockquote>
<p>当用户取消的话记得调用<code>cancelInteractiveTransition</code>方法取消</p>
<p>完成的话调用<code>finishInteractiveTransition</code>完成转场</p>
<h1 id="总结">总结</h1>
<p>整个过程还是比较简单的 如果看过喵神的文章将会更加清晰的了解转场的三个过程 就是 弹出和消失动画 以及一个中间转场过程需要我们熟悉.</p>
<p>优化点: 在原开源工程中的demo转场右滑是有bug的,我做了一下如下判断</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//修复当从右侧向左滑动的时候的bug 避免开始的时候从又向左滑动 当未开始的时候</span></div><div class="line"><span class="built_in">CGPoint</span> vel = [gestureRecognizer velocityInView:gestureRecognizer.view];</div><div class="line"><span class="keyword">if</span> (!<span class="keyword">self</span>.isInteracting &amp;&amp; vel.x &lt; <span class="number">0</span>) &#123;</div><div class="line">    <span class="keyword">self</span>.isInteracting = <span class="literal">NO</span>;</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>vel</code>这个变量 其实是判断当我们从右侧划入返回.修复了原来开源的一个bug</p>
<p>还有 原来开源中<code>tableView</code>的<code>contentSize</code>以外 区域露在外部,我用了一个mask的蒙版遮住了显示在外的区域.</p>
<p>唯一有些许遗憾的地方是抖音的左滑返回时候,有背景遮盖透明的渐变.这里由于时间关系和篇幅限制我没有花足够的时间调研.后续完善,写的不好请大家多多指教</p>
<p><a href="https://github.com/sunyazhou13/AwemeDemoTransition" target="_blank" rel="external">最终得Demo在这里</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;
&lt;p&gt;这几天比较忙,今天给大家带来的是抖音的转场动画实现 废话不多说上图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.i
    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="抖音动画系列" scheme="https://www.sunyazhou.com/tags/%E6%8A%96%E9%9F%B3%E5%8A%A8%E7%94%BB%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>探测UIPanGesture的滑动方向</title>
    <link href="https://www.sunyazhou.com/2018/12/06/20181206Detecting-pan-gesture-direction/"/>
    <id>https://www.sunyazhou.com/2018/12/06/20181206Detecting-pan-gesture-direction/</id>
    <published>2018-12-06T05:59:46.000Z</published>
    <updated>2018-12-18T16:05:06.393Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言">前言</h1>
<p>这几天遇到一个问题 就是拖动手势作用在一个view上的时候 无法区分方向</p>
<p>于是找到stackOverFlow上的答案 记录一下</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)panRecognized:(<span class="built_in">UIPanGestureRecognizer</span> *)rec</div><div class="line">&#123;</div><div class="line">    <span class="built_in">CGPoint</span> vel = [rec velocityInView:<span class="keyword">self</span>.view];</div><div class="line">    <span class="keyword">if</span> (vel.x &gt; <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="comment">// user dragged towards the right 向右拖动</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">// user dragged towards the left 向左拖动</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="https://stackoverflow.com/questions/11777281/detecting-the-direction-of-pan-gesture-in-ios" target="_blank" rel="external">参考</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;
&lt;p&gt;这几天遇到一个问题 就是拖动手势作用在一个view上的时候 无法区分方向&lt;/p&gt;
&lt;p&gt;于是找到stackOverFlow上的答案 记录一下&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;
    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>iOS抖音点赞动画实现</title>
    <link href="https://www.sunyazhou.com/2018/11/27/20181127LikeAnimation/"/>
    <id>https://www.sunyazhou.com/2018/11/27/20181127LikeAnimation/</id>
    <published>2018-11-27T03:16:14.000Z</published>
    <updated>2018-12-18T16:05:06.393Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言">前言</h1>
<p>hi 大家好 又跟大家见面了,今天给大家分享的是抖音的点赞动画的实现, 废话不多说上图</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/76ba4614cb348633a74605650cb87898e5a28d56/20181127LikeAnimation/likeAnimation.gif"></p>
<p>本篇文章主要包含技术点:</p>
<ul>
<li>CAShapeLayer和贝赛尔曲线绘制三角形</li>
<li>组合动画的时间技巧</li>
</ul>
<p>我习惯写完文章的demo都附在文章底部,如果不想看原理的小伙伴可直接跳到底部找demo下载.</p>
<h1 id="实现原理">实现原理</h1>
<p>首先 我们来详细分解一下这个动画</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/3e284f04ea28b305a0cfe2c25618fcc71685ab21/20181127LikeAnimation/likeAnimation2.gif"> &gt; 请仔细观察</p>
<p>我们来看单独的一个动画</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/3e284f04ea28b305a0cfe2c25618fcc71685ab21/20181127LikeAnimation/likeAnimation3.gif"></p>
<blockquote>
<p>请仔细观看 我设置10秒的duration 以便于大家能看清楚</p>
</blockquote>
<h2 id="实现原理-1">实现原理</h2>
<p>从上述两张图中,我们可以看到 它是一个 三角形的贝塞尔曲线</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/47fde336e6b929ef6163f87e248147d9ddf2354b/20181127LikeAnimation/likeAnimation4.png"></p>
<p>这样的动画需要经过:</p>
<ul>
<li>2π (360°)旋转一周</li>
<li>圆一周一共有六个 三角形的贝赛尔曲线图形形状.</li>
<li>一个动画组 内部包含缩放动画 从0~1的放大 ,动画如果执行10秒,那么 scale缩放动画执行 10*0.2 = 2秒, 动画组中还包含另一个动画是 从结束位置的动画到结尾消失的位置大小变化直到动画消失.</li>
<li>沿着圆形每 60°角度 创建一个上图的三角形图形.</li>
</ul>
<p>说了这么多 实际就是用<code>CABasicAnimation</code>的keypath是<code>path</code>和<code>CABasicAnimation</code>的<code>keypath</code>是<code>transform.scale</code>的动画组合在一起作用于一个三角形上,并且一共创建6个三角形图形.</p>
<p>结束的时候大概是这样的</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/8ad48f681be3c7d5bdb60eb3e8c5b3fbe15ec29f/20181127LikeAnimation/likeAnimation5.gif"></p>
<p>结束的时候实际上是一个从 上一次动画执行完成的path向 一条线上三个点的path过渡的过程,直到最后隐藏消失.</p>
<p>好下面我们来实现一下这个动画</p>
<blockquote>
<p>注意: 背景的❤️红心是 一张图不在本篇讲述范围</p>
</blockquote>
<h2 id="代码实现">代码实现</h2>
<p>首先我们子类话一个<code>ZanLikeView</code>继承自<code>UIView</code>并设置底部的图片和点击变换的❤️图片,就是两张UIImageView加手势,当点击的时候区分不同view的tag就知道哪个imageview点击,这样就可以做两张动画不同的效果了,不过这些可以参考demo.</p>
<p>我主要介绍核心代码</p>
<p>创建 <code>CAShapeLayer</code>用于做形状图形相关的图形动画.</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="built_in">CAShapeLayer</span> *layer = [[<span class="built_in">CAShapeLayer</span> alloc]init];</div><div class="line">layer.position = _likeBefore.center;</div><div class="line">layer.fillColor = [<span class="built_in">UIColor</span> redColor].CGColor;</div></pre></td></tr></table></figure>
<blockquote>
<p>颜色最终可对外暴露接口</p>
</blockquote>
<p>for循环每 30°角创建一个上述的三角形.我们需要创建 6个 就循环6次</p>
<p>创建初始位置的贝塞尔path</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="built_in">CGFloat</span> length = <span class="number">30</span>;</div><div class="line"><span class="built_in">CGFloat</span> duration = <span class="number">0.5</span>f;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">6</span>; i++) &#123;</div><div class="line">	<span class="built_in">CAShapeLayer</span> *layer = [[<span class="built_in">CAShapeLayer</span> alloc]init];</div><div class="line">	layer.position = _likeBefore.center;</div><div class="line">	layer.fillColor = [[<span class="built_in">UIColor</span> redColor].CGColor;</div><div class="line">	</div><div class="line">	<span class="comment">//...  1</span></div><div class="line">	<span class="comment">//...  2</span></div><div class="line">	<span class="comment">//...  3</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>这里我们一共创建6个shapeLayer的实例并填充成颜色,我们这里填充的是红色 其它的颜色可自行封装. _likeBefore 是我们看到白色的❤️背景视图(UIImageView)</p>
</blockquote>
<p>下面 在<code>//...  1</code>的地方加入如下代码</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="built_in">UIBezierPath</span> *startPath = [<span class="built_in">UIBezierPath</span> bezierPath];</div><div class="line">[startPath moveToPoint:<span class="built_in">CGPointMake</span>(<span class="number">-2</span>, -length)];</div><div class="line">[startPath addLineToPoint:<span class="built_in">CGPointMake</span>(<span class="number">2</span>, -length)];</div><div class="line">[startPath addLineToPoint:<span class="built_in">CGPointMake</span>(<span class="number">0</span>, <span class="number">0</span>)];</div></pre></td></tr></table></figure>
<p>这行代码加完就是这样的图形</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/47fde336e6b929ef6163f87e248147d9ddf2354b/20181127LikeAnimation/likeAnimation4.png"></p>
<p>然后创建完成我们需要把path给layer.path. 记得转成CGPath</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">layer.path = startPath.CGPath;</div><div class="line">layer.transform = <span class="built_in">CATransform3DMakeRotation</span>(M_PI / <span class="number">3.0</span>f * i, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>);</div><div class="line">[<span class="keyword">self</span>.layer addSublayer:layer]</div></pre></td></tr></table></figure>
<blockquote>
<p>注: CATransform3DMakeRotation()函数 当x,y,z值为0时,代表在该轴方向上不进行旋转,当值为-1时,代表在该轴方向上进行逆时针旋转,当值为1时,代表在该轴方向上进行顺时针旋转<br>
因为我们是需要60°创建一个layer所以需要顺时针 M_PI / 3.0f = 60°. 每循环一次则创建第N个角度<code>乘</code>60°.</p>
</blockquote>
<p>接着在<code>//...  2</code>添加如下代码</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//动画组</span></div><div class="line"><span class="built_in">CAAnimationGroup</span> *group = [[<span class="built_in">CAAnimationGroup</span> alloc] init];</div><div class="line">group.removedOnCompletion = <span class="literal">NO</span>;</div><div class="line">group.timingFunction = [<span class="built_in">CAMediaTimingFunction</span> functionWithName:kCAMediaTimingFunctionEaseInEaseOut];</div><div class="line">group.fillMode = kCAFillModeForwards;</div><div class="line">group.duration = duration;</div><div class="line"></div><div class="line"><span class="comment">//缩放动画</span></div><div class="line"><span class="built_in">CABasicAnimation</span> *scaleAnim = [<span class="built_in">CABasicAnimation</span> animationWithKeyPath:<span class="string">@"transform.scale"</span>];</div><div class="line">scaleAnim.fromValue = @(<span class="number">0.0</span>);</div><div class="line">scaleAnim.toValue = @(<span class="number">1.0</span>);</div><div class="line">scaleAnim.duration = duration * <span class="number">0.2</span>f; <span class="comment">//注意这里是在给定时长的地方前0.2f的时间里执行缩放</span></div></pre></td></tr></table></figure>
<blockquote>
<p>这里说下duration * 0.2f. 比如我给定 10秒的duration,那么 duration * 0.2 = 2 秒执行缩放.</p>
</blockquote>
<p>最后在<code>//...  3</code>的代码出加上如下代码</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//结束点</span></div><div class="line"><span class="built_in">UIBezierPath</span> *endPath = [<span class="built_in">UIBezierPath</span> bezierPath];</div><div class="line">[endPath moveToPoint:<span class="built_in">CGPointMake</span>(<span class="number">-2</span>, -length)];</div><div class="line">[endPath addLineToPoint:<span class="built_in">CGPointMake</span>(<span class="number">2</span>, -length)];</div><div class="line">[endPath addLineToPoint:<span class="built_in">CGPointMake</span>(<span class="number">0</span>, -length)];</div><div class="line">            </div><div class="line"><span class="built_in">CABasicAnimation</span> *pathAnim = [<span class="built_in">CABasicAnimation</span> animationWithKeyPath:<span class="string">@"path"</span>];</div><div class="line">pathAnim.fromValue = (__bridge <span class="keyword">id</span>)layer.path;</div><div class="line">pathAnim.toValue = (__bridge <span class="keyword">id</span>)endPath.CGPath;</div><div class="line">pathAnim.beginTime = duration * <span class="number">0.2</span>f;</div><div class="line">pathAnim.duration = duration * <span class="number">0.8</span>f;</div><div class="line">    </div><div class="line">[group setAnimations:@[scaleAnim, pathAnim]];</div><div class="line">[layer addAnimation:group forKey:<span class="literal">nil</span>];</div></pre></td></tr></table></figure>
<p>这几行代码的意识是 从我们上一个layer的path位置开始向我们结束位置的path过渡,并且注意开始时间<br>
<code>pathAnim.beginTime</code>是 duration * 0.2也就是说 在上一个动画结束的时间点才开始结束过渡,过渡的时长剩余是duration * 0.8.这样两个连贯在一起的动画就执行完了,最后把动画加到动画组 天加给layer.</p>
<p>下图是从开始到结束点过渡的动画.</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/8ad48f681be3c7d5bdb60eb3e8c5b3fbe15ec29f/20181127LikeAnimation/likeAnimation5.gif"></p>
<p>剩余的工作就是做个普通的动画的 基本没什么了.</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">[<span class="built_in">UIView</span> animateWithDuration:<span class="number">0.35</span>f</div><div class="line">                      delay:<span class="number">0.0</span>f</div><div class="line">                    options:<span class="built_in">UIViewAnimationOptionCurveEaseIn</span></div><div class="line">                 animations:^&#123;</div><div class="line">                     <span class="keyword">self</span>.likeAfter.transform = <span class="built_in">CGAffineTransformScale</span>(<span class="built_in">CGAffineTransformMakeRotation</span>(-M_PI_4), <span class="number">0.1</span>f, <span class="number">0.1</span>f);</div><div class="line">                 &#125;</div><div class="line">                 completion:^(<span class="built_in">BOOL</span> finished) &#123;</div><div class="line">                     [<span class="keyword">self</span>.likeAfter setHidden:<span class="literal">YES</span>];</div><div class="line">                     <span class="keyword">self</span>.likeBefore.userInteractionEnabled = <span class="literal">YES</span>;</div><div class="line">                     <span class="keyword">self</span>.likeAfter.userInteractionEnabled = <span class="literal">YES</span>;</div><div class="line">                 &#125;];</div></pre></td></tr></table></figure>
<h4 id="技巧">技巧</h4>
<p>结束动画的开始时间和结束时间控制,恰到好处.</p>
<h1 id="总结">总结</h1>
<p>动画实现的细节需要研究和学习和实践,在这里感谢开源作者的代码给了思路, 我个人通过学习和模仿整理出原理写出代码校验并增加相关对外接口.</p>
<p><a href="https://github.com/sunyazhou13/LikeDemo" target="_blank" rel="external">点击下载Demo</a></p>
<p><a href="https://github.com/sunyazhou13/LikeDemo/archive/master.zip" target="_blank" rel="external">直接下载zip</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;
&lt;p&gt;hi 大家好 又跟大家见面了,今天给大家分享的是抖音的点赞动画的实现, 废话不多说上图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sunyazhou13/sunyazhou1
    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="抖音动画系列" scheme="https://www.sunyazhou.com/tags/%E6%8A%96%E9%9F%B3%E5%8A%A8%E7%94%BB%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>iOS视频加载动画</title>
    <link href="https://www.sunyazhou.com/2018/11/14/20181114PlayLoadingAnimation/"/>
    <id>https://www.sunyazhou.com/2018/11/14/20181114PlayLoadingAnimation/</id>
    <published>2018-11-14T06:14:39.000Z</published>
    <updated>2018-12-18T16:05:06.392Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言">前言</h1>
<p>这几天一直跟开源的抖音demo斗智斗勇,今天跟大家分享的是抖音中或者快手中加载视频的动画</p>
<p>上图看成品</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/a119e34c5b443ef40036554e5fa05fa9f7c707ce/20181114PlayLoadingAnimation/playloading.gif"></p>
<h1 id="实现原理">实现原理</h1>
<p>首先我创建一个视图</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIView</span> *playLoadingView;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    </div><div class="line">    <span class="comment">//init player status bar</span></div><div class="line">    <span class="keyword">self</span>.playLoadingView = [[<span class="built_in">UIView</span> alloc]init];</div><div class="line">    <span class="keyword">self</span>.playLoadingView.backgroundColor = [<span class="built_in">UIColor</span> whiteColor];</div><div class="line">    [<span class="keyword">self</span>.playLoadingView setHidden:<span class="literal">YES</span>];</div><div class="line">    [<span class="keyword">self</span>.view addSubview:<span class="keyword">self</span>.playLoadingView];</div><div class="line">    </div><div class="line">    <span class="comment">//make constraintes</span></div><div class="line">    [<span class="keyword">self</span>.playLoadingView mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">        make.center.equalTo(<span class="keyword">self</span>.view);</div><div class="line">        make.width.mas_equalTo(<span class="number">1.0</span>f); <span class="comment">//宽 1 dp</span></div><div class="line">        make.height.mas_equalTo(<span class="number">0.5</span>f); <span class="comment">//高 0.5 dp</span></div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">    [<span class="keyword">self</span> startLoadingPlayAnimation:<span class="literal">YES</span>]; <span class="comment">//调用动画代码</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>这里我们可以看到 我们实际上创建的是一个 1pt宽度 0.5 pt的宽度 的视图</p>
</blockquote>
<p>紧接着动画实现的代码</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)startLoadingPlayAnimation:(<span class="built_in">BOOL</span>)isStart &#123;</div><div class="line">    <span class="keyword">if</span> (isStart) &#123;</div><div class="line">        <span class="keyword">self</span>.playLoadingView.backgroundColor = [<span class="built_in">UIColor</span> whiteColor];</div><div class="line">        <span class="keyword">self</span>.playLoadingView.hidden = <span class="literal">NO</span>;</div><div class="line">        [<span class="keyword">self</span>.playLoadingView.layer removeAllAnimations];</div><div class="line">        </div><div class="line">        <span class="built_in">CAAnimationGroup</span> *animationGroup = [[<span class="built_in">CAAnimationGroup</span> alloc] init];</div><div class="line">        animationGroup.duration = <span class="number">0.5</span>;</div><div class="line">        animationGroup.beginTime = <span class="built_in">CACurrentMediaTime</span>() + <span class="number">0.5</span>;</div><div class="line">        animationGroup.repeatCount = MAXFLOAT;</div><div class="line">        animationGroup.timingFunction = [<span class="built_in">CAMediaTimingFunction</span> functionWithName:kCAMediaTimingFunctionEaseInEaseOut];</div><div class="line">        </div><div class="line">        <span class="built_in">CABasicAnimation</span> *scaleAnimation = [<span class="built_in">CABasicAnimation</span> animation];</div><div class="line">        scaleAnimation.keyPath = <span class="string">@"transform.scale.x"</span>;</div><div class="line">        scaleAnimation.fromValue = @(<span class="number">1.0</span>f);</div><div class="line">        scaleAnimation.toValue = @(<span class="number">1.0</span>f * ScreenWidth);</div><div class="line">        </div><div class="line">        <span class="built_in">CABasicAnimation</span> *alphaAnimation = [<span class="built_in">CABasicAnimation</span> animation];</div><div class="line">        alphaAnimation.keyPath = <span class="string">@"opacity"</span>;</div><div class="line">        alphaAnimation.fromValue = @(<span class="number">1.0</span>f);</div><div class="line">        alphaAnimation.toValue = @(<span class="number">0.5</span>f);</div><div class="line">        </div><div class="line">        [animationGroup setAnimations:@[scaleAnimation, alphaAnimation]];</div><div class="line">        [<span class="keyword">self</span>.playLoadingView.layer addAnimation:animationGroup forKey:<span class="literal">nil</span>];</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        [<span class="keyword">self</span>.playLoadingView.layer removeAllAnimations];</div><div class="line">        <span class="keyword">self</span>.playLoadingView.hidden = <span class="literal">YES</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>完事 就这几行代码 搞定</p>
<p>其实核心的只有4行代码</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="built_in">CABasicAnimation</span> *scaleAnimation = [<span class="built_in">CABasicAnimation</span> animation];</div><div class="line">scaleAnimation.keyPath = <span class="string">@"transform.scale.x"</span>;</div><div class="line">scaleAnimation.fromValue = @(<span class="number">1.0</span>f);</div><div class="line">scaleAnimation.toValue = @(<span class="number">1.0</span>f * ScreenWidth);</div></pre></td></tr></table></figure>
<blockquote>
<p>关键在<code>scaleAnimation.keyPath = @"transform.scale.x";</code> 这里我们要沿着x做缩放</p>
</blockquote>
<p>缩放的得值从 <strong>1~屏幕宽度</strong>, 当然值多大自己可以控制.</p>
<p>如果<code>@"transform.scale.y"</code> 则是沿着Y轴缩放</p>
<p>当然 如果写成<code>@"transform.scale"</code> 那就X,Y 一起缩放 大家可以试试.</p>
<h1 id="总结">总结</h1>
<p>本篇的动画技巧是 缩放的 <code>transform.scale.y</code> 从一个点 做layer缩放 就会出现 加载效果.</p>
<p><a href="https://github.com/sunyazhou13/PlayLoadingDemo" target="_blank" rel="external">最后附上demo</a></p>
<p>感谢大家支持</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;
&lt;p&gt;这几天一直跟开源的抖音demo斗智斗勇,今天跟大家分享的是抖音中或者快手中加载视频的动画&lt;/p&gt;
&lt;p&gt;上图看成品&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sunyazho
    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="抖音动画系列" scheme="https://www.sunyazhou.com/tags/%E6%8A%96%E9%9F%B3%E5%8A%A8%E7%94%BB%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>iOS所有Animation相关可用的Keypath</title>
    <link href="https://www.sunyazhou.com/2018/11/13/20181113AllKeypathOfCALayer/"/>
    <id>https://www.sunyazhou.com/2018/11/13/20181113AllKeypathOfCALayer/</id>
    <published>2018-11-13T03:46:45.000Z</published>
    <updated>2018-11-17T05:03:35.107Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言">前言</h1>
<p>在Core Animation中 我们经常使用CABasicAnimation或者它的子类做一些动画</p>
<p>一般情况下我们都要用到Keypath,最近在研究动画,想整理一下所有可用的Keypath在iOS的核心动画中.</p>
<h1 id="calayer的相关属性">CALayer的相关属性</h1>
<p>废话不多说 我们上一段代码演示一下 这篇的主题</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="built_in">CABasicAnimation</span> * scaleAnimation = [<span class="built_in">CABasicAnimation</span> animation];</div><div class="line">scaleAnimation.keyPath = <span class="string">@"transform.scale.x"</span>;</div><div class="line">scaleAnimation.fromValue = @(<span class="number">1.0</span>f);</div><div class="line">scaleAnimation.toValue = @(<span class="number">1.0</span>f * ScreenWidth);</div></pre></td></tr></table></figure>
<p>一般我们给一个View的Layer添加animation</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">[xxxView.layer addAnimation: scaleAnimation forKey:<span class="string">@"testAnimationName"</span>];</div></pre></td></tr></table></figure>
<p>这里面我们注意到<code>scaleAnimation.keyPath</code>它实际上是一个字符串 是一个被外部修改的成员变量的类似的东西,但是我们自己又不能随便想写写啥</p>
<p>这个实际上是一个layer的属性 或者成员变量.</p>
<h2 id="全部可修改的keypath有哪些呢">全部可修改的keypath有哪些呢？</h2>
<h3 id="calayer-animatable-properties-动画有如下这些">CALayer animatable properties 动画有如下这些</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">nchorPoint</div><div class="line">backgroundColor</div><div class="line">backgroundFilters</div><div class="line">borderColor</div><div class="line">borderWidth</div><div class="line">bounds</div><div class="line">compositingFilter</div><div class="line">contents</div><div class="line">contentsRect</div><div class="line">cornerRadius</div><div class="line">doubleSided</div><div class="line">filters</div><div class="line">frame</div><div class="line">hidden</div><div class="line">mask</div><div class="line">masksToBounds</div><div class="line">opacity</div><div class="line">position</div><div class="line">shadowColor</div><div class="line">shadowOffset</div><div class="line">shadowOpacity</div><div class="line">shadowPath</div><div class="line">shadowRadius</div><div class="line">sublayers</div><div class="line">sublayerTransform</div><div class="line">transform</div><div class="line">zPosition</div></pre></td></tr></table></figure>
<p>剩下的都是继承自CALayer</p>
<h3 id="caemitterlayer-animatable-properties">CAEmitterLayer animatable properties:</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">emitterPosition</div><div class="line">emitterZPosition</div><div class="line">emitterSize</div></pre></td></tr></table></figure>
<h3 id="cagradientlayer-animatable-properties">CAGradientLayer animatable properties</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">colors</div><div class="line">locations</div><div class="line">endPoint</div><div class="line">startPoint</div></pre></td></tr></table></figure>
<h3 id="careplicatorlayer-animatable-properties">CAReplicatorLayer animatable properties</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">instanceDelay</div><div class="line">instanceTransform</div><div class="line">instanceRedOffset</div><div class="line">instanceGreenOffset</div><div class="line">instanceBlueOffset</div><div class="line">instanceAlphaOffset</div></pre></td></tr></table></figure>
<h3 id="cashapelayer-animatable-properties">CAShapeLayer animatable properties</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">fillColor</div><div class="line">lineDashPhase</div><div class="line">lineWidth</div><div class="line">miterLimit</div><div class="line">strokeColor</div><div class="line">strokeStart</div><div class="line">strokeEnd</div></pre></td></tr></table></figure>
<h3 id="catextlayer-animatable-properties">CATextLayer animatable properties</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">fontSize</div><div class="line">foregroundColor</div></pre></td></tr></table></figure>
<h3 id="catransform3d-key-value-coding-extensionskvc的-keypath">CATransform3D Key-Value Coding Extensions(KVC的 Keypath)</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"></div><div class="line">rotation.x</div><div class="line">rotation.y</div><div class="line">rotation.z</div><div class="line">rotation</div><div class="line">scale.x</div><div class="line">scale.y</div><div class="line">scale.z</div><div class="line">scale</div><div class="line">translation.x</div><div class="line">translation.y</div><div class="line">translation.z</div></pre></td></tr></table></figure>
<h4 id="cgpoint-keypaths">CGPoint keyPaths</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">x</div><div class="line">y</div></pre></td></tr></table></figure>
<h4 id="cgsize-keypaths">CGSize keyPaths</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">width</div><div class="line">height</div></pre></td></tr></table></figure>
<h3 id="cgrect-keypaths">CGRect keyPaths</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">origin</div><div class="line">origin.x</div><div class="line">origin.y</div><div class="line">size</div><div class="line">size.width</div><div class="line">size.height</div></pre></td></tr></table></figure>
<blockquote>
<p>还有一些附加可<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/CoreAnimation_guide/AnimatableProperties/AnimatableProperties.html" target="_blank" rel="external">参考</a>, 以及详细内容可以参考<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/CoreAnimation_guide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40004514-CH1-SW1" target="_blank" rel="external">官方文档</a>,以及一些<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/CoreAnimation_guide/Key-ValueCodingExtensions/Key-ValueCodingExtensions.html#//apple_ref/doc/uid/TP40004514-CH12-SW2" target="_blank" rel="external">结构体</a>.</p>
</blockquote>
<p>以上就是所有我目前找到的全部动画可用的<code>keypath</code>.</p>
<h2 id="可动画属性介绍">可动画属性介绍</h2>
<h3 id="几何属性geometry-properties">几何属性(Geometry Properties)</h3>
<table>
<thead>
<tr class="header">
<th>可用 Key Path</th>
<th>示意</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>transform.rotation.x</td>
<td>按x轴旋转的弧度</td>
</tr>
<tr class="even">
<td>transform.rotation.y</td>
<td>按y轴旋转的弧度</td>
</tr>
<tr class="odd">
<td>transform.rotation.z</td>
<td>按z轴旋转的弧度</td>
</tr>
<tr class="even">
<td>transform.rotation</td>
<td>按z轴旋转的弧度, 和transform.rotation.z效果一样</td>
</tr>
<tr class="odd">
<td>transform.scale.x</td>
<td>在x轴按比例放大缩小</td>
</tr>
<tr class="even">
<td>transform.scale.y</td>
<td>在y轴按比例放大缩小</td>
</tr>
<tr class="odd">
<td>transform.scale.z</td>
<td>在z轴按比例放大缩小</td>
</tr>
<tr class="even">
<td>transform.scale</td>
<td>整体按比例放大缩小</td>
</tr>
<tr class="odd">
<td>transform.translation.x</td>
<td>沿x轴平移</td>
</tr>
<tr class="even">
<td>transform.translation.y</td>
<td>沿y轴平移</td>
</tr>
<tr class="odd">
<td>transform.translation.z</td>
<td>沿z轴平移</td>
</tr>
<tr class="even">
<td>transform.translation</td>
<td>x,y 坐标均发生改变</td>
</tr>
<tr class="odd">
<td>transform</td>
<td>CATransform3D 4xbounds4矩阵</td>
</tr>
<tr class="even">
<td>bounds</td>
<td>layer大小</td>
</tr>
<tr class="odd">
<td>position</td>
<td>layer位置</td>
</tr>
<tr class="even">
<td>anchorPoint</td>
<td>锚点位置</td>
</tr>
<tr class="odd">
<td>cornerRadius</td>
<td>圆角大小</td>
</tr>
<tr class="even">
<td>zPosition</td>
<td>z轴位置</td>
</tr>
</tbody>
</table>
<blockquote>
<p>注意: 这里没有frame,layer的 frame 是不支持动画的，我们可以通过改变position和bounds来代替frame</p>
</blockquote>
<h3 id="layer内容-layer-content">Layer内容 (Layer Content)</h3>
<table>
<thead>
<tr class="header">
<th>可用 Key Path</th>
<th>示意</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>contents</td>
<td>Layer内容，呈现在背景颜色之上</td>
</tr>
</tbody>
</table>
<h3 id="阴影属性-shadow-properties">阴影属性 (Shadow Properties)</h3>
<table>
<thead>
<tr class="header">
<th>可用 Key Path</th>
<th>示意</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>shadowColor</td>
<td>阴影颜色</td>
</tr>
<tr class="even">
<td>shadowOffset</td>
<td>阴影偏移距离</td>
</tr>
<tr class="odd">
<td>shadowOpacity</td>
<td>阴影透明度</td>
</tr>
<tr class="even">
<td>shadowRadius</td>
<td>阴影圆角</td>
</tr>
<tr class="odd">
<td>shadowPath</td>
<td>阴影轨迹</td>
</tr>
</tbody>
</table>
<h3 id="透明度-opacity-property">透明度 (Opacity Property)</h3>
<table>
<thead>
<tr class="header">
<th>可用 Key Path</th>
<th>示意</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>opacity</td>
<td>透明度</td>
</tr>
</tbody>
</table>
<h3 id="遮罩-mask-properties">遮罩 (Mask Properties)</h3>
<table>
<thead>
<tr class="header">
<th>可用 Key Path</th>
<th>示意</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>mask</td>
<td></td>
</tr>
</tbody>
</table>
<h3 id="shapelayer属性-shapelayer">ShapeLayer属性 (ShapeLayer)</h3>
<table>
<thead>
<tr class="header">
<th>可用 Key Path</th>
<th>示意</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>fillColor</td>
<td>填充颜色</td>
</tr>
<tr class="even">
<td>strokeColor</td>
<td>描边颜色</td>
</tr>
<tr class="odd">
<td>strokeStart</td>
<td>描边颜色开始 从无到有</td>
</tr>
<tr class="even">
<td>strokeEnd</td>
<td>描边颜色结束 从有到无</td>
</tr>
<tr class="odd">
<td>lineWidth</td>
<td>路径的线宽</td>
</tr>
<tr class="even">
<td>miterLimit</td>
<td>相交长度的最大值</td>
</tr>
<tr class="odd">
<td>lineDashPhase</td>
<td>虚线样式</td>
</tr>
</tbody>
</table>
<h1 id="总结">总结</h1>
<p>以上是我 搜集整理 到的所有keypath仅供参考</p>
<p>多年前 我走在 辉煌国际到西二旗的大街上 脑袋里还在思考 为什么animation的这种keypath总是搞成字符串 整整就容易写错.今天自己的这篇文章给了答案,答案是 KVC的成员变量并没有直接获取变量名,而是要写成 字符串的变量名.内容通过字符串去做一些事情.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;
&lt;p&gt;在Core Animation中 我们经常使用CABasicAnimation或者它的子类做一些动画&lt;/p&gt;
&lt;p&gt;一般情况下我们都要用到Keypath,最近在研究动画,想整理一下所有可用的Keypath在iOS的核心动画中.&lt;/p&gt;
    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="macOS开发" scheme="https://www.sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>iOS抖音右下角专辑动画</title>
    <link href="https://www.sunyazhou.com/2018/11/08/20181108AwemeAlbumAnimation/"/>
    <id>https://www.sunyazhou.com/2018/11/08/20181108AwemeAlbumAnimation/</id>
    <published>2018-11-08T03:52:06.000Z</published>
    <updated>2018-12-18T16:05:06.391Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言">前言</h1>
<p>前两天分享了 抖音 上下滑切换 ,今天给和大家分享的是抖音右小角底部的专辑动画</p>
<p>上图看下</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/a26ecc741c10edcf564f1f3295b7afb6ebe018fc/20181108AwemeAlbumAnimation/final.gif"></p>
<p>再看下抖音的</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/1781036a179c21add298c201f41f70cc38ea6e4b/20181108AwemeAlbumAnimation/AlbumAnimation.gif"></p>
<h1 id="具体实现思路">具体实现思路</h1>
<p>首先需要3涨素材 这个在demo中就可以找到哈</p>
<p>在文章底部demo中有</p>
<ol type="1">
<li>ContrainerView</li>
<li>Background Layer</li>
<li>Album (UIImageView)</li>
</ol>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/9e8e3934b70146afaa22fc5373a54e9c561af355/20181108AwemeAlbumAnimation/album1.png"></p>
<p>我们首先写个 <code>MusicAlbumView</code> 继承自UIView</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MusicAlbumView</span> : <span class="title">UIView</span></span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIImageView</span>  *album;</div><div class="line"><span class="comment">// 开始动画 rate 动画时间系数</span></div><div class="line">- (<span class="keyword">void</span>)startAnimation:(<span class="built_in">CGFloat</span>)rate;</div><div class="line"><span class="comment">// 重置视图 删除所有已添加的动画组</span></div><div class="line">- (<span class="keyword">void</span>)resetView;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h3 id="并提供两个接口">并提供两个接口</h3>
<ul>
<li>一个开始动画</li>
<li>一个重置动画</li>
</ul>
<p><code>album</code> 成员变量 是为了给外部加载网络图片使用 所以暴露在.h中, 例如下面的调用</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">__<span class="keyword">weak</span> __<span class="keyword">typeof</span>(<span class="keyword">self</span>) wself = <span class="keyword">self</span>;</div><div class="line"><span class="comment">//加载网络图</span></div><div class="line">[<span class="keyword">self</span>.musicAlbum.album sd_setImageWithURL:[<span class="built_in">NSURL</span> URLWithString:<span class="string">@"https://www.sunyazhou.com/images/logo2.jpg"</span>] completed:^(<span class="built_in">UIImage</span> * _Nullable image, <span class="built_in">NSError</span> * _Nullable error, SDImageCacheType cacheType, <span class="built_in">NSURL</span> * _Nullable imageURL) &#123;</div><div class="line">    <span class="keyword">if</span>(!error) &#123;</div><div class="line">        wself.musicAlbum.album.image = image;</div><div class="line">    &#125;</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<h3 id="下面我们来看下内部如何封装">下面我们来看下内部如何封装</h3>
<p>首先我们要创建背景</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">instancetype</span>)initWithFrame:(<span class="built_in">CGRect</span>)frame &#123;</div><div class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> initWithFrame:frame];</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.noteLayers = [<span class="built_in">NSMutableArray</span> array];</div><div class="line">        <span class="comment">//专辑背景容器视图</span></div><div class="line">        <span class="keyword">self</span>.albumContainer =[[<span class="built_in">UIView</span> alloc]initWithFrame:<span class="keyword">self</span>.bounds];</div><div class="line">        [<span class="keyword">self</span> addSubview:<span class="keyword">self</span>.albumContainer];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>这里初始化的数组是为下面装动画layer使用 方便 Reset的时候 移除所有layer和动画</p>
</blockquote>
<p>一个产品背景容器UIView + 一个产品背景Layer + 一个个人头像背景UIImageView</p>
<p>我们依次把下面代码写在<code>[self addSubview:self.albumContainer]</code>底部</p>
<p>添加唱片背景</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//添加唱片icon的layer</span></div><div class="line"><span class="built_in">CALayer</span> *backgroudLayer = [<span class="built_in">CALayer</span> layer];</div><div class="line">backgroudLayer.frame = <span class="keyword">self</span>.bounds;</div><div class="line">backgroudLayer.contents = (<span class="keyword">id</span>)[<span class="built_in">UIImage</span> imageNamed:<span class="string">@"music_cover"</span>].CGImage;</div><div class="line">[<span class="keyword">self</span>.albumContainer.layer addSublayer:backgroudLayer];</div></pre></td></tr></table></figure>
<p>头像视图</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//放在唱片内部的图片</span></div><div class="line"><span class="built_in">CGFloat</span> w = <span class="built_in">CGRectGetWidth</span>(frame) / <span class="number">2.0</span>f;</div><div class="line"><span class="built_in">CGFloat</span> h = <span class="built_in">CGRectGetHeight</span>(frame) / <span class="number">2.0</span>f;</div><div class="line"><span class="built_in">CGRect</span> albumFrame = <span class="built_in">CGRectMake</span>(w / <span class="number">2.0</span>f, h / <span class="number">2.0</span>f, w, h);</div><div class="line"><span class="keyword">self</span>.album = [[<span class="built_in">UIImageView</span> alloc]initWithFrame:albumFrame];</div><div class="line"><span class="keyword">self</span>.album.contentMode = <span class="built_in">UIViewContentModeScaleAspectFill</span>;</div><div class="line">[<span class="keyword">self</span>.albumContainer addSubview:<span class="keyword">self</span>.album];</div><div class="line"><span class="keyword">self</span>.album.layer.cornerRadius = h / <span class="number">2.0</span>f;</div><div class="line"><span class="keyword">self</span>.album.layer.masksToBounds = <span class="literal">YES</span>;</div></pre></td></tr></table></figure>
<p>然后居中对齐.</p>
<h4 id="给self.albumcontainer.layer加旋转">给<code>self.albumContainer.layer</code>加旋转</h4>
<p>我们在外部调用startAnimation:方法的时候 给<code>self.albumContainer.layer</code>添加旋转动画旋转</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"></div><div class="line">- (<span class="keyword">void</span>)startAnimation:(<span class="built_in">CGFloat</span>)rate &#123;</div><div class="line">    <span class="built_in">CABasicAnimation</span>* rotationAnimation;</div><div class="line">    rotationAnimation = [<span class="built_in">CABasicAnimation</span> animationWithKeyPath:<span class="string">@"transform.rotation.z"</span>];</div><div class="line">    rotationAnimation.toValue = [<span class="built_in">NSNumber</span> numberWithFloat: M_PI * <span class="number">2.0</span>];</div><div class="line">    rotationAnimation.duration = <span class="number">3.0</span>f;</div><div class="line">    rotationAnimation.cumulative = <span class="literal">YES</span>;</div><div class="line">    rotationAnimation.repeatCount = MAXFLOAT;</div><div class="line">    [<span class="keyword">self</span>.albumContainer.layer addAnimation:rotationAnimation forKey:<span class="string">@"rotationAnimation"</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>加完效果是这样的</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/710440e9f7f36b2a30e54026fb73574c23bba37b/20181108AwemeAlbumAnimation/album2.gif"></p>
<h4 id="如何实现弧度动画">如何实现弧度动画</h4>
<p>好 完成一半了 下面我们来说一下 弧度旋转.</p>
<p>现仔细观察一下动画的音符</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/e63191fa2982fc79925e0045c3e65ced9aec1db0/20181108AwemeAlbumAnimation/album3.gif"></p>
<p>这是一张音符动画 它的运动轨迹大概是这样的</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/20181108AwemeAlbumAnimation/bezier.png"></p>
<p>我们其实用到的是贝塞尔曲线动画 (我画的不是很好 大家理解这个意思就好)</p>
<p>然后让音符的layer沿着 这个贝塞尔曲线做旋转... 其实是下面的一些列动作组合</p>
<p>这个需要一个动画组 包含如下动作</p>
<ul>
<li>一个贝塞尔曲线运动的轨迹动画啊</li>
<li>旋转弧度 大概半圈 小一些 M_PI * 0.10 ~ M_PI * -0.10 之间旋转的动画</li>
<li>透明度 从0 到 1 在到 0 之间运动的透明度动画</li>
<li>缩放动画 从开始 1x 到 2x 之间变化</li>
</ul>
<p>好我们来解决一下 关键的贝赛尔曲线</p>
<p>首先创建一个动画组</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="built_in">CAAnimationGroup</span> *animationGroup = [[<span class="built_in">CAAnimationGroup</span> alloc]init];</div><div class="line">animationGroup.duration = rate/<span class="number">4.0</span>f;</div><div class="line">animationGroup.beginTime = <span class="built_in">CACurrentMediaTime</span>() + delayTime;</div><div class="line">animationGroup.repeatCount = MAXFLOAT;</div><div class="line">animationGroup.removedOnCompletion = <span class="literal">NO</span>;</div><div class="line">animationGroup.fillMode = kCAFillModeForwards;</div><div class="line">animationGroup.timingFunction = [<span class="built_in">CAMediaTimingFunction</span> functionWithName:kCAMediaTimingFunctionLinear];</div></pre></td></tr></table></figure>
<blockquote>
<p>rate 外部传入 delayTime是 动画组开始动画的延迟的时间 我们设置 delayTime 为0就是不延时 下面解释为什么这么写</p>
</blockquote>
<p>创建一个 贝赛尔曲线东动画</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//bezier路径帧动画</span></div><div class="line"><span class="built_in">CAKeyframeAnimation</span> * pathAnimation = [<span class="built_in">CAKeyframeAnimation</span> animationWithKeyPath:<span class="string">@"position"</span>];</div></pre></td></tr></table></figure>
<p>然后把下面这坨代码加到 上面代码的底部</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="built_in">CGFloat</span> sideXLength = <span class="number">40.0</span>f;  <span class="comment">//X轴左右侧偏移量</span></div><div class="line"><span class="built_in">CGFloat</span> sideYLength = <span class="number">100.0</span>f; <span class="comment">//Y轴上下偏移量</span></div><div class="line"></div><div class="line"><span class="built_in">CGPoint</span> beginPoint = <span class="built_in">CGPointMake</span>(<span class="built_in">CGRectGetMidX</span>(<span class="keyword">self</span>.bounds) - <span class="number">5</span>,  <span class="comment">//贝赛尔曲线开始点CGRectGetMaxY(self.bounds));</span></div><div class="line"><span class="built_in">CGPoint</span> endPoint = <span class="built_in">CGPointMake</span>(beginPoint.x - sideXLength, beginPoint.y - sideYLength); <span class="comment">//贝塞尔曲线结束点</span></div><div class="line"><span class="built_in">NSInteger</span> controlLength = <span class="number">60</span>; <span class="comment">//贝塞尔曲线控制点长度</span></div><div class="line"><span class="built_in">CGPoint</span> controlPoint = <span class="built_in">CGPointMake</span>(beginPoint.x - sideXLength/<span class="number">2.0</span>f - controlLength, beginPoint.y - sideYLength/<span class="number">2.0</span>f + controlLength); <span class="comment">//贝塞尔曲线控制点</span></div><div class="line"></div><div class="line"><span class="built_in">UIBezierPath</span> *customPath = [<span class="built_in">UIBezierPath</span> bezierPath]; <span class="comment">//创建贝塞尔轨迹</span></div><div class="line">[customPath moveToPoint:beginPoint];</div><div class="line">[customPath addQuadCurveToPoint:endPoint controlPoint:controlPoint]; <span class="comment">//核心代码 二次曲线方程式 可以google查一下</span></div><div class="line"></div><div class="line">pathAnimation.path = customPath.CGPath; <span class="comment">//让动画沿着轨迹运动</span></div></pre></td></tr></table></figure>
<p>我来解释一下 关键变量</p>
<blockquote>
<p>beginPoint 开始点: 当前视图X坐标中心 向 左偏移 5dp (X轴是左右) Y的坐标是当前视图高度 就是最下面 endPoint 结束点: 开始点的X 减去 40左侧偏移(就是距离左侧更远) Y也是 减去偏移之后 到了 视图的外部 左上方. controlPoint 控制点: 开始点 比如 X是 30 - 60/2.0 - 60 = -60,显然已经跑到最左边了 超出了视图范围, Y 后面是+ controlLength 说明是加大 Y坐标.</p>
</blockquote>
<p>大家可以不用理解这些细节 看下面图就好了</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/873e913c22600f5e48d394775ef370fff7811c96/20181108AwemeAlbumAnimation/bezier_new.png"></p>
<blockquote>
<p>customPath: 贝塞尔曲线对象</p>
</blockquote>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"></div><div class="line">[customPath moveToPoint:beginPoint];</div><div class="line"><span class="comment">//核心代码 二次曲线方程式 可以google查一下</span></div><div class="line">[customPath addQuadCurveToPoint:endPoint controlPoint:controlPoint];</div><div class="line"><span class="comment">//让动画沿着轨迹运动</span></div><div class="line">pathAnimation.path = customPath.CGPath;</div></pre></td></tr></table></figure>
<p>这就是 增加开始点 结束点 控制点之后的贝塞尔轨迹,然后 设置轨迹动画的path就完事了.</p>
<p>这一步搞完 然后 把<code>pathAnimation</code> 放到动画组中,然后创建一个 音符的layer添加动画组</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">[animationGroup setAnimations:@[pathAnimation]];</div><div class="line">    </div><div class="line"><span class="built_in">CAShapeLayer</span> *layer = [<span class="built_in">CAShapeLayer</span> layer];</div><div class="line">layer.contents = (__bridge <span class="keyword">id</span> _Nullable)([<span class="built_in">UIImage</span> imageNamed:imageName].CGImage);</div><div class="line">layer.frame = <span class="built_in">CGRectMake</span>(beginPoint.x, beginPoint.y, <span class="number">10</span>, <span class="number">10</span>);</div><div class="line">[<span class="keyword">self</span>.layer addSublayer:layer];</div><div class="line">[<span class="keyword">self</span>.noteLayers addObject:layer];</div><div class="line">[layer addAnimation:animationGroup forKey:<span class="literal">nil</span>];</div></pre></td></tr></table></figure>
<blockquote>
<p><code>[self.noteLayers addObject:layer];</code>这行代码是我们前面声明的全局变量 存layer,reset的时候删除相关layer和动画使用</p>
</blockquote>
<p>我们来看下 简单一个音符 沿着贝塞尔曲线运动</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/a4e5309311904071b7d20ece73e5bd3d88b736bd/20181108AwemeAlbumAnimation/album4.gif"></p>
<p>好下面的工作就是 加旋转 透明 缩放动画</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//旋转帧动画</span></div><div class="line"><span class="built_in">CAKeyframeAnimation</span> * rotationAnimation = [<span class="built_in">CAKeyframeAnimation</span> animationWithKeyPath:<span class="string">@"transform.rotation"</span>];</div><div class="line"><span class="comment">//这里实际上是控制动画开始弧度和结束弧度 M_PI(180°) 就是半圆 * 0.10 或者 * -0.10j是为了关键点上下偏移的18°的间隙</span></div><div class="line">[rotationAnimation setValues:@[</div><div class="line">                               [<span class="built_in">NSNumber</span> numberWithFloat:<span class="number">0</span>],</div><div class="line">                               [<span class="built_in">NSNumber</span> numberWithFloat:M_PI * <span class="number">0.10</span>],</div><div class="line">                               [<span class="built_in">NSNumber</span> numberWithFloat:M_PI * <span class="number">-0.10</span>]]];</div><div class="line"><span class="comment">//透明度帧动画</span></div><div class="line"><span class="built_in">CAKeyframeAnimation</span> * opacityAnimation = [<span class="built_in">CAKeyframeAnimation</span> animationWithKeyPath:<span class="string">@"opacity"</span>];</div><div class="line">[opacityAnimation setValues:@[</div><div class="line">                              [<span class="built_in">NSNumber</span> numberWithFloat:<span class="number">0</span>],</div><div class="line">                              [<span class="built_in">NSNumber</span> numberWithFloat:<span class="number">0.2</span>f],</div><div class="line">                              [<span class="built_in">NSNumber</span> numberWithFloat:<span class="number">0.7</span>f],</div><div class="line">                              [<span class="built_in">NSNumber</span> numberWithFloat:<span class="number">0.2</span>f],</div><div class="line">                              [<span class="built_in">NSNumber</span> numberWithFloat:<span class="number">0</span>]]];</div><div class="line"><span class="comment">//缩放帧动画</span></div><div class="line"><span class="built_in">CABasicAnimation</span> *scaleAnimation = [<span class="built_in">CABasicAnimation</span> animation];</div><div class="line">scaleAnimation.keyPath = <span class="string">@"transform.scale"</span>;</div><div class="line">scaleAnimation.fromValue = @(<span class="number">1.0</span>f);</div><div class="line">scaleAnimation.toValue = @(<span class="number">2.0</span>f);</div></pre></td></tr></table></figure>
<p>最后添把所有的动画添加到动画组</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">[animationGroup setAnimations:@[pathAnimation, scaleAnimation,  rotationAnimation,opacityAnimation]];</div></pre></td></tr></table></figure>
<blockquote>
<p>注意一下: 为了让音符的图片更生动我们需要把<code>layer.opacity = 0.0f;</code> 这个音符透明 从而用透明度帧动画控制透明.</p>
</blockquote>
<p>然后封装好方法 把上边我们做的贝塞尔曲线 透明 渐变 缩放 动画组都放在这个方法里面</p>
<p>完整代码如下</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)addNotoAnimation:(<span class="built_in">NSString</span> *)imageName</div><div class="line">               delayTime:(<span class="built_in">NSTimeInterval</span>)delayTime</div><div class="line">                    rate:(<span class="built_in">CGFloat</span>)rate&#123;</div><div class="line">    <span class="built_in">CAAnimationGroup</span> *animationGroup = [[<span class="built_in">CAAnimationGroup</span> alloc]init];</div><div class="line">    animationGroup.duration = rate/<span class="number">4.0</span>f;</div><div class="line">    animationGroup.beginTime = <span class="built_in">CACurrentMediaTime</span>() + delayTime;</div><div class="line">    animationGroup.repeatCount = MAXFLOAT;</div><div class="line">    animationGroup.removedOnCompletion = <span class="literal">NO</span>;</div><div class="line">    animationGroup.fillMode = kCAFillModeForwards;</div><div class="line">    animationGroup.timingFunction = [<span class="built_in">CAMediaTimingFunction</span> functionWithName:kCAMediaTimingFunctionLinear];</div><div class="line">    </div><div class="line">    <span class="comment">//bezier路径帧动画</span></div><div class="line">    <span class="built_in">CAKeyframeAnimation</span> * pathAnimation = [<span class="built_in">CAKeyframeAnimation</span> animationWithKeyPath:<span class="string">@"position"</span>];</div><div class="line">    </div><div class="line">    <span class="comment">//X轴左右侧偏移量</span></div><div class="line">    <span class="built_in">CGFloat</span> sideXLength = <span class="number">40.0</span>f;</div><div class="line">    <span class="comment">//Y轴上下偏移量</span></div><div class="line">    <span class="built_in">CGFloat</span> sideYLength = <span class="number">100.0</span>f;</div><div class="line">    </div><div class="line">    <span class="comment">//贝赛尔曲线开始点</span></div><div class="line">    <span class="built_in">CGPoint</span> beginPoint = <span class="built_in">CGPointMake</span>(<span class="built_in">CGRectGetMidX</span>(<span class="keyword">self</span>.bounds) - <span class="number">5</span>, <span class="built_in">CGRectGetMaxY</span>(<span class="keyword">self</span>.bounds));</div><div class="line">    <span class="comment">//贝塞尔曲线结束点</span></div><div class="line">    <span class="built_in">CGPoint</span> endPoint = <span class="built_in">CGPointMake</span>(beginPoint.x - sideXLength, beginPoint.y - sideYLength);</div><div class="line">    <span class="comment">//贝塞尔曲线控制点长度</span></div><div class="line">    <span class="built_in">NSInteger</span> controlLength = <span class="number">60</span>;</div><div class="line">    <span class="comment">//贝塞尔曲线控制点</span></div><div class="line">    <span class="built_in">CGPoint</span> controlPoint = <span class="built_in">CGPointMake</span>(beginPoint.x - sideXLength/<span class="number">2.0</span>f - controlLength, beginPoint.y - sideYLength/<span class="number">2.0</span>f + controlLength);</div><div class="line">    <span class="comment">//创建贝塞尔轨迹</span></div><div class="line">    <span class="built_in">UIBezierPath</span> *customPath = [<span class="built_in">UIBezierPath</span> bezierPath];</div><div class="line">    [customPath moveToPoint:beginPoint];</div><div class="line">    <span class="comment">//核心代码 二次曲线方程式 可以google查一下</span></div><div class="line">    [customPath addQuadCurveToPoint:endPoint controlPoint:controlPoint];</div><div class="line">    <span class="comment">//让动画沿着轨迹运动</span></div><div class="line">    pathAnimation.path = customPath.CGPath;</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="comment">//旋转帧动画</span></div><div class="line">    <span class="built_in">CAKeyframeAnimation</span> * rotationAnimation = [<span class="built_in">CAKeyframeAnimation</span> animationWithKeyPath:<span class="string">@"transform.rotation"</span>];</div><div class="line">    <span class="comment">//这里实际上是控制动画开始弧度和结束弧度 M_PI(180°) 就是半圆 * 0.10 或者 * -0.10j是为了关键点上下偏移的18°的间隙</span></div><div class="line">    [rotationAnimation setValues:@[</div><div class="line">                                   [<span class="built_in">NSNumber</span> numberWithFloat:<span class="number">0</span>],</div><div class="line">                                   [<span class="built_in">NSNumber</span> numberWithFloat:M_PI * <span class="number">0.10</span>],</div><div class="line">                                   [<span class="built_in">NSNumber</span> numberWithFloat:M_PI * <span class="number">-0.10</span>]]];</div><div class="line">    <span class="comment">//透明度帧动画</span></div><div class="line">    <span class="built_in">CAKeyframeAnimation</span> * opacityAnimation = [<span class="built_in">CAKeyframeAnimation</span> animationWithKeyPath:<span class="string">@"opacity"</span>];</div><div class="line">    [opacityAnimation setValues:@[</div><div class="line">                                  [<span class="built_in">NSNumber</span> numberWithFloat:<span class="number">0</span>],</div><div class="line">                                  [<span class="built_in">NSNumber</span> numberWithFloat:<span class="number">0.2</span>f],</div><div class="line">                                  [<span class="built_in">NSNumber</span> numberWithFloat:<span class="number">0.7</span>f],</div><div class="line">                                  [<span class="built_in">NSNumber</span> numberWithFloat:<span class="number">0.2</span>f],</div><div class="line">                                  [<span class="built_in">NSNumber</span> numberWithFloat:<span class="number">0</span>]]];</div><div class="line">    <span class="comment">//缩放帧动画</span></div><div class="line">    <span class="built_in">CABasicAnimation</span> *scaleAnimation = [<span class="built_in">CABasicAnimation</span> animation];</div><div class="line">    scaleAnimation.keyPath = <span class="string">@"transform.scale"</span>;</div><div class="line">    scaleAnimation.fromValue = @(<span class="number">1.0</span>f);</div><div class="line">    scaleAnimation.toValue = @(<span class="number">2.0</span>f);</div><div class="line">    </div><div class="line">    [animationGroup setAnimations:@[pathAnimation, scaleAnimation,  rotationAnimation,opacityAnimation]];</div><div class="line">    </div><div class="line">    <span class="built_in">CAShapeLayer</span> *layer = [<span class="built_in">CAShapeLayer</span> layer];</div><div class="line">    layer.opacity = <span class="number">0.0</span>f;</div><div class="line">    layer.contents = (__bridge <span class="keyword">id</span> _Nullable)([<span class="built_in">UIImage</span> imageNamed:imageName].CGImage);</div><div class="line">    layer.frame = <span class="built_in">CGRectMake</span>(beginPoint.x, beginPoint.y, <span class="number">10</span>, <span class="number">10</span>);</div><div class="line">    [<span class="keyword">self</span>.layer addSublayer:layer];</div><div class="line">    [<span class="keyword">self</span>.noteLayers addObject:layer];</div><div class="line">    [layer addAnimation:animationGroup forKey:<span class="literal">nil</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在我们对外提供的startAnimation:方法中调用</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)startAnimation:(<span class="built_in">CGFloat</span>)rate &#123;</div><div class="line">    rate = fabs(rate);  <span class="comment">//check 防止 rate输入为负值</span></div><div class="line">    [<span class="keyword">self</span> resetView];   <span class="comment">//首先重置动画</span></div><div class="line">   	<span class="comment">//这里调用</span></div><div class="line">	[<span class="keyword">self</span> addNotoAnimation:<span class="string">@"icon_home_musicnote1"</span> delayTime:<span class="number">0.0</span>f rate:rate];</div><div class="line">	<span class="comment">//。。。封面的旋转动画    </span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>写到这里大概就完成了一个音符的动画 如果像做多个音符动画 就多调用几次 然后控制好开始时间的延时</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">[<span class="keyword">self</span> addNotoAnimation:<span class="string">@"icon_home_musicnote1"</span> delayTime:<span class="number">0.0</span>f rate:rate];</div><div class="line">[<span class="keyword">self</span> addNotoAnimation:<span class="string">@"icon_home_musicnote2"</span> delayTime:<span class="number">1.0</span>f rate:rate];</div><div class="line">[<span class="keyword">self</span> addNotoAnimation:<span class="string">@"icon_home_musicnote1"</span> delayTime:<span class="number">2.0</span>f rate:rate];</div></pre></td></tr></table></figure>
<p><strong>写到这里可以看到我们实际上是 通过delayTime 延时(单位秒) 开控制 每个音符 距离上个音符的间隔时间,通过间隔时间来控制音符之间 交替 出现</strong>.</p>
<p>所以上面的动画组里面有这样一行代码</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">animationGroup.beginTime = <span class="built_in">CACurrentMediaTime</span>() + delayTime;</div></pre></td></tr></table></figure>
<p>就是基于当前的时间延迟1秒或者2秒来控制</p>
<p>完成之后 就是这样了</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/a26ecc741c10edcf564f1f3295b7afb6ebe018fc/20181108AwemeAlbumAnimation/final.gif"></p>
<h1 id="总结">总结</h1>
<p>首先感谢开源的小伙伴 的代码,我认真研读了几遍也写了一些代码,有些东西真是 天下大事必做于细 天下难事必做于易的感受.</p>
<p>这里的代码实现主要分开 专辑图旋转和音符动画组的实现即可</p>
<p>希望和大家分享 技术技巧.写的比较凌乱 我会逐渐提高这方面的能力.希望大家多多指教</p>
<p><a href="https://github.com/sunyazhou13/MusicAlbumViewDemo" target="_blank" rel="external">最终的demo</a></p>
<p>参考</p>
<p><a href="https://github.com/sunyazhou13/douyin-ios-objectc" target="_blank" rel="external">iOS高仿抖音app</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;
&lt;p&gt;前两天分享了 抖音 上下滑切换 ,今天给和大家分享的是抖音右小角底部的专辑动画&lt;/p&gt;
&lt;p&gt;上图看下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sunyazhou13/su
    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="抖音动画系列" scheme="https://www.sunyazhou.com/tags/%E6%8A%96%E9%9F%B3%E5%8A%A8%E7%94%BB%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>iOS抖音的上下滑实现</title>
    <link href="https://www.sunyazhou.com/2018/11/06/20181106AwemeTopBottomScrollDemo/"/>
    <id>https://www.sunyazhou.com/2018/11/06/20181106AwemeTopBottomScrollDemo/</id>
    <published>2018-11-06T09:55:09.000Z</published>
    <updated>2018-12-18T16:05:06.391Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言">前言</h1>
<p>一直一来都在 研究抖音App做的短视频 上下滑动 的技术实现, 今天写了个demo,方便学习技术技巧和记录知识,</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/d2b991b6d10e643c8e4c619cc913bbbaea19a534/20181106AwemeTopBottomScrollDemo/AwemeDemo1.gif"></p>
<h1 id="技术实现原理">技术实现原理</h1>
<ul>
<li>UITableView</li>
</ul>
<p>其实就是一个UITableView改变上下显示范围. talk is cheap show me the code</p>
<p>我说话不绕弯子,代码如下 实现起来非常简单</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"></div><div class="line">_tableView = [[<span class="built_in">UITableView</span> alloc] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">0</span>, -SCREEN_HEIGHT, SCREEN_WIDTH, SCREEN_HEIGHT * <span class="number">5</span>)];</div><div class="line">_tableView.contentInset = <span class="built_in">UIEdgeInsetsMake</span>(SCREEN_HEIGHT, <span class="number">0</span>, SCREEN_HEIGHT * <span class="number">3</span>, <span class="number">0</span>);</div></pre></td></tr></table></figure>
<ol type="1">
<li>初始化的时候,TableView放在屏幕外边.</li>
<li>contentInset 显示内容的内边距, 以此是 <code>上</code>, <code>左</code>, <code>下</code>, <code>右</code>, 上边距 距离整好屏幕高度,底部 是 顶部边距(屏幕高度的 3倍) 方便滑动, 左右分别顶到两边 搞定.</li>
</ol>
<p>我画个图演示一下.</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/748bbcbbc7ef5e60d1b6844ab26b73d7debc06ca/20181106AwemeTopBottomScrollDemo/AwemeDemo2.png"></p>
<p>看到这张图 大家也许 已经明白了，最核心的地方是控制 TableView的上下边距,上边距留够一个屏幕高度,下边距留够下滑3屏左右的缓冲.</p>
<h1 id="说一下用到的技巧">说一下用到的技巧</h1>
<p>创建tableView很简单 如果理解不了 可以下载文章末尾demo</p>
<p>有个小技巧是 如何做到 上下滑动 能够完整的 滑动到对应位置 整好 占满屏幕类似 开启了UIScrollView的 <code>pagingEnabled</code>.</p>
<h2 id="实现滑动的代理方法">实现滑动的代理方法</h2>
<p>首先需要声明一个当前滑动页码的成员变量</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">NSInteger</span>  currentIndex;</div></pre></td></tr></table></figure>
<p>然后滑动代理停止的时候 判断一下</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="meta">#pragma mark -</span></div><div class="line"><span class="meta">#pragma mark - ScrollView delegate</span></div><div class="line">- (<span class="keyword">void</span>)scrollViewDidEndDragging:(<span class="built_in">UIScrollView</span> *)scrollView willDecelerate:(<span class="built_in">BOOL</span>)decelerate&#123;</div><div class="line">    <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class="line">        <span class="built_in">CGPoint</span> translatedPoint = [scrollView.panGestureRecognizer translationInView:scrollView];</div><div class="line">        <span class="comment">//UITableView禁止响应其他滑动手势</span></div><div class="line">        scrollView.panGestureRecognizer.enabled = <span class="literal">NO</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(translatedPoint.y &lt; <span class="number">-50</span> &amp;&amp; <span class="keyword">self</span>.currentIndex &lt; (kDataSourceCount - <span class="number">1</span>)) &#123;</div><div class="line">            <span class="keyword">self</span>.currentIndex ++;   <span class="comment">//向下滑动索引递增</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(translatedPoint.y &gt; <span class="number">50</span> &amp;&amp; <span class="keyword">self</span>.currentIndex &gt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">self</span>.currentIndex --;   <span class="comment">//向上滑动索引递减</span></div><div class="line">        &#125;</div><div class="line">        [<span class="built_in">UIView</span> animateWithDuration:<span class="number">0.15</span></div><div class="line">                              delay:<span class="number">0.0</span></div><div class="line">                            options:<span class="built_in">UIViewAnimationOptionCurveEaseOut</span> animations:^&#123;</div><div class="line">                                <span class="comment">//UITableView滑动到指定cell</span></div><div class="line">                                [<span class="keyword">self</span>.tableView scrollToRowAtIndexPath:[<span class="built_in">NSIndexPath</span> indexPathForRow:<span class="keyword">self</span>.currentIndex inSection:<span class="number">0</span>] atScrollPosition:<span class="built_in">UITableViewScrollPositionTop</span> animated:<span class="literal">NO</span>];</div><div class="line">                            &#125; completion:^(<span class="built_in">BOOL</span> finished) &#123;</div><div class="line">                                <span class="comment">//UITableView可以响应其他滑动手势</span></div><div class="line">                                scrollView.panGestureRecognizer.enabled = <span class="literal">YES</span>;</div><div class="line">                            &#125;];</div><div class="line">        </div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>这里的 <code>50</code> 实际上是你能允许滑动的最大触发区间.可以自己下载demo玩一下就知道了.</p>
</blockquote>
<p>基于滑动区间 做 加减 当前页码控制.然后 做个简单的UIView动画.</p>
<blockquote>
<p>注意: 开始动画的时候最好不要相应pan手势,结束动画的时候再恢复回去,这样可以避免一些不必要的收拾滑动引起的问题.</p>
</blockquote>
<h3 id="为什么要滑动页码self.currentindex">为什么要滑动页码<code>self.currentIndex</code></h3>
<p>因为我们要用KVO 来实现 页面变动驱动滑动的动画</p>
<p>在 viewDidLoad:方法中 我们有个setupView:方法中 有下段代码</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">[<span class="keyword">self</span> addObserver:<span class="keyword">self</span> forKeyPath:<span class="string">@"currentIndex"</span> options:<span class="built_in">NSKeyValueObservingOptionInitial</span>|<span class="built_in">NSKeyValueObservingOptionNew</span> context:<span class="literal">nil</span>];</div></pre></td></tr></table></figure>
<p><strong>是的我们要自己监听自己的成员变量去搞些事情</strong>.</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//观察currentIndex变化</span></div><div class="line">-(<span class="keyword">void</span>)observeValueForKeyPath:(<span class="built_in">NSString</span> *)keyPath ofObject:(<span class="keyword">id</span>)object change:(<span class="built_in">NSDictionary</span>&lt;<span class="built_in">NSKeyValueChangeKey</span>,<span class="keyword">id</span>&gt; *)change context:(<span class="keyword">void</span> *)context &#123;</div><div class="line">    <span class="keyword">if</span> ([keyPath isEqualToString:<span class="string">@"currentIndex"</span>]) &#123;</div><div class="line">        <span class="comment">//获取当前显示的cell</span></div><div class="line">        AwemeListCell *cell = [<span class="keyword">self</span>.tableView cellForRowAtIndexPath:[<span class="built_in">NSIndexPath</span> indexPathForRow:_currentIndex inSection:<span class="number">0</span>]];</div><div class="line">        __<span class="keyword">weak</span> <span class="keyword">typeof</span> (cell) wcell = cell;</div><div class="line">        __<span class="keyword">weak</span> <span class="keyword">typeof</span> (<span class="keyword">self</span>) wself = <span class="keyword">self</span>;</div><div class="line">        <span class="comment">//用cell控制相关视频播放</span></div><div class="line">        </div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> [<span class="keyword">super</span> observeValueForKeyPath:keyPath ofObject:object change:change context:context];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>demo中有这段代码 其实是为了以后 cell上方palyerView的时候 控制相应暂停或者停止 或者其他操作的行为. 这里后期我们完善</p>
</blockquote>
<h3 id="点击状态栏滑动到顶部">点击状态栏滑动到顶部</h3>
<p>我们如何监听状态栏的事件?</p>
<p>我们当然可以设置TableView自动滑动到顶部.但是 我们怎么拦截下来这个事件去把我们 相关页码 <strong>置<code>0</code></strong></p>
<p>为什么置0呢?看下 下面这张图</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/ab61f58501e90d17c3dcc2af351eba13694a71ce/20181106AwemeTopBottomScrollDemo/AwemeDemo3_error.gif"></p>
<p>虽然我们能实现 自动滑动TableView到顶部 但是 我们拦截不到顶部状态栏点击的事件,在这个事件调用的地方 把当前页码置<code>0</code>.</p>
<h4 id="监听点击状态栏事件">监听点击状态栏事件</h4>
<p>这里使用的是在AppDelegate 中 复写 touchesBagan:方法</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)touchesBegan:(<span class="built_in">NSSet</span>&lt;<span class="built_in">UITouch</span> *&gt; *)touches withEvent:(<span class="built_in">UIEvent</span> *)event &#123;</div><div class="line">    [<span class="keyword">super</span> touchesBegan:touches withEvent:event];</div><div class="line">    </div><div class="line">    <span class="comment">//当触摸状态栏的时候发送触摸通知 这样控制器就收到了点击事件</span></div><div class="line">    <span class="built_in">CGPoint</span> touchLocation = [[[event allTouches] anyObject] locationInView:<span class="keyword">self</span>.window];</div><div class="line">    <span class="built_in">CGRect</span> statusBarFrame = [<span class="built_in">UIApplication</span> sharedApplication].statusBarFrame;</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">CGRectContainsPoint</span>(statusBarFrame, touchLocation)) &#123;</div><div class="line">        [[<span class="built_in">NSNotificationCenter</span> defaultCenter] postNotificationName:StatusBarTouchBeginNotification object:<span class="literal">nil</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在这里我们判断点击区域是否在状态栏范围内,是的话我们发送通知.</p>
<p>在我们用到TableView的VC里面注册这个通知,然后 置<code>0</code>.</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="meta">#pragma mark -</span></div><div class="line"><span class="meta">#pragma mark - event response 所有触发的事件响应 按钮、通知、分段控件等</span></div><div class="line">- (<span class="keyword">void</span>)statusBarTouchBegin &#123;</div><div class="line">    _currentIndex = <span class="number">0</span>; <span class="comment">//KVO</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里我们置<code>0</code>处理.</p>
<blockquote>
<p>这里处理的方式简单粗暴,你有更好的实现方式可以底部评论,非常感谢.</p>
</blockquote>
<h1 id="总结">总结</h1>
<p>以上是简单实现了抖音的上下滑,demo在下方, 下一期给大家演示更多细节,如果可能的话,最终搞出个视频放cell上 实现整个上下滑控制过程视频暂停 播放 停止等等,因为如果完整的实现抖音,需要很长的代码量,为了让大家一起学习,我把每个细节拆成一小节.单独写成文章讨论和学习.</p>
<p><a href="https://github.com/sunyazhou13/AwemeDemo" target="_blank" rel="external">抖音上下滑Demo</a></p>
<p>参考开源</p>
<p><a href="https://github.com/sshiqiao/douyin-ios-objectc" target="_blank" rel="external">抖音个人主页</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;
&lt;p&gt;一直一来都在 研究抖音App做的短视频 上下滑动 的技术实现, 今天写了个demo,方便学习技术技巧和记录知识,&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sunyazhou
    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="抖音动画系列" scheme="https://www.sunyazhou.com/tags/%E6%8A%96%E9%9F%B3%E5%8A%A8%E7%94%BB%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>iOS数字倍数动画</title>
    <link href="https://www.sunyazhou.com/2018/10/29/20181029LabelDanceAnimation/"/>
    <id>https://www.sunyazhou.com/2018/10/29/20181029LabelDanceAnimation/</id>
    <published>2018-10-29T10:13:15.000Z</published>
    <updated>2018-11-11T06:43:38.687Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言">前言</h1>
<p>写了一个简单的利用 透明度和 缩放 实现的 数字倍数动画</p>
<figure>
<img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/0cca94607f36a130adc04b7882c5750ca7eb1139/20181029LabelDanceAnimation/danceLabel.gif" alt="demo"><figcaption>demo</figcaption>
</figure>
<h1 id="实现思路">实现思路</h1>
<p>上代码 看比较清晰</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 数字跳动动画</span></div><div class="line">- (<span class="keyword">void</span>)labelDanceAnimation:(<span class="built_in">NSTimeInterval</span>)duration &#123;</div><div class="line">    <span class="comment">//透明度</span></div><div class="line">    <span class="built_in">CABasicAnimation</span> *opacityAnimation = [<span class="built_in">CABasicAnimation</span> animationWithKeyPath:<span class="string">@"opacity"</span>];</div><div class="line">    opacityAnimation.duration = <span class="number">0.4</span> * duration;</div><div class="line">    opacityAnimation.fromValue = @<span class="number">0.</span>f;</div><div class="line">    opacityAnimation.toValue = @<span class="number">1.</span>f;</div><div class="line">    </div><div class="line">    <span class="comment">//缩放</span></div><div class="line">    <span class="built_in">CAKeyframeAnimation</span> *scaleAnimation = [<span class="built_in">CAKeyframeAnimation</span> animationWithKeyPath:<span class="string">@"transform.scale"</span>];</div><div class="line">    scaleAnimation.duration = duration;</div><div class="line">    scaleAnimation.values = @[@<span class="number">3.</span>f, @<span class="number">1.</span>f, @<span class="number">1.2</span>f, @<span class="number">1.</span>f];</div><div class="line">    scaleAnimation.keyTimes = @[@<span class="number">0.</span>f, @<span class="number">0.16</span>f, @<span class="number">0.28</span>f, @<span class="number">0.4</span>f];</div><div class="line">    scaleAnimation.removedOnCompletion = <span class="literal">YES</span>;</div><div class="line">    scaleAnimation.fillMode = kCAFillModeForwards;</div><div class="line">    </div><div class="line">    <span class="built_in">CAAnimationGroup</span> *animationGroup = [<span class="built_in">CAAnimationGroup</span> animation];</div><div class="line">    animationGroup.animations = @[opacityAnimation, scaleAnimation];</div><div class="line">    animationGroup.duration = duration;</div><div class="line">    animationGroup.removedOnCompletion = <span class="literal">YES</span>;</div><div class="line">    animationGroup.fillMode = kCAFillModeForwards;</div><div class="line">    </div><div class="line">    [<span class="keyword">self</span>.comboLabel.layer addAnimation:animationGroup forKey:<span class="string">@"kComboAnimationKey"</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>利用一个透明度从 0 ~ 1之间的alpha,然后缩放 之后加到动画组实现一下就好了</p>
<blockquote>
<p>切记动画完成最好移除 否则可能引起动画内存问题</p>
</blockquote>
<p>这里设置斜体字体</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="keyword">self</span>.comboLabel.font = [<span class="built_in">UIFont</span> fontWithName:<span class="string">@"AvenirNext-BoldItalic"</span> size:<span class="number">50</span>];</div></pre></td></tr></table></figure>
<p>看着比较明显</p>
<p>最后按钮点击的时候调用</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">IBAction</span>)clickAction:(<span class="built_in">UIButton</span> *)sender &#123;</div><div class="line">    <span class="keyword">self</span>.danceCount++;</div><div class="line">    [<span class="keyword">self</span> labelDanceAnimation:<span class="number">0.4</span>];</div><div class="line">    <span class="keyword">self</span>.comboLabel.text = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"+  %tu"</span>,<span class="keyword">self</span>.danceCount];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果实现 dozen动画的话很简单, <strong>danceCount % 10 == 0</strong> 求模就行了.</p>
<h1 id="总结">总结</h1>
<p>这个动画比较适合 有些直播场景的点击操作计数相关.感谢观看</p>
<p><a href="https://github.com/sunyazhou13/LiveComboLabel" target="_blank" rel="external">Demo在这里</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;
&lt;p&gt;写了一个简单的利用 透明度和 缩放 实现的 数字倍数动画&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.
    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="macOS开发" scheme="https://www.sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>iOS呼吸动画</title>
    <link href="https://www.sunyazhou.com/2018/09/29/20180929BreathAnimation/"/>
    <id>https://www.sunyazhou.com/2018/09/29/20180929BreathAnimation/</id>
    <published>2018-09-29T02:09:30.000Z</published>
    <updated>2018-11-11T06:43:38.687Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言">前言</h1>
<p>快放假了, 怕十一文章更新不及时,早点完成文章,保证每个月 2篇的产出量, 今天给大家带来的是 呼吸动画, 做的不是特别好.</p>
<p>上图</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/43eb3d3df2ddda60a3ec26ba376755425ac88f7f/20180929BreathAnimation/breathAnimation.gif"></p>
<p>大概是这个样子</p>
<h1 id="需求和实现思路">需求和实现思路</h1>
<p>具体要求</p>
<ul>
<li>内部头像呼吸放大缩小 无限循环</li>
<li>每次放大同时需要背景还有一张图也放大 并且透明</li>
<li>点击缩放整个背景视图</li>
</ul>
<h2 id="实现思路">实现思路</h2>
<p>首先 需要使用创建一个Layer 装第一个无限放大缩小的呼吸的图<br>
背景也需要一个Layer 做 放大+透明度渐变的动画组并且也放置一张需要放大渐变的图片</p>
<p>最后点击触发. 添加一个一次性的缩放动画即可</p>
<h3 id="呼吸动画layer和动画">呼吸动画layer和动画</h3>
<p>呼吸layer</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="built_in">CALayer</span> *layer = [<span class="built_in">CALayer</span> layer];</div><div class="line">layer.position = <span class="built_in">CGPointMake</span>(kHeartSizeWidth/<span class="number">2.0</span>f, kHeartSizeHeight/<span class="number">2.0</span>f);</div><div class="line">layer.bounds = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, kHeartSizeWidth/<span class="number">2.0</span>f, kHeartSizeHeight/<span class="number">2.0</span>f);</div><div class="line">layer.backgroundColor = [<span class="built_in">UIColor</span> clearColor].CGColor;</div><div class="line">layer.contents = (__bridge <span class="keyword">id</span> _Nullable)([<span class="built_in">UIImage</span> imageNamed:<span class="string">@"breathImage"</span>].CGImage);</div><div class="line">layer.contentsGravity = kCAGravityResizeAspect;</div><div class="line">[<span class="keyword">self</span>.heartView.layer addSublayer:layer];</div></pre></td></tr></table></figure>
<blockquote>
<p>kHeartSizeHeight 和kHeartSizeWidth 是常量 demo中写好了100</p>
</blockquote>
<p>加帧动画</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="built_in">CAKeyframeAnimation</span> *animation = [<span class="built_in">CAKeyframeAnimation</span> animationWithKeyPath:<span class="string">@"transform.scale"</span>];</div><div class="line">animation.values = @[@<span class="number">1.</span>f, @<span class="number">1.4</span>f, @<span class="number">1.</span>f];</div><div class="line">animation.keyTimes = @[@<span class="number">0.</span>f, @<span class="number">0.5</span>f, @<span class="number">1.</span>f];</div><div class="line">animation.duration = <span class="number">1</span>; <span class="comment">//1000ms</span></div><div class="line">animation.repeatCount = FLT_MAX;</div><div class="line">animation.timingFunction = [<span class="built_in">CAMediaTimingFunction</span> functionWithName:kCAMediaTimingFunctionEaseInEaseOut];</div><div class="line">[animation setValue:kBreathAnimationKey forKey:kBreathAnimationName];</div><div class="line">[layer addAnimation:animation forKey:kBreathAnimationKey];</div></pre></td></tr></table></figure>
<blockquote>
<p>差值器也可以自定义 例如:</p>
</blockquote>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"></div><div class="line">[<span class="built_in">CAMediaTimingFunction</span> functionWithControlPoints:<span class="number">0.33</span> :<span class="number">0</span> :<span class="number">0.67</span> :<span class="number">1</span>]</div></pre></td></tr></table></figure>
<p>这里我做的持续时常1秒</p>
<h3 id="放大渐变动画group">放大渐变动画group</h3>
<p>创建新layer</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="built_in">CALayer</span> *breathLayer = [<span class="built_in">CALayer</span> layer];</div><div class="line">breathLayer.position = layer.position;</div><div class="line">breathLayer.bounds = layer.bounds;</div><div class="line">breathLayer.backgroundColor = [<span class="built_in">UIColor</span> clearColor].CGColor;</div><div class="line">breathLayer.contents = (__bridge <span class="keyword">id</span> _Nullable)([<span class="built_in">UIImage</span> imageNamed:<span class="string">@"breathImage"</span>].CGImage);</div><div class="line">breathLayer.contentsGravity = kCAGravityResizeAspect;</div><div class="line">[<span class="keyword">self</span>.heartView.layer insertSublayer:breathLayer below:layer];</div><div class="line"><span class="comment">//[self.heartView.layer addSublayer:breathLayer];</span></div></pre></td></tr></table></figure>
<blockquote>
<p>这里用的是放在 呼吸layer后边 如果想放在呼吸layer前边 就把里面注释打开 然后注掉 inert那行代码</p>
</blockquote>
<p>动画组 包含 放大 渐变</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//缩放</span></div><div class="line"><span class="built_in">CAKeyframeAnimation</span> *scaleAnimation = [<span class="built_in">CAKeyframeAnimation</span> animationWithKeyPath:<span class="string">@"transform.scale"</span>];</div><div class="line">scaleAnimation.values = @[@<span class="number">1.</span>f, @<span class="number">2.4</span>f];</div><div class="line">scaleAnimation.keyTimes = @[@<span class="number">0.</span>f,@<span class="number">1.</span>f];</div><div class="line">scaleAnimation.duration = animation.duration;</div><div class="line">scaleAnimation.repeatCount = FLT_MAX;</div><div class="line">scaleAnimation.timingFunction = [<span class="built_in">CAMediaTimingFunction</span> functionWithName:kCAMediaTimingFunctionEaseIn];</div><div class="line"><span class="comment">//透明度</span></div><div class="line"><span class="built_in">CAKeyframeAnimation</span> *opacityAnimation = [<span class="built_in">CAKeyframeAnimation</span> animation];</div><div class="line">opacityAnimation.keyPath = <span class="string">@"opacity"</span>;</div><div class="line">opacityAnimation.values = @[@<span class="number">1.</span>f, @<span class="number">0.</span>f];</div><div class="line">opacityAnimation.duration = <span class="number">0.4</span>f;</div><div class="line">opacityAnimation.keyTimes = @[@<span class="number">0.</span>f, @<span class="number">1.</span>f];</div><div class="line">opacityAnimation.repeatCount = FLT_MAX;</div><div class="line">opacityAnimation.duration = animation.duration;</div><div class="line">opacityAnimation.timingFunction = [<span class="built_in">CAMediaTimingFunction</span> functionWithName:kCAMediaTimingFunctionEaseIn];</div><div class="line"></div><div class="line"><span class="comment">//动画组</span></div><div class="line"><span class="built_in">CAAnimationGroup</span> *scaleOpacityGroup = [<span class="built_in">CAAnimationGroup</span> animation];</div><div class="line">scaleOpacityGroup.animations = @[scaleAnimation, opacityAnimation];</div><div class="line">scaleOpacityGroup.removedOnCompletion = <span class="literal">NO</span>;</div><div class="line">scaleOpacityGroup.fillMode = kCAFillModeForwards;</div><div class="line">scaleOpacityGroup.duration = animation.duration;</div><div class="line">scaleOpacityGroup.repeatCount = FLT_MAX;</div><div class="line">[breathLayer addAnimation:scaleOpacityGroup forKey:kBreathScaleName];</div></pre></td></tr></table></figure>
<h3 id="点击缩放动画">点击缩放动画</h3>
<p>跟第一个一样 只不过 执行次数默认一次 执行完就可以了</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)shakeAnimation &#123;</div><div class="line">    <span class="built_in">CAKeyframeAnimation</span> *animation = [<span class="built_in">CAKeyframeAnimation</span> animationWithKeyPath:<span class="string">@"transform.scale"</span>];</div><div class="line">    animation.values = @[@<span class="number">1.0</span>f, @<span class="number">0.8</span>f, @<span class="number">1.</span>f];</div><div class="line">    animation.keyTimes = @[@<span class="number">0.</span>f,@<span class="number">0.5</span>f, @<span class="number">1.</span>f];</div><div class="line">    animation.duration = <span class="number">0.35</span>f;</div><div class="line">    animation.timingFunctions = @[[<span class="built_in">CAMediaTimingFunction</span> functionWithName:kCAMediaTimingFunctionEaseInEaseOut],[<span class="built_in">CAMediaTimingFunction</span> functionWithName:kCAMediaTimingFunctionEaseInEaseOut]];</div><div class="line">    [<span class="keyword">self</span>.heartView.layer addAnimation:animation forKey:<span class="string">@""</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>手势触发的时候 调用一下</p>
<h3 id="遇到的问题">遇到的问题</h3>
<p>在开发动画的时候遇到 都一个动画 要执行 呼吸</p>
<p>呼吸如果duration 到中间的话 比如1秒 那么0.5秒的时候 它就需要折回</p>
<p>那么第二个动画刚刚执行到一半,就会感觉很奇怪</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/ba57cc09ea58317c4cef38da51c1824ddc977f39/20180929BreathAnimation/aniamation.jpeg"></p>
<p>如果__渐变动画__执行0.5秒的话 它是重复的 那么他就重新开始 相当于 呼吸折回的时候它又重新开开始渐变</p>
<h4 id="怎么解决呢">怎么解决呢？</h4>
<p>我们把0.5秒的动画加到 动画组里面,然后给动画组设置的时长保持和呼吸动画 一样,这样剩余的0.5的时候 渐变动画是不会重新开始的.</p>
<h1 id="总结">总结</h1>
<p>动画很久没玩了 基本都忘了一干二净了,以后要勤加练习,多出文章和demo,记录一些更多的知识技巧.</p>
<p>博客像车一样,要是不是的时候经常保养,才能走更远的路,记录更多的美好.</p>
<p>全文完</p>
<p><a href="https://github.com/sunyazhou13/BreathAnimation" target="_blank" rel="external">Demo在这里下载</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;
&lt;p&gt;快放假了, 怕十一文章更新不及时,早点完成文章,保证每个月 2篇的产出量, 今天给大家带来的是 呼吸动画, 做的不是特别好.&lt;/p&gt;
&lt;p&gt;上图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubuserconte
    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="macOS开发" scheme="https://www.sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
</feed>
