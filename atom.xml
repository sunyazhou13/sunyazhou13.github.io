<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>東引甌越</title>
  <subtitle>不断学习, 与时俱进.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.sunyazhou.com/"/>
  <updated>2017-05-30T14:32:19.000Z</updated>
  <id>https://www.sunyazhou.com/</id>
  
  <author>
    <name>sunyazhou</name>
    <email>sunyazhou13@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>OpenGL编程语言-glsl基础</title>
    <link href="https://www.sunyazhou.com/2017/05/30/OpenGL-glsl-language/"/>
    <id>https://www.sunyazhou.com/2017/05/30/OpenGL-glsl-language/</id>
    <published>2017-05-30T12:32:33.000Z</published>
    <updated>2017-05-30T14:32:19.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/OpenGL-glsl-language/opengl-vbo-shader-glsl-vao-gpu.jpg" alt=""></p>
<p>最近在研究OpenGL 被各种陌生的名词虐成狗,所以记录下来一些学习知识点供学习和参考.</p>
<h2 id="GLSL是什么"><a href="#GLSL是什么" class="headerlink" title="GLSL是什么?"></a>GLSL是什么?</h2><p>GLSL(OpenGL Shading Language) 是OpenGL的着色器语言,纯粹的和GPU打交道的计算机语言.可以理解为C的变种专门针对OpenGL编程,不支持指针等等一些C的特性等. (名词解释:着色器(Shader))  </p>
<p><strong>GPU是多线程并行处理器</strong>，GLSL直接面向<a href="https://zh.wikipedia.org/wiki/%E5%8D%95%E6%8C%87%E4%BB%A4%E6%B5%81%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%B5%81" target="_blank" rel="external">单指令流多数据流(SIMD)</a>模型的多线程计算。<br>GLSL编写的着色器函数是对每个数据同时执行的。<br>每个顶点都会由顶点着色器中的算法处理，每个像素也都会由 <strong>片段着色器(也有叫片元着色器)</strong>中的算法处理。<br>初学者在编写自己的着色器时，需要考虑到SIMD的并发特性，并用并行计算的思路来思考问题 这就是GLSL.</p>
<p>我们最常见的用法是在 <strong>顶点着色器</strong>里生成所需要的值，然后传给 <strong>片断着色器</strong>用.</p>
<h2 id="GLSL能做什么"><a href="#GLSL能做什么" class="headerlink" title="GLSL能做什么"></a>GLSL能做什么</h2><ul>
<li>日以逼真的材质 – 金属，岩石，木头，油漆等</li>
<li>日益逼真的光照效果 – 区域光和软阴影</li>
<li>非现实材质 – 美术效果，钢笔画，水墨画和对插画技术的模拟</li>
<li>针对纹理内存的新用途</li>
<li>更少的纹理访问 </li>
<li>图形处理 – 选择，边缘钝化遮蔽和复杂混合</li>
<li>动画效果 – 关键帧插值，粒子系统</li>
<li>用户可编程的反走样方法</li>
</ul>
<h2 id="GLSL注意"><a href="#GLSL注意" class="headerlink" title="GLSL注意"></a>GLSL注意</h2><ul>
<li><strong>GLSL支持函数重载</strong>(就是父类定义方法,子类复写该方法叫重载)</li>
<li><strong>GLSL不存在数据类型的自动提升(就是不支持类型自动向上转换 eg:float 转 double)，类型必须严格保持一致.</strong></li>
<li><strong>GLSL不支持指针，字符串，字符，它基本上是一种处理数字数据的语言</strong></li>
<li><strong>GLSL不支持联合(union)、枚举类型(enum)、结构体(stuct)位字段(&gt;&gt; or &lt;&lt; 左右移)及按位运算符(| or &amp;这种按位与)</strong>(就是干掉麻烦的C操作 让这个更单纯的处理图形数据使用)</li>
</ul>
<h2 id="GLSL的数据类型"><a href="#GLSL的数据类型" class="headerlink" title="GLSL的数据类型"></a>GLSL的数据类型</h2><p>GLSL有三种基本数据类型: </p>
<ul>
<li>float</li>
<li>int</li>
<li>double</li>
<li>由float、int、double组成的array[]或者结构体  </li>
</ul>
<figure class="highlight glsl"><table><tr><td class="code"><pre><div class="line"><span class="number">42</span>   <span class="comment">// 十进制  </span></div><div class="line"><span class="number">042</span>  <span class="comment">// 八进制  </span></div><div class="line"><span class="number">0x2A</span> <span class="comment">// 十六进制</span></div></pre></td></tr></table></figure>
<p><strong><strong>注意:GLSL不支持指针,GLSL把向量和矩阵作为基本数据类型</strong></strong><br><a href="http://baike.baidu.com/link?url=XKZL51jLByIFnqrj3vaZ-4cnL-AedjBKiVBcD7pEGQG26Jmb9RYl7QOrX4Mwck-mT0nNlzD8UtzXi4ueVYNGkdO1b2uARr59UAih7ulWRvO" target="_blank" rel="external">向量(vector)</a>:有起始位置有方向的线段,也称作 <strong>矢量</strong>(不要被这些名词吓到,我记得这个向量是我高二的时候数学学的东西).</p>
<h2 id="矢量"><a href="#矢量" class="headerlink" title="矢量"></a>矢量</h2><p>矢量可以和标量甚至矩阵做加减乘除(必须遵守一定规则才可以 否则报错)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">vec2,  vec3,  vec4  //包含2/3/4个浮点数的矢量(浮点型)</div><div class="line">ivec2, ivec3, ivec4 //包含2/3/4个整数的矢量(整形数 前边带i 代表integer)</div><div class="line">bvec2, bvec3, bvec4 //包含2/3/4个布尔值的矢量(bool不用解释)</div></pre></td></tr></table></figure>
<p>上边这些是一种GLSL的数据类型, 可以简单理解为 <code>vec+数字</code> 就代表 是一个数组里面放几个元素(应该都是 vec2~vec4之间,没见过 vec5以上和vec2以下,好像这就代表几维坐标系),默认元素是float浮点类型,前边带<code>i</code>代表<code>integer</code>整形,<code>b</code>代表<code>bool</code>.</p>
<h3 id="vec如何声明使用？"><a href="#vec如何声明使用？" class="headerlink" title="vec如何声明使用？"></a>vec如何声明使用？</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">vec3 v; 	 //声明三维浮点型向量v</div><div class="line">v[1] = 3.0;  //给向量v的第二个元素赋值(数组从0开始,下标为1就是第二个元素)</div><div class="line"></div><div class="line">//下面两种等价</div><div class="line">vec3 v = vec3(0.6); //数组是连续的存储空间 相当于其它元素默认被这个0.6值填充</div><div class="line">vec3 v = vec3(0.6,0.6,0.6);</div></pre></td></tr></table></figure>
<blockquote>
<p><em>注意: 除了用索引方式外,还能用选择运算符的方式来使用向量.择运算符是对于向量的各个元素（最多为4个）约定俗成的名称，用一个小写拉丁字母来表示。根据向量表示对象的意义不同，可以使用以下选择运算符:</em>  </p>
</blockquote>
<ul>
<li>表示顶点可以用 (x、y、z、w)  (坐标系)</li>
<li>表示颜色可以用 (r、g、b、a)  (颜色值带透明)</li>
<li>表示纹理坐标用 (s、t、p、q)<br>三种任选一种都一样,作用都是等效的. 也就是说，如果<code>v</code>是一个向量，那么:  </li>
<li><code>v[0]</code></li>
<li><code>v.x</code></li>
<li><code>v.r</code></li>
<li><code>v.s</code><br>都指的是向量v的第一个元素。<br>例如:</li>
</ul>
<figure class="highlight glsl"><table><tr><td class="code"><pre><div class="line"><span class="comment">//用构造函数的方式声明并初始化四维浮点型</span></div><div class="line"><span class="type">vec4</span> v1 = <span class="type">vec4</span>(<span class="number">1.0</span>, <span class="number">2.0</span>, <span class="number">3.0</span>, <span class="number">4.0</span>); </div><div class="line"><span class="type">vec4</span> v2;  </div><div class="line">v2.xy=v1.yz;  <span class="comment">//将v1的第二个和第三个元素复制到v2的第一个和第二个元素</span></div><div class="line">v2.z=<span class="number">2.0</span>;  	  <span class="comment">//给v2的第三个元素赋值  </span></div><div class="line">v2.xy=v1.yx;  <span class="comment">//将v1的头两个元素互换，再复制到v2的头两个元素中</span></div></pre></td></tr></table></figure>
<h2 id="矩阵-matrix"><a href="#矩阵-matrix" class="headerlink" title="矩阵(matrix)"></a>矩阵(matrix)</h2><p>矩阵(matrix)以下类型都以mat开头</p>
<ul>
<li><code>mat2</code> 代表2x2的矩阵</li>
<li><code>mat3</code> 代表3x3的矩阵</li>
<li><code>mat4</code> 代表4x4的矩阵<br><em><strong>注意:矩阵是按列顺序组织的，先列后行</strong></em></li>
</ul>
<p>如下代码:</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><div class="line"><span class="type">mat4</span> m;		 <span class="comment">//声明四维浮点型方阵m  </span></div><div class="line">m[<span class="number">2</span>][<span class="number">3</span>]=<span class="number">2.0</span>; <span class="comment">//给方阵的第三列、第四行元素赋值 </span></div><div class="line"></div><div class="line"><span class="comment">// 下面两种等价，初始化矩阵对角</span></div><div class="line"><span class="type">mat2</span> m = <span class="type">mat2</span>(<span class="number">1.0</span>)</div><div class="line"><span class="type">mat2</span> m = <span class="type">mat2</span>(<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>);</div></pre></td></tr></table></figure>
<h2 id="取样器-Sampler"><a href="#取样器-Sampler" class="headerlink" title="取样器(Sampler)"></a>取样器(Sampler)</h2><p>纹理查找需要制定哪个纹理或者纹理单元将制定查找.</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><div class="line"><span class="type">sampler1D</span>        <span class="comment">// 访问一个一维纹理</span></div><div class="line"><span class="type">sampler2D</span>        <span class="comment">// 访问一个二维纹理           </span></div><div class="line"><span class="type">sampler3D</span>        <span class="comment">// 访问一个三维纹理</span></div><div class="line"><span class="type">samplerCube</span>      <span class="comment">// 访问一个立方贴图纹理</span></div><div class="line"><span class="type">sampler1DShadow</span>  <span class="comment">// 访问一个带对比的一维深度纹理</span></div><div class="line"><span class="type">sampler2DShadow</span>  <span class="comment">// 访问一个带对比的二维深度纹理</span></div></pre></td></tr></table></figure>
<figure class="highlight glsl"><table><tr><td class="code"><pre><div class="line"><span class="keyword">uniform</span> <span class="type">sampler2D</span> grass;</div><div class="line"></div><div class="line">vcc2 coord = <span class="type">vec2</span>(<span class="number">100</span>, <span class="number">100</span>);</div><div class="line"><span class="type">vec4</span> color = <span class="built_in">texture2D</span>(grass, coord);</div></pre></td></tr></table></figure>
<p>如果一个着色器在程序里结合多个文理, 可以使用取样器数组.</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="type">int</span> tex_nums = <span class="number">4</span>;</div><div class="line"><span class="keyword">uniform</span> <span class="type">sampler2D</span> textures[tex_nums];</div><div class="line"></div><div class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; tex_nums; ++i) &#123;</div><div class="line">    <span class="type">sampler2D</span> tex = textures[i];</div><div class="line">    <span class="comment">// todo ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><p>这是唯一的用户能用的自定义类型  </p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><div class="line">struct light  </div><div class="line">&#123;  </div><div class="line">    <span class="type">vec3</span> position;  </div><div class="line">    <span class="type">vec3</span> color;  </div><div class="line">&#125;;  </div><div class="line"></div><div class="line">light ceiling_light;</div></pre></td></tr></table></figure>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>数组索引是从0开始的，而且没有指针概念</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 创建一个10个元素的数组  </span></div><div class="line"><span class="type">vec4</span> <span class="keyword">points</span>[<span class="number">10</span>];  </div><div class="line"></div><div class="line"><span class="comment">// 创建一个不指定大小的数组</span></div><div class="line"><span class="type">vec4</span> <span class="keyword">points</span>[]; </div><div class="line"><span class="keyword">points</span>[<span class="number">2</span>] = <span class="type">vec4</span>(<span class="number">1.0</span>);  <span class="comment">// points现在大小为3</span></div><div class="line"><span class="keyword">points</span>[<span class="number">7</span>] = <span class="type">vec4</span>(<span class="number">2.0</span>);  <span class="comment">// points现在大小为8</span></div></pre></td></tr></table></figure>
<h2 id="void"><a href="#void" class="headerlink" title="void"></a>void</h2><p>只能用于声明函数返回值</p>
<h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p>必须明确地进行类型转换，不会自动类型提升</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><div class="line"><span class="type">float</span> f = <span class="number">2.3</span>; </div><div class="line"><span class="type">bool</span> b = <span class="type">bool</span>(f); <span class="comment">// b is true</span></div></pre></td></tr></table></figure>
<h2 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h2><p><strong>GLSL中有4个限定符（variable qualifiers）可供使用，它们限定了被标记的变量不能被更改的”范围”.</strong></p>
<ul>
<li><code>const</code></li>
<li><code>attribute</code></li>
<li><code>uniform</code></li>
<li><code>varying</code>  </li>
</ul>
<p><code>const</code>: 和C++里差不多，定义不可变常量<br>表示限定的变量在编译时不可被修改.</p>
<p><code>attribute</code>:是应用程序传给顶点着色器用的<br>不允许声明时初始化  </p>
<p><code>attribute</code>限定符标记的是一种全局变量,该变量在顶点着色器中是只读（read-only）的，该变量被用作从OpenGL应用程序向顶点着色器中传递参数，因此该限定符仅能用于顶点着色器.  </p>
<p><code>uniform</code>:一般是应用程序用于设定顶点着色器和片断着色器相关初始化值.不允许声明时初始化.<code>uniform</code>限定符标记的是一种全局变量,该变量对于一个图元（<code>primitive</code>）来说是不可更改的 它可以从<code>OpenGL</code>应用程序中接收传递来的参数  </p>
<p><code>varying</code>:用于传递顶点着色器的值给片断着色器.它提供了从顶点着色器向片段着色器传递数据的方法，varying限定符可以在顶点着色器中定义变量，然后再传递给光栅化器，光栅化器对数据插值后，再将每个片段的值交给片段着色器.</p>
<p><em><strong>注意:以上这几种限定符很重要</strong></em></p>
<h2 id="限制性"><a href="#限制性" class="headerlink" title="限制性"></a>限制性</h2><ul>
<li>不能在if-else中声明变量</li>
<li>用于判断的条件必须是bool类型(if,while,for…)</li>
<li>(?:)操作符后两个参数必须类型相同</li>
<li>不支持switch语句  </li>
</ul>
<figure class="highlight glsl"><table><tr><td class="code"><pre><div class="line"><span class="type">vec4</span> toonify(<span class="keyword">in</span> <span class="type">float</span> intensify) </div><div class="line">&#123;</div><div class="line">    <span class="type">vec4</span> color;</div><div class="line">    color = <span class="type">vec4</span>(<span class="number">0.8</span>,<span class="number">0.8</span>,<span class="number">0.8</span>,<span class="number">0.8</span>)</div><div class="line">    <span class="keyword">return</span> color;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="discard"><a href="#discard" class="headerlink" title="discard"></a>discard</h2><p><code>discard</code>关键字可以避免片段更新帧缓冲区，当流控制遇到这个关键字时，正在处理的片段就会被标记为丢.</p>
<p>如果不理解什么叫标记为丢 可以参考一下<a href="理解UIView的绘制">UIView的绘制过程</a></p>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul>
<li>函数名可以通过参数类型重载，但是和返回值类型无关</li>
<li>所有参数必须完全匹配，参数不会自动</li>
<li>函数不能被递归调用</li>
<li>函数返回值不能是数组</li>
</ul>
<p>函数参数标识符  </p>
<ul>
<li><code>in</code>: 进复制到函数中，但不返回的参数(默认)</li>
<li><code>out</code>: 不将参数复制到函数中，但返回参数</li>
<li><code>inout</code>: 复制到函数中并返回 </li>
</ul>
<h2 id="混合操作"><a href="#混合操作" class="headerlink" title="混合操作"></a>混合操作</h2><p>通过在选择器(.)后列出各分量名，就可以选择这些分量</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><div class="line"><span class="type">vec4</span> v4;</div><div class="line">v4.rgba;    <span class="comment">// 得到vec4</span></div><div class="line">v4.rgb;     <span class="comment">// 得到vec3</span></div><div class="line">v4.b;       <span class="comment">// 得到float</span></div><div class="line">v4.xy;      <span class="comment">// 得到vec2</span></div><div class="line">v4.xgba;    <span class="comment">// 错误！分量名不是同一类</span></div><div class="line"></div><div class="line">v4.wxyz;    <span class="comment">// 打乱原有分量顺序</span></div><div class="line">v4.xxyy;    <span class="comment">// 重复分量</span></div></pre></td></tr></table></figure>
<p>最后推荐一个GLSL编辑调试工具<a href="http://adcdownload.apple.com/Developer_Tools/Graphics_Tools_for_Xcode_7.2/Graphics_Tools_for_Xcode_7.2.dmg" target="_blank" rel="external">OpenGL Shader Builder(Graphics Tools.dmg)</a></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h1><p>由于本人记性不好使 找东西有时候总找不到 把一些 名词知识点收录出来并加以解释 方便后来的学习者学习.</p>
<p>参考:<br><a href="http://www.cnblogs.com/luweimy/p/4208570.html?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="external">GLSL基础</a></p>
<p><a href="http://www.jianshu.com/p/ee597b2bd399" target="_blank" rel="external">iOS开发-OpenGL ES入门教程2</a>  </p>
<p>全文完</p>
<hr>
<p>打赏二维码<br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/alipay_QRCode_small.JPG" alt="打赏"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.gi
    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="macOS开发" scheme="https://www.sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>自定义NSTableRowView实现鼠标跟踪动态显示选中/非选中颜色</title>
    <link href="https://www.sunyazhou.com/2017/05/10/NSTableRowView-mouse-track-color/"/>
    <id>https://www.sunyazhou.com/2017/05/10/NSTableRowView-mouse-track-color/</id>
    <published>2017-05-10T07:24:20.000Z</published>
    <updated>2017-05-19T00:09:14.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"BDRowView.h"</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#define k_NORMAL_COLOR [NSColor colorFromInt:0xfcfdfe]</span></div><div class="line"><span class="meta">#define k_SELECTED_COLOR [NSColor colorFromInt:0xeff1f3]</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">BDRowView</span> ()</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">strong</span>) <span class="built_in">NSTrackingArea</span> *trackingArea;</div><div class="line"><span class="keyword">@property</span>(<span class="keyword">assign</span>) <span class="built_in">BOOL</span> isHovering;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">BDRowView</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)drawRect:(<span class="built_in">NSRect</span>)dirtyRect &#123;</div><div class="line">    [<span class="keyword">super</span> drawRect:dirtyRect];</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)drawSelectionInRect:(<span class="built_in">NSRect</span>)dirtyRect &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.selectionHighlightStyle != <span class="built_in">NSTableViewSelectionHighlightStyleNone</span>) &#123;</div><div class="line">        <span class="built_in">NSRect</span> selectionRect = <span class="built_in">NSInsetRect</span>(<span class="keyword">self</span>.bounds, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">        [k_SELECTED_COLOR setStroke];</div><div class="line">        [k_SELECTED_COLOR setFill];</div><div class="line">        <span class="built_in">NSBezierPath</span> *selectionPath = [<span class="built_in">NSBezierPath</span> bezierPathWithRoundedRect:selectionRect xRadius:<span class="number">0</span> yRadius:<span class="number">0</span>];</div><div class="line">        [selectionPath fill];</div><div class="line">        [selectionPath stroke];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">-(<span class="keyword">void</span>)updateTrackingAreas</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">self</span>.trackingArea != <span class="literal">nil</span>) &#123;</div><div class="line">        [<span class="keyword">self</span> removeTrackingArea:<span class="keyword">self</span>.trackingArea];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">int</span> opts = (<span class="built_in">NSTrackingMouseEnteredAndExited</span> | <span class="built_in">NSTrackingMouseMoved</span> | <span class="built_in">NSTrackingActiveAlways</span>);</div><div class="line">    <span class="keyword">self</span>.trackingArea = [ [<span class="built_in">NSTrackingArea</span> alloc] initWithRect:[<span class="keyword">self</span> bounds]</div><div class="line">                                                      options:opts</div><div class="line">                                                        owner:<span class="keyword">self</span></div><div class="line">                                                     userInfo:<span class="literal">nil</span>];</div><div class="line">    [<span class="keyword">self</span> addTrackingArea:<span class="keyword">self</span>.trackingArea];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)mouseEntered:(<span class="built_in">NSEvent</span> *)theEvent &#123;</div><div class="line">    <span class="keyword">self</span>.isHovering = <span class="literal">YES</span>;</div><div class="line">    [<span class="keyword">self</span> setBackgroundColor:[<span class="keyword">self</span> getBackgroundColor:<span class="literal">YES</span>]];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)mouseExited:(<span class="built_in">NSEvent</span> *)theEvent &#123;</div><div class="line">    <span class="keyword">self</span>.isHovering = <span class="literal">NO</span>;</div><div class="line">    [<span class="keyword">self</span> setBackgroundColor:[<span class="keyword">self</span> getBackgroundColor:<span class="literal">NO</span>]];</div><div class="line">&#125;</div><div class="line"></div><div class="line">-(<span class="built_in">NSColor</span>*)getBackgroundColor:(<span class="built_in">BOOL</span>)isSelected</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(isSelected) &#123;</div><div class="line">        <span class="keyword">return</span> k_SELECTED_COLOR;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">return</span> k_NORMAL_COLOR;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<hr>
<p>打赏二维码<br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/alipay_QRCode_small.JPG" alt="打赏"></p>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&quot;BDRo
    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="macOS开发" scheme="https://www.sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>如何在macOS/MAC OS X上创建替身文件</title>
    <link href="https://www.sunyazhou.com/2017/05/09/how-to-create-symbolicLink-on-macos-in-code/"/>
    <id>https://www.sunyazhou.com/2017/05/09/how-to-create-symbolicLink-on-macos-in-code/</id>
    <published>2017-05-09T09:41:17.000Z</published>
    <updated>2017-05-19T00:09:14.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/how-to-create-symbolicLink-on-macos-in-code/symboliclink1.jpg" alt=""></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>熟悉WIN 开发的同学一定很熟悉快捷方式,在macOS上叫做替身 最近开发插件相关逻辑 发现需要把插件复制到指定目录所以有了此文</p>
<h3 id="软连接"><a href="#软连接" class="headerlink" title="软连接"></a>软连接</h3><p>如果你深刻的理解了内存管理的原理，软连接就如同内存管理中的“指向指针的指针”，软连接本质就是指向硬连接的一个地址，自然它也只会对这一个硬连接有效，一旦软连接所指向的硬连接被删除，软连接也就失效了。当然这与”指针的指针”也有一个很微妙的差别，那就是你对软链接的操作都是通过跳转到硬连接再映射到了对节点的操作</p>
<p>创建软链接可以使用<code>NSFileManager</code>中的两个方法:</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="built_in">BOOL</span>)createSymbolicLinkAtPath:(<span class="built_in">NSString</span> *)path withDestinationPath:(<span class="built_in">NSString</span> *)destPath error:(<span class="built_in">NSError</span> **)error ;</div><div class="line">- (<span class="built_in">BOOL</span>)createSymbolicLinkAtURL:(<span class="built_in">NSURL</span> *)url withDestinationURL:(<span class="built_in">NSURL</span> *)destURL error:(<span class="built_in">NSError</span> **)error;</div></pre></td></tr></table></figure>
<h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>最近在开发插件 需要把插件从工程目录 copy到 系统的插件目录<code>~/Library/Internet Plug-Ins/</code> (<a href="http://www.tanhao.me/pieces/1084.html/" target="_blank" rel="external">这里用了老谭的插件举例</a>)</p>
<p>如下图:<br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/how-to-create-symbolicLink-on-macos-in-code/MacHi2017-05-0918-03-05.png" alt=""></p>
<p>本想把它直接copy过去, 但可能存在以后升级问题,后续判断各种版本 删除旧的版本逻辑处理比较麻烦,于是想到用替身的方式实现</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/how-to-create-symbolicLink-on-macos-in-code/MacHi2017-05-0918-03-42.png" alt=""></p>
<p>使用这种方式创建替身:</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//工程目录文件</span></div><div class="line"><span class="built_in">NSString</span> *homePath = [[<span class="built_in">NSBundle</span> mainBundle] pathForResource:<span class="string">@"NPAPI_Download_Plugin"</span> ofType:<span class="string">@"plugin"</span>];</div><div class="line"><span class="comment">//插件在系统的目录位置</span></div><div class="line"><span class="built_in">NSString</span> *strHome = [<span class="built_in">NSString</span> stringWithUTF8String:getenv(<span class="string">"HOME"</span>)];</div><div class="line"><span class="built_in">NSString</span> *desc = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@/Library/Internet Plug-Ins/NPAPI_Download_Plugin.plugin"</span>,strHome];</div><div class="line"><span class="built_in">NSFileManager</span> *fm = [<span class="built_in">NSFileManager</span> defaultManager];</div><div class="line"><span class="comment">//创建替身代码</span></div><div class="line">[fm createSymbolicLinkAtPath:desc withDestinationPath:homePath error:<span class="literal">nil</span>];</div></pre></td></tr></table></figure>
<p><em>注意:<code>createSymbolicLinkAtPath:withDestinationPath:error:</code>方法 第一个参数<code>LinkAtPath</code>是<code>desc</code>,它是放替身文件的位置. 第二个参数<code>DestinationPath</code>是<code>homePath</code>代表本地文件的原始路径,这里用工程目录的文件是为了方便,切记不要和 copyItem方法搞混</em></p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/how-to-create-symbolicLink-on-macos-in-code/MacHi2017-05-0918-04-11.png" alt=""></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>主要涉及的一些macOS开发技巧, 希望不足之处大家多多指教.</p>
<p>参考:<a href="http://www.tanhao.me/pieces/597.html/" target="_blank" rel="external">详解OSX(Unix)中的Hard Link与Symbolic Link(硬连接与软连接)</a></p>
<p>全文完</p>
<hr>
<p>打赏二维码<br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/alipay_QRCode_small.JPG" alt="打赏"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/how-to-create-symbolicLink-on-macos-in-code/s
    
    </summary>
    
      <category term="macOS开发" scheme="https://www.sunyazhou.com/categories/macOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="macOS开发" scheme="https://www.sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>赠:即将高中毕业向往计算机科学相关专业同学的只言片语</title>
    <link href="https://www.sunyazhou.com/2017/04/29/some-advice-for-high-school-graduate/"/>
    <id>https://www.sunyazhou.com/2017/04/29/some-advice-for-high-school-graduate/</id>
    <published>2017-04-29T01:15:21.000Z</published>
    <updated>2017-05-19T00:09:14.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/some-advice-for-high-school-graduate/1.jpg" alt=""></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>无论是何时毕业,何时参加工作,我的这篇文章将是大家迈进大学校门之前的必习之章. <strong>学习好一定要坚持下去,学习不好并不代表以后没有机会</strong>, 如果你大学想学的是计算机相关专业,我可以把我之所学和必备的一些学习装备合盘托出毫无保留的告诉你, 并切能节省学习开支至少1w+以上.</p>
</blockquote>
<h2 id="主要分3个方面"><a href="#主要分3个方面" class="headerlink" title="主要分3个方面"></a>主要分3个方面</h2><h3 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h3><p>首先来说 书籍 大学计算机必须的基本经典书籍</p>
<ul>
<li><p><a href="http://baike.baidu.com/link?url=rVNBy5FqKGq6YBb22T6Sj0IrRCeFj_SKf9QLjV7avP1cXIelBdhMza-y9Xu4fBHk0ynNI-RiFxbGySk68agqb1zrrQ2xPBZO9-WiqQe3AJy8IHEtHGBWGnxcwJlf77xiVaN3VdvdSn9_OaHodVRmuSl8MbPLBh5e0JzEhE0ikuNIGivWRklNzsL2WTD6WOJT" target="_blank" rel="external">C语言程序设计 谭浩强</a> <strong>必学</strong><br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/some-advice-for-high-school-graduate/c_language.jpg" alt=""></p>
</li>
<li><p><a href="https://item.jd.com/11076338.html" target="_blank" rel="external">清华大学计算机系列教材：数据结构（C语言版）</a> <strong>必学</strong><br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/some-advice-for-high-school-graduate/data_structure.jpg" alt=""></p>
</li>
<li><p><a href="https://item.jd.com/10064429.html" target="_blank" rel="external">鸟哥的Linux私房菜 （基础学习篇 第三版）</a> <strong>必学</strong><br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/some-advice-for-high-school-graduate/linux.jpg" alt=""> </p>
</li>
</ul>
<p><em><a href="https://github.com/torvalds" target="_blank" rel="external">Linux Torvalds博客</a></em></p>
<ul>
<li><p><a href="https://item.jd.com/11017238.html" target="_blank" rel="external">C++</a><br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/some-advice-for-high-school-graduate/c_plus.jpg" alt=""></p>
</li>
<li><p>Git<br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/some-advice-for-high-school-graduate/git.jpg" alt=""></p>
</li>
<li><p>数据库 这个很重要可以简单理解成excel表格只不过是以文件存储数据的文件. eg:sqlite sql server 这个就不推荐书籍了大学课程里面一定有</p>
</li>
</ul>
<p>以上的书可以买纸质的,至于 python、java、js、nodejs、机器学习相关的大家可以不必买书.但考虑大家还是很潦倒的 可以从网上下载电子版学习是一样的. 比如ibook(苹果电脑上的epub格式) kindle(mobi格式) 还有pdf常用的格式. <strong>但我还是建议不用买,耐心往下看</strong> </p>
<h3 id="技法"><a href="#技法" class="headerlink" title="技法"></a>技法</h3><ul>
<li><a href="https://github.com/sunyazhou13/free-programming-books-zh_CN" target="_blank" rel="external">免费的编程中文书籍索引</a> 这就是不需要大家买书的原因,所有计算机相关的技术书籍和视频教程博客等全部资料都在这,是的你确实没看错就是一个链接搞定.</li>
<li>学习一下如何搭建自己博客这样就可以把所学的知识点记录下来还能提高影响力<br>详情可以参考我的文章<a href="http://localhost:4000/2017/02/10/build-hexo-blog-Tutorial/" target="_blank" rel="external">如何搭建HEXO博客</a></li>
<li>每天尽量早起一个小时看书,预习今天要讲的内容.</li>
<li>看大神的博客</li>
<li>订阅各种博客发布文章(推荐一个软件叫<a href="http://www.0daydown.com/12/436535.html" target="_blank" rel="external">Reeder</a>)<br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/some-advice-for-high-school-graduate/QQ20170429-105045%402x.png" alt=""></li>
</ul>
<p>(估计初学者还不知道谁是在某个领域的大神,这个可以慢慢摸索)<br>我是个学习iOS方向的所以我给出的一个学习资料的github链接和大神列表  </p>
<ul>
<li><a href="https://github.com/tangqiaoboy/iOSBlogCN" target="_blank" rel="external">中文 iOS/Mac 开发博客列表</a>是的你又没看错就是一个链接 这里有如何把博客的RSS搞到Reeder软件里  </li>
<li><a href="http://blog.devtang.com/2014/07/27/ios-levelup-tips/" target="_blank" rel="external">唐巧博客</a></li>
</ul>
<p>下图是我的reeder<br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/some-advice-for-high-school-graduate/QQ20170429-111258%402x.png" alt=""></p>
<h3 id="装备"><a href="#装备" class="headerlink" title="装备"></a>装备</h3><p>这个是大家最关心的也是父母最心烦的事了.</p>
<p>大学装备真的很重要没错 那我先从电脑说起把</p>
<ul>
<li>Mac电脑(苹果电脑 macbook)<br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/some-advice-for-high-school-graduate/mac_computer.jpeg" alt=""><br>因为它完美结合了 Unix 系的 Shell 和优秀的图形界面(跟window PC说再见吧 这台电脑一直能用到你参加工作)</li>
</ul>
<h4 id="方案1-高贵轻奢型"><a href="#方案1-高贵轻奢型" class="headerlink" title="方案1(高贵轻奢型)"></a><strong>方案1(高贵轻奢型)</strong></h4><p>如果要求比较高的可以买<a href="https://detail.tmall.com/item.htm?spm=a220m.1000858.1000725.9.7HDqEB&amp;id=44131265268&amp;skuId=79231665633&amp;areaId=110100&amp;standard=1&amp;user_id=1669409267&amp;cat_id=2&amp;is_b=1&amp;rn=892765ac3efe1f5cd3df8f0d2eb48f87" target="_blank" rel="external">MacBook Pro MF839CH</a> <code>￥7988</code></p>
<p>840型号 貌似贵些 当然这些针对于家庭条件比较好的同学<br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/some-advice-for-high-school-graduate/839.jpg" alt="">  </p>
<h4 id="方案2-轻巧实用型"><a href="#方案2-轻巧实用型" class="headerlink" title="方案2(轻巧实用型)"></a><strong>方案2(轻巧实用型)</strong></h4><p>如果要求一般也可以省钱买个13.3吋 的<br><a href="https://detail.tmall.com/item.htm?spm=a220m.1000858.1000725.1.7HDqEB&amp;id=530945296812&amp;skuId=3163301283248&amp;areaId=110100&amp;standard=1&amp;user_id=2616970884&amp;cat_id=2&amp;is_b=1&amp;rn=892765ac3efe1f5cd3df8f0d2eb48f87" target="_blank" rel="external">MacBook Air13.3</a> 足够用了 我同事就有一个用了5年多 <code>￥6488</code><br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/some-advice-for-high-school-graduate/macbookair.jpg" alt=""></p>
<p>大家是不是会觉得这个很贵、我既然说让你省钱就能让你省钱  往下看</p>
<h4 id="方案3-穷困潦倒型"><a href="#方案3-穷困潦倒型" class="headerlink" title="方案3(穷困潦倒型)"></a><strong>方案3(穷困潦倒型)</strong></h4><p>有一个苹果电脑它很便宜叫<a href="https://www.apple.com/cn/mac-mini/" target="_blank" rel="external">mac mini</a> 港版淘宝<code>￥3300</code>左右 </p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/some-advice-for-high-school-graduate/macmini.png" alt=""></p>
<p>注意: <strong><em>没有显示器和鼠标键盘</em></strong>  需要自己买鼠标键盘 可以买个二手的显示器可以但是我记得一般大学都可以提供租借给同学使用 显示器+鼠标键盘 1500新的也够了</p>
<p>这个学习和使用完全能满足 只是大家很不习惯 苹果键盘和pc键盘按键有点稍稍区别<br>不过没关系 淘宝 50块钱能买个 蓝牙的苹果能用的键盘</p>
<p>这个是我认为最好的方案了 即经济又实惠 </p>
<p>好说完电脑 我们继续往下说</p>
<ul>
<li>树莓派<br>首先介绍一下这个是我所见过迄今为止 最便宜的最小的电脑 并且能运行linux各种操作系统 只不过是arm级别的 但是对于学生来说 非常适合学习 因为简单一个TF卡就可以当硬盘 键盘鼠标 wifi 蓝牙 网卡 全带 而且只需要 <code>￥275</code>左右<br>是的就是这么便宜 还是进口英国产的 如果国产的 只需要<code>￥230</code><br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/some-advice-for-high-school-graduate/raspberry.jpg" alt=""></li>
</ul>
<p>为啥树莓派是必备的是因为学习linux过程中 你总不能来回折腾电脑安装各种操作系统吧  其实这个也不是必要的 但是为了学习 shell建议 还是 用这个 比较方便<br>这个适合计算机相关专业的同学爱折腾 爱学习技术 玩技术 的必备</p>
<p>当我以后老去 我一定把这个放在我的博物馆里</p>
<p><em>注意:这个需要显示器和鼠标键盘 如果上边选择方案3 这个非常适合</em></p>
<ul>
<li><p>智能手机<br>这个我只能推荐大家买iPhone 或者便宜点的Android<br>iPhone 5s/SE <code>￥3288</code>左右<br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/some-advice-for-high-school-graduate/iPhone.jpg" alt=""><br>手机如果搞iOS开发当然要买个iPhone 现在不是钱的问题是移动互联网发展火爆的时代,得有个像样的装备以备不时之需.</p>
</li>
<li><p>Kindle</p>
<p>这个东西是个看书的好东西 上边说的那些图书 都可以通过 关注一些微信的公众号推送到这台设备免费获得, 一个很小的设备能装下很多书 很适合大家轻松学习不必带一堆没用沉重的书籍.  <code>￥558</code><br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/some-advice-for-high-school-graduate/kindle.jpg" alt=""></p>
</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>可以这样说 看完上述文章 你至少知道如何学习并且方便的找到学习资料</p>
<p>下面我们开始算一笔入学装备的帐  </p>
<p><code>电脑 + 树莓派 + 智能手机 + Kindle = 大学学习保障</code>  </p>
<p><code>方案1 + 树莓派 + 智能手机 + Kindle</code>    = ?<br><code>￥7988</code> + <code>￥275</code> + <code>￥3288</code> +  <code>￥558</code> = <code>￥12109</code> 这个估计家长很难接受 适合 高贵轻奢型</p>
<p><code>方案2 + 树莓派 + 智能手机 + Kindle</code>    = ?<br><code>￥6488</code> + <code>￥275</code> + <code>￥3288</code> +  <code>￥558</code> = <code>￥10609</code> 这个也得1w多 主要费钱的是手机 如果手机 能省一些 估计 不到1w够了</p>
<p><code>方案3 + 树莓派 + 智能手机 + Kindle</code>    = ?<br><code>￥3300</code> + <code>￥275</code> + <code>￥3288</code> +  <code>￥558</code> = <code>￥7421</code> </p>
<p>这个是包含主设备 考虑到还要 租借显示器 和键盘 我们 暂且 加 ￥1000</p>
<p><code>￥3300</code> + <code>￥275</code> + <code>￥3288</code> +  <code>￥558</code> + <code>￥1000</code> = <code>￥8421</code></p>
<p>最终还是 需要8K多 不过这已经 比较省了 如果手机买个Android那么 下面是这样的</p>
<p><code>￥3300</code> + <code>￥275</code> + <code>￥699</code> +  <code>￥558</code> + <code>￥1000</code> = <code>￥4832</code></p>
<p>是的 5k足够了 其实这才是最经济的方案 如果 手机不用买 鼠标键盘也不用买的花 也就 4k多一点 无论是毕业生还是大学生 切记要让钱花在刀刃上 东西要物尽其用 尤其是大学期间 根本不需要多好 能用就行了 参加工作 自己自足之后 想买什么就不是问题了 </p>
<p>好了 就说到这吧 我不是在打广告 如果觉得我的文章很有价值 可以请我喝瓶饮料</p>
<p>全文完</p>
<hr>
<p>打赏二维码<br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/alipay_QRCode_small.JPG" alt="打赏"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/some-advice-for-high-school-graduate/1.jpg&quot; a
    
    </summary>
    
      <category term="生活" scheme="https://www.sunyazhou.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>如何在iOS/macOS系统中创建文件时创建唯一的文件名</title>
    <link href="https://www.sunyazhou.com/2017/04/20/unique-filename-in-system/"/>
    <id>https://www.sunyazhou.com/2017/04/20/unique-filename-in-system/</id>
    <published>2017-04-20T08:35:42.000Z</published>
    <updated>2017-04-29T01:11:13.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/unique-filename-in-system/stock-photo-167171895.jpg" alt=""></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>当我无数次看到大家写代码的时候总是以一个<code>时间戳+arc4random()</code>创建某文件的时候 深感心碎,难道操作系统就没有提供相关的函数么 于是 我找到了如下代码 解决大家因为创建文件重名问题.</p>
<pre><code class="objc"><span class="comment">/* Create a recording file */</span>
    <span class="built_in">NSString</span> *filePath = [<span class="string">@"~/Movies/AVScreenShackRecording_XXXXXX"</span> stringByStandardizingPath];
    <span class="keyword">char</span> *screenRecordingFileName = strdup([filePath fileSystemRepresentation]);
    <span class="keyword">if</span> (screenRecordingFileName)
    {
        <span class="keyword">int</span> fileDescriptor = mkstemp(screenRecordingFileName);
        <span class="keyword">if</span> (fileDescriptor != <span class="number">-1</span>)
        {
            <span class="built_in">NSString</span> *filenameStr = [[<span class="built_in">NSFileManager</span> defaultManager] stringWithFileSystemRepresentation:screenRecordingFileName length:strlen(screenRecordingFileName)];

            <span class="built_in">NSLog</span>(<span class="string">@"唯一的文件名:%@"</span>,filenameStr);

        }
        remove(screenRecordingFileName);
        free(screenRecordingFileName);
    }
</code></pre>
<p>使用前<br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/unique-filename-in-system/MacHi%202017-04-20%2016-55-01.png" alt=""></p>
<p>过程中<br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/unique-filename-in-system/MacHi%202017-04-20%2016-55-23.png" alt=""></p>
<p>完成之后<br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/unique-filename-in-system/MacHi%202017-04-20%2016-55-56.png" alt=""></p>
<p><em><strong>切记文件后缀需要 加上 <code>XXXXXX</code></strong></em> 几个<code>X</code>就代表几位<code>数字+字母</code>混合<br><em>注意</em>:最好是6个X或者6个以上 <a href="http://man7.org/linux/man-pages/man3/mkstemp.3.html" target="_blank" rel="external">参考Linux</a></p>
<p>主要的是要明白下面这两个函数</p>
<p><a href="http://baike.baidu.com/item/strdup/5522525" target="_blank" rel="external">strdup()用于c语言中常用的一种字符串拷贝</a></p>
<p><a href="http://baike.baidu.com/link?url=wFhfkOVXafm15-4vGfxEQiQynIG7BG2yYAurwzS4uHKmby2C2lfhiO2T6WAqbdc3nOP9mEOVTMaBqxOc2eZps7_JIAsIWI0p11pEIl7Vku_" target="_blank" rel="external">mkstemp()函数在系统中以唯一的文件名创建一个文件并打开</a></p>
<p>OK 希望大家有收获</p>
<p>全文完</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/unique-filename-in-system/stock-photo-1671718
    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="macOS开发" scheme="https://www.sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>二狗经典的3种权利摘要</title>
    <link href="https://www.sunyazhou.com/2017/04/11/3-kindof-ability/"/>
    <id>https://www.sunyazhou.com/2017/04/11/3-kindof-ability/</id>
    <published>2017-04-11T03:47:26.000Z</published>
    <updated>2017-04-29T01:11:13.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>出自《东北往事:黑道风云20年》某片段</p>
</blockquote>
<p>二狗曾拜读过托夫勒著名的《权力的转移》一书，其书中阐述的内容是：暴力、金钱、知识等三种力量是构成社会权力的基石。在这三种力量中，暴力是低等权力、金钱是中等权力，而知识是高等权力。社会越进步，主宰社会的权力就越高等。<br>　　那么，黑社会，是否也有三种力量是构成其权力基石呢？又是哪三种力量呢？和托夫勒所叙述的三种力量异同在哪里？是否可以“借鉴”托夫勒所描述的三种力量呢？</p>
<p>　　二狗认为，我国的黑社会，也有三种力量是构成其权力的基石，这三种力量分别是：暴力、金钱、腐败官员手中的职权。这三者，缺一不可。而且，暴力是低等权力、金钱是中等权力，腐败官员手中的职权是高等权力。尽管这三者都不可或缺，但黑社会团伙发展得越强大，所借助的主要力量就越高等。<br>　　也就是说，黑社会团伙借助暴力起家，以暴力扬名后获得金钱，通过金钱获得腐败官员手中职权的支持。在这个过程中，这个团伙在不断的壮大，到最后，借助的暴力手段越来越少，而腐败官员手中的职权成了黑社会团伙手中最主要的权力。<br>　　让二狗来举例分析我市黑社会这三种力量的转移。<br>　　八十年代的刘海柱号称单挑之王，在八十年代初在我市手持一柄铁锹率领一群好汉东征西讨所向披靡，好不威风。但他一直在使用最低质的权力——暴力，暴力只能用来威胁和惩罚。所以，刘海柱除了得到一个“大侠”的名头外，什么都没得到，经常被小警察打个半死。</p>
<p>　　九十年代的张岳尽管名头最响，而且武力之强横前无古人后无来者，但他只用他的暴力手段获得了金钱，却基本没有获得腐败官员手中职权的支持。所以，他不但遭遇了严春秋的毒打，而且最终，他被正法了。因为，金钱只是中等权力。<br>　　迈入两千年，新世纪，李武已懂得了如何运用“高等权力”，懂得了如何去拉拢腐败官员并且利用他们手中的职权。所以，尽管李武的名头远没有刘海柱、张岳般如雷贯耳，但不可否认的是：李武的团伙，不但比刘海柱当年的团伙高等，而且比张岳的团伙也要高等。<br>　　李武，是黑社会，真的黑社会，他代表着黑社会的最高阶段。<br>　　黑社会这三种权力的转移过程，也是从古典流氓、拜金流氓向黑社会转变的全过程。三种权力的转移，二狗却写了四部小说。因为，第三部“黑社会前传”是体现我市由拜金流氓向黑社会转变的一个巨变，在这个巨变中，张岳倒下了，赵红兵活了下来。<br>　　单纯的暴力与血腥，绝不会再是第四部《黑社会》的主题
　　</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;出自《东北往事:黑道风云20年》某片段&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;二狗曾拜读过托夫勒著名的《权力的转移》一书，其书中阐述的内容是：暴力、金钱、知识等三种力量是构成社会权力的基石。在这三种力量中，暴力是低等权力、金钱是中等权力，而知识
    
    </summary>
    
      <category term="生活" scheme="https://www.sunyazhou.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="有声小说" scheme="https://www.sunyazhou.com/tags/%E6%9C%89%E5%A3%B0%E5%B0%8F%E8%AF%B4/"/>
    
  </entry>
  
  <entry>
    <title>Xcode快捷键</title>
    <link href="https://www.sunyazhou.com/2017/04/06/Xcode-shortcuts/"/>
    <id>https://www.sunyazhou.com/2017/04/06/Xcode-shortcuts/</id>
    <published>2017-04-06T02:36:30.000Z</published>
    <updated>2017-04-29T01:11:13.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/Xcode-shortcuts/MacHi2017-04-06%2010-48-59.png" alt="shortcuts"></p>
<p>前言<br>    在iOS和macOS开发者中积累了一些快捷操作记录下来</p>
<h2 id="隐藏左侧面板"><a href="#隐藏左侧面板" class="headerlink" title="隐藏左侧面板"></a>隐藏左侧面板</h2><p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/Xcode-shortcuts/MacHi%202017-04-06%2010-56-22.png" alt=""></p>
<blockquote>
<p><strong>command+0</strong>=显示/隐藏左侧面板</p>
</blockquote>
<h2 id="隐藏右侧面板"><a href="#隐藏右侧面板" class="headerlink" title="隐藏右侧面板"></a>隐藏右侧面板</h2><p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/Xcode-shortcuts/MacHi%202017-04-06%2010-55-45.png" alt=""></p>
<blockquote>
<p><strong>command+option+0</strong>=显示/隐藏右侧面板</p>
</blockquote>
<h2 id="隐藏debug区域"><a href="#隐藏debug区域" class="headerlink" title="隐藏debug区域"></a>隐藏debug区域</h2><p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/Xcode-shortcuts/MacHi%202017-04-06%2011-06-12.png" alt=""></p>
<blockquote>
<p><strong>command+shift+y</strong>=显示/隐藏底部控制等调试区域</p>
</blockquote>
<h2 id="跳转到代码多少行"><a href="#跳转到代码多少行" class="headerlink" title="跳转到代码多少行 "></a>跳转到代码多少行 </h2><p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/Xcode-shortcuts/MacHi%202017-04-06%2011-09-08-command-line.png" alt=""></p>
<blockquote>
<p><strong>command + l (L)</strong>=跳转到代码多少行 注意看清是l 不是i </p>
</blockquote>
<h2 id="隐藏-显示函数体"><a href="#隐藏-显示函数体" class="headerlink" title="隐藏/显示函数体 "></a>隐藏/显示函数体 </h2><p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/Xcode-shortcuts/MacHi%202017-04-06%2011-10-21.png" alt=""></p>
<blockquote>
<p><strong>command+option+⬅︎</strong>=隐藏函数 <code>⬅︎</code>代表左箭头<br><strong>command+option+➡︎</strong>=显示函数  <code>➡︎</code>代表右箭头 </p>
</blockquote>
<h2 id="上下移动代码行"><a href="#上下移动代码行" class="headerlink" title="上下移动代码行"></a>上下移动代码行</h2><p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/Xcode-shortcuts/MacHi%202017-04-06%2011-10-59.png" alt=""></p>
<blockquote>
<p><strong>command + option + {</strong>=向上移动代码行<br><strong>command + option + }</strong>=向下移动代码行</p>
</blockquote>
<h2 id="前后移动代码行"><a href="#前后移动代码行" class="headerlink" title="前后移动代码行"></a>前后移动代码行</h2><p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/Xcode-shortcuts/MacHi%202017-04-06%2011-11-36.png" alt=""></p>
<blockquote>
<p><strong>command + {</strong>=向前移动代码行<br><strong>command + }</strong>=向后移动代码行</p>
</blockquote>
<h2 id="全工程查找文件"><a href="#全工程查找文件" class="headerlink" title="全工程查找文件"></a>全工程查找文件</h2><p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/Xcode-shortcuts/MacHi%202017-04-06%2011-12-33.png" alt=""></p>
<blockquote>
<p><strong>command + shift + o</strong>=向前移动代码行 o大写字母</p>
</blockquote>
<h2 id="添加代码行注释"><a href="#添加代码行注释" class="headerlink" title="添加代码行注释"></a>添加代码行注释</h2><p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/Xcode-shortcuts/MacHi%202017-04-06%2011-30-03.png" alt=""></p>
<blockquote>
<p><strong>command + option + ?</strong>=自动添加函数描述声明</p>
</blockquote>
<h2 id="撤销-反撤销-修改"><a href="#撤销-反撤销-修改" class="headerlink" title="撤销/反撤销 修改"></a>撤销/反撤销 修改</h2><blockquote>
<p><strong>command + z</strong>=撤销<br><strong>command + shift + z</strong>=反撤销</p>
</blockquote>
<p>后续有时间会持续更新</p>
<p>全文完 </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/Xcode-shortcuts/MacHi2017-04-06%2010-48-59.pn
    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="macOS开发" scheme="https://www.sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Learning AV Foundation(三)AVAudioRecorder</title>
    <link href="https://www.sunyazhou.com/2017/03/28/Learning-AV-Foundation-AVAudioRecorder/"/>
    <id>https://www.sunyazhou.com/2017/03/28/Learning-AV-Foundation-AVAudioRecorder/</id>
    <published>2017-03-28T01:40:18.000Z</published>
    <updated>2017-04-29T01:11:13.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/Learning-AV-Foundation-AVAudioRecorder/stock-photo-200814137.jpg" alt=""></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在<code>AV Foundation</code>中使用<code>AVAudioRecorder</code>类添加音频录制功能和使用<code>AVAudioPlayer</code>一样简单, 都是在<code>Audio Queue Server</code>上层构建的.同时支持<code>macOS</code>和<code>iOS</code>平台.可以从内置麦克风录制音频,也可以支持数字音频接口或USB外接麦克风录制.</p>
<h2 id="主要内容如下"><a href="#主要内容如下" class="headerlink" title="主要内容如下:"></a>主要内容如下:</h2><pre><code>如何创建AVAudioRecorder  
    1. 音频格式
    2. 采样率
    3. 通道数
创建Demo
    1. 配置音频会话
    2. 实现录音功能
    3. 使用Audio Metering实现声波视觉显示
</code></pre><p>创建<code>AVAudioRecorder</code>之前先了解一下它的方法和成员变量</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>, <span class="keyword">getter</span>=isRecording) <span class="built_in">BOOL</span> recording;<span class="comment">//是否正在录音</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>) <span class="built_in">NSDictionary</span>&lt;<span class="built_in">NSString</span> *, <span class="keyword">id</span>&gt; *settings;<span class="comment">//录音配置：采样率、音频格式、通道数...</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>) <span class="built_in">NSURL</span> *url;<span class="comment">//录音文件存放URL</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>) <span class="built_in">NSTimeInterval</span> currentTime;<span class="comment">//录音时长</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">getter</span>=isMeteringEnabled) <span class="built_in">BOOL</span> meteringEnabled;<span class="comment">//是否监控声波</span></div></pre></td></tr></table></figure>
<p><code>AVAudioRecorder</code>的实例方法:</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="built_in">BOOL</span>)prepareToRecord;<span class="comment">//为录音准备缓冲区</span></div><div class="line">- (<span class="built_in">BOOL</span>)record;<span class="comment">//录音开始，暂停后调用会恢复录音</span></div><div class="line">- (<span class="built_in">BOOL</span>)recordAtTime:(<span class="built_in">NSTimeInterval</span>)time;<span class="comment">//在指定时间后开始录音</span></div><div class="line">- (<span class="built_in">BOOL</span>)recordForDuration:(<span class="built_in">NSTimeInterval</span>) duration;<span class="comment">//按指定时长录音</span></div><div class="line">- (<span class="built_in">BOOL</span>)recordAtTime:(<span class="built_in">NSTimeInterval</span>)time </div><div class="line">         forDuration:(<span class="built_in">NSTimeInterval</span>)duration;<span class="comment">//上面2个的合体</span></div><div class="line">- (<span class="keyword">void</span>)pause; <span class="comment">//暂停录音</span></div><div class="line">- (<span class="keyword">void</span>)stop; <span class="comment">//停止录音</span></div><div class="line">- (<span class="built_in">BOOL</span>)deleteRecording;<span class="comment">//删除录音，必须先停止录音再删除</span></div></pre></td></tr></table></figure>
<p><code>AVAudioRecorder</code>的代理方法:</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//录音完成后调用</span></div><div class="line">- (<span class="keyword">void</span>)audioRecorderDidFinishRecording:(<span class="built_in">AVAudioRecorder</span> *)recorder </div><div class="line">                           successfully:(<span class="built_in">BOOL</span>)flag;</div><div class="line"><span class="comment">//录音编码发生错误时调用</span></div><div class="line">- (<span class="keyword">void</span>)audioRecorderEncodeErrorDidOccur:(<span class="built_in">AVAudioRecorder</span> *)recorder </div><div class="line">                                   error:(<span class="built_in">NSError</span> *)error;</div></pre></td></tr></table></figure>
<h2 id="如何创建AVAudioRecorder"><a href="#如何创建AVAudioRecorder" class="headerlink" title="如何创建AVAudioRecorder"></a>如何创建<code>AVAudioRecorder</code></h2><p>创建<code>AVAudioRecorder</code>对象所需要的参数如下:  </p>
<ul>
<li>音频流录制时写入到本地的路径URL</li>
<li><code>settings</code>录音配置：采样率、音频格式、通道数…等键值参数字典</li>
<li>发生错误的<code>NSError</code>指针</li>
</ul>
<p>如下代码:</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> 创建录音器</div><div class="line"> */</div><div class="line">- (<span class="keyword">void</span>)createRecorder &#123;</div><div class="line">    <span class="built_in">NSString</span> *directory = <span class="built_in">NSTemporaryDirectory</span>();</div><div class="line">    <span class="built_in">NSString</span> *filePath = [directory stringByAppendingPathComponent:<span class="string">@"voice1.m4a"</span>];</div><div class="line">    <span class="built_in">NSURL</span> *url = [<span class="built_in">NSURL</span> fileURLWithPath:filePath];</div><div class="line">    </div><div class="line">    <span class="built_in">NSDictionary</span> *setting = @&#123;<span class="built_in">AVFormatIDKey</span> : @(kAudioFormatMPEG4AAC),</div><div class="line">                              <span class="built_in">AVSampleRateKey</span>: @<span class="number">22050.0</span>f,</div><div class="line">                              <span class="built_in">AVNumberOfChannelsKey</span>: @<span class="number">1</span>&#125;;</div><div class="line">    <span class="built_in">NSError</span> *error;</div><div class="line">    <span class="keyword">self</span>.recorder = [[<span class="built_in">AVAudioRecorder</span> alloc] initWithURL:url</div><div class="line">                                                settings:setting</div><div class="line">                                                   error:&amp;error];</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.recorder) &#123;</div><div class="line">        [<span class="keyword">self</span>.recorder prepareToRecord];</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"Recorder Create Error: %@"</span>, [error localizedDescription]);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里的建议调用<code>[self.recorder prepareToRecord]</code>方法对录音实例进行预设就像<a href="http://sunyazhou.com/2017/03/17/Learning-AV-Foundation-AVAudioPlayer/" target="_blank" rel="external">上一章</a>创建<code>AVAudioPlayer</code>类似.都是为了执行底层<code>Audio Queue</code>初始化的必要过程.这个<code>prepareToRecord</code>方法还在给定的URL参数指定的位置创建一个文件，这样就减少了录制启动时的延时</p>
<h2 id="音频格式"><a href="#音频格式" class="headerlink" title="音频格式"></a>音频格式</h2><p><code>AVFormatIDKey</code>key指定录制格式,这里的除了<code>kAudioFormatMPEG4AAC</code>格式还有下面这些:</p>
<figure class="highlight"><table><tr><td class="code"><pre><div class="line">CF_ENUM(AudioFormatID)</div><div class="line">&#123;</div><div class="line">    kAudioFormatLinearPCM               = 'lpcm',</div><div class="line">    kAudioFormatAC3                     = 'ac-3',</div><div class="line">    kAudioFormat60958AC3                = 'cac3',</div><div class="line">    kAudioFormatAppleIMA4               = 'ima4',</div><div class="line">    kAudioFormatMPEG4AAC                = 'aac ',</div><div class="line">    kAudioFormatMPEG4CELP               = 'celp',</div><div class="line">    kAudioFormatMPEG4HVXC               = 'hvxc',</div><div class="line">    kAudioFormatMPEG4TwinVQ             = 'twvq',</div><div class="line">    kAudioFormatMACE3                   = 'MAC3',</div><div class="line">    kAudioFormatMACE6                   = 'MAC6',</div><div class="line">    kAudioFormatULaw                    = 'ulaw',</div><div class="line">    kAudioFormatALaw                    = 'alaw',</div><div class="line">    kAudioFormatQDesign                 = 'QDMC',</div><div class="line">    kAudioFormatQDesign2                = 'QDM2',</div><div class="line">    kAudioFormatQUALCOMM                = 'Qclp',</div><div class="line">    kAudioFormatMPEGLayer1              = '.mp1',</div><div class="line">    kAudioFormatMPEGLayer2              = '.mp2',</div><div class="line">    kAudioFormatMPEGLayer3              = '.mp3',</div><div class="line">    kAudioFormatTimeCode                = 'time',</div><div class="line">    kAudioFormatMIDIStream              = 'midi',</div><div class="line">    kAudioFormatParameterValueStream    = 'apvs',</div><div class="line">    kAudioFormatAppleLossless           = 'alac',</div><div class="line">    kAudioFormatMPEG4AAC_HE             = 'aach',</div><div class="line">    kAudioFormatMPEG4AAC_LD             = 'aacl',</div><div class="line">    kAudioFormatMPEG4AAC_ELD            = 'aace',</div><div class="line">    kAudioFormatMPEG4AAC_ELD_SBR        = 'aacf',</div><div class="line">    kAudioFormatMPEG4AAC_ELD_V2         = 'aacg',    </div><div class="line">    kAudioFormatMPEG4AAC_HE_V2          = 'aacp',</div><div class="line">    kAudioFormatMPEG4AAC_Spatial        = 'aacs',</div><div class="line">    kAudioFormatAMR                     = 'samr',</div><div class="line">    kAudioFormatAMR_WB                  = 'sawb',</div><div class="line">    kAudioFormatAudible                 = 'AUDB',</div><div class="line">    kAudioFormatiLBC                    = 'ilbc',</div><div class="line">    kAudioFormatDVIIntelIMA             = 0x6D730011,</div><div class="line">    kAudioFormatMicrosoftGSM            = 0x6D730031,</div><div class="line">    kAudioFormatAES3                    = 'aes3',</div><div class="line">    kAudioFormatEnhancedAC3             = 'ec-3'</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>这里的<code>kAudioFormatLinearPCM</code>会将为压缩的音频流写入到文件中,这就是原始数据,保真度最高,当然文件也最大, 选择ACC<code>kAudioFormatMPEG4AAC</code>或者AppleIMA4<code>kAudioFormatAppleLossless</code>等格式会显著缩小文件，还能保证音频质量.</p>
<blockquote>
<p><em>注意:</em><br><em>指定的音频格式一定要和文件写入的URL文件类型保持一致。如果录制xxx.wav文件格式 是 Waveform Audio File Format(WAVE)的格式要求,即 低字节序、 LinePCM。 如果<code>AVFormatIDKey</code>指定的值不是<code>kAudioFormatLinearPCM</code>则会发生错误。NSError 会返回如下错误</em><br><em>The operation couldn’t be completed. (OSState error 1718449215.)</em></p>
</blockquote>
<h2 id="采样率"><a href="#采样率" class="headerlink" title="采样率"></a>采样率</h2><p>上边的代码里<code>AVSampleRateKey</code>用于定义录音器的采样率. <strong>采样率定义了对输入的模拟音频信号每一秒内的采样数</strong>. 如果使用<strong>低采样率</strong> 比如8kHz,会导致粗粒度、AM广播类型的录制效果, 不过文件会比较小; 使用<strong>44.1kHz的采样率(CD质量的采样率)</strong>会得到非常高质量的内容, 不过文件比较大. 至于使用什么样的采样率没有明确的定义. 不过开发者应该尽量使用<strong>标准的采样率，比如: 8000Hz、16 000Hz(16kHz)、22050Hz(22.05kHz)或 44100Hz(44.1kHz)、当然还有48000Hz和96000Hz</strong> ,(kHz代表千赫),超过48000或96000的采样对人耳已经没有意义.最终是我们的耳朵在进行判断.（<a href="http://sunyazhou.com/2017/03/17/Learning-AV-Foundation-AVAudioPlayer/" target="_blank" rel="external">上一章</a>说了 <strong>人耳所能听到的声音，最低的频率是从20Hz起一直到最高频率20kHz</strong>,录音最好采用 x 2 倍的频率）</p>
<h2 id="通道数"><a href="#通道数" class="headerlink" title="通道数"></a>通道数</h2><p><code>AVNumberOfChannelsKey</code>用于定义记录音频内容的通道数。<strong>指定默认值1 意味着使用单声道录制</strong>、<strong>设置2意味着使用立体声录制</strong>。除非使用外部硬件进行录制，否则同窗应该创建单声道录音。 这里的通道数是指 录制设备的输入数量 可以理解为 麦克风 内置 或者外接麦克风录制比如 插入Apple耳机 里面的麦克风。</p>
<blockquote>
<p>以上是全面<code>AVAudioRecorder</code>的部分概念,<code>AVAudioRecorder</code>支持<strong>无限时长录制</strong>,还可以设置从<strong>未来某一时间点开始录制</strong>或<strong>指定时长录制</strong></p>
</blockquote>
<h2 id="网络流媒体处理"><a href="#网络流媒体处理" class="headerlink" title="网络流媒体处理"></a>网络流媒体处理</h2><p><code>AVAudioPlayer</code>音频播放器只能播放本地文件，并且是一次性加载所有的音频数据，但我们有时候需要边下载边听怎么办？<br><code>AVAudioPlayer</code>是不支持这种网络流媒体形式的音频播放，要播放这种网络流媒体，我们需要使用<code>AudioToolbox</code>框架的音频队列服务<code>Audio Queue Services</code>。</p>
<p><strong>音频队列服务分为3个部分:</strong></p>
<blockquote>
<ul>
<li>3个缓冲器</li>
<li>1个缓冲队列</li>
<li>1个回调</li>
</ul>
</blockquote>
<p><strong>1. 下面是录音的音频队列服务的工作原理:</strong></p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/Learning-AV-Foundation-AVAudioRecorder/1795722-224996f89679bc19.png" alt=""></p>
<p><strong>2. 下面是播放音频的音频队列服务的工作原理;</strong></p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/Learning-AV-Foundation-AVAudioRecorder/1795722-45f6a868779059d0.png" alt=""></p>
<p>当然处理这些不需要我们自己去写C语言函数实现 有个开源库<a href="https://github.com/sunyazhou13/FreeStreamer" target="_blank" rel="external">FreeStreamer</a></p>
<p>FreeStreamer使用 </p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;FreeStreamer/FreeStreamer.h&gt;</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    [<span class="keyword">self</span> initAudioStream];</div><div class="line">    <span class="comment">//播放网络流媒体音频</span></div><div class="line">    [<span class="keyword">self</span>.audioStream play];</div><div class="line">&#125;</div><div class="line"><span class="comment">/* 初始化网络流媒体对象 */</span></div><div class="line">- (<span class="keyword">void</span>)initAudioStream&#123;</div><div class="line">    <span class="built_in">NSString</span> *urlStr = <span class="string">@"http://sc1.111ttt.com/2016/1/02/24/195242042236.mp3"</span>;</div><div class="line">    <span class="built_in">NSURL</span> *url = [<span class="built_in">NSURL</span> URLWithString:urlStr];</div><div class="line">    <span class="comment">//创建FSAudioStream对象</span></div><div class="line">    <span class="keyword">self</span>.audioStream = [[FSAudioStream alloc] initWithUrl:url];</div><div class="line">    <span class="comment">//设置播放错误回调Block</span></div><div class="line">    <span class="keyword">self</span>.audioStream.onFailure = ^(FSAudioStreamError error, <span class="built_in">NSString</span> *description)&#123;</div><div class="line">          <span class="built_in">NSLog</span>(<span class="string">@"播放过程中发生错误，错误信息：%@"</span>,description);</div><div class="line">    &#125;;</div><div class="line">    <span class="comment">//设置播放完成回调Block</span></div><div class="line">    <span class="keyword">self</span>.audioStream.onCompletion = ^()&#123;</div><div class="line">          <span class="built_in">NSLog</span>(<span class="string">@"播放完成!"</span>);</div><div class="line">    &#125;;</div><div class="line">    [<span class="keyword">self</span>.audioStream setVolume:<span class="number">0.5</span>];<span class="comment">//设置声音大小</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>有点跑远了 回到正题 本章将不会把这个写到demo中 请谅解</p>
<h1 id="下面我们来写个AVAudioRecorder的Demo-完成上述功能"><a href="#下面我们来写个AVAudioRecorder的Demo-完成上述功能" class="headerlink" title="下面我们来写个AVAudioRecorder的Demo 完成上述功能"></a>下面我们来写个<code>AVAudioRecorder</code>的Demo 完成上述功能</h1><h2 id="配置会话"><a href="#配置会话" class="headerlink" title="配置会话"></a>配置会话</h2><p>首先创建以一个AVAudioRecorderDemo工程iOS平台这些相信大家非常熟练了.</p>
<p>在<code>AppDelegate</code>里面导入<code>#import &lt;AVFoundation/AVFoundation.h&gt;</code><br>写上设置如下代码</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class="built_in">NSDictionary</span> *)launchOptions &#123;</div><div class="line">    </div><div class="line">    <span class="built_in">AVAudioSession</span> *session = [<span class="built_in">AVAudioSession</span> sharedInstance];</div><div class="line">    <span class="built_in">NSError</span> *error;</div><div class="line">    <span class="keyword">if</span> (![session setCategory:<span class="built_in">AVAudioSessionCategoryPlayAndRecord</span> error:&amp;error]) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"Category Error: %@"</span>,[error localizedDescription]);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//激活会话</span></div><div class="line">    <span class="keyword">if</span> (![session setActive:<span class="literal">YES</span> error:&amp;error]) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"Activation Error: %@"</span>,[error localizedDescription]);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这<code>AVAudioSessionCategoryPlayAndRecord</code>是<a href="http://sunyazhou.com/2017/03/17/Learning-AV-Foundation-AVAudioPlayer/" target="_blank" rel="external">上一章</a>说的那几种Category,我们需要<strong>录音+播放</strong>功能</p>
<p>下一步 配置 plist文件访问权限信息 可以参考<a href="http://localhost:4000/2017/03/20/Access-privacy-sensitive-data-private-access-permission/" target="_blank" rel="external">Access privacy-sensitive data</a>这篇文章把访问权限需要的 信息填充上.</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/Learning-AV-Foundation-AVAudioRecorder/Snip20170329_2.png" alt="plist1"></p>
<p>然后选择SourceCode<br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/Learning-AV-Foundation-AVAudioRecorder/Snip20170329_5.png" alt="plist2"></p>
<p>填写上</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 🎤 Microphone --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>NSMicrophoneUsageDescription<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>$(PRODUCT_NAME) microphone use<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div></pre></td></tr></table></figure>
<p>上边这些是为了访问本地授权, 记得授权如果第一次被拒就必须让用户手动 到通用-设置里面去配置否则将永远不好使哈。如果不写这种本地授权 程序应该会 crash   </p>
<h2 id="录音代码实现"><a href="#录音代码实现" class="headerlink" title="录音代码实现"></a>录音代码实现</h2><p>首先我们来封装一个类起名叫<code>BDRecoder</code>吧. 这里类我们让它负责所有 音频录制、暂停录制、保存录制文件等功能 并有回调函数等block.  <code>BDRecoder.h</code>看起来像下面这样, 这里后续完善的话可以加个代理 表示录制过程中意外中断或者线路切换等逻辑.</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  BDRecorder.h</span></div><div class="line"><span class="comment">//  AVAudioRecorderDemo</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by sunyazhou on 2017/3/29.</span></div><div class="line"><span class="comment">//  Copyright © 2017年 Baidu, Inc. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;AVFoundation/AVFoundation.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@class</span> <span class="title">MemoModel</span>;</span></div><div class="line"><span class="comment">//录音停止的回调</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">void</span> (^BDRecordingStopCompletionHanlder)(<span class="built_in">BOOL</span>);</div><div class="line"><span class="comment">//保存录音文件完成的回调</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">void</span> (^BDRecordingSaveCompletionHanlder)(<span class="built_in">BOOL</span>, <span class="keyword">id</span>);</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">BDRecorder</span> : <span class="title">NSObject</span></span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 外部获取当前录制的时间</div><div class="line"> * 小时:分钟:秒  当然后续可以加微秒和毫秒哈就是格式字符串 00:03:02 这样</div><div class="line"> */</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">NSString</span> *formattedCurrentTime;</div><div class="line"></div><div class="line">- (<span class="built_in">BOOL</span>)record; <span class="comment">//开始录音</span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)pause;  <span class="comment">//暂停录音</span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)stopWithCompletionHandler:(BDRecordingStopCompletionHanlder)handler;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)saveRecordingWithName:(<span class="built_in">NSString</span> *)name</div><div class="line">            completionHandler:(BDRecordingSaveCompletionHanlder)handler;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> 回放录制的文件</div><div class="line"></div><div class="line"> @param memo 备忘录文件model 放着当前播放的model</div><div class="line"> @return 是否播放成功</div><div class="line"> */</div><div class="line">- (<span class="built_in">BOOL</span>)playbackURL:(MemoModel *)memo;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p><code>BDRecoder.m</code></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  BDRecorder.m</span></div><div class="line"><span class="comment">//  AVAudioRecorderDemo</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by sunyazhou on 2017/3/29.</span></div><div class="line"><span class="comment">//  Copyright © 2017年 Baidu, Inc. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">"BDRecorder.h"</span></span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">"MemoModel.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">BDRecorder</span> () &lt;<span class="title">AVAudioRecorderDelegate</span>&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">AVAudioPlayer</span> *player;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">AVAudioRecorder</span> *recorder;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) BDRecordingStopCompletionHanlder completionHandler;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">BDRecorder</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">instancetype</span>)init &#123;</div><div class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</div><div class="line">        <span class="built_in">NSString</span> *temDir = <span class="built_in">NSTemporaryDirectory</span>();</div><div class="line">        <span class="built_in">NSString</span> *filePath = [temDir stringByAppendingPathComponent:<span class="string">@"test1.caf"</span>];</div><div class="line">        <span class="built_in">NSURL</span> *fileURL = [<span class="built_in">NSURL</span> fileURLWithPath:filePath];</div><div class="line">        </div><div class="line">        <span class="built_in">NSDictionary</span> *setting = @&#123;<span class="built_in">AVFormatIDKey</span>: @(kAudioFormatAppleIMA4),</div><div class="line">                                  <span class="built_in">AVSampleRateKey</span>: @<span class="number">44100.0</span>f,</div><div class="line">                                  <span class="built_in">AVNumberOfChannelsKey</span>: @<span class="number">1</span>,</div><div class="line">                                  <span class="built_in">AVEncoderBitDepthHintKey</span>: @<span class="number">16</span>,</div><div class="line">                                  <span class="built_in">AVEncoderAudioQualityKey</span>: @(<span class="built_in">AVAudioQualityMedium</span>)</div><div class="line">                                  &#125;;</div><div class="line">        <span class="built_in">NSError</span> *error;</div><div class="line">        <span class="keyword">self</span>.recorder = [[<span class="built_in">AVAudioRecorder</span> alloc] initWithURL:fileURL settings:setting error:&amp;error];</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">self</span>.recorder) &#123;</div><div class="line">            <span class="keyword">self</span>.recorder.delegate = <span class="keyword">self</span>;</div><div class="line">            [<span class="keyword">self</span>.recorder prepareToRecord];</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"Create Recorder Error: %@"</span>,[error localizedDescription]);</div><div class="line">        &#125; </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">BOOL</span>)record &#123;</div><div class="line">    <span class="keyword">return</span> [<span class="keyword">self</span>.recorder record];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)pause &#123;</div><div class="line">    [<span class="keyword">self</span>.recorder pause];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)stopWithCompletionHandler:(BDRecordingStopCompletionHanlder)handler &#123;</div><div class="line">    <span class="keyword">self</span>.completionHandler = handler;</div><div class="line">    [<span class="keyword">self</span>.recorder stop];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)saveRecordingWithName:(<span class="built_in">NSString</span> *)name</div><div class="line">            completionHandler:(BDRecordingSaveCompletionHanlder)handler &#123;</div><div class="line">    <span class="built_in">NSTimeInterval</span> timestamp = [<span class="built_in">NSDate</span> timeIntervalSinceReferenceDate];</div><div class="line">    <span class="built_in">NSString</span> *filename = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@-%f.caf"</span>, name, timestamp];</div><div class="line">    <span class="built_in">NSString</span> *docDir = [<span class="keyword">self</span> documentsDirectory];</div><div class="line">    <span class="built_in">NSString</span> *destPath = [docDir stringByAppendingPathComponent:filename];</div><div class="line">    <span class="built_in">NSURL</span> *srcURL = <span class="keyword">self</span>.recorder.url;</div><div class="line">    <span class="built_in">NSURL</span> *destURL = [<span class="built_in">NSURL</span> fileURLWithPath:destPath];</div><div class="line">    <span class="built_in">NSError</span> *error;</div><div class="line">    <span class="built_in">BOOL</span> success = [[<span class="built_in">NSFileManager</span> defaultManager] copyItemAtURL:srcURL toURL:destURL error:&amp;error];</div><div class="line">    <span class="keyword">if</span> (success) &#123;</div><div class="line">        MemoModel *model = [MemoModel memoWithTitle:name url:destURL];</div><div class="line">        handler(<span class="literal">YES</span>, model);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">NSString</span> *)documentsDirectory &#123;</div><div class="line">    <span class="built_in">NSArray</span> *paths = <span class="built_in">NSSearchPathForDirectoriesInDomains</span>(<span class="built_in">NSDocumentDirectory</span>, <span class="built_in">NSUserDomainMask</span>, <span class="literal">YES</span>);</div><div class="line">    <span class="keyword">return</span> [paths objectAtIndex:<span class="number">0</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)audioRecorderDidFinishRecording:(<span class="built_in">AVAudioRecorder</span> *)recorder</div><div class="line">                           successfully:(<span class="built_in">BOOL</span>)flag &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.completionHandler) &#123; <span class="keyword">self</span>.completionHandler(flag); &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>这里的<code>self.completionHandler</code>当外部调用<code>stopWithCompletionHandler</code>的时候暂存一下block是为了录音完成时告诉外部通知一下以便于可以弹出一个UIAlertView去显示保存等操作</p>
<p>当停止录音, 进入语音备忘阶段命名阶段时 让外部调用<code>saveRecordingWithName:completionHandler</code>传入文件的命名,然后我们通过<code>self.recorder.url</code>获取到URL并且copy到tmp里面是目录并命名</p>
<p>下一步要实现<code>playbackURL:</code> 这里面有个<code>MemoModel</code>参数的对象,<br>这个<code>MemoModel</code>是一个对象model放着 文件name、url…</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MemoModel</span> : <span class="title">NSObject</span> &lt;<span class="title">NSCopying</span>&gt;</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">copy</span>, <span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">NSString</span> *title;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">NSURL</span> *url;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">copy</span>, <span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">NSString</span> *dateString;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">copy</span>, <span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">NSString</span> *timeString;</div><div class="line"></div><div class="line">+ (<span class="keyword">instancetype</span>)memoWithTitle:(<span class="built_in">NSString</span> *)title url:(<span class="built_in">NSURL</span> *)url;</div><div class="line"></div><div class="line">- (<span class="built_in">BOOL</span>)deleteMemo;</div><div class="line"><span class="keyword">@end</span></div><div class="line"><span class="comment">//具体实现请参考我的最终demo</span></div></pre></td></tr></table></figure>
<p>实现播放部分需要创建播放器 这里就简单创建一下<code>AVAudioPlayer</code></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> 回放录制的文件</div><div class="line"> </div><div class="line"> @param memo 备忘录文件model 放着当前播放的model</div><div class="line"> @return 是否播放成功</div><div class="line"> */</div><div class="line">- (<span class="built_in">BOOL</span>)playbackURL:(MemoModel *)memo &#123;</div><div class="line">    [<span class="keyword">self</span>.player stop];</div><div class="line">    <span class="keyword">self</span>.player = [[<span class="built_in">AVAudioPlayer</span> alloc] initWithContentsOfURL:memo.url error:<span class="literal">nil</span>];</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.player) &#123;</div><div class="line">        [<span class="keyword">self</span>.player prepareToPlay];</div><div class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">NO</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里通过memo.url 给当前播放器播放, 这里就简单实现一下 如果需要复杂实现可以参考我上一章讲解的<code>AVAudioPlayer</code> </p>
<p>最后把显示事件部分的代码加上</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 外部获取当前录制的时间</div><div class="line"> * 小时:分钟:秒  当然后续可以加微秒和毫秒哈就是格式字符串 00:03:02 这样</div><div class="line"> */</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">NSString</span> *formattedCurrentTime;</div></pre></td></tr></table></figure>
<p>这里我们需要复写<code>formattedCurrentTime</code>get方法获取时间格式例如: 00:00:00</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> 返回当前录制的时间格式 HH:mm:ss</div><div class="line"></div><div class="line"> @return 返回组装好的字符串</div><div class="line"> */</div><div class="line">- (<span class="built_in">NSString</span> *)formattedCurrentTime &#123;</div><div class="line">    <span class="built_in">NSUInteger</span> time = (<span class="built_in">NSUInteger</span>)<span class="keyword">self</span>.recorder.currentTime;</div><div class="line">    <span class="built_in">NSInteger</span> hours = (time / <span class="number">3600</span>);</div><div class="line">    <span class="built_in">NSInteger</span> minutes = (time / <span class="number">60</span>) % <span class="number">60</span>;</div><div class="line">    <span class="built_in">NSInteger</span> seconds = time % <span class="number">60</span>;</div><div class="line">    </div><div class="line">    <span class="built_in">NSString</span> *format = <span class="string">@"%02i:%02i:%02i"</span>;</div><div class="line">    <span class="keyword">return</span> [<span class="built_in">NSString</span> stringWithFormat:format, hours, minutes, seconds];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上边大致是封装<code>BDRecorder</code>的过程</p>
<p>下面是对<code>ViewController</code>UI的设置, 设置好时间格式 我们需要在<code>ViewController</code>里 自己搞个定时器去更新录制的时间在UI上的显示, 因为<code>self.recorder.currentTime</code>是只读熟悉 没提供set方法 所以我们也无法用KVO监听recorder的属性变化. </p>
<p>代码如下:</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  ViewController.m</span></div><div class="line"><span class="comment">//  AVAudioRecorderDemo</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by sunyazhou on 2017/3/28.</span></div><div class="line"><span class="comment">//  Copyright © 2017年 Baidu, Inc. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">"ViewController.h"</span></span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;Masonry/Masonry.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;AVFoundation/AVFoundation.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">"BDRecorder.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"LevelMeterView.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"MemoModel.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"MemoCell.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"LevelPair.h"</span></span></div><div class="line"></div><div class="line"><span class="meta">#define MEMOS_ARCHIVE    @<span class="meta-string">"memos.archive"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> () &lt;<span class="title">UITableViewDelegate</span>, <span class="title">UITableViewDataSource</span>&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSMutableArray</span> &lt;MemoModel *&gt;*memos;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) BDRecorder *recorder;</div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSTimer</span> *timer;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">CADisplayLink</span> *levelTimer;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> <span class="built_in">UIView</span> *containerView;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> <span class="built_in">UIButton</span> *recordButton;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> <span class="built_in">UIButton</span> *stopButton;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> <span class="built_in">UILabel</span> *timeLabel;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> LevelMeterView *levelMeterView;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> <span class="built_in">UITableView</span> *tableview;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    </div><div class="line">    <span class="keyword">self</span>.recorder = [[BDRecorder alloc] init];</div><div class="line">    <span class="keyword">self</span>.memos = [<span class="built_in">NSMutableArray</span> array];</div><div class="line">    <span class="keyword">self</span>.stopButton.enabled = <span class="literal">NO</span>;</div><div class="line">    </div><div class="line">    <span class="built_in">UIImage</span> *recordImage = [[<span class="built_in">UIImage</span> imageNamed:<span class="string">@"record"</span>] imageWithRenderingMode:<span class="built_in">UIImageRenderingModeAlwaysOriginal</span>];</div><div class="line">    <span class="built_in">UIImage</span> *pauseImage = [[<span class="built_in">UIImage</span> imageNamed:<span class="string">@"pause"</span>] imageWithRenderingMode:<span class="built_in">UIImageRenderingModeAlwaysOriginal</span>];</div><div class="line">    <span class="built_in">UIImage</span> *stopImage = [[<span class="built_in">UIImage</span> imageNamed:<span class="string">@"stop"</span>] imageWithRenderingMode:<span class="built_in">UIImageRenderingModeAlwaysOriginal</span>];</div><div class="line">    [<span class="keyword">self</span>.recordButton setImage:recordImage forState:<span class="built_in">UIControlStateNormal</span>];</div><div class="line">    [<span class="keyword">self</span>.recordButton setImage:pauseImage forState:<span class="built_in">UIControlStateSelected</span>];</div><div class="line">    [<span class="keyword">self</span>.stopButton setImage:stopImage forState:<span class="built_in">UIControlStateNormal</span>];</div><div class="line">    </div><div class="line">    <span class="built_in">NSData</span> *data = [<span class="built_in">NSData</span> dataWithContentsOfURL:[<span class="keyword">self</span> archiveURL]];</div><div class="line">    <span class="keyword">if</span> (!data) &#123;</div><div class="line">        _memos = [<span class="built_in">NSMutableArray</span> array];</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        _memos = [<span class="built_in">NSKeyedUnarchiver</span> unarchiveObjectWithData:data];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    [<span class="keyword">self</span>.tableview registerNib:[<span class="built_in">UINib</span> nibWithNibName:<span class="string">@"MemoCell"</span> bundle:[<span class="built_in">NSBundle</span> mainBundle]] forCellReuseIdentifier:<span class="string">@"MemoCell"</span>];</div><div class="line">    </div><div class="line">    </div><div class="line">    [<span class="keyword">self</span> layoutSubveiws];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)layoutSubveiws&#123;</div><div class="line">    [<span class="keyword">self</span>.containerView mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">        make.top.equalTo(<span class="keyword">self</span>.view.mas_top).offset(<span class="number">30</span>);</div><div class="line">        make.left.equalTo(<span class="keyword">self</span>.view.mas_left).offset(<span class="number">20</span>);</div><div class="line">        make.right.equalTo(<span class="keyword">self</span>.view.mas_right).offset(<span class="number">-20</span>);</div><div class="line">        make.centerX.equalTo(<span class="keyword">self</span>.view.mas_centerX);</div><div class="line">        make.bottom.equalTo(<span class="keyword">self</span>.tableview.mas_top).offset(<span class="number">-50</span>);</div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">    [<span class="keyword">self</span>.tableview mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">        make.left.right.bottom.equalTo(<span class="keyword">self</span>.view);</div><div class="line">        make.top.equalTo(<span class="keyword">self</span>.view.mas_top).offset(<span class="number">200</span>);</div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">    </div><div class="line">    [<span class="keyword">self</span>.timeLabel mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">        make.top.left.right.equalTo(<span class="keyword">self</span>.containerView);</div><div class="line">        make.centerX.equalTo(<span class="keyword">self</span>.containerView.mas_centerX);</div><div class="line">        make.height.equalTo(@<span class="number">25</span>);</div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">    [<span class="keyword">self</span>.recordButton mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">        make.left.equalTo(<span class="keyword">self</span>.containerView.mas_left);</div><div class="line">        make.bottom.equalTo(<span class="keyword">self</span>.containerView.mas_bottom);</div><div class="line">        make.width.height.equalTo(@<span class="number">71</span>);</div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">    [<span class="keyword">self</span>.stopButton mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">        make.right.equalTo(<span class="keyword">self</span>.containerView.mas_right);</div><div class="line">        make.bottom.equalTo(<span class="keyword">self</span>.containerView.mas_bottom);</div><div class="line">        make.width.height.equalTo(@<span class="number">71</span>);</div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">    [<span class="keyword">self</span>.levelMeterView mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">        make.left.right.equalTo(<span class="keyword">self</span>.view);</div><div class="line">        make.height.equalTo(@<span class="number">30</span>);</div><div class="line">        make.bottom.equalTo(<span class="keyword">self</span>.tableview.mas_top);</div><div class="line">    &#125;];</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)startTimer &#123;</div><div class="line">    [<span class="keyword">self</span>.timer invalidate];</div><div class="line">    <span class="keyword">self</span>.timer = [<span class="built_in">NSTimer</span> timerWithTimeInterval:<span class="number">0.5</span></div><div class="line">                                         target:<span class="keyword">self</span></div><div class="line">                                       selector:<span class="keyword">@selector</span>(updateTimeDisplay)</div><div class="line">                                       userInfo:<span class="literal">nil</span></div><div class="line">                                        repeats:<span class="literal">YES</span>];</div><div class="line">    [[<span class="built_in">NSRunLoop</span> mainRunLoop] addTimer:<span class="keyword">self</span>.timer forMode:<span class="built_in">NSRunLoopCommonModes</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)stopTimer &#123;</div><div class="line">    [<span class="keyword">self</span>.timer invalidate];</div><div class="line">    <span class="keyword">self</span>.timer = <span class="literal">nil</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)updateTimeDisplay &#123;</div><div class="line">    <span class="keyword">self</span>.timeLabel.text = <span class="keyword">self</span>.recorder.formattedCurrentTime;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)startMeterTimer &#123;</div><div class="line">    [<span class="keyword">self</span>.levelTimer invalidate];</div><div class="line">    <span class="keyword">self</span>.levelTimer = [<span class="built_in">CADisplayLink</span> displayLinkWithTarget:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(updateMeter)];</div><div class="line"><span class="comment">//    if ([self.levelTimer respondsToSelector:@selector(setPreferredFramesPerSecond:)]) &#123;</span></div><div class="line"><span class="comment">//        self.levelTimer.preferredFramesPerSecond = 5;</span></div><div class="line"><span class="comment">//    &#125; else &#123;</span></div><div class="line">    <span class="keyword">self</span>.levelTimer.frameInterval = <span class="number">5</span>;</div><div class="line"><span class="comment">//    &#125;</span></div><div class="line">    [<span class="keyword">self</span>.levelTimer addToRunLoop:[<span class="built_in">NSRunLoop</span> currentRunLoop]</div><div class="line">                          forMode:<span class="built_in">NSRunLoopCommonModes</span>];</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)stopMeterTimer &#123;</div><div class="line">    [<span class="keyword">self</span>.levelTimer invalidate];</div><div class="line">    <span class="keyword">self</span>.levelTimer = <span class="literal">nil</span>;</div><div class="line">    [<span class="keyword">self</span>.levelMeterView resetLevelMeter];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)updateMeter &#123;</div><div class="line">    LevelPair *levels = [<span class="keyword">self</span>.recorder levels];</div><div class="line">    <span class="keyword">self</span>.levelMeterView.level = levels.level;</div><div class="line">    <span class="keyword">self</span>.levelMeterView.peakLevel = levels.peakLevel;</div><div class="line">    [<span class="keyword">self</span>.levelMeterView setNeedsDisplay];</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#pragma mark -</span></div><div class="line"><span class="meta">#pragma mark - UITableViewDelegate</span></div><div class="line">- (<span class="built_in">NSInteger</span>)tableView:(<span class="built_in">UITableView</span> *)tableView numberOfRowsInSection:(<span class="built_in">NSInteger</span>)section &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.memos.count;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">- (<span class="built_in">UITableViewCell</span> *)tableView:(<span class="built_in">UITableView</span> *)tableView cellForRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath &#123;</div><div class="line">    MemoCell *cell = [tableView dequeueReusableCellWithIdentifier:<span class="string">@"MemoCell"</span>];</div><div class="line">    cell.model = <span class="keyword">self</span>.memos[indexPath.row];</div><div class="line">    <span class="keyword">return</span> cell;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)tableView:(<span class="built_in">UITableView</span> *)tableView didSelectRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath&#123;</div><div class="line">    MemoModel *model = <span class="keyword">self</span>.memos[indexPath.row];</div><div class="line">    [<span class="keyword">self</span>.recorder playbackURL:model];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">BOOL</span>)tableView:(<span class="built_in">UITableView</span> *)tableView canEditRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)tableView:(<span class="built_in">UITableView</span> *)tableView commitEditingStyle:(<span class="built_in">UITableViewCellEditingStyle</span>)editingStyle forRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath &#123;</div><div class="line">    <span class="keyword">if</span> (editingStyle == <span class="built_in">UITableViewCellEditingStyleDelete</span>) &#123;</div><div class="line">        MemoModel *memo = <span class="keyword">self</span>.memos[indexPath.row];</div><div class="line">        [memo deleteMemo];</div><div class="line">        [<span class="keyword">self</span>.memos removeObjectAtIndex:indexPath.row];</div><div class="line">        [<span class="keyword">self</span> saveMemos];</div><div class="line">        [tableView deleteRowsAtIndexPaths:@[indexPath] withRowAnimation:<span class="built_in">UITableViewRowAnimationAutomatic</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">CGFloat</span>)tableView:(<span class="built_in">UITableView</span> *)tableView heightForRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath &#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">80</span>;</div><div class="line">&#125;</div><div class="line"><span class="meta">#pragma mark - event response 所有触发的事件响应 按钮、通知、分段控件等</span></div><div class="line">- (<span class="keyword">IBAction</span>)record:(<span class="built_in">UIButton</span> *)sender &#123;</div><div class="line">    <span class="keyword">self</span>.stopButton.enabled = <span class="literal">YES</span>;</div><div class="line">    <span class="keyword">if</span> ([sender isSelected]) &#123;</div><div class="line">        [<span class="keyword">self</span> stopMeterTimer];</div><div class="line">        [<span class="keyword">self</span> stopTimer];</div><div class="line">        [<span class="keyword">self</span>.recorder pause];</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        [<span class="keyword">self</span> startMeterTimer];</div><div class="line">        [<span class="keyword">self</span> startTimer];</div><div class="line">        [<span class="keyword">self</span>.recorder record];</div><div class="line">    &#125;</div><div class="line">    [sender setSelected:![sender isSelected]];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">IBAction</span>)stopRecording:(<span class="built_in">UIButton</span> *)sender &#123;</div><div class="line">    [<span class="keyword">self</span> stopMeterTimer];</div><div class="line">    <span class="keyword">self</span>.recordButton.selected = <span class="literal">NO</span>;</div><div class="line">    <span class="keyword">self</span>.stopButton.enabled = <span class="literal">NO</span>;</div><div class="line">    [<span class="keyword">self</span>.recorder stopWithCompletionHandler:^(<span class="built_in">BOOL</span> result) &#123;</div><div class="line">        <span class="keyword">double</span> delayInSeconds = <span class="number">0.01</span>;</div><div class="line">        dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, (int64_t) (delayInSeconds * <span class="built_in">NSEC_PER_SEC</span>));</div><div class="line">        dispatch_after(popTime, dispatch_get_main_queue(), ^&#123;</div><div class="line">            [<span class="keyword">self</span> showSaveDialog];</div><div class="line">        &#125;);</div><div class="line">    &#125;];</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)showSaveDialog &#123;</div><div class="line">    <span class="built_in">UIAlertController</span> *alertController = [<span class="built_in">UIAlertController</span> alertControllerWithTitle:<span class="string">@"保存录音"</span> message:<span class="string">@"输入名称"</span> preferredStyle:<span class="built_in">UIAlertControllerStyleAlert</span>];</div><div class="line">    [alertController addTextFieldWithConfigurationHandler:^(<span class="built_in">UITextField</span> * _Nonnull textField) &#123;</div><div class="line">       textField.placeholder = <span class="string">@"我的录音"</span>;</div><div class="line">    &#125;];</div><div class="line">    <span class="built_in">UIAlertAction</span> *cancelAction = [<span class="built_in">UIAlertAction</span> actionWithTitle:<span class="string">@"Cancel"</span> style:<span class="built_in">UIAlertActionStyleCancel</span> handler:<span class="literal">nil</span>];</div><div class="line">    <span class="built_in">UIAlertAction</span> *okAction = [<span class="built_in">UIAlertAction</span> actionWithTitle:<span class="string">@"OK"</span> style:<span class="built_in">UIAlertActionStyleDefault</span> handler:^(<span class="built_in">UIAlertAction</span> * _Nonnull action) &#123;</div><div class="line">        <span class="built_in">NSString</span> *filename = [alertController.textFields.firstObject text];</div><div class="line">        [<span class="keyword">self</span>.recorder saveRecordingWithName:filename completionHandler:^(<span class="built_in">BOOL</span> success, <span class="keyword">id</span> object) &#123;</div><div class="line">            <span class="keyword">if</span> (success) &#123;</div><div class="line">                [<span class="keyword">self</span>.memos insertObject:object atIndex:<span class="number">0</span>];</div><div class="line">                [<span class="keyword">self</span> saveMemos];</div><div class="line">                [<span class="keyword">self</span>.tableview reloadData];</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="built_in">NSLog</span>(<span class="string">@"Error saving file: %@"</span>, [object localizedDescription]);</div><div class="line">            &#125;</div><div class="line">        &#125;];</div><div class="line">    &#125;];</div><div class="line">    [alertController addAction:cancelAction];</div><div class="line">    [alertController addAction:okAction];</div><div class="line">    </div><div class="line">    [<span class="keyword">self</span> presentViewController:alertController animated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#pragma mark - Memo Archiving</span></div><div class="line"><span class="comment">//保存备忘录model  这里简单用归档的方式存储一下</span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)saveMemos &#123;</div><div class="line">    <span class="built_in">NSData</span> *fileData = [<span class="built_in">NSKeyedArchiver</span> archivedDataWithRootObject:<span class="keyword">self</span>.memos];</div><div class="line">    [fileData writeToURL:[<span class="keyword">self</span> archiveURL] atomically:<span class="literal">YES</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//存储归档的路径</span></div><div class="line">- (<span class="built_in">NSURL</span> *)archiveURL &#123;</div><div class="line">    <span class="built_in">NSArray</span> *paths = <span class="built_in">NSSearchPathForDirectoriesInDomains</span>(<span class="built_in">NSDocumentDirectory</span>, <span class="built_in">NSUserDomainMask</span>, <span class="literal">YES</span>);</div><div class="line">    <span class="built_in">NSString</span> *docsDir = [paths objectAtIndex:<span class="number">0</span>];</div><div class="line">    <span class="built_in">NSString</span> *archivePath = [docsDir stringByAppendingPathComponent:MEMOS_ARCHIVE];</div><div class="line">    <span class="keyword">return</span> [<span class="built_in">NSURL</span> fileURLWithPath:archivePath];</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)didReceiveMemoryWarning &#123;</div><div class="line">    [<span class="keyword">super</span> didReceiveMemoryWarning];</div><div class="line">    <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>代码稍稍有点长  我简单说一下 大家可以参照最终的demo</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSMutableArray</span> &lt;MemoModel *&gt;*memos;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) BDRecorder *recorder;</div></pre></td></tr></table></figure>
<p>声明一个数组 存放需要播放的model对象信息 名称 文件url、日期等</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSTimer</span> *timer;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">CADisplayLink</span> *levelTimer;</div></pre></td></tr></table></figure>
<p>一个timer用于 刷新录制时间<br><code>levelTimer</code>用于刷新录制的视波图也叫<code>Audio Metering</code>对音频进行计量</p>
<p>在<code>BDRecorder</code>中增加了</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (LevelPair *)levels &#123;</div><div class="line">    [<span class="keyword">self</span>.recorder updateMeters];</div><div class="line">    <span class="keyword">float</span> avgPower = [<span class="keyword">self</span>.recorder averagePowerForChannel:<span class="number">0</span>];</div><div class="line">    <span class="keyword">float</span> peakPower = [<span class="keyword">self</span>.recorder peakPowerForChannel:<span class="number">0</span>];</div><div class="line">    <span class="keyword">float</span> linearLevel = [<span class="keyword">self</span>.meterTable valueForPower:avgPower];</div><div class="line">    <span class="keyword">float</span> linearPeak = [<span class="keyword">self</span>.meterTable valueForPower:peakPower];</div><div class="line">    <span class="keyword">return</span> [LevelPair levelsWithLevel:linearLevel peakLevel:linearPeak];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这两个方法</p>
<pre><code>1. averagePowerForChannel取出波谷平均值
2. peakPowerForChannel取出波峰 
</code></pre><p>两个方法都会返回一个用于表示声音分贝(dB)等级的浮点值. 这个值的表示范围<code>0dB(fullscale) ~ -160dB</code> 0dB最大  -160dB最小</p>
<p><strong>开启音频计量 (需要在<code>BDRecorder</code>中开启, 如下代码) 会带来很多额外的开销，但我觉得还是很划算的 毕竟要显示视觉效果才是王道.<br>如果<code>meteringEnabled</code>开启则音频录音器就会对捕捉到的音频样本进行分贝计算。</strong></p>
<p><strong>开启音频计量(Audio Metering)方法:</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="keyword">self</span>.recorder.meteringEnabled = <span class="literal">YES</span>;</div></pre></td></tr></table></figure>
<p>更新前调用了如下代码</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (LevelPair *)levels &#123;</div><div class="line">    [<span class="keyword">self</span>.recorder updateMeters];</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>每当读取值之前需要调用<code>[self.recorder updateMeters]</code>方法才能获取到最新值，否则可能获取的不够精确</p>
<p>然后 使用<code>MeterTable</code>类 声明的函数<code>valueForPower:</code> 把上边两个阀值 转成线性运算</p>
<p><strong>就是分贝值从对数形式的<code>-160 ~ 0</code>范围转换为线性0到1的形式.</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  MeterTable.m</span></div><div class="line"><span class="comment">//  AVAudioRecorderDemo</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by sunyazhou on 2017/4/5.</span></div><div class="line"><span class="comment">//  Copyright © 2017年 Baidu, Inc. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">"MeterTable.h"</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#define MIN_DB -60.0f</span></div><div class="line"><span class="meta">#define TABLE_SIZE 300</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">MeterTable</span> </span>&#123;</div><div class="line">    <span class="keyword">float</span> _scaleFactor;</div><div class="line">    <span class="built_in">NSMutableArray</span> *_meterTable;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">id</span>)init &#123;</div><div class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</div><div class="line">        <span class="keyword">float</span> dbResolution = MIN_DB / (TABLE_SIZE - <span class="number">1</span>);</div><div class="line">        </div><div class="line">        _meterTable = [<span class="built_in">NSMutableArray</span> arrayWithCapacity:TABLE_SIZE];</div><div class="line">        _scaleFactor = <span class="number">1.0</span>f / dbResolution;</div><div class="line">        </div><div class="line">        <span class="keyword">float</span> minAmp = dbToAmp(MIN_DB);</div><div class="line">        <span class="keyword">float</span> ampRange = <span class="number">1.0</span> - minAmp;</div><div class="line">        <span class="keyword">float</span> invAmpRange = <span class="number">1.0</span> / ampRange;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; TABLE_SIZE; i++) &#123;</div><div class="line">            <span class="keyword">float</span> decibels = i * dbResolution;</div><div class="line">            <span class="keyword">float</span> amp = dbToAmp(decibels);</div><div class="line">            <span class="keyword">float</span> adjAmp = (amp - minAmp) * invAmpRange;</div><div class="line">            _meterTable[i] = @(adjAmp);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">float</span> dbToAmp(<span class="keyword">float</span> dB) &#123;</div><div class="line">    <span class="keyword">return</span> powf(<span class="number">10.0</span>f, <span class="number">0.05</span>f * dB);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">float</span>)valueForPower:(<span class="keyword">float</span>)power &#123;</div><div class="line">    <span class="keyword">if</span> (power &lt; MIN_DB) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0.0</span>f;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (power &gt;= <span class="number">0.0</span>f) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1.0</span>f;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">int</span> index = (<span class="keyword">int</span>) (power * _scaleFactor);</div><div class="line">        <span class="keyword">return</span> [_meterTable[index] floatValue];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<blockquote>
<p><strong>这个类创建了一个数组<code>_meterTable</code>保存从计算前的分贝数到使用一定级别分贝解析之后的转换结果, 这里使用的解析率<code>-0.2dB</code>, 解析等级可以通过<code>MIN_DB</code> <code>TABLE_SIZE</code>这两个宏的值来修改,每个分贝值都调用<code>dbToAmp:</code>函数转换为线性范围内的值,使其处于<code>0(-60dB) ~ 1()</code>范围内, 之后由这些范围内的值构成平行曲线,开平方计算并保存到内部查找表格中. 然后如果外部需要可以调用<code>valueForPower:</code>来获取.</strong></p>
</blockquote>
<p>然后保存到<code>LevelPair</code>的实例对象返回 这个实例很简单存放两个值一个<code>level</code>一个<code>peakLevel</code></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">LevelPair</span> : <span class="title">NSObject</span></span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="keyword">float</span> level;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="keyword">float</span> peakLevel;</div><div class="line"></div><div class="line">+ (<span class="keyword">instancetype</span>)levelsWithLevel:(<span class="keyword">float</span>)level peakLevel:(<span class="keyword">float</span>)peakLevel;</div><div class="line"></div><div class="line">- (<span class="keyword">instancetype</span>)initWithLevel:(<span class="keyword">float</span>)level peakLevel:(<span class="keyword">float</span>)peakLevel;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>在<code>ViewController</code>中显示相关的UI </p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)startTimer &#123;</div><div class="line">    [<span class="keyword">self</span>.timer invalidate];</div><div class="line">    <span class="keyword">self</span>.timer = [<span class="built_in">NSTimer</span> timerWithTimeInterval:<span class="number">0.5</span></div><div class="line">                                         target:<span class="keyword">self</span></div><div class="line">                                       selector:<span class="keyword">@selector</span>(updateTimeDisplay)</div><div class="line">                                       userInfo:<span class="literal">nil</span></div><div class="line">                                        repeats:<span class="literal">YES</span>];</div><div class="line">    [[<span class="built_in">NSRunLoop</span> mainRunLoop] addTimer:<span class="keyword">self</span>.timer forMode:<span class="built_in">NSRunLoopCommonModes</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)stopTimer &#123;</div><div class="line">    [<span class="keyword">self</span>.timer invalidate];</div><div class="line">    <span class="keyword">self</span>.timer = <span class="literal">nil</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)updateTimeDisplay &#123;</div><div class="line">    <span class="keyword">self</span>.timeLabel.text = <span class="keyword">self</span>.recorder.formattedCurrentTime;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)startMeterTimer &#123;</div><div class="line">    [<span class="keyword">self</span>.levelTimer invalidate];</div><div class="line">    <span class="keyword">self</span>.levelTimer = [<span class="built_in">CADisplayLink</span> displayLinkWithTarget:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(updateMeter)];</div><div class="line"><span class="comment">//    if ([self.levelTimer respondsToSelector:@selector(setPreferredFramesPerSecond:)]) &#123;</span></div><div class="line"><span class="comment">//        self.levelTimer.preferredFramesPerSecond = 5;</span></div><div class="line"><span class="comment">//    &#125; else &#123;</span></div><div class="line">    <span class="keyword">self</span>.levelTimer.frameInterval = <span class="number">5</span>;</div><div class="line"><span class="comment">//    &#125;</span></div><div class="line">    [<span class="keyword">self</span>.levelTimer addToRunLoop:[<span class="built_in">NSRunLoop</span> currentRunLoop]</div><div class="line">                          forMode:<span class="built_in">NSRunLoopCommonModes</span>];</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)stopMeterTimer &#123;</div><div class="line">    [<span class="keyword">self</span>.levelTimer invalidate];</div><div class="line">    <span class="keyword">self</span>.levelTimer = <span class="literal">nil</span>;</div><div class="line">    [<span class="keyword">self</span>.levelMeterView resetLevelMeter];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)updateMeter &#123;</div><div class="line">    LevelPair *levels = [<span class="keyword">self</span>.recorder levels];</div><div class="line">    <span class="keyword">self</span>.levelMeterView.level = levels.level;</div><div class="line">    <span class="keyword">self</span>.levelMeterView.peakLevel = levels.peakLevel;</div><div class="line">    [<span class="keyword">self</span>.levelMeterView setNeedsDisplay];</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>用于定时器的处理</p>
<p>事件的相关响应</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="meta">#pragma mark - event response 所有触发的事件响应 按钮、通知、分段控件等</span></div><div class="line">- (<span class="keyword">IBAction</span>)record:(<span class="built_in">UIButton</span> *)sender &#123;</div><div class="line">    <span class="keyword">self</span>.stopButton.enabled = <span class="literal">YES</span>;</div><div class="line">    <span class="keyword">if</span> ([sender isSelected]) &#123;</div><div class="line">        [<span class="keyword">self</span> stopMeterTimer];</div><div class="line">        [<span class="keyword">self</span> stopTimer];</div><div class="line">        [<span class="keyword">self</span>.recorder pause];</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        [<span class="keyword">self</span> startMeterTimer];</div><div class="line">        [<span class="keyword">self</span> startTimer];</div><div class="line">        [<span class="keyword">self</span>.recorder record];</div><div class="line">    &#125;</div><div class="line">    [sender setSelected:![sender isSelected]];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">IBAction</span>)stopRecording:(<span class="built_in">UIButton</span> *)sender &#123;</div><div class="line">    [<span class="keyword">self</span> stopMeterTimer];</div><div class="line">    <span class="keyword">self</span>.recordButton.selected = <span class="literal">NO</span>;</div><div class="line">    <span class="keyword">self</span>.stopButton.enabled = <span class="literal">NO</span>;</div><div class="line">    [<span class="keyword">self</span>.recorder stopWithCompletionHandler:^(<span class="built_in">BOOL</span> result) &#123;</div><div class="line">        <span class="keyword">double</span> delayInSeconds = <span class="number">0.01</span>;</div><div class="line">        dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, (int64_t) (delayInSeconds * <span class="built_in">NSEC_PER_SEC</span>));</div><div class="line">        dispatch_after(popTime, dispatch_get_main_queue(), ^&#123;</div><div class="line">            [<span class="keyword">self</span> showSaveDialog];</div><div class="line">        &#125;);</div><div class="line">    &#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里保存数据使用的是归档方式</p>
<p><code>BDRecorder</code>没有 处理意外中断等情况 比如外接麦克风 和音频意外来电等，如果需要处理 就可以在<code>BDRecorder</code>中声明几个代理监听音频回话的那几个通知就可以了 这里出于学习为目的就简单写到这里吧，如果大家需求强烈我可以回头补上并开源。</p>
<p>很多人纠结如何根据波形绘制更好的图 我这里是借助本书作者的demo完成相关波形处理的视图。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"LevelMeterView.h"</span></span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">"LevelMeterColorThreshold.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">LevelMeterView</span> ()</span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">NSUInteger</span> ledCount;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) <span class="built_in">UIColor</span> *ledBackgroundColor;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) <span class="built_in">UIColor</span> *ledBorderColor;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSArray</span> *colorThresholds;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">LevelMeterView</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">id</span>)initWithFrame:(<span class="built_in">CGRect</span>)frame &#123;</div><div class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> initWithFrame:frame];</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</div><div class="line">        [<span class="keyword">self</span> setupView];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">id</span>)initWithCoder:(<span class="built_in">NSCoder</span> *)coder &#123;</div><div class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> initWithCoder:coder];</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</div><div class="line">        [<span class="keyword">self</span> setupView];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)setupView &#123;</div><div class="line">    </div><div class="line">    <span class="keyword">self</span>.backgroundColor = [<span class="built_in">UIColor</span> clearColor];</div><div class="line">    </div><div class="line">    _ledCount = <span class="number">20</span>;</div><div class="line">    </div><div class="line">    _ledBackgroundColor = [<span class="built_in">UIColor</span> colorWithWhite:<span class="number">0.0</span>f alpha:<span class="number">0.35</span>f];</div><div class="line">    _ledBorderColor = [<span class="built_in">UIColor</span> blackColor];</div><div class="line">    </div><div class="line">    <span class="built_in">UIColor</span> *greenColor = [<span class="built_in">UIColor</span> colorWithRed:<span class="number">0.458</span> green:<span class="number">1.000</span> blue:<span class="number">0.396</span> alpha:<span class="number">1.000</span>];</div><div class="line">    <span class="built_in">UIColor</span> *yellowColor = [<span class="built_in">UIColor</span> colorWithRed:<span class="number">1.000</span> green:<span class="number">0.930</span> blue:<span class="number">0.315</span> alpha:<span class="number">1.000</span>];</div><div class="line">    <span class="built_in">UIColor</span> *redColor = [<span class="built_in">UIColor</span> colorWithRed:<span class="number">1.000</span> green:<span class="number">0.325</span> blue:<span class="number">0.329</span> alpha:<span class="number">1.000</span>];</div><div class="line">    </div><div class="line">    _colorThresholds = @[[LevelMeterColorThreshold colorThresholdWithMaxValue:<span class="number">0.5</span> color:greenColor name:<span class="string">@"green"</span>],</div><div class="line">                         [LevelMeterColorThreshold colorThresholdWithMaxValue:<span class="number">0.8</span> color:yellowColor name:<span class="string">@"yellow"</span>],</div><div class="line">                         [LevelMeterColorThreshold colorThresholdWithMaxValue:<span class="number">1.0</span> color:redColor name:<span class="string">@"red"</span>]];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)drawRect:(<span class="built_in">CGRect</span>)rect &#123;</div><div class="line">    </div><div class="line">    <span class="built_in">CGContextRef</span> context = <span class="built_in">UIGraphicsGetCurrentContext</span>();</div><div class="line">    </div><div class="line">    <span class="built_in">CGContextTranslateCTM</span>(context, <span class="number">0</span>, <span class="built_in">CGRectGetHeight</span>(<span class="keyword">self</span>.bounds));</div><div class="line">    <span class="built_in">CGContextRotateCTM</span>(context, (<span class="built_in">CGFloat</span>) -M_PI_2);</div><div class="line">    <span class="built_in">CGRect</span> bounds = <span class="built_in">CGRectMake</span>(<span class="number">0.</span>, <span class="number">0.</span>, [<span class="keyword">self</span> bounds].size.height, [<span class="keyword">self</span> bounds].size.width);</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="built_in">CGFloat</span> lightMinValue = <span class="number">0.0</span>f;</div><div class="line">    </div><div class="line">    <span class="built_in">NSInteger</span> peakLED = <span class="number">-1</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.peakLevel &gt; <span class="number">0.0</span>f) &#123;</div><div class="line">        peakLED = <span class="keyword">self</span>.peakLevel * <span class="keyword">self</span>.ledCount;</div><div class="line">        <span class="keyword">if</span> (peakLED &gt;= <span class="keyword">self</span>.ledCount) &#123;</div><div class="line">            peakLED = <span class="keyword">self</span>.ledCount - <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> ledIndex = <span class="number">0</span>; ledIndex &lt; <span class="keyword">self</span>.ledCount; ledIndex++) &#123;</div><div class="line">        </div><div class="line">        <span class="built_in">UIColor</span> *ledColor = [<span class="keyword">self</span>.colorThresholds[<span class="number">0</span>] color];</div><div class="line">        </div><div class="line">        <span class="built_in">CGFloat</span> ledMaxValue = (<span class="built_in">CGFloat</span>) (ledIndex + <span class="number">1</span>) / <span class="keyword">self</span>.ledCount;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> colorIndex = <span class="number">0</span>; colorIndex &lt; <span class="keyword">self</span>.colorThresholds.count - <span class="number">1</span>; colorIndex++) &#123;</div><div class="line">            LevelMeterColorThreshold *currThreshold = <span class="keyword">self</span>.colorThresholds[colorIndex];</div><div class="line">            LevelMeterColorThreshold *nextThreshold = <span class="keyword">self</span>.colorThresholds[colorIndex + <span class="number">1</span>];</div><div class="line">            <span class="keyword">if</span> (currThreshold.maxValue &lt;= ledMaxValue) &#123;</div><div class="line">                ledColor = nextThreshold.color;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="built_in">CGFloat</span> height = <span class="built_in">CGRectGetHeight</span>(bounds);</div><div class="line">        <span class="built_in">CGFloat</span> width = <span class="built_in">CGRectGetWidth</span>(bounds);</div><div class="line">        </div><div class="line">        <span class="built_in">CGRect</span> ledRect = <span class="built_in">CGRectMake</span>(<span class="number">0.0</span>f, height * ((<span class="built_in">CGFloat</span>) ledIndex / <span class="keyword">self</span>.ledCount), width, height * (<span class="number">1.0</span>f / <span class="keyword">self</span>.ledCount));</div><div class="line">        </div><div class="line">        <span class="comment">// Fill background color</span></div><div class="line">        <span class="built_in">CGContextSetFillColorWithColor</span>(context, <span class="keyword">self</span>.ledBackgroundColor.CGColor);</div><div class="line">        <span class="built_in">CGContextFillRect</span>(context, ledRect);</div><div class="line">        </div><div class="line">        <span class="comment">// Draw Light</span></div><div class="line">        <span class="built_in">CGFloat</span> lightIntensity;</div><div class="line">        <span class="keyword">if</span> (ledIndex == peakLED) &#123;</div><div class="line">            lightIntensity = <span class="number">1.0</span>f;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            lightIntensity = clamp((<span class="keyword">self</span>.level - lightMinValue) / (ledMaxValue - lightMinValue));</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="built_in">UIColor</span> *fillColor = <span class="literal">nil</span>;</div><div class="line">        <span class="keyword">if</span> (lightIntensity == <span class="number">1.0</span>f) &#123;</div><div class="line">            fillColor = ledColor;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (lightIntensity &gt; <span class="number">0.0</span>f) &#123;</div><div class="line">            <span class="built_in">CGColorRef</span> color = <span class="built_in">CGColorCreateCopyWithAlpha</span>([ledColor <span class="built_in">CGColor</span>], lightIntensity);</div><div class="line">            fillColor = [<span class="built_in">UIColor</span> colorWithCGColor:color];</div><div class="line">            <span class="built_in">CGColorRelease</span>(color);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="built_in">CGContextSetFillColorWithColor</span>(context, fillColor.CGColor);</div><div class="line">        <span class="built_in">UIBezierPath</span> *fillPath = [<span class="built_in">UIBezierPath</span> bezierPathWithRoundedRect:ledRect cornerRadius:<span class="number">2.0</span>f];</div><div class="line">        <span class="built_in">CGContextAddPath</span>(context, fillPath.CGPath);</div><div class="line">        </div><div class="line">        <span class="comment">// Stroke border</span></div><div class="line">        <span class="built_in">CGContextSetStrokeColorWithColor</span>(context, <span class="keyword">self</span>.ledBorderColor.CGColor);</div><div class="line">        <span class="built_in">UIBezierPath</span> *strokePath = [<span class="built_in">UIBezierPath</span> bezierPathWithRoundedRect:<span class="built_in">CGRectInset</span>(ledRect, <span class="number">0.5</span>, <span class="number">0.5</span>) cornerRadius:<span class="number">2.0</span>f];</div><div class="line">        <span class="built_in">CGContextAddPath</span>(context, strokePath.CGPath);</div><div class="line">        </div><div class="line">        <span class="built_in">CGContextDrawPath</span>(context, kCGPathFillStroke);</div><div class="line">        </div><div class="line">        lightMinValue = ledMaxValue;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">CGFloat</span> clamp(<span class="built_in">CGFloat</span> intensity) &#123;</div><div class="line">    <span class="keyword">if</span> (intensity &lt; <span class="number">0.0</span>f) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0.0</span>f;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (intensity &gt;= <span class="number">1.0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1.0</span>f;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> intensity;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)resetLevelMeter &#123;</div><div class="line">    <span class="keyword">self</span>.level = <span class="number">0.0</span>f;</div><div class="line">    <span class="keyword">self</span>.peakLevel = <span class="number">0.0</span>f;</div><div class="line">    [<span class="keyword">self</span> setNeedsDisplay];</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>这里给出了level和peak的阀值 有很多第三方开源的view大家可以自行研究一下 很简单 就是把相关阀值量化的过程。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>AVAudioRecorder</code> 的学习还算完整的搞完了,随时记录一下学习内容和技术知识。</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/Learning-AV-Foundation-AVAudioRecorder/IMG_0114.PNG" alt=""></p>
<p><strong>最终<a href="https://github.com/sunyazhou13/AVAudioRecorderDemo" target="_blank" rel="external">Demo</a></strong></p>
<p>欢迎大家指正错误 全文完</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/Learning-AV-Foundation-AVAudioRecorder/stock-
    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="macOS开发" scheme="https://www.sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>判断NSWindow是否全屏</title>
    <link href="https://www.sunyazhou.com/2017/03/23/check-NSWindow-isFullScreen/"/>
    <id>https://www.sunyazhou.com/2017/03/23/check-NSWindow-isFullScreen/</id>
    <published>2017-03-23T06:03:32.000Z</published>
    <updated>2017-03-29T23:56:19.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSWindow</span> (<span class="title">FullScreen</span>)</span></div><div class="line"></div><div class="line">- (<span class="built_in">BOOL</span>)mn_isFullScreen;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSWindow</span> (<span class="title">FullScreen</span>)</span></div><div class="line"></div><div class="line">- (<span class="built_in">BOOL</span>)mn_isFullScreen</div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> (([<span class="keyword">self</span> styleMask] &amp; <span class="built_in">NSFullScreenWindowMask</span>) == <span class="built_in">NSFullScreenWindowMask</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>refs:<a href="http://stackoverflow.com/questions/6815917/how-to-know-if-a-nswindow-is-fullscreen-in-mac-os-x-lion" target="_blank" rel="external">How to know if a NSWindow is fullscreen in Mac OS X Lion?</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span
    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="macOS开发" scheme="https://www.sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Access privacy-sensitive data 隐私及敏感数据访问权限</title>
    <link href="https://www.sunyazhou.com/2017/03/20/Access-privacy-sensitive-data-private-access-permission/"/>
    <id>https://www.sunyazhou.com/2017/03/20/Access-privacy-sensitive-data-private-access-permission/</id>
    <published>2017-03-20T02:54:40.000Z</published>
    <updated>2017-03-29T23:56:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>在你访问照相机、通讯录、等等隐私以及敏感数据之前，你必须请求授权。否则你的app会在你尝试访问这些隐私时崩溃。Xcode会log这些：</p>
<blockquote>
<p>This app has crashed because it attempted to access privacy-sensitive data without a usage description. The app’s Info.plist must contain an NSContactsUsageDescription key with a string value explaining to the user how the app uses this data.</p>
</blockquote>
<p>打开你工程中名叫 <code>info.plist</code> 的文件，右键点击选择 <code>opening as Source Code</code>，把下面的代码粘贴进去。或者你可以使用默认的 <code>Property List</code> 打开 <code>info.plist</code>，点击add按钮，当你输入 <code>Privacy</code> - Xcode会给你自动补全的建议，用上下键去选择吧。</p>
<p>私有数据的框架列表可是个不小的东西:  </p>
<blockquote>
<p>通讯录 日历 提醒 照片 蓝牙共享 耳机 相机 定位 健康 homeKit 多媒体库 运动 callKit 语音识别 SiriKit TV Provider</p>
</blockquote>
<p>参考 <a href="https://github.com/ChenYilong/iOS10AdaptationTips" target="_blank" rel="external">这个大神</a></p>
<figure class="highlight"><table><tr><td class="code"><pre><div class="line">&lt;!-- 🖼 Photo Library --&gt;</div><div class="line">&lt;key&gt;NSPhotoLibraryUsageDescription&lt;/key&gt;</div><div class="line">&lt;string&gt;$(PRODUCT_NAME) photo use&lt;/string&gt;</div><div class="line"></div><div class="line">&lt;!-- 📷 Camera --&gt;</div><div class="line">&lt;key&gt;NSCameraUsageDescription&lt;/key&gt;</div><div class="line">&lt;string&gt;$(PRODUCT_NAME) camera use&lt;/string&gt;</div><div class="line"></div><div class="line">&lt;!-- 🎤 Microphone --&gt;</div><div class="line">&lt;key&gt;NSMicrophoneUsageDescription&lt;/key&gt;</div><div class="line">&lt;string&gt;$(PRODUCT_NAME) microphone use&lt;/string&gt;</div><div class="line"></div><div class="line">&lt;!-- 📍 Location --&gt;</div><div class="line">&lt;key&gt;NSLocationUsageDescription&lt;/key&gt;</div><div class="line">&lt;string&gt;$(PRODUCT_NAME) location use&lt;/string&gt;</div><div class="line"></div><div class="line">&lt;!-- 📍 Location When In Use --&gt;</div><div class="line">&lt;key&gt;NSLocationWhenInUseUsageDescription&lt;/key&gt;</div><div class="line">&lt;string&gt;$(PRODUCT_NAME) location use&lt;/string&gt;</div><div class="line"></div><div class="line">&lt;!-- 📍 Location Always --&gt;</div><div class="line">&lt;key&gt;NSLocationAlwaysUsageDescription&lt;/key&gt;</div><div class="line">&lt;string&gt;$(PRODUCT_NAME) always uses location &lt;/string&gt;</div><div class="line"></div><div class="line">&lt;!-- 📆 Calendars --&gt;</div><div class="line">&lt;key&gt;NSCalendarsUsageDescription&lt;/key&gt;</div><div class="line">&lt;string&gt;$(PRODUCT_NAME) calendar events&lt;/string&gt;</div><div class="line"></div><div class="line">&lt;!-- ⏰ Reminders --&gt;</div><div class="line">&lt;key&gt;NSRemindersUsageDescription&lt;/key&gt;</div><div class="line">&lt;string&gt;$(PRODUCT_NAME) reminder use&lt;/string&gt;</div><div class="line"></div><div class="line">&lt;!-- 📒 Contacts --&gt;</div><div class="line">&lt;key&gt;NSContactsUsageDescription&lt;/key&gt;</div><div class="line">&lt;string&gt;$(PRODUCT_NAME) contact use&lt;/string&gt;</div><div class="line"></div><div class="line">&lt;!-- 🏊 Motion --&gt;</div><div class="line">&lt;key&gt;NSMotionUsageDescription&lt;/key&gt;</div><div class="line">&lt;string&gt;$(PRODUCT_NAME) motion use&lt;/string&gt;</div><div class="line"></div><div class="line">&lt;!-- 💊 Health Update --&gt;</div><div class="line">&lt;key&gt;NSHealthUpdateUsageDescription&lt;/key&gt;</div><div class="line">&lt;string&gt;$(PRODUCT_NAME) heath update use&lt;/string&gt;</div><div class="line"></div><div class="line">&lt;!-- 💊 Health Share --&gt;</div><div class="line">&lt;key&gt;NSHealthShareUsageDescription&lt;/key&gt;</div><div class="line">&lt;string&gt;$(PRODUCT_NAME) heath share use&lt;/string&gt;</div><div class="line"></div><div class="line">&lt;!-- ᛒ🔵 Bluetooth Peripheral --&gt;</div><div class="line">&lt;key&gt;NSBluetoothPeripheralUsageDescription&lt;/key&gt;</div><div class="line">&lt;string&gt;$(PRODUCT_NAME) Bluetooth Peripheral use&lt;/string&gt;</div><div class="line"></div><div class="line">&lt;!-- 🎵 Media Library --&gt;</div><div class="line">&lt;key&gt;NSAppleMusicUsageDescription&lt;/key&gt;</div><div class="line">&lt;string&gt;$(PRODUCT_NAME) media library use&lt;/string&gt;</div><div class="line"></div><div class="line">&lt;!-- 📱 Siri --&gt;</div><div class="line">&lt;key&gt;NSSiriUsageDescription&lt;/key&gt;</div><div class="line">&lt;string&gt;$(PRODUCT_NAME) siri use&lt;/string&gt;</div><div class="line"></div><div class="line">&lt;!-- 🏡 HomeKit --&gt;</div><div class="line">&lt;key&gt;NSHomeKitUsageDescription&lt;/key&gt;</div><div class="line">&lt;string&gt;$(PRODUCT_NAME) home kit use&lt;/string&gt;</div><div class="line"></div><div class="line">&lt;!-- 📻 SpeechRecognition --&gt;</div><div class="line">&lt;key&gt;NSSpeechRecognitionUsageDescription&lt;/key&gt;</div><div class="line">&lt;string&gt;$(PRODUCT_NAME) speech use&lt;/string&gt;</div><div class="line"></div><div class="line">&lt;!-- 📺 VideoSubscriber --&gt;</div><div class="line">&lt;key&gt;NSVideoSubscriberAccountUsageDescription&lt;/key&gt;</div><div class="line">&lt;string&gt;$(PRODUCT_NAME) tvProvider use&lt;/string&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在你访问照相机、通讯录、等等隐私以及敏感数据之前，你必须请求授权。否则你的app会在你尝试访问这些隐私时崩溃。Xcode会log这些：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This app has crashed because it attempted to acce
    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="macOS开发" scheme="https://www.sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Learning AV Foundation(二)AVAudioPlayer</title>
    <link href="https://www.sunyazhou.com/2017/03/17/Learning-AV-Foundation-AVAudioPlayer/"/>
    <id>https://www.sunyazhou.com/2017/03/17/Learning-AV-Foundation-AVAudioPlayer/</id>
    <published>2017-03-17T02:26:06.000Z</published>
    <updated>2017-03-29T23:56:19.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/Learning%20AV%20Foundation2AVAudioPlayer/stock-photo-55571408.jpg" alt="AVAudioPlayer"></p>
<h2 id="开篇"><a href="#开篇" class="headerlink" title="开篇"></a>开篇</h2><p>最近在学习<code>AV Foundation</code> 试图把学习内容记录下来 并参考一些博客文章<br>本期的内容是<code>AVAudioPlayer</code></p>
<h2 id="音频知识基础"><a href="#音频知识基础" class="headerlink" title="音频知识基础  "></a>音频知识基础  </h2><blockquote>
<p>音频文件的生成过程是将声音信息<strong>采样</strong>、<strong>量化</strong>和<strong>编码</strong>产生的数字信号的过程，<strong>人耳所能听到的声音，最低的频率是从20Hz起一直到最高频率20KHZ</strong>，因此音频文件格式的最大带宽是20KHZ。根据<a href="https://zh.wikipedia.org/wiki/%E5%A5%88%E5%A5%8E%E6%96%AF%E7%89%B9%E9%A2%91%E7%8E%87" target="_blank" rel="external">奈奎斯特</a>的理论，只有采样频率高于声音信号最高频率的两倍时，才能把数字信号表示的声音还原成为原来的声音，所以音频文件的采样率一般在<strong>40~50KHZ</strong>，比如最常见的CD音质采样率<strong>44.1KHZ</strong>。 (所以一般大家都觉得CD音质是最好的.) 对声音进行采样、量化过程被称为<a href="https://zh.wikipedia.org/wiki/%E8%84%88%E8%A1%9D%E7%B7%A8%E8%99%9F%E8%AA%BF%E8%AE%8A" target="_blank" rel="external">脉冲编码调制</a>（Pulse Code Modulation），简称PCM。PCM数据是最原始的音频数据完全无损，所以PCM数据虽然音质优秀但体积庞大，为了解决这个问题先后诞生了一系列的音频格式，这些音频格式运用不同的方法对音频数据进行压缩，其中有无损压缩（ALAC、APE、FLAC）和有损压缩（MP3、AAC、OGG、WMA）两种 来源:<a href="http://msching.github.io/blog/2014/07/07/audio-in-ios/" target="_blank" rel="external">iOS音频播放 (一)：概述</a> by <a href="http://msching.github.io/" target="_blank" rel="external">码农人生</a></p>
</blockquote>
<p>–</p>
<p>我觉得程寅大牛的处理音频说的很明白<br>大神列出一个经典的音频播放流程（以MP3为例）</p>
<ol>
<li>读取MP3文件</li>
<li>解析采样率、码率、时长等信息，分离MP3中的音频帧</li>
<li>对分离出来的音频帧解码得到PCM数据</li>
<li>对PCM数据进行音效处理（均衡器、混响器等，非必须）</li>
<li>把PCM数据解码成音频信号</li>
<li>把音频信号交给硬件播放</li>
<li>重复1-6步直到播放完成</li>
</ol>
<p>在iOS系统中apple对上述的流程进行了封装并提供了不同层次的接口<br><img src="https://developer.apple.com/library/content/documentation/MusicAudio/Conceptual/CoreAudioOverview/Art/core_audio_layers_2x.png" alt="">  </p>
<blockquote>
<p>这是CoreAudio的接口层次  </p>
</blockquote>
<p>下面对其中的中高层接口进行功能说明：</p>
<ul>
<li>Audio File Services：读写音频数据，可以完成播放流程中的第2步；</li>
<li>Audio File Stream Services：对音频进行解码，可以完成播放流程中的第2步；</li>
<li>Audio Converter services：音频数据转换，可以完成播放流程中的第3步；</li>
<li>Audio Processing Graph Services：音效处理模块，可以完成播放流程中的第4步；</li>
<li>Audio Unit Services：播放音频数据：可以完成播放流程中的第5步、第6步；</li>
<li>Extended Audio File Services：Audio File Services和Audio   </li>
<li>Converter services的结合体；</li>
<li>AVAudioPlayer/AVPlayer(AVFoundation)：高级接口，可以完成整个音频播放的过程（包括本地文件和网络流播放，第4步除外）；</li>
<li>Audio Queue Services：高级接口，可以进行录音和播放，可以完成播放流程中的第3、5、6步；</li>
<li>OpenAL：用于游戏音频播放，暂不讨论</li>
</ul>
<p>可以看到apple提供的接口类型非常丰富，可以满足各种类别类需求：  </p>
<ul>
<li><p>如果你只是想实现音频的播放，没有其他需求AVFoundation会很好的满足你的需求。它的接口使用简单、不用关心其中的细节；</p>
</li>
<li><p>如果你的app需要对音频进行流播放并且同时存储，那么AudioFileStreamer加AudioQueue能够帮到你，你可以先把音频数据下载到本地，一边下载一边用NSFileHandler等接口读取本地音频文件并交给AudioFileStreamer或者AudioFile解析分离音频帧，分离出来的音频帧可以送给AudioQueue进行解码和播放。如果是本地文件直接读取文件解析即可。（这两个都是比较直接的做法，这类需求也可以用AVFoundation+本地server的方式实现，AVAudioPlayer会把请求发送给本地server，由本地server转发出去，获取数据后在本地server中存储并转送给AVAudioPlayer。另一个比较trick的做法是先把音频下载到文件中，在下载到一定量的数据后把文件路径给AVAudioPlayer播放，当然这种做法在音频seek后就回有问题了。）</p>
</li>
<li>如果你正在开发一个专业的音乐播放软件，需要对音频施加音效（均衡器、混响器），那么除了数据的读取和解析以外还需要用到AudioConverter来把音频数据转换成PCM数据，再由AudioUnit+AUGraph来进行音效处理和播放（但目前多数带音效的app都是自己开发音效模块来坐PCM数据的处理，这部分功能自行开发在自定义性和扩展性上会比较强一些。PCM数据通过音效器处理完成后就可以使用AudioUnit播放了，当然AudioQueue也支持直接使对PCM数据进行播放。）。下图描述的就是使用AudioFile + AudioConverter + AudioUnit进行音频播放的流程</li>
</ul>
<p><img src="http://msching.github.io/images/iOS-audio/audioUnitPlay.jpg" alt=""></p>
<p>以上内容均转自<a href="http://msching.github.io/blog/2014/07/07/audio-in-ios/" target="_blank" rel="external">码农人生</a> 希望大神不要介意 如果有问题 我可立即清除</p>
<h2 id="使用AVAudioPlayer之前对AudioSession简介"><a href="#使用AVAudioPlayer之前对AudioSession简介" class="headerlink" title="使用AVAudioPlayer之前对AudioSession简介"></a>使用<code>AVAudioPlayer</code>之前对AudioSession简介</h2><blockquote>
<p><code>AVAudioSession</code>负责管理音频会话 它是个单例 在应用程序和操作系统之间负责中间人的角色 <a href="http://msching.github.io/blog/2014/07/08/audio-in-ios-2/" target="_blank" rel="external">AudioSession参考</a> </p>
</blockquote>
<p><code>AVAudioSession</code>主要功能包括以下几点：</p>
<ul>
<li>app是如何使用的音频服务 播放 还是录制 之类的</li>
<li>控制协调app输入输出设备（比如 麦克风，耳机、手机外放比如蓝牙连接一个外置音响 或airplay）</li>
<li>协调你的app的音频播放和系统以及其他app行为（例如有电话时需要打断，电话结束时需要恢复，按下静音按钮时是否歌曲也要静音等）</li>
</ul>
<p><img src="https://developer.apple.com/library/content/documentation/Audio/Conceptual/AudioSessionProgrammingGuide/Art/aspg_intro_2x.png" alt=""></p>
<p><em>注：AVAudioSession iOS6以后使用 以前叫AudioSession</em></p>
<h2 id="如何使用AVAudioPlayer"><a href="#如何使用AVAudioPlayer" class="headerlink" title="如何使用AVAudioPlayer"></a>如何使用<code>AVAudioPlayer</code></h2><p>在我的博客里面我尽量使用code胜过千言万语<br>使用<code>AVAudioPlayer</code>之前需要在<code>AppDelegate</code>里面导入<code>#import &lt;AVFoundation/AVFoundation.h&gt;</code><br>并且启动音频会话</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"></div><div class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class="built_in">NSDictionary</span> *)launchOptions &#123;</div><div class="line">    </div><div class="line">    <span class="built_in">AVAudioSession</span> *session = [<span class="built_in">AVAudioSession</span> sharedInstance];</div><div class="line">    <span class="built_in">NSError</span> *error;</div><div class="line">    <span class="keyword">if</span> (![session setCategory:<span class="built_in">AVAudioSessionCategoryPlayback</span> error:&amp;error]) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"Category Error: %@"</span>, [error localizedDescription]);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (![session setActive:<span class="literal">YES</span> error:&amp;error]) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"Activation Error: %@"</span>, [error localizedDescription]);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上边已经介绍了<code>AVAudioSession</code>  </p>
<p>这里面说一下<code>[session setCategory:AVAudioSessionCategoryPlayback error:&amp;error]</code> 里面的<code>AVAudioSessionCategoryPlayback</code></p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/Learning%20AV%20Foundation2AVAudioPlayer/AVAudioPlayer_category.png" alt="音频会话分类"></p>
<p>这是这几种分类的列表大家可以看下</p>
<p>记得开启后台播放<br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/Learning%20AV%20Foundation2AVAudioPlayer/MacHi%202017-03-19%2022-43-36.png" alt=""><br>或者在plist里面修改<br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/Learning%20AV%20Foundation2AVAudioPlayer/MacHi%202017-03-19%2022-44-05.png" alt="">  </p>
<p>下面就是创建音频播放器代码</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">"ViewController.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;Masonry/Masonry.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">"THControlKnob.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"THPlayButton.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;AVFoundation/AVFoundation.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></div><div class="line"></div><div class="line"><span class="comment">//三个控制推子</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> THOrangeControlKnob *panKnob;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> THOrangeControlKnob *volumnKnob;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> THGreenControlKnob *rateKnob;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> THPlayButton *playButton;</div><div class="line"></div><div class="line"><span class="comment">//音乐播放器</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">AVAudioPlayer</span> *musicPlayer;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">getter</span> = isPlaying) <span class="built_in">BOOL</span> playing; <span class="comment">//播放状态</span></div><div class="line"></div><div class="line"><span class="comment">//无关代码</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> <span class="built_in">UILabel</span> *LeftRightRoundDec;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> <span class="built_in">UILabel</span> *voiceDec;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> <span class="built_in">UILabel</span> *rateDec;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> <span class="built_in">UILabel</span> *trackDescrption;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<blockquote>
<p>导入几个第三方控件的类用于音乐播放</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/Learning%20AV%20Foundation2AVAudioPlayer/MacHi%202017-03-19%2021-22-43.png" alt=""></p>
<p>这上边的三个旋钮就是导入的开源库</p>
<p>下面创建播放器<code>AVAudioPlayer</code><br>创建时需要一个<code>NSURL</code>代表要播放的文件路径 这里简单从bundle中拖了一首歌进去了</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#pragma mark -</span></div><div class="line"><span class="meta">#pragma mark - 创建AVAudioPlayer与播放状态控制</span></div><div class="line"><span class="comment">/**</span></div><div class="line"> 创建音乐播放器</div><div class="line"> </div><div class="line"> @param fileName 文件名</div><div class="line"> @param fileExtension 文件扩展名</div><div class="line"> @return 播放器实例</div><div class="line"> */</div><div class="line">- (<span class="built_in">AVAudioPlayer</span> *)createPlayForFile:(<span class="built_in">NSString</span> *)fileName</div><div class="line">                       withExtension:(<span class="built_in">NSString</span> *)fileExtension&#123;</div><div class="line">    <span class="built_in">NSURL</span> *url = [[<span class="built_in">NSBundle</span> mainBundle] URLForResource:fileName withExtension:fileExtension];</div><div class="line">    <span class="built_in">NSError</span> *error = <span class="literal">nil</span>;</div><div class="line">    <span class="built_in">AVAudioPlayer</span> *audioPlayer = [[<span class="built_in">AVAudioPlayer</span> alloc] initWithContentsOfURL:url error:&amp;error];</div><div class="line">    <span class="keyword">if</span> (audioPlayer) &#123;</div><div class="line">        audioPlayer.numberOfLoops = <span class="number">-1</span>; <span class="comment">//-1无限循环</span></div><div class="line">        audioPlayer.enableRate = <span class="literal">YES</span>; <span class="comment">//启动倍速控制</span></div><div class="line">        [audioPlayer prepareToPlay];</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"Error creating player: %@"</span>,[error localizedDescription]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> audioPlayer;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>numberOfLoops</code> = -1; 代表本首歌 无限循环 其它常数代表循环次数<br><code>enableRate</code> 代表是否启用倍速调节 0.5x 1.0x 2.0x 等倍速 1.0代表正常速度</p>
<p>这里说一下<code>[audioPlayer prepareToPlay]</code><br><strong>调用这个函数是为了取得需要的音频硬件并预加载<code>Audio Queue</code>的缓冲区.</strong> 当然也可以不调用这个方法直接调用 <code>[audioPlayer play]</code>，但当  <strong>调用<code>play</code>方法时也会隐性激活</strong>,调用<code>prepareToPlay</code>是为了减少 创建播放器时预设加载和听到声音输出之间的延时 </p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">instancetype</span>)initWithNibName:(<span class="built_in">NSString</span> *)nibNameOrNil bundle:(<span class="built_in">NSBundle</span> *)nibBundleOrNil &#123;</div><div class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> initWithNibName:nibNameOrNil bundle:nibBundleOrNil];</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">self</span>.musicPlayer == <span class="literal">nil</span>) &#123;</div><div class="line">            <span class="keyword">self</span>.musicPlayer = [<span class="keyword">self</span> createPlayForFile:<span class="string">@"384551_1438267683"</span> withExtension:<span class="string">@"mp3"</span>];</div><div class="line">        &#125;</div><div class="line">        [<span class="keyword">self</span> setupNotifications];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)awakeFromNib&#123;</div><div class="line">    [<span class="keyword">super</span> awakeFromNib];</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.musicPlayer == <span class="literal">nil</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.musicPlayer = [<span class="keyword">self</span> createPlayForFile:<span class="string">@"384551_1438267683"</span> withExtension:<span class="string">@"mp3"</span>];</div><div class="line">    &#125;</div><div class="line">    [<span class="keyword">self</span> setupNotifications];</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>在<code>initWithNibName</code>或<code>awakeFromNib</code>时候调用一下创建播放器的代码<br>这个<code>[self setupNotifications];</code>后面说  </p>
</blockquote>
<p>先添加一些常见的方法封装 比如 <strong>播放、暂停、停止</strong><br><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"></div><div class="line">- (<span class="keyword">void</span>)play &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.musicPlayer == <span class="literal">nil</span>) &#123; <span class="keyword">return</span>; &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (!<span class="keyword">self</span>.playing) &#123;</div><div class="line">        <span class="built_in">NSTimeInterval</span> delayTime = [<span class="keyword">self</span>.musicPlayer deviceCurrentTime] + <span class="number">0.01</span>;</div><div class="line">        [<span class="keyword">self</span>.musicPlayer playAtTime:delayTime];</div><div class="line">        <span class="keyword">self</span>.playing = <span class="literal">YES</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">self</span>.trackDescrption.text = [<span class="keyword">self</span>.musicPlayer.url absoluteString];</div><div class="line">    [<span class="keyword">self</span> configNowPlayingInfoCenter]; <span class="comment">//配置后台播放的页面信息</span></div><div class="line">&#125;</div><div class="line">- (<span class="keyword">void</span>)stop &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.musicPlayer == <span class="literal">nil</span>) &#123; <span class="keyword">return</span>; &#125;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.playing) &#123;</div><div class="line">        [<span class="keyword">self</span>.musicPlayer stop];</div><div class="line">        <span class="keyword">self</span>.musicPlayer.currentTime = <span class="number">0.0</span>f;</div><div class="line">        <span class="keyword">self</span>.playing = <span class="literal">NO</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)pause &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.musicPlayer == <span class="literal">nil</span>) &#123; <span class="keyword">return</span>; &#125;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.playing) &#123;</div><div class="line">        [<span class="keyword">self</span>.musicPlayer pause];</div><div class="line">        <span class="keyword">self</span>.playing = <span class="literal">NO</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里看到<code>[self.musicPlayer deviceCurrentTime] + 0.01</code> 加了 -0.01的延时, 是为了以后大家做播放器的时候 有可能暂停或者歌曲切换时 有可能 向前向后做片段衔接, 也是为了使用 <code>playAtTime</code>去播放 指定位置的音乐用于 意外暂停或者播放上次播放的配置信息使用 这里看到我写了一个<br><code>[self configNowPlayingInfoCenter];</code>配置后台播放的页面信息<br>这个主要用于播放音乐在后台时 锁屏显示的屏幕信息  请看下面代码</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//设置锁屏状态，显示的歌曲信息</span></div><div class="line">-(<span class="keyword">void</span>)configNowPlayingInfoCenter&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">NSClassFromString</span>(<span class="string">@"MPNowPlayingInfoCenter"</span>)) &#123;</div><div class="line">        <span class="built_in">NSMutableDictionary</span> *dict = [[<span class="built_in">NSMutableDictionary</span> alloc] init];</div><div class="line">        </div><div class="line">        <span class="comment">//歌曲名称</span></div><div class="line">        [dict setObject:<span class="string">@"歌曲名称"</span> forKey:<span class="built_in">MPMediaItemPropertyTitle</span>];</div><div class="line">        </div><div class="line">        <span class="comment">//演唱者</span></div><div class="line">        [dict setObject:<span class="string">@"演唱者"</span> forKey:<span class="built_in">MPMediaItemPropertyArtist</span>];</div><div class="line">        </div><div class="line">        <span class="comment">//专辑名</span></div><div class="line">        [dict setObject:<span class="string">@"专辑名"</span> forKey:<span class="built_in">MPMediaItemPropertyAlbumTitle</span>];</div><div class="line">        </div><div class="line">        <span class="comment">//专辑缩略图</span></div><div class="line">        <span class="built_in">UIImage</span> *image = [<span class="built_in">UIImage</span> imageNamed:<span class="string">@"sunyazhou"</span>];</div><div class="line">        <span class="built_in">MPMediaItemArtwork</span> *artwork = [[<span class="built_in">MPMediaItemArtwork</span> alloc] initWithImage:image];</div><div class="line">        [dict setObject:artwork forKey:<span class="built_in">MPMediaItemPropertyArtwork</span>];</div><div class="line">        </div><div class="line">        <span class="comment">//音乐剩余时长</span></div><div class="line">        [dict setObject:@<span class="number">20</span> forKey:<span class="built_in">MPMediaItemPropertyPlaybackDuration</span>];</div><div class="line">        </div><div class="line">        <span class="comment">//音乐当前播放时间 在计时器中修改</span></div><div class="line">       <span class="comment">// [dict setObject:[NSNumber numberWithDouble:100.0] forKey:MPNowPlayingInfoPropertyElapsedPlaybackTime];</span></div><div class="line">        </div><div class="line">        <span class="comment">//设置锁屏状态下屏幕显示播放音乐信息</span></div><div class="line">        [[<span class="built_in">MPNowPlayingInfoCenter</span> defaultCenter] setNowPlayingInfo:dict];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果需要在计时器中不断刷新锁屏状态下的播放进度条请写如下代码</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//计时器修改进度</span></div><div class="line">- (<span class="keyword">void</span>)changeProgress:(<span class="built_in">NSTimer</span> *)sender&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">self</span>.player)&#123;</div><div class="line">        <span class="comment">//当前播放时间</span></div><div class="line">        <span class="built_in">NSMutableDictionary</span> *dict = [<span class="built_in">NSMutableDictionary</span> dictionaryWithDictionary:[[<span class="built_in">MPNowPlayingInfoCenter</span> defaultCenter] nowPlayingInfo]];</div><div class="line">        [dict setObject:[<span class="built_in">NSNumber</span> numberWithDouble:<span class="keyword">self</span>.player.currentTime] forKey:<span class="built_in">MPNowPlayingInfoPropertyElapsedPlaybackTime</span>]; <span class="comment">//音乐当前已经过时间</span></div><div class="line">        [[<span class="built_in">MPNowPlayingInfoCenter</span> defaultCenter] setNowPlayingInfo:dict];</div><div class="line"> </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>参考<a href="http://www.iliunian.com/2831.html" target="_blank" rel="external">IOS后台运行 之 后台播放音乐</a> </p>
</blockquote>
<p>下面我们来介绍一下<br><code>[self setupNotifications];</code>注册监听 音频意外中断和耳机拔出时要暂停音乐播放<br>实现代码如下</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> 播放的通知处理</div><div class="line"> */</div><div class="line">- (<span class="keyword">void</span>)setupNotifications &#123;</div><div class="line">    <span class="built_in">NSNotificationCenter</span> *nsnc = [<span class="built_in">NSNotificationCenter</span> defaultCenter];</div><div class="line">    </div><div class="line">    <span class="comment">//添加意外中断音频播放的通知</span></div><div class="line">    [nsnc addObserver:<span class="keyword">self</span></div><div class="line">             selector:<span class="keyword">@selector</span>(handleInterruption:)</div><div class="line">                 name:<span class="built_in">AVAudioSessionInterruptionNotification</span></div><div class="line">               object:[<span class="built_in">AVAudioSession</span> sharedInstance]];</div><div class="line">    </div><div class="line">    <span class="comment">//添加线路变化通知</span></div><div class="line">    [nsnc addObserver:<span class="keyword">self</span></div><div class="line">             selector:<span class="keyword">@selector</span>(hanldeRouteChange:)</div><div class="line">                 name:<span class="built_in">AVAudioSessionRouteChangeNotification</span></div><div class="line">               object:[<span class="built_in">AVAudioSession</span> sharedInstance]];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><em>注：记得在delloc里面<code>[[NSNotificationCenter defaultCenter] removeObserver:self]</code></em></p>
<p>意外中断音频发生的场景 例如 听歌过程中来电话或者 按住home键使用siri </p>
<p>下面是具体方法实现</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> 音频意外打断处理</div><div class="line"></div><div class="line"> @param notification 通知信息</div><div class="line"> */</div><div class="line">- (<span class="keyword">void</span>)handleInterruption:(<span class="built_in">NSNotification</span> *)notification &#123;</div><div class="line">    <span class="built_in">NSDictionary</span> *info = notification.userInfo;</div><div class="line">    <span class="built_in">AVAudioSessionInterruptionType</span> type = [info[<span class="built_in">AVAudioSessionInterruptionTypeKey</span>] unsignedIntegerValue];</div><div class="line">    <span class="keyword">if</span> (type == <span class="built_in">AVAudioSessionInterruptionTypeBegan</span>) &#123;</div><div class="line">        <span class="comment">//Handle AVAudioSessionInterruptionTypeBegan</span></div><div class="line">        [<span class="keyword">self</span> pause];</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">//Handle AVAudioSessionInterruptionTypeEnded</span></div><div class="line">        <span class="built_in">AVAudioSessionInterruptionOptions</span> options = [info[<span class="built_in">AVAudioSessionInterruptionTypeKey</span>] unsignedIntegerValue];</div><div class="line">        <span class="built_in">NSError</span> *error = <span class="literal">nil</span>;</div><div class="line">        <span class="comment">//激活音频会话 允许外接音响</span></div><div class="line">        [[<span class="built_in">AVAudioSession</span> sharedInstance] setCategory:<span class="built_in">AVAudioSessionCategoryPlayback</span></div><div class="line">                                         withOptions:<span class="built_in">AVAudioSessionCategoryOptionAllowBluetooth</span> error:<span class="literal">nil</span>];</div><div class="line">        [[<span class="built_in">AVAudioSession</span> sharedInstance] setActive:<span class="literal">YES</span> withOptions:<span class="built_in">AVAudioSessionSetActiveOptionNotifyOthersOnDeactivation</span> error:&amp;error];</div><div class="line">        <span class="keyword">if</span> (options == <span class="built_in">AVAudioSessionInterruptionOptionShouldResume</span>) &#123;</div><div class="line">            [<span class="keyword">self</span> play];</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            [<span class="keyword">self</span> play];</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        </div><div class="line">        <span class="keyword">self</span>.playButton.selected = <span class="literal">YES</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (error) &#123;</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"AVAudioSessionInterruptionOptionShouldResume失败:%@"</span>,[error localizedDescription]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>先说<code>handleInterruption</code>意外情况下中断比如我按住home键使用siri<br>我会收到意外打断的通知当 type == <code>AVAudioSessionInterruptionTypeBegan</code>时 我们停止音乐播放或者暂停.<br>当type != <code>AVAudioSessionInterruptionTypeBegan</code>的时候一定是<code>AVAudioSessionInterruptionTypeEnded</code>这个时候<code>notification.userInfo</code>里面包含一个<code>AVAudioSessionInterruptionOptions</code>值来表明音频会话是否已经重新激活以及是否可以再次播放</p>
<p><strong><em>注:这个地方遇到个坑</em></strong> 当意外中断时候有时音频会话会很不灵敏 后来发现这种情况下需要重新激活会话 如下代码:</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">[[<span class="built_in">AVAudioSession</span> sharedInstance] setActive:<span class="literal">YES</span> withOptions:<span class="built_in">AVAudioSessionSetActiveOptionNotifyOthersOnDeactivation</span> error:&amp;error];</div></pre></td></tr></table></figure>
<p>这里<code>AVAudioSessionSetActiveOptionNotifyOthersOnDeactivation</code>是为了通知其它应用会话被我激活了 很多播放器开发者很不讲究 每次从来不用这个方法导致每次别人播放完音频 自己都收不到音频重新播放的信息 建议大家以和为贵, 写良心代码.</p>
<p>因为我外接的小米蓝牙音响发现还是不好使 最后又补上了<code>AVAudioSessionCategoryOptionAllowBluetooth</code>这个  </p>
<p><strong>激活音频会话 允许外接音响</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">[[<span class="built_in">AVAudioSession</span> sharedInstance] setCategory:<span class="built_in">AVAudioSessionCategoryPlayback</span> withOptions:<span class="built_in">AVAudioSessionCategoryOptionAllowBluetooth</span> error:<span class="literal">nil</span>];</div></pre></td></tr></table></figure>
<p>就好使了</p>
<p>下面说一下耳机插拔或者USB麦克风断开 Apple有个什么<code>Human Interface Guidelines(HIG)</code>相关定义 意思是说当硬件耳机拔出时建议 暂停播放音乐或者麦克风断开时。就是处于静音状态。是为了保密播放内容不被外界听到,不管苹果啥规定 我们都得照办 否则就得被拒。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)hanldeRouteChange:(<span class="built_in">NSNotification</span> *)notification &#123;</div><div class="line">    <span class="built_in">NSDictionary</span> *info = notification.userInfo;</div><div class="line">    <span class="built_in">AVAudioSessionRouteChangeReason</span> reason = [info[<span class="built_in">AVAudioSessionRouteChangeReasonKey</span>] unsignedIntegerValue];</div><div class="line">    <span class="comment">//老设备不可用</span></div><div class="line">    <span class="keyword">if</span> (reason == <span class="built_in">AVAudioSessionRouteChangeReasonOldDeviceUnavailable</span>) &#123;</div><div class="line">        <span class="built_in">AVAudioSessionRouteDescription</span> *previousRoute = info[<span class="built_in">AVAudioSessionRouteChangePreviousRouteKey</span>];</div><div class="line">        <span class="built_in">AVAudioSessionPortDescription</span> *previousOutput = previousRoute.outputs[<span class="number">0</span>];</div><div class="line">        <span class="built_in">NSString</span> *portType = previousOutput.portType;</div><div class="line">        <span class="keyword">if</span> ([portType isEqualToString:<span class="built_in">AVAudioSessionPortHeadphones</span>]) &#123;</div><div class="line">            [<span class="keyword">self</span> stop];</div><div class="line">            <span class="keyword">self</span>.playButton.selected = <span class="literal">NO</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这需要用<code>AVAudioSessionRouteChangeReasonKey</code>取出线路切换的原因<code>AVAudioSessionRouteChangeReason</code> 原因有这么多</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSUInteger</span>, <span class="built_in">AVAudioSessionRouteChangeReason</span>)</div><div class="line">&#123;</div><div class="line">	<span class="built_in">AVAudioSessionRouteChangeReasonUnknown</span> = <span class="number">0</span>,</div><div class="line">	<span class="built_in">AVAudioSessionRouteChangeReasonNewDeviceAvailable</span> = <span class="number">1</span>,</div><div class="line">	<span class="built_in">AVAudioSessionRouteChangeReasonOldDeviceUnavailable</span> = <span class="number">2</span>,</div><div class="line">	<span class="built_in">AVAudioSessionRouteChangeReasonCategoryChange</span> = <span class="number">3</span>,</div><div class="line">	<span class="built_in">AVAudioSessionRouteChangeReasonOverride</span> = <span class="number">4</span>,</div><div class="line">	<span class="built_in">AVAudioSessionRouteChangeReasonWakeFromSleep</span> = <span class="number">6</span>,</div><div class="line">	<span class="built_in">AVAudioSessionRouteChangeReasonNoSuitableRouteForCategory</span> = <span class="number">7</span>,</div><div class="line">	<span class="built_in">AVAudioSessionRouteChangeReasonRouteConfigurationChange</span> <span class="built_in">NS_ENUM_AVAILABLE_IOS</span>(<span class="number">7</span>_0) = <span class="number">8</span></div><div class="line">&#125; <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">6</span>_0);</div></pre></td></tr></table></figure>
<p>我们需要这个<code>AVAudioSessionRouteChangeReasonOldDeviceUnavailable</code> 判断是否是旧设备<br>通过<code>AVAudioSessionRouteChangePreviousRouteKey</code>拿出</p>
<p><code>AVAudioSessionRouteDescription</code>描述信息<br><code>previousRoute</code> 在通过<br><code>previousRoute.outputs[0]</code>拿出<code>AVAudioSessionPortDescription</code></p>
<p>拿出<code>NSString *portType = previousOutput.portType</code></p>
<p>如果<code>[portType isEqualToString:AVAudioSessionPortHeadphones]</code></p>
<p>如果是耳机<code>AVAudioSessionPortHeadphones</code>则暂停播放</p>
<p>以上就是中断和线路切换的一些代码逻辑</p>
<p>下面我介绍一些好玩的</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/Learning%20AV%20Foundation2AVAudioPlayer/IMG_2090.PNG" alt=""></p>
<p>前面说的一些后台设置信息显示的内容就是上图所示 在锁屏的时候显示</p>
<p>但是大家一定很奇怪的是怎么实现接收 <strong>锁屏状态下 点击 上一曲 暂停/播放 下一曲等操作</strong></p>
<p>需要在AppDelegate里面写上</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class="built_in">NSDictionary</span> *)launchOptions &#123;</div><div class="line">    </div><div class="line">    <span class="built_in">AVAudioSession</span> *session = [<span class="built_in">AVAudioSession</span> sharedInstance];</div><div class="line">    <span class="built_in">NSError</span> *error;</div><div class="line">    <span class="keyword">if</span> (![session setCategory:<span class="built_in">AVAudioSessionCategoryPlayback</span> error:&amp;error]) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"Category Error: %@"</span>, [error localizedDescription]);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (![session setActive:<span class="literal">YES</span> error:&amp;error]) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"Activation Error: %@"</span>, [error localizedDescription]);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    [[<span class="built_in">UIApplication</span> sharedApplication] beginReceivingRemoteControlEvents];</div><div class="line">    [<span class="keyword">self</span> becomeFirstResponder];</div><div class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这<code>[[UIApplication sharedApplication] beginReceivingRemoteControlEvents];</code><br>行代码 以及调用自己为 <code>[self becomeFirstResponder];</code>第一响应者 这样写是为了应用响应音频播放 后台切换或者中断的时候更灵敏.</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="built_in">BOOL</span>)canBecomeFirstResponder &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后 写上如下代码 处理<strong>锁屏状态下 点击 上一曲 暂停/播放 下一曲等操作</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)remoteControlReceivedWithEvent:(<span class="built_in">UIEvent</span> *)event &#123;</div><div class="line">    <span class="keyword">if</span> (event.type == <span class="built_in">UIEventTypeRemoteControl</span>) &#123;</div><div class="line">        <span class="keyword">switch</span> (event.subtype) &#123;</div><div class="line">            <span class="keyword">case</span> <span class="built_in">UIEventSubtypeRemoteControlPlay</span>:</div><div class="line">                <span class="built_in">NSLog</span>(<span class="string">@"暂停播放"</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="built_in">UIEventSubtypeRemoteControlPause</span>:</div><div class="line">                </div><div class="line">                <span class="built_in">NSLog</span>(<span class="string">@"继续播放"</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="built_in">UIEventSubtypeRemoteControlNextTrack</span>:</div><div class="line">                <span class="built_in">NSLog</span>(<span class="string">@"下一曲"</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="built_in">UIEventSubtypeRemoteControlPreviousTrack</span>:</div><div class="line">                <span class="built_in">NSLog</span>(<span class="string">@"上一曲"</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>剩余逻辑大家自己填充吧我就不介绍了. </p>
<p>好了AVAudioPlayer就到这吧！有啥疑问大家可以评论留言都能看到或者指正我的错误。我会及时改正.</p>
<p>全文完</p>
<p><strong>文章的最终<a href="https://github.com/sunyazhou13/AVAudioPlayerDemo" target="_blank" rel="external">demo</a></strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/Learning%20AV%20Foundation2AVAudioPlayer/stoc
    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="macOS开发" scheme="https://www.sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Learning AV Foundation(一)汉字语音朗读</title>
    <link href="https://www.sunyazhou.com/2017/03/11/Learning-AV-Foundation-AVSpeechSynthesizer/"/>
    <id>https://www.sunyazhou.com/2017/03/11/Learning-AV-Foundation-AVSpeechSynthesizer/</id>
    <published>2017-03-11T04:38:53.000Z</published>
    <updated>2017-03-29T23:56:19.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://www.informit.com/ShowCover.aspx?isbn=0321961803" alt="AVSpeechSynthesizer"></p>
<p>前言</p>
<blockquote>
<p>最近在研究<code>AV Foundation</code> 框架 发现有一本书叫做<br><a href="http://item.jd.com/11742630.html" target="_blank" rel="external">AV Foundation开发秘籍：实践掌握iOS &amp; OS X 应用的视听处理技术</a><br>然后google查了一下英文版叫<br><a href="http://www.informit.com/store/learning-av-foundation-a-hands-on-guide-to-mastering-9780321961808" target="_blank" rel="external">Learning AV Foundation: A Hands-on Guide to Mastering the AV Foundation Framework</a><br>看着国人的翻译不仅慨叹的想说一句话: 为啥不自己写一本书 何必这么费劲翻译它搞得原来很有技术含量 这么直译就没技术含量了。看着开发秘籍这名字不禁想起大学时那些书 从开发到入门… 21天学会xxx… 开发指南… 开发秘籍… 我大学读的都是<code>假书</code></p>
</blockquote>
<p>今天给大家分享的是 iOS上如何 把汉字转换成语音朗读, 当然这个没什么技术含量(大神可以飞过).</p>
<h2 id="AVFoundation整体架构"><a href="#AVFoundation整体架构" class="headerlink" title="AVFoundation整体架构"></a>AVFoundation整体架构</h2><p>研究这个功能之前先介绍一下<code>AV Foundation</code>整体架构</p>
<p><img src="https://developer.apple.com/library/content/documentation/AudioVideo/Conceptual/AVFoundationPG/Art/frameworksBlockDiagram_2x.png" alt="iOS"><br>这是iOS上的架构设计 (上图)  </p>
<p><img src="https://developer.apple.com/library/content/documentation/AudioVideo/Conceptual/AVFoundationPG/Art/frameworksBlockDiagramOSX_2x.png" alt="iOS"><br>这是macOS上的架构设计(上图)</p>
<p>看完之后我们就来用代码实现这个demo<br>首先导入<code>&lt;AVFoundation/AVFoundation.h&gt;</code></p>
<p>这我需要使用的是iOS上的<code>AVSpeechSynthesizer</code>,macOS上叫<code>NSSpeechSynthesizer</code></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) <span class="built_in">AVSpeechSynthesizer</span> *synthesizer;</div></pre></td></tr></table></figure>
<p><code>AVSpeechSynthesizer</code> 它的功能</p>
<ul>
<li><strong>将文字添加到语音, 就是用语音播放一段文字</strong></li>
</ul>
<p>初始化</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)awakeFromNib &#123;</div><div class="line">    [<span class="keyword">super</span> awakeFromNib];</div><div class="line">    <span class="comment">//创建语音合成器</span></div><div class="line">    <span class="keyword">self</span>.synthesizer = [[<span class="built_in">AVSpeechSynthesizer</span> alloc] init];</div><div class="line">    <span class="keyword">self</span>.synthesizer.delegate = <span class="keyword">self</span>;</div><div class="line">    <span class="comment">//播放的国家的语言</span></div><div class="line">    <span class="keyword">self</span>.voices = @[[<span class="built_in">AVSpeechSynthesisVoice</span> voiceWithLanguage:<span class="string">@"zh-CN"</span>],[<span class="built_in">AVSpeechSynthesisVoice</span> voiceWithLanguage:<span class="string">@"en-US"</span>]</div><div class="line">                    ];</div><div class="line">    <span class="keyword">self</span>.speechStrings = [[<span class="built_in">NSMutableArray</span> alloc] init];</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里的<code>[AVSpeechSynthesisVoice voiceWithLanguage:@&quot;zh-CN&quot;]</code><br>设置的是简体中文语音 文章末尾会列出所有语音播放信息不用担心写错.</p>
<p><code>AVSpeechSynthesizer</code>的delegate方法如下 主要是对语音播放状态的监听</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">AVSpeechSynthesizerDelegate</span> &lt;<span class="title">NSObject</span>&gt;</span></div><div class="line"><span class="comment">// 代理方法</span></div><div class="line"><span class="keyword">@optional</span></div><div class="line"><span class="comment">// 开始播放 语音单元</span></div><div class="line">- (<span class="keyword">void</span>)speechSynthesizer:(<span class="built_in">AVSpeechSynthesizer</span> *)synthesizer didStartSpeechUtterance:(<span class="built_in">AVSpeechUtterance</span> *)utterance;</div><div class="line"><span class="comment">// 完成播放 语音单元</span></div><div class="line">- (<span class="keyword">void</span>)speechSynthesizer:(<span class="built_in">AVSpeechSynthesizer</span> *)synthesizer didFinishSpeechUtterance:(<span class="built_in">AVSpeechUtterance</span> *)utterance;</div><div class="line"><span class="comment">// 暂停播放 语音单元</span></div><div class="line">- (<span class="keyword">void</span>)speechSynthesizer:(<span class="built_in">AVSpeechSynthesizer</span> *)synthesizer didPauseSpeechUtterance:(<span class="built_in">AVSpeechUtterance</span> *)utterance;</div><div class="line"><span class="comment">// 继续播放 语音单元</span></div><div class="line">- (<span class="keyword">void</span>)speechSynthesizer:(<span class="built_in">AVSpeechSynthesizer</span> *)synthesizer didContinueSpeechUtterance:(<span class="built_in">AVSpeechUtterance</span> *)utterance;</div><div class="line"><span class="comment">// 取消播放 语音单元</span></div><div class="line">- (<span class="keyword">void</span>)speechSynthesizer:(<span class="built_in">AVSpeechSynthesizer</span> *)synthesizer didCancelSpeechUtterance:(<span class="built_in">AVSpeechUtterance</span> *)utterance;</div><div class="line"><span class="comment">// 这里 指的是 又来监听 播放 字符范围</span></div><div class="line">- (<span class="keyword">void</span>)speechSynthesizer:(<span class="built_in">AVSpeechSynthesizer</span> *)synthesizer willSpeakRangeOfSpeechString:(<span class="built_in">NSRange</span>)characterRange utterance:(<span class="built_in">AVSpeechUtterance</span> *)utterance;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p><strong>这里的<code>AVSpeechSynthesizer</code>主要的方法有</strong>  </p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">/* 添加 播放话语 到 播放语音 队列, 可以设置utterance的属性来控制播放 */</span></div><div class="line">- (<span class="keyword">void</span>)speakUtterance:(<span class="built_in">AVSpeechUtterance</span> *)utterance;</div><div class="line"></div><div class="line"><span class="comment">// 对于 stopSpeakingAtBoundary: 语音单元的操作, 如果中断, 会清空队列</span></div><div class="line"><span class="comment">// 中断</span></div><div class="line">- (<span class="built_in">BOOL</span>)stopSpeakingAtBoundary:(<span class="built_in">AVSpeechBoundary</span>)boundary;</div><div class="line"><span class="comment">// 暂停</span></div><div class="line">- (<span class="built_in">BOOL</span>)pauseSpeakingAtBoundary:(<span class="built_in">AVSpeechBoundary</span>)boundary;</div><div class="line"><span class="comment">// 继续</span></div><div class="line">- (<span class="built_in">BOOL</span>)continueSpeaking;</div></pre></td></tr></table></figure>
<blockquote>
<p>这里我们用的<code>speakUtterance</code>方法来播放文字<br>speakUtterance:(AVSpeechUtterance *)utterance  </p>
<ol>
<li><code>AVSpeechUtterance</code>是对文字朗读的封装</li>
<li>被播放的语音文字, 可以理解为一段需要播放的文字<br>这里我们设置<code>AVSpeechUtterance</code>朗读播放的信息  </li>
</ol>
</blockquote>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//播放语音</span></div><div class="line"><span class="built_in">NSArray</span> *speechStringsArray = [<span class="keyword">self</span> buildSpeechStrings]; <span class="comment">//buildSpeechStrings播放字符串的数组</span></div><div class="line">   <span class="keyword">for</span> (<span class="built_in">NSUInteger</span> i = <span class="number">0</span>; i &lt; speechStringsArray.count; i++) &#123;</div><div class="line">       <span class="comment">//创建AVSpeechUtterance 对象 用于播放的语音文字</span></div><div class="line">       <span class="built_in">AVSpeechUtterance</span> *utterance = [[<span class="built_in">AVSpeechUtterance</span> alloc] initWithString:speechStringsArray[i]];</div><div class="line">       <span class="comment">//设置使用哪一个国家的语言播放</span></div><div class="line">       utterance.voice = <span class="keyword">self</span>.voices[<span class="number">0</span>];</div><div class="line">       <span class="comment">//本段文字播放时的 语速, 应介于AVSpeechUtteranceMinimumSpeechRate 和 AVSpeechUtteranceMaximumSpeechRate 之间</span></div><div class="line">       utterance.rate = <span class="number">0.5</span>;</div><div class="line">       <span class="comment">//在播放特定语句时改变声音的声调, 一般取值介于0.5(底音调)~2.0(高音调)之间</span></div><div class="line">       utterance.pitchMultiplier = <span class="number">0.8</span>f;</div><div class="line">       <span class="comment">//声音大小, 0.0 ~ 1.0 之间</span></div><div class="line">       utterance.volume = <span class="number">1.0</span>f;</div><div class="line">       <span class="comment">//播放后的延迟, 就是本次文字播放完之后的停顿时间, 默认是0</span></div><div class="line">       utterance.preUtteranceDelay = <span class="number">0</span>;</div><div class="line">       <span class="comment">//播放前的延迟, 就是本次文字播放前停顿的时间, 然后播放本段文字, 默认是0</span></div><div class="line">       utterance.postUtteranceDelay = <span class="number">0.1</span>f;</div><div class="line">       [<span class="keyword">self</span>.synthesizer speakUtterance:utterance];</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p><code>AVSpeechUtterance</code>的属性如下</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 设置使用哪一个国家的语言播放</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">retain</span>, <span class="keyword">nullable</span>) <span class="built_in">AVSpeechSynthesisVoice</span> *voice;</div><div class="line"><span class="comment">// 获取当前需要播放的文字, 只读属性</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">NSString</span> *speechString;</div><div class="line"><span class="comment">// 获取当前需要播放的文字 - 富文本, 只读属性, iOS10以后可用</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">NSAttributedString</span> *attributedSpeechString;</div><div class="line"><span class="comment">// 本段文字播放时的 语速, 应介于AVSpeechUtteranceMinimumSpeechRate 和 AVSpeechUtteranceMaximumSpeechRate 之间</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="keyword">float</span> rate;           </div><div class="line"><span class="comment">// 在播放特定语句时改变声音的声调, 一般取值介于0.5(底音调)~2.0(高音调)之间</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="keyword">float</span> pitchMultiplier; </div><div class="line"><span class="comment">// 声音大小, 0.0 ~ 1.0 之间</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="keyword">float</span> volume;</div><div class="line"><span class="comment">// 播放后的延迟, 就是本次文字播放完之后的停顿时间, 默认是0</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="built_in">NSTimeInterval</span> preUtteranceDelay; </div><div class="line"><span class="comment">// 播放前的延迟, 就是本次文字播放前停顿的时间, 然后播放本段文字, 默认是0</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="built_in">NSTimeInterval</span> postUtteranceDelay;</div></pre></td></tr></table></figure>
<p><code>AVSpeechUtterance</code>的方法如下  </p>
<p>以下全部都是初始化方法, 分为 类方法 和 对象方法, 富文本的初始化方法要在iOS10以后才可以用  </p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">+ (<span class="keyword">instancetype</span>)speechUtteranceWithString:(<span class="built_in">NSString</span> *)string;</div><div class="line">+ (<span class="keyword">instancetype</span>)speechUtteranceWithAttributedString:(<span class="built_in">NSAttributedString</span> *)string <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">10</span>_0);</div><div class="line">- (<span class="keyword">instancetype</span>)initWithString:(<span class="built_in">NSString</span> *)string;</div><div class="line">- (<span class="keyword">instancetype</span>)initWithAttributedString:(<span class="built_in">NSAttributedString</span> *)string</div></pre></td></tr></table></figure>
<p>可以使用<strong><code>[AVSpeechSynthesisVoice speechVoices]</code></strong>代码打印出支持朗读语言的国家  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">ar-SA  沙特阿拉伯（阿拉伯文）</div><div class="line"></div><div class="line">en-ZA, 南非（英文）</div><div class="line"></div><div class="line">nl-BE, 比利时（荷兰文）</div><div class="line"></div><div class="line">en-AU, 澳大利亚（英文）</div><div class="line"></div><div class="line">th-TH, 泰国（泰文）</div><div class="line"></div><div class="line">de-DE, 德国（德文）</div><div class="line"></div><div class="line">en-US, 美国（英文）</div><div class="line"></div><div class="line">pt-BR, 巴西（葡萄牙文）</div><div class="line"></div><div class="line">pl-PL, 波兰（波兰文）</div><div class="line"></div><div class="line">en-IE, 爱尔兰（英文）</div><div class="line"></div><div class="line">el-GR, 希腊（希腊文）</div><div class="line"></div><div class="line">id-ID, 印度尼西亚（印度尼西亚文）</div><div class="line"></div><div class="line">sv-SE, 瑞典（瑞典文）</div><div class="line"></div><div class="line">tr-TR, 土耳其（土耳其文）</div><div class="line"></div><div class="line">pt-PT, 葡萄牙（葡萄牙文）</div><div class="line"></div><div class="line">ja-JP, 日本（日文）</div><div class="line"></div><div class="line">ko-KR, 南朝鲜（朝鲜文）</div><div class="line"></div><div class="line">hu-HU, 匈牙利（匈牙利文）</div><div class="line"></div><div class="line">cs-CZ, 捷克共和国（捷克文）</div><div class="line"></div><div class="line">da-DK, 丹麦（丹麦文）</div><div class="line"></div><div class="line">es-MX, 墨西哥（西班牙文）</div><div class="line"></div><div class="line">fr-CA, 加拿大（法文）</div><div class="line"></div><div class="line">nl-NL, 荷兰（荷兰文）</div><div class="line"></div><div class="line">fi-FI, 芬兰（芬兰文）</div><div class="line"></div><div class="line">es-ES, 西班牙（西班牙文）</div><div class="line"></div><div class="line">it-IT, 意大利（意大利文）</div><div class="line"></div><div class="line">he-IL, 以色列（希伯莱文，阿拉伯文）</div><div class="line"></div><div class="line">no-NO, 挪威（挪威文）</div><div class="line"></div><div class="line">ro-RO, 罗马尼亚（罗马尼亚文）</div><div class="line"></div><div class="line">zh-HK, 香港（中文）</div><div class="line"></div><div class="line">zh-TW, 台湾（中文）</div><div class="line"></div><div class="line">sk-SK, 斯洛伐克（斯洛伐克文）</div><div class="line"></div><div class="line">zh-CN, 中国（中文）</div><div class="line"></div><div class="line">ru-RU, 俄罗斯（俄文）</div><div class="line"></div><div class="line">en-GB, 英国（英文）</div><div class="line"></div><div class="line">fr-FR, 法国（法文）</div><div class="line"></div><div class="line">hi-IN  印度（印度文）</div></pre></td></tr></table></figure>
<blockquote>
<p>总结<br>为了学习<strong><code>AVFoundation</code></strong>我先从一个简单的知识点入手,唯一觉得遗憾的是我不太确定是否这个合成器支持自定义语音朗读,这个后续研究一下,把相关学习内容填补上.</p>
</blockquote>
<p><strong>最终的demo 支持iOS和macOS:<a href="https://github.com/sunyazhou13/AVSpeechSynthesizerDemo" target="_blank" rel="external">Learning-AV-Foundation(一)汉字语音朗读</a></strong></p>
<p>参考:<br><a href="https://developer.apple.com/library/content/documentation/AudioVideo/Conceptual/AVFoundationPG/Articles/00_Introduction.html#//apple_ref/doc/uid/TP40010188" target="_blank" rel="external">AV Foundation Apple 官方文档</a><br><a href="http://www.jianshu.com/p/acd57725ba4d" target="_blank" rel="external">AVSpeechSynthesizer 和 AVSpeechUtterance</a><br><a href="http://www.jianshu.com/p/a41cb018f0b5" target="_blank" rel="external">AVSpeechSynthesizer详解</a><br><a href="http://www.jianshu.com/p/cc79c45b4ccf" target="_blank" rel="external">AVFoundation</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://www.informit.com/ShowCover.aspx?isbn=0321961803&quot; alt=&quot;AVSpeechSynthesizer&quot;&gt;&lt;/p&gt;
&lt;p&gt;前言&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;最近在研究&lt;code&gt;AV 
    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="macOS开发" scheme="https://www.sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>macOS上模拟发送键盘事件</title>
    <link href="https://www.sunyazhou.com/2017/02/22/macOS-simulate-keyborad-NSEvent/"/>
    <id>https://www.sunyazhou.com/2017/02/22/macOS-simulate-keyborad-NSEvent/</id>
    <published>2017-02-22T08:17:00.000Z</published>
    <updated>2017-03-29T23:56:19.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/macOS%E4%B8%8A%E6%A8%A1%E6%8B%9F%E5%8F%91%E9%80%81%E9%94%AE%E7%9B%98%E4%BA%8B%E4%BB%B6/Snip20170222_1.png" alt=""></p>
<p>最近在开发macOS远程协助功能, 需要模拟从windows传过来的键盘事件映射成macOS <code>NSEvent</code>, macOS上模拟事件都是底层的<code>CoreGraphic</code>的<code>class</code>,下面说下实现的片断代码.</p>
<ol>
<li>导入<code>#import &lt;Carbon/Carbon.h&gt;</code></li>
<li>创建<code>CGEventSourceRef</code> 事件源对象<strong>(注意它不是OC对象,声明的时候对象前边没有<code>*</code>,而且需要用<code>CFRelease()</code>释放内存)</strong>.</li>
<li>创建<code>CGEventRef</code>使用<code>CGEventCreateKeyboardEvent</code>, 第三个参数<code>true</code>代表<code>keydown</code>就是键盘按键的按下状态,如果是<code>false</code>则代表<code>keyup</code>. 这里用了一个键盘<code>kVK_ANSI_A</code> A键作为例子</li>
<li><code>CGEventTapLocation</code> 这个是下一个函数需要的参数 应该是键盘硬件按下的键位信息(如果搞错了欢迎指正,马上修改)  </li>
<li><code>CGEventPost()</code>发送<code>NSEvent</code>事件 </li>
<li>释放内存</li>
</ol>
<blockquote>
<p><em>talk is cheap, show me the code –LINUS TORVALDS</em>  </p>
</blockquote>
<p>下面是演示代码</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;Carbon/Carbon.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[]) &#123;</div><div class="line">    <span class="keyword">@autoreleasepool</span> &#123;</div><div class="line">       <span class="built_in">CGEventSourceRef</span> source = <span class="built_in">CGEventSourceCreate</span>(kCGEventSourceStatePrivate);</div><div class="line">	    <span class="built_in">CGEventRef</span> A = <span class="built_in">CGEventCreateKeyboardEvent</span>(source, kVK_ANSI_A, <span class="literal">true</span>);</div><div class="line">	    <span class="built_in">CGEventTapLocation</span> location = kCGHIDEventTap;</div><div class="line">	    <span class="comment">//发送事件</span></div><div class="line">	    <span class="built_in">CGEventPost</span>(location, A);</div><div class="line">	    <span class="built_in">CFRelease</span>(A);</div><div class="line">	    <span class="built_in">CFRelease</span>(source);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>CGEventSourceCreate()</code>里定义了三个<strong>枚举</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="built_in">CF_ENUM</span>(int32_t, <span class="built_in">CGEventSourceStateID</span>) &#123;</div><div class="line">  kCGEventSourceStatePrivate = <span class="number">-1</span>,</div><div class="line">  kCGEventSourceStateCombinedSessionState = <span class="number">0</span>,</div><div class="line">  kCGEventSourceStateHIDSystemState = <span class="number">1</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<blockquote>
<p><code>kCGEventSourceStatePrivate</code> 代表 专门的应用,如远程控制程序可以生成和跟踪事件源状态独立于其他进程。这些程序应该使用kCGEventSourceStatePrivate值在创建他们的事件源。<br><code>kCGEventSourceStateCombinedSessionState</code> 该状态表反映了所有事件源的组合状态发布到当前用户的登录会话。如果您的程序发布的事件在一个登录会话,您应该使用这个源状态当你创建一个事件源。</p>
<p><code>kCGEventSourceStateHIDSystemState</code> 该状态表反映了 组合硬件输入源从HID系统硬件层面发送的事件源。生成的事件。 就是外接键盘或者macbook本机键盘以及一些系统定义的按键点击事件 </p>
</blockquote>
<p>这里我使用的是第一个恰巧它有说明<code>remote control</code></p>
<p>上面就是今天要分享的模拟发送系统键盘事件全部逻辑, 如有错误欢迎指正, 鄙人定当咨诹善道察纳雅言.</p>
<p><strong>附* macOS ANSI码 </strong>枚举**</p>
<pre><code class="objc"><span class="comment">/*
 *  Summary:
 *    Virtual keycodes
 *  
 *  Discussion:
 *    These constants are the virtual keycodes defined originally in
 *    Inside Mac Volume V, pg. V-191. They identify physical keys on a
 *    keyboard. Those constants with "ANSI" in the name are labeled
 *    according to the key position on an ANSI-standard US keyboard.
 *    For example, kVK_ANSI_A indicates the virtual keycode for the key
 *    with the letter 'A' in the US keyboard layout. Other keyboard
 *    layouts may have the 'A' key label on a different physical key;
 *    in this case, pressing 'A' will generate a different virtual
 *    keycode.
 */</span>
<span class="keyword">enum</span> {
  kVK_ANSI_A                    = <span class="number">0x00</span>,
  kVK_ANSI_S                    = <span class="number">0x01</span>,
  kVK_ANSI_D                    = <span class="number">0x02</span>,
  kVK_ANSI_F                    = <span class="number">0x03</span>,
  kVK_ANSI_H                    = <span class="number">0x04</span>,
  kVK_ANSI_G                    = <span class="number">0x05</span>,
  kVK_ANSI_Z                    = <span class="number">0x06</span>,
  kVK_ANSI_X                    = <span class="number">0x07</span>,
  kVK_ANSI_C                    = <span class="number">0x08</span>,
  kVK_ANSI_V                    = <span class="number">0x09</span>,
  kVK_ANSI_B                    = <span class="number">0x0B</span>,
  kVK_ANSI_Q                    = <span class="number">0x0C</span>,
  kVK_ANSI_W                    = <span class="number">0x0D</span>,
  kVK_ANSI_E                    = <span class="number">0x0E</span>,
  kVK_ANSI_R                    = <span class="number">0x0F</span>,
  kVK_ANSI_Y                    = <span class="number">0x10</span>,
  kVK_ANSI_T                    = <span class="number">0x11</span>,
  kVK_ANSI_1                    = <span class="number">0x12</span>,
  kVK_ANSI_2                    = <span class="number">0x13</span>,
  kVK_ANSI_3                    = <span class="number">0x14</span>,
  kVK_ANSI_4                    = <span class="number">0x15</span>,
  kVK_ANSI_6                    = <span class="number">0x16</span>,
  kVK_ANSI_5                    = <span class="number">0x17</span>,
  kVK_ANSI_Equal                = <span class="number">0x18</span>,
  kVK_ANSI_9                    = <span class="number">0x19</span>,
  kVK_ANSI_7                    = <span class="number">0x1A</span>,
  kVK_ANSI_Minus                = <span class="number">0x1B</span>,
  kVK_ANSI_8                    = <span class="number">0x1C</span>,
  kVK_ANSI_0                    = <span class="number">0x1D</span>,
  kVK_ANSI_RightBracket         = <span class="number">0x1E</span>,
  kVK_ANSI_O                    = <span class="number">0x1F</span>,
  kVK_ANSI_U                    = <span class="number">0x20</span>,
  kVK_ANSI_LeftBracket          = <span class="number">0x21</span>,
  kVK_ANSI_I                    = <span class="number">0x22</span>,
  kVK_ANSI_P                    = <span class="number">0x23</span>,
  kVK_ANSI_L                    = <span class="number">0x25</span>,
  kVK_ANSI_J                    = <span class="number">0x26</span>,
  kVK_ANSI_Quote                = <span class="number">0x27</span>,
  kVK_ANSI_K                    = <span class="number">0x28</span>,
  kVK_ANSI_Semicolon            = <span class="number">0x29</span>,
  kVK_ANSI_Backslash            = <span class="number">0x2A</span>,
  kVK_ANSI_Comma                = <span class="number">0x2B</span>,
  kVK_ANSI_Slash                = <span class="number">0x2C</span>,
  kVK_ANSI_N                    = <span class="number">0x2D</span>,
  kVK_ANSI_M                    = <span class="number">0x2E</span>,
  kVK_ANSI_Period               = <span class="number">0x2F</span>,
  kVK_ANSI_Grave                = <span class="number">0x32</span>,
  kVK_ANSI_KeypadDecimal        = <span class="number">0x41</span>,
  kVK_ANSI_KeypadMultiply       = <span class="number">0x43</span>,
  kVK_ANSI_KeypadPlus           = <span class="number">0x45</span>,
  kVK_ANSI_KeypadClear          = <span class="number">0x47</span>,
  kVK_ANSI_KeypadDivide         = <span class="number">0x4B</span>,
  kVK_ANSI_KeypadEnter          = <span class="number">0x4C</span>,
  kVK_ANSI_KeypadMinus          = <span class="number">0x4E</span>,
  kVK_ANSI_KeypadEquals         = <span class="number">0x51</span>,
  kVK_ANSI_Keypad0              = <span class="number">0x52</span>,
  kVK_ANSI_Keypad1              = <span class="number">0x53</span>,
  kVK_ANSI_Keypad2              = <span class="number">0x54</span>,
  kVK_ANSI_Keypad3              = <span class="number">0x55</span>,
  kVK_ANSI_Keypad4              = <span class="number">0x56</span>,
  kVK_ANSI_Keypad5              = <span class="number">0x57</span>,
  kVK_ANSI_Keypad6              = <span class="number">0x58</span>,
  kVK_ANSI_Keypad7              = <span class="number">0x59</span>,
  kVK_ANSI_Keypad8              = <span class="number">0x5B</span>,
  kVK_ANSI_Keypad9              = <span class="number">0x5C</span>
};

<span class="comment">/* keycodes for keys that are independent of keyboard layout*/</span>
<span class="keyword">enum</span> {
  kVK_Return                    = <span class="number">0x24</span>,
  kVK_Tab                       = <span class="number">0x30</span>,
  kVK_Space                     = <span class="number">0x31</span>,
  kVK_Delete                    = <span class="number">0x33</span>,
  kVK_Escape                    = <span class="number">0x35</span>,
  kVK_Command                   = <span class="number">0x37</span>,
  kVK_Shift                     = <span class="number">0x38</span>,
  kVK_CapsLock                  = <span class="number">0x39</span>,
  kVK_Option                    = <span class="number">0x3A</span>,
  kVK_Control                   = <span class="number">0x3B</span>,
  kVK_RightCommand              = <span class="number">0x36</span>,
  kVK_RightShift                = <span class="number">0x3C</span>,
  kVK_RightOption               = <span class="number">0x3D</span>,
  kVK_RightControl              = <span class="number">0x3E</span>,
  kVK_Function                  = <span class="number">0x3F</span>,
  kVK_F17                       = <span class="number">0x40</span>,
  kVK_VolumeUp                  = <span class="number">0x48</span>,
  kVK_VolumeDown                = <span class="number">0x49</span>,
  kVK_Mute                      = <span class="number">0x4A</span>,
  kVK_F18                       = <span class="number">0x4F</span>,
  kVK_F19                       = <span class="number">0x50</span>,
  kVK_F20                       = <span class="number">0x5A</span>,
  kVK_F5                        = <span class="number">0x60</span>,
  kVK_F6                        = <span class="number">0x61</span>,
  kVK_F7                        = <span class="number">0x62</span>,
  kVK_F3                        = <span class="number">0x63</span>,
  kVK_F8                        = <span class="number">0x64</span>,
  kVK_F9                        = <span class="number">0x65</span>,
  kVK_F11                       = <span class="number">0x67</span>,
  kVK_F13                       = <span class="number">0x69</span>,
  kVK_F16                       = <span class="number">0x6A</span>,
  kVK_F14                       = <span class="number">0x6B</span>,
  kVK_F10                       = <span class="number">0x6D</span>,
  kVK_F12                       = <span class="number">0x6F</span>,
  kVK_F15                       = <span class="number">0x71</span>,
  kVK_Help                      = <span class="number">0x72</span>,
  kVK_Home                      = <span class="number">0x73</span>,
  kVK_PageUp                    = <span class="number">0x74</span>,
  kVK_ForwardDelete             = <span class="number">0x75</span>,
  kVK_F4                        = <span class="number">0x76</span>,
  kVK_End                       = <span class="number">0x77</span>,
  kVK_F2                        = <span class="number">0x78</span>,
  kVK_PageDown                  = <span class="number">0x79</span>,
  kVK_F1                        = <span class="number">0x7A</span>,
  kVK_LeftArrow                 = <span class="number">0x7B</span>,
  kVK_RightArrow                = <span class="number">0x7C</span>,
  kVK_DownArrow                 = <span class="number">0x7D</span>,
  kVK_UpArrow                   = <span class="number">0x7E</span>
};
</code></pre>
<p>全文完</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/macOS%E4%B8%8A%E6%A8%A1%E6%8B%9F%E5%8F%91%E9%
    
    </summary>
    
      <category term="macOS开发" scheme="https://www.sunyazhou.com/categories/macOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="macOS开发" scheme="https://www.sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>$(SRCROOT)和$(PROJECT_DIR)区别</title>
    <link href="https://www.sunyazhou.com/2017/02/21/SRCROOT-and-PROJECT-DIR-different/"/>
    <id>https://www.sunyazhou.com/2017/02/21/SRCROOT-and-PROJECT-DIR-different/</id>
    <published>2017-02-21T08:28:00.000Z</published>
    <updated>2017-03-29T23:56:19.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>$(SRCROOT)</code>代表的是项目根目录下<br><code>$(PROJECT_DIR)</code>代表的是整个项目</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;$(SRCROOT)&lt;/code&gt;代表的是项目根目录下&lt;br&gt;&lt;code&gt;$(PROJECT_DIR)&lt;/code&gt;代表的是整个项目&lt;/p&gt;

    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="macOS开发" scheme="https://www.sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>使用终端删除NSUserDefault的内容</title>
    <link href="https://www.sunyazhou.com/2017/02/20/use-terminal-delete-all-NSUserDefault-content/"/>
    <id>https://www.sunyazhou.com/2017/02/20/use-terminal-delete-all-NSUserDefault-content/</id>
    <published>2017-02-20T11:05:01.000Z</published>
    <updated>2017-03-29T23:56:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>大家对<code>NSUserDefaults</code>非常熟悉 今天给大家讲一下如何用终端清理<code>NSUserDefaults</code>的信息  </p>
</blockquote>
<p><code>NSUserDefaults</code>和<code>win</code>开发的注册表一样 用于存储一些标记位<br>最近开发用到的比较多是如何不运行代码的情况下清理<code>NSUserDefaults</code>信息</p>
<p><strong>$ defaults delete + 包名</strong>  eg: com.baidu.demo </p>
<p>下面这样会删除所有以<code>com.baidu.demo</code>为包名的文件  </p>
<pre><code class="shell">$ defaults delete com.baidu.demo
</code></pre>
<blockquote>
<p>实际的的路径(把 my app和前后剪头 换成自己的应用的包名)</p>
</blockquote>
<p>macOS应用非沙盒权限(如下图) <code>~/Library/Preferences/&lt;my app&gt;.plist  &lt;my app&gt;</code>  eg:QQ<br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/%E4%BD%BF%E7%94%A8%E7%BB%88%E7%AB%AF%E5%88%A0%E9%99%A4NSUserDefault%E7%9A%84%E5%86%85%E5%AE%B9/Snip20170220_1.png" alt="非沙盒路径"></p>
<p>macOS应用沙盒权限(如下图)  <code>~/Library/Containers/&lt;my app&gt;/Data/Library/Preferences/&lt;my app&gt;.plist</code> eg:qq  </p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/%E4%BD%BF%E7%94%A8%E7%BB%88%E7%AB%AF%E5%88%A0%E9%99%A4NSUserDefault%E7%9A%84%E5%86%85%E5%AE%B9/Snip20170220_2.png" alt=""></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>defaults 还有其它指令还可以为某个<code>key</code>设置<code>value</code> 大家可自行google  </p>
</blockquote>
<p>谢谢大家</p>
<p>全文完</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;大家对&lt;code&gt;NSUserDefaults&lt;/code&gt;非常熟悉 今天给大家讲一下如何用终端清理&lt;code&gt;N
    
    </summary>
    
      <category term="macOS开发" scheme="https://www.sunyazhou.com/categories/macOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="macOS开发" scheme="https://www.sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>iOS如何让二维码/条形码扫描框跟随二维码移动</title>
    <link href="https://www.sunyazhou.com/2017/02/18/how-to-let-QRCodeView-bounds-tracking-ScanView-moving/"/>
    <id>https://www.sunyazhou.com/2017/02/18/how-to-let-QRCodeView-bounds-tracking-ScanView-moving/</id>
    <published>2017-02-18T11:08:56.000Z</published>
    <updated>2017-03-29T23:56:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>开发过程中经常会遇到二维码条形码,但总会有一个比较蛋疼的问题<br>如何让二维码的扫描框跟随扫码到的二维码移动跟踪呢(就是智能探测扫描的layer.bounds)？  </p>
</blockquote>
<p><img src="http://www.appcoda.com/wp-content/uploads/2016/11/qrcode-reader-5-1024x637.jpg" alt=""></p>
<p>这里有一篇文字讲述了开发过程我这里就不赘述了, 如果有小伙伴觉得需要我翻译的话请在底部留言 我会及时更新代码  </p>
<blockquote>
<p><a href="http://www.appcoda.com/barcode-reader-swift/" target="_blank" rel="external">Building a Barcode and QR Code Reader in Swift 3 and Xcode 8</a></p>
</blockquote>
<p><em>这里比较核心的代码如下</em> <code>AVCaptureMetadataOutputObjectsDelegate</code>代理</p>
<pre><code class="swift">
<span class="function"><span class="keyword">func</span> <span class="title">captureOutput</span><span class="params">(<span class="number">_</span> captureOutput: AVCaptureOutput!, didOutputMetadataObjects metadataObjects: [Any]!, from connection: AVCaptureConnection!)</span></span> {  

    <span class="comment">// Check if the metadataObjects array is not nil and it contains at least one object.</span>
    <span class="keyword">if</span> metadataObjects == <span class="literal">nil</span> || metadataObjects.<span class="built_in">count</span> == <span class="number">0</span> {
        qrCodeFrameView?.frame = <span class="type">CGRect</span>.zero
        messageLabel.text = <span class="string">"No QR code is detected"</span>
        <span class="keyword">return</span>
    }

    <span class="comment">// Get the metadata object.</span>
    <span class="keyword">let</span> metadataObj = metadataObjects[<span class="number">0</span>] <span class="keyword">as</span>! <span class="type">AVMetadataMachineReadableCodeObject</span>

    <span class="keyword">if</span> metadataObj.type == <span class="type">AVMetadataObjectTypeQRCode</span> {
        <span class="comment">// If the found metadata is equal to the QR code metadata then update the status label's text and set the bounds</span>
        <span class="keyword">let</span> barCodeObject = videoPreviewLayer?.transformedMetadataObject(<span class="keyword">for</span>: metadataObj)
        <span class="comment">//核心代码在这</span>
        qrCodeFrameView?.frame = barCodeObject!.bounds

        <span class="keyword">if</span> metadataObj.stringValue != <span class="literal">nil</span> {
            messageLabel.text = metadataObj.stringValue
        }
    }
}}
</code></pre>
<p><code>qrCodeFrameView?.frame = barCodeObject!.bounds</code><br>这行代码最核心 就是拿到barCodeObject.bounds 给我们自己创建透明的那个view就行了 <strong><a href="https://github.com/sunyazhou13/QRCodeReader" target="_blank" rel="external">最终项目</a></strong></p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/%E5%A6%82%E4%BD%95%E8%AE%A9%E4%BA%8C%E7%BB%B4%E7%A0%81-%E6%9D%A1%E5%BD%A2%E7%A0%81%E6%89%AB%E6%8F%8F%E6%A1%86%E8%B7%9F%E9%9A%8F%E4%BA%8C%E7%BB%B4%E7%A0%81%E7%A7%BB%E5%8A%A8/2017-02-18%2019_01_35loop.gif" alt="QRCode 跟踪"></p>
<p>全文完</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;开发过程中经常会遇到二维码条形码,但总会有一个比较蛋疼的问题&lt;br&gt;如何让二维码的扫描框跟随扫码到的二维码移动跟踪
    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>iOS语言本地化/国际化一些技巧</title>
    <link href="https://www.sunyazhou.com/2017/02/17/iOS-internationalization-language-some-skills/"/>
    <id>https://www.sunyazhou.com/2017/02/17/iOS-internationalization-language-some-skills/</id>
    <published>2017-02-17T02:01:19.000Z</published>
    <updated>2017-03-29T23:56:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="代码获取国际化语言数组"><a href="#代码获取国际化语言数组" class="headerlink" title="代码获取国际化语言数组  "></a>代码获取国际化语言数组  </h2><p>获取当前app使用的语言<br><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="built_in">NSArray</span> *langArr1 = [[<span class="built_in">NSUserDefaults</span> standardUserDefaults] valueForKey:<span class="string">@"AppleLanguages"</span>];</div><div class="line"><span class="built_in">NSString</span> *language1 = langArr1.firstObject;</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"模拟器语言：%@"</span>,language1);</div></pre></td></tr></table></figure></p>
<p>切换语言 <code>en</code>代表 英语, <code>zh-Hans</code> 简体中文, <code>zh-Hant</code> 繁体中文.  </p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="built_in">NSArray</span> *lans = @[<span class="string">@"en"</span>];</div><div class="line">[[<span class="built_in">NSUserDefaults</span> standardUserDefaults] setObject:lans forKey:<span class="string">@"AppleLanguages"</span>];</div></pre></td></tr></table></figure>
<h2 id="修改scheme切换启动语言"><a href="#修改scheme切换启动语言" class="headerlink" title="修改scheme切换启动语言"></a>修改scheme切换启动语言</h2><p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/iOS%E8%AF%AD%E8%A8%80%E6%9C%AC%E5%9C%B0%E5%8C%96-%E5%9B%BD%E9%99%85%E5%8C%96%E4%B8%80%E4%BA%9B%E6%8A%80%E5%B7%A7/Snip20170217_2.png" alt="图1"></p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/iOS%E8%AF%AD%E8%A8%80%E6%9C%AC%E5%9C%B0%E5%8C%96-%E5%9B%BD%E9%99%85%E5%8C%96%E4%B8%80%E4%BA%9B%E6%8A%80%E5%B7%A7/Snip20170217_3.png" alt="图2"></p>
<blockquote>
<p><code>-AppleLanguages (zh-Hans)</code> 代表简体中文<br><code>-AppleLanguages (zh-Hant)</code> 代表繁体中文<br><code>-AppleLanguages (en)</code> 代表英文<br>其它小伙伴们自己总结一下也可以 注意 <strong>空格</strong> </p>
</blockquote>
<h2 id="国际化取不同图片代码"><a href="#国际化取不同图片代码" class="headerlink" title="国际化取不同图片代码"></a>国际化取不同图片代码</h2><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"ViewController.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> <span class="built_in">UIImageView</span> *imageView;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    <span class="comment">//xxx 是国际化 图片的名字 例如xxx.png </span></div><div class="line">    <span class="comment">//如果是 xxx.jpg 必须写把xxx 替换成xxx.jpg</span></div><div class="line">    <span class="built_in">NSString</span> *imageName = <span class="built_in">NSLocalizedString</span>(<span class="string">@"xxx"</span>, <span class="literal">nil</span>); </div><div class="line">    <span class="keyword">self</span>.imageView.image = [<span class="built_in">UIImage</span> imageNamed:imageName];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>下面是我写的一个<a href="https://github.com/sunyazhou13/LocalizedDemo/tree/master" target="_blank" rel="external">demo</a><br>主要完成 如下内容 </p>
<ol>
<li>工程名称配置plist 国际化  </li>
<li>字符串国际化  </li>
<li>自定义字符串国际化  </li>
<li>图片国际化  </li>
</ol>
<p>参考 <a href="http://www.jianshu.com/p/88c1b65e3ddb" target="_blank" rel="external">VV木公子</a> </p>
<p>全文完</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;代码获取国际化语言数组&quot;&gt;&lt;a href=&quot;#代码获取国际化语言数组&quot; class=&quot;headerlink&quot; title=&quot;代码获取国际化语言数组  &quot;&gt;&lt;/a&gt;代码获取国际化语言数组  &lt;/h2&gt;&lt;p&gt;获取当前app使用的语言&lt;br&gt;&lt;figure class=
    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="macOS开发" scheme="https://www.sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>搭建hexo博客教程</title>
    <link href="https://www.sunyazhou.com/2017/02/10/build-hexo-blog-Tutorial/"/>
    <id>https://www.sunyazhou.com/2017/02/10/build-hexo-blog-Tutorial/</id>
    <published>2017-02-10T02:24:25.000Z</published>
    <updated>2017-03-29T23:56:19.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><a href="http://www.ezlippi.com/blog/2016/02/jekyll-to-hexo.html" target="_blank" rel="external">Jekyll迁移到Hexo搭建个人博客</a>  </p>
<p><a href="http://www.czhzero.com/2016/06/25/hexoblog/" target="_blank" rel="external">HEXO + Github 搭建自己的博客系统</a></p>
<p><a href="http://skx926.com/2016/01/26/build-hexo/" target="_blank" rel="external">利用Hexo和Github Pages搭建个人博客</a></p>
</blockquote>
<p>上边是我参考的文章<br>主要是环境比较费劲  </p>
<pre><code>1. nodejs  
2. npm包管理工具  
3. hexo  
4. nvm管理node  
5. 本地配置重启shell又被reverse  
6. ...其它
</code></pre><p>多数都是参考喵神写的博客</p>
<p>都是眼泪搭建起来的博客, 完全免费, 可以说是模仿iOS开发者的领袖喵神的blog</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ezlippi.com/blog/2016/02/jekyll-to-hexo.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Jekyll迁移到Hexo搭建个人博客&lt;/a&gt;  &lt;/
    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="macOS开发" scheme="https://www.sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>DFS算法扫描上传文件/文件夹</title>
    <link href="https://www.sunyazhou.com/2017/02/10/DFS-algorithm-scanning-diectory-or-files/"/>
    <id>https://www.sunyazhou.com/2017/02/10/DFS-algorithm-scanning-diectory-or-files/</id>
    <published>2017-02-10T02:07:55.000Z</published>
    <updated>2017-04-29T01:11:13.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="DFS需求背景"><a href="#DFS需求背景" class="headerlink" title="DFS需求背景"></a>DFS需求背景</h2><blockquote>
<p>在开发过程中难免会遇到类似 上传文件夹的功能,但是上传文件夹会遇到一种情况</p>
</blockquote>
<pre><code>1. 如果文件里面包含子文件夹的N层嵌套
2. 如何过滤非空文件夹
3. 如何处理根层文件夹没有文件那么文件目录也需要创建
</code></pre><p>举例例子<br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/DFS%E7%AE%97%E6%B3%95%E6%89%AB%E6%8F%8F%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%3A%E6%96%87%E4%BB%B6%E5%A4%B9/Snip20170213_3.png" alt=""></p>
<p>这种文件夹如何 <code>此文件夹为空且是叶子结点</code> 走上传逻辑(就是发个 http请求 create一下 dir就行了) 我们要的结果是 过滤出这个路径走上传逻辑 创建一下这个最深处目录 那么下次再遇到它的父目录 <code>/1/</code> 的话应该就不用创建了.</p>
<p>还有一种情况  </p>
<blockquote>
<p>eg: ~/Downloads/A/B/C/ 里面有个 1.txt<br>路径是: ~/Downloads/A/B/C//A/B/C/1.txt</p>
</blockquote>
<p>一般如果广度优先做上传的话 Downloads、A、B、C分别要发4个http请求<br>如果深度优先发一个上传这个文件~/Downloads/A/B/C//A/B/C/1.txt就可以了，因为一般server都会做 容错处理发现父目录有没有没有就创建之类的逻辑。</p>
<h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><blockquote>
<p>不要害怕, 很简单<br>一般我们处理这种问题都是采用自己写的递归算法, 估计是鄙人算法不咋好没搞出来什么好的递归,最后找到了 苹果自带的递归方法</p>
</blockquote>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//搞个点击事件 在这里我拿macOS上的 文件选择面板做一下测试</span></div><div class="line">- (<span class="keyword">IBAction</span>)dfsAction:(<span class="built_in">NSButton</span> *)sender</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSOpenPanel</span> *panelPath = [<span class="built_in">NSOpenPanel</span> openPanel];</div><div class="line">    [panelPath setCanChooseFiles:<span class="literal">YES</span>];</div><div class="line">    [panelPath setCanChooseDirectories:<span class="literal">YES</span>];</div><div class="line">    [panelPath setTitle:<span class="string">@"上传文件选择"</span>];</div><div class="line">    [panelPath setCanCreateDirectories:<span class="literal">YES</span>];</div><div class="line">    [panelPath setPrompt:<span class="string">@"上传"</span>];</div><div class="line">    [panelPath setMessage:<span class="string">@"这就是message"</span>];</div><div class="line">    panelPath.allowsMultipleSelection = <span class="literal">YES</span>;</div><div class="line">    [panelPath beginSheetModalForWindow:<span class="keyword">self</span>.window completionHandler:^(<span class="built_in">NSInteger</span> result) &#123;</div><div class="line">        <span class="keyword">if</span> (result == <span class="built_in">NSFileHandlingPanelOKButton</span>) &#123;</div><div class="line">            [<span class="keyword">self</span> dfsUrls:panelPath.URLs];</div><div class="line">        &#125;</div><div class="line">    &#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/DFS%E7%AE%97%E6%B3%95%E6%89%AB%E6%8F%8F%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%3A%E6%96%87%E4%BB%B6%E5%A4%B9/Snip20170213_1.png" alt=""></p>
<p>然后  </p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> 选择文件夹的目录</div><div class="line"></div><div class="line"> @param urls 所有选中的目录/文件URL</div><div class="line"> */</div><div class="line">- (<span class="keyword">void</span>)dfsUrls:(<span class="built_in">NSArray</span> *)urls</div><div class="line">&#123;</div><div class="line">	<span class="comment">//开一个线程在异步处理这些耗时任务</span></div><div class="line">	<span class="built_in">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>), ^&#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"所有URLs%@"</span>,urls);</div><div class="line">        <span class="keyword">if</span> (urls.count == <span class="number">0</span>) &#123; <span class="keyword">return</span>; &#125;</div><div class="line">        </div><div class="line">        <span class="built_in">NSTimeInterval</span> currentTime = [[<span class="built_in">NSDate</span> date] timeIntervalSince1970];</div><div class="line">        <span class="comment">//深度遍历</span></div><div class="line">        <span class="built_in">NSFileManager</span> *fileManager = [<span class="built_in">NSFileManager</span> defaultManager];</div><div class="line">        <span class="built_in">NSMutableArray</span> *urlDirFiles = [[<span class="built_in">NSMutableArray</span> alloc] initWithCapacity:<span class="number">0</span>];</div><div class="line">        <span class="built_in">NSArray</span> *keys = [<span class="built_in">NSArray</span> arrayWithObjects:<span class="built_in">NSURLIsDirectoryKey</span>,<span class="built_in">NSURLParentDirectoryURLKey</span>, <span class="literal">nil</span>];</div><div class="line">        <span class="built_in">NSUInteger</span> *total = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="built_in">NSURL</span> *localUrl <span class="keyword">in</span> urls) &#123;</div><div class="line">            <span class="built_in">NSDirectoryEnumerator</span> *enumerator = [<span class="keyword">self</span> enumeratorPathByFileManager:fileManager atURL:localUrl propertiesForKeys:keys options:<span class="number">0</span>];</div><div class="line">            </div><div class="line">            <span class="comment">//这里包含的元素是 有子文件的忽略父路径结点</span></div><div class="line">            <span class="comment">//eg: /A/1/2/ (这个就需要移除)   /A/1/2/sun.txt(保留这个文件即可）</span></div><div class="line">            <span class="keyword">for</span> (<span class="built_in">NSURL</span> *url <span class="keyword">in</span> enumerator) &#123;</div><div class="line">                total++;</div><div class="line">                <span class="built_in">NSError</span> *error;</div><div class="line">                <span class="built_in">NSNumber</span> *isDirectory = <span class="literal">nil</span>;</div><div class="line">                <span class="keyword">if</span> (![url getResourceValue:&amp;isDirectory forKey:<span class="built_in">NSURLIsDirectoryKey</span> error:&amp;error]) &#123;</div><div class="line">                    <span class="comment">// handle error</span></div><div class="line">                &#125;</div><div class="line">                </div><div class="line">                <span class="comment">//是否为文件夹</span></div><div class="line">                <span class="keyword">if</span> ([isDirectory boolValue]) &#123;</div><div class="line">                    <span class="comment">//方案1</span></div><div class="line"><span class="comment">//                    NSDirectoryEnumerator *dirEnumerator = [self enumeratorPathByFileManager:fileManager atURL:url propertiesForKeys:@[NSURLIsDirectoryKey] options:NSDirectoryEnumerationSkipsSubdirectoryDescendants];</span></div><div class="line"><span class="comment">//                    if (dirEnumerator.allObjects.count &gt; 0) &#123;</span></div><div class="line"><span class="comment">//                        NSLog(@"文件夹内有文件,忽略此条路径 %@",[url path]);</span></div><div class="line"><span class="comment">//                    &#125; else &#123;</span></div><div class="line"><span class="comment">//                        [urlDirFiles addObject:[url path]];</span></div><div class="line"><span class="comment">//                    &#125;</span></div><div class="line">                    </div><div class="line">                    <span class="comment">//方案2</span></div><div class="line">                    <span class="built_in">NSError</span> *error = <span class="literal">nil</span>;</div><div class="line">                    <span class="built_in">NSArray</span> *listOfFiles = [fileManager contentsOfDirectoryAtPath:[url path] error:<span class="literal">nil</span>];</div><div class="line">                    <span class="keyword">if</span> (listOfFiles != <span class="literal">nil</span> &amp;&amp; listOfFiles.count == <span class="number">0</span>) &#123;</div><div class="line">                        [urlDirFiles addObject:[url path]];</div><div class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (error == <span class="literal">nil</span>)&#123;</div><div class="line">                        <span class="built_in">NSLog</span>(<span class="string">@"文件夹内有文件,忽略此条路径 %@"</span>,[url path]);</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        <span class="built_in">NSLog</span>(<span class="string">@"文件遍历该层出错:%@"</span>,error);</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    [urlDirFiles addObject:[url path]];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"所有可上传文件列表:\n%@"</span>,urlDirFiles);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">NSTimeInterval</span> nowTime = [[<span class="built_in">NSDate</span> date] timeIntervalSince1970];</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"\n文件数量:%zd 遍历总数:%zd\n耗时:%.2f 秒"</span>,urlDirFiles.count,total,(nowTime - currentTime));</div><div class="line">        total = <span class="number">0</span>;</div><div class="line">        </div><div class="line">        <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"scan end"</span>);</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来就是最核心的代码块  </p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="built_in">NSDirectoryEnumerator</span> *)enumeratorPathByFileManager:(<span class="built_in">NSFileManager</span> *)fileManager</div><div class="line">                                                 atURL:(<span class="built_in">NSURL</span> *)url</div><div class="line">                                     propertiesForKeys:(<span class="keyword">nullable</span> <span class="built_in">NSArray</span>&lt;<span class="built_in">NSString</span> *&gt; *)keys</div><div class="line">                                               options:(<span class="built_in">NSDirectoryEnumerationOptions</span>)mask</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSDirectoryEnumerator</span> *enumerator = [fileManager</div><div class="line">                                         enumeratorAtURL:url</div><div class="line">                                         includingPropertiesForKeys:keys</div><div class="line">                                         options:mask</div><div class="line">                                         errorHandler:^(<span class="built_in">NSURL</span> *url, <span class="built_in">NSError</span> *error) &#123;</div><div class="line">                                             <span class="comment">// Handle the error.</span></div><div class="line">                                             <span class="comment">// Return YES if the enumeration should continue after the error.</span></div><div class="line">                                             <span class="built_in">NSLog</span>(<span class="string">@"深度遍历出错%@"</span>,error);</div><div class="line">                                             <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">                                         &#125;];</div><div class="line">    <span class="keyword">return</span> enumerator;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>NSDirectoryEnumerator</code> 是一个路径枚举迭代器 </p>
<blockquote>
<p>talk is cheap, show me the result.  </p>
</blockquote>
<p>下面是我扫描本地<code>下载</code>目录的结果<br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/DFS%E7%AE%97%E6%B3%95%E6%89%AB%E6%8F%8F%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%3A%E6%96%87%E4%BB%B6%E5%A4%B9/Snip20170213_4.png" alt=""></p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/DFS%E7%AE%97%E6%B3%95%E6%89%AB%E6%8F%8F%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%3A%E6%96%87%E4%BB%B6%E5%A4%B9/%E5%9B%BE%E7%89%87%201.png" alt=""></p>
<p>结果还是比较快的 </p>
<p>单从数据上来讲 比广度优先节省至少7万次Http请求</p>
<p>我怀疑是macOS对系统目录有索引或者缓存 第二次扫码速度比较快</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总体来看，效果还可以，如果你有更好的算法来解决这种问题 欢迎@我 或者发邮件我也学习一下. </p>
<blockquote>
<p><a href="https://github.com/sunyazhou13/DFSDemo" target="_blank" rel="external">最终DFSdemo</a></p>
</blockquote>
<p>也可学一下:<a href="https://www.raywenderlich.com/157949/swift-algorithm-club-depth-first-search" target="_blank" rel="external">Swift Depth First Search</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;DFS需求背景&quot;&gt;&lt;a href=&quot;#DFS需求背景&quot; class=&quot;headerlink&quot; title=&quot;DFS需求背景&quot;&gt;&lt;/a&gt;DFS需求背景&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;在开发过程中难免会遇到类似 上传文件夹的功能,但是上传文件夹会遇到一种情况
    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="macOS开发" scheme="https://www.sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>如何使用git管理代码</title>
    <link href="https://www.sunyazhou.com/2017/02/09/how-to-use-git-manage-code/"/>
    <id>https://www.sunyazhou.com/2017/02/09/how-to-use-git-manage-code/</id>
    <published>2017-02-09T11:35:45.000Z</published>
    <updated>2017-04-29T01:11:13.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/how-to-use-git-manage-code/A7BB8518D944E893213CFB627.jpg" alt=""></p>
<h2 id="全局配置git"><a href="#全局配置git" class="headerlink" title="全局配置git"></a>全局配置git</h2><figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">$ git config --global user.name <span class="string">"username"</span>  </div><div class="line">$ git config --golbal user.email <span class="string">"email@you.com"</span></div></pre></td></tr></table></figure>
<blockquote>
<p><code>username</code> 一般代表提交的本机用户名<br><code>email@you.com</code> 一般是邮箱地址 </p>
</blockquote>
<h2 id="创建本地仓库进行初始化"><a href="#创建本地仓库进行初始化" class="headerlink" title="创建本地仓库进行初始化  "></a>创建本地仓库进行初始化  </h2><figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">$ git init</div></pre></td></tr></table></figure>
<blockquote>
<p>执行完成之后在本地创建一个 .git 的隐藏文件夹包含git的信息在里面</p>
</blockquote>
<h2 id="克隆远程版本库"><a href="#克隆远程版本库" class="headerlink" title="克隆远程版本库"></a>克隆远程版本库</h2><figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> git@github.com:sunyazhou13/sunyazhou13.github.io.git</div></pre></td></tr></table></figure>
<h2 id="查看当前代码库状况"><a href="#查看当前代码库状况" class="headerlink" title="查看当前代码库状况"></a>查看当前代码库状况</h2><figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">$ git status</div></pre></td></tr></table></figure>
<blockquote>
<p><code>git status</code> 命令会显示当前代码库的状况，包括添加，修改（modified），删除（deleted）</p>
</blockquote>
<h2 id="版本管理"><a href="#版本管理" class="headerlink" title="版本管理"></a>版本管理</h2><p>指向git当前最新版本为<code>HEAD</code>，<code>HEAD^</code>表示上一版本，<code>HEAD^^</code>上上一个版本，<code>HEAD~100</code>表示往上100个版本</p>
<h2 id="添加本地修改代码"><a href="#添加本地修改代码" class="headerlink" title="添加本地修改代码"></a>添加本地修改代码</h2><figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">//添加当前目录的所有修改</div><div class="line">$ git add .</div></pre></td></tr></table></figure>
<blockquote>
<p>//如果需要添加指定文件可以这样<br><code>$ git add  A B  C</code>  // 中间用空格隔开<br>//如果有些文件标红 代表未纳入git 管理 可以 <code>rm -rf xxx</code>删除该文件<br>//如果有些文件标黄 代表有修改<br>//如果有些文件标绿 代表有文件已经纳入 <code>git</code> 管理</p>
</blockquote>
<h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">$ git commit -am <span class="string">"[产品名称][迭代名称] 1.修改点 2.修改点xxx"</span></div></pre></td></tr></table></figure>
<h2 id="push到git代码仓库"><a href="#push到git代码仓库" class="headerlink" title="push到git代码仓库"></a>push到<code>git</code>代码仓库</h2><figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">$ git push origin HEAD:refs/<span class="keyword">for</span>/master</div></pre></td></tr></table></figure>
<blockquote>
<p>如果是第一次提交 使用 <code>git push -u origin master</code></p>
</blockquote>
<h2 id="push-的时候进行代码追踪"><a href="#push-的时候进行代码追踪" class="headerlink" title="push 的时候进行代码追踪"></a>push 的时候进行代码追踪</h2><figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">$ git push --set-upstream origin + 分支名</div></pre></td></tr></table></figure>
<h2 id="如果提交被废弃"><a href="#如果提交被废弃" class="headerlink" title="如果提交被废弃"></a>如果提交被废弃</h2><figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">$ git fetch origin master</div><div class="line">$ git reset --soft origin/master</div><div class="line">$ git add .</div><div class="line">$ git commit -m <span class="string">"some comments"</span></div><div class="line">$ git push origin HEAD:refs/<span class="keyword">for</span>/master</div></pre></td></tr></table></figure>
<blockquote>
<p>回到本地代码库库中，执行</p>
</blockquote>
<h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><p>创建分支并切换过去<br><figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">$ git branch -b 分支名</div></pre></td></tr></table></figure></p>
<p>切换分支</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">$ git checkout 分支名</div></pre></td></tr></table></figure>
<blockquote>
<p>查看远程分支 <code>git branch -r</code> r 代表remote</p>
</blockquote>
<h2 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h2><p><code>$ git merge br-name</code>将<code>br-name</code>分支合并到当前分支下<br>加入<code>--no-ff</code>则表示禁用Fast forward模式。即新建commit而不是切换HEAD指针来实现<br><code>$ git merge --no-ff -m &quot;merge with no-ff&quot; dev</code><br>合并分支前可以通过<code>git diff &lt;source_branch&gt; &lt;target_branch&gt;</code>来查看两者不同</p>
<h2 id="合并冲突"><a href="#合并冲突" class="headerlink" title="合并冲突"></a>合并冲突</h2><p>merge分支时，如果两分支对同一地方做了不同的修改，则为冲突，冲突的文件git会生成如下内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD </div><div class="line">Creating a new branch is quick &amp; simple. </div><div class="line">======= </div><div class="line">Creating a new branch is quick AND simple. </div><div class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; feature1</div></pre></td></tr></table></figure>
<p>解决完冲突 合并之后 记得执行</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">$ git rebase --continue</div></pre></td></tr></table></figure>
<p><a href="https://www.zybuluo.com/ValenW/note/364756" target="_blank" rel="external">详细资料参考</a></p>
<p>持续更新</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/how-to-use-git-manage-code/A7BB8518D944E89321
    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="macOS开发" scheme="https://www.sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
</feed>
