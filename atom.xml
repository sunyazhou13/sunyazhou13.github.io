<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>東引甌越</title>
  <subtitle>不断学习, 与时俱进.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.sunyazhou.com/"/>
  <updated>2017-07-16T02:02:39.000Z</updated>
  <id>https://www.sunyazhou.com/</id>
  
  <author>
    <name>sunyazhou</name>
    <email>sunyazhou13@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iOS 11 新技能</title>
    <link href="https://www.sunyazhou.com/2017/07/13/ios11-new-skills/"/>
    <id>https://www.sunyazhou.com/2017/07/13/ios11-new-skills/</id>
    <published>2017-07-13T02:55:15.000Z</published>
    <updated>2017-07-16T02:02:39.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/ios11-new-skills/what_is_news_in_ios11.png" alt=""></p>
<h2 id="可用性检查API"><a href="#可用性检查API" class="headerlink" title="可用性检查API"></a>可用性检查API</h2><p>在swift代码中经常可以看到 某个API 适用于 iOS10.0 </p>
<p>如下代码</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="meta">@available</span>(iOS <span class="number">11</span>, *)) &#123;</div><div class="line">	<span class="comment">//iOS 11可用 </span></div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">	<span class="comment">//老版本API</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在Xcode9 中, 编译器增加了 Objective-C 版本的 API 可用性检查</p>
<h5 id="通过API-AVAILABLE宏来标注方法的可用性"><a href="#通过API-AVAILABLE宏来标注方法的可用性" class="headerlink" title="通过API_AVAILABLE宏来标注方法的可用性"></a>通过<code>API_AVAILABLE</code>宏来标注方法的可用性</h5><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> : <span class="title">UIViewController</span></span></div><div class="line">- (<span class="keyword">void</span>)xxxMethodA API_AVAILABLE(ios(<span class="number">11.0</span>));</div><div class="line">- (<span class="keyword">void</span>)xxxMethodB API_AVAILABLE(ios(<span class="number">8.0</span>), macos(<span class="number">10.10</span>), watchos(<span class="number">2.0</span>), tvos(<span class="number">9.0</span>));</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<blockquote>
<p>切记 <code>macos</code>、<code>ios</code>、<code>watchos</code>、<code>tvos</code>都是小写</p>
</blockquote>
<p>通过这种写法进行可用性判断, 编辑器就不会产生警告了, 并且在<code>运行时</code>就根据iOS系统版本执行相应代码.</p>
<h5 id="通过API-AVAILABLE宏来标注整个class的可用性"><a href="#通过API-AVAILABLE宏来标注整个class的可用性" class="headerlink" title="通过API_AVAILABLE宏来标注整个class的可用性"></a>通过<code>API_AVAILABLE</code>宏来标注整个<code>class</code>的可用性</h5><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">API_AVAILABLE(ios(<span class="number">11.0</span>))</div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">A</span> : <span class="title">NSObject</span></span></div><div class="line">- (<span class="keyword">void</span>)xxxMothod;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>看了大家会发现 这个 都是用于OC的代码 那C/C++ 有吗? 必须有</p>
<h5 id="C-C-代码-可以使用"><a href="#C-C-代码-可以使用" class="headerlink" title="C/C++ 代码 可以使用 ``"></a>C/C++ 代码 可以使用 ``</h5><p>判断是否可用</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">if</span> (__builtin_available(iOS <span class="number">11</span>, macOS <span class="number">10.13</span>, *)) &#123;</div><div class="line">     xxxxFunc();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="code"><pre><div class="line">//导入头文件</div><div class="line">#include &lt;os/availability.h&gt; </div><div class="line"></div><div class="line">//可用性判断用于 声明函数 </div><div class="line">void myFunctionForiOS11OrNewer(int i) API_AVAILABLE(ios(11.0), macos(10.13));  </div><div class="line"></div><div class="line">//可用性判断 用于类 XXXClassA</div><div class="line">class API_AVAILABLE(ios(11.0), macos(10.13)) XXXClassA;</div></pre></td></tr></table></figure>
<p>默认 <code>API_AVAILABLE()</code> 只能用于 <code>iOS 11</code> / <code>tvOS 11</code> / <code>macOS 10.13</code> / <code>watchOS 4</code> 以上的 API 生效</p>
<p>如果就工程想使用这种llvm新版特性的话 需要修改 <code>buid setting</code>里面的 <code>Unguarded availability</code>  如下图:</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/ios11-new-skills/availability%402x.png" alt=""></p>
<h2 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h2><p>前面的文章我又讲过<a href="http://www.sunyazhou.com/2017/06/20/enable-static-analyer/">静态分析</a></p>
<p>这里说一下变化</p>
<h3 id="NSNumber-CFNumberRed-静态分析-延时"><a href="#NSNumber-CFNumberRed-静态分析-延时" class="headerlink" title="NSNumber/CFNumberRed 静态分析 延时"></a>NSNumber/CFNumberRed 静态分析 延时</h3><p>当我们错误的判断 NSNumber时  静态分析 则给出了提示 </p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/ios11-new-skills/error.png" alt=""></p>
<p>在Xcode9 中可以直接把这种倍忽视 的问题改成 当错误处理</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/ios11-new-skills/static.png" alt=""></p>
<h2 id="开启-LTO-并设置为-Incremental-模式"><a href="#开启-LTO-并设置为-Incremental-模式" class="headerlink" title="开启 LTO 并设置为 Incremental 模式"></a>开启 LTO 并设置为 Incremental 模式</h2><p>链接时优化（以下简称 <code>LTO</code>）是 LLVM 的一项优化特性，其主要原理是:</p>
<p><em>利用对象文件经过一些优化得到的中间格式在链接阶段再进行深度优化，包含代码逻辑层面的分析，去除实际未用到的函数、变量、甚至局部代码片段，继而减小安装包大小，同时提高了运行时的效率。</em></p>
<p>对于 LTO，Xcode 9 做出的改进主要是在进一步优化了编译速度。 苹果演示的例子是以某个大型 C++ 工程为参考，对于一次完整链接，Xcode 9 比 Xcode 8 提升了 35%；对于一次增量链接，Xcode 9 比 Xcode 8 提升了近 60%。</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/ios11-new-skills/lto1.png" alt=""></p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/ios11-new-skills/lto2.png" alt=""></p>
<p>开启LTO</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/ios11-new-skills/LTO.png" alt=""></p>
<p>据说对包大小和运行时速度有 10% 左右的优化</p>
<h2 id="GCD-统一队列标识"><a href="#GCD-统一队列标识" class="headerlink" title="GCD 统一队列标识"></a>GCD 统一队列标识</h2><p>统一队列标识是指我们在工程中散落在各处的创建队列，如果队列标识是一样的，他们在内核中会被 bind 在一起，其效率可以提高 30%。Apple 没有告诉我们其内核是怎么做到的，它提供了这样的建议，如果一类操作重要性程度或其他属性接近，亦或开发者希望散落在工程各处的代码可以放在同一个队列里去控制，那么我们在创建队列的时候就可以指定一个共同的标识符。 然后系统在内核中会把这些标识相同的队列 bind 到一起来管理</p>
<p>如下代码 如果app里面都使用同一个字符串 的话 效率可以提高30%</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_queue_create(<span class="string">"com.sunyazhou.demo.queue"</span>, DISPATCH_QUEUE_CONCURRENT);</div><div class="line">   <span class="built_in">dispatch_async</span>(queue, ^&#123;</div><div class="line">      <span class="comment">//异步执行代码写在这里</span></div><div class="line">   &#125;);</div></pre></td></tr></table></figure>
<blockquote>
<p>老实说 工程里面 避免不了文件上传下载 或者耗时任务处理  如果 整体搞成一个queue显然 不太符合业务需求 如果尽量保持 一个标识的Queue的话 也只能根据 业务分类来做到  可以有机会尝试一下</p>
</blockquote>
<p>全文完</p>
<p><a href="https://techblog.toutiao.com/2017/07/05/session0-2/" target="_blank" rel="external">参考</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/ios11-new-skills/what_is_news_in_ios11.png&quot; a
    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="macOS开发" scheme="https://www.sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>iOS生成随机颜色代码</title>
    <link href="https://www.sunyazhou.com/2017/07/04/arc4random-color/"/>
    <id>https://www.sunyazhou.com/2017/07/04/arc4random-color/</id>
    <published>2017-07-04T09:45:28.000Z</published>
    <updated>2017-07-16T02:02:47.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="built_in">CGFloat</span> hue = ( arc4random() % <span class="number">256</span> / <span class="number">256.0</span> );  <span class="comment">//  0.0 to 1.0</span></div><div class="line">   <span class="built_in">CGFloat</span> saturation = ( arc4random() % <span class="number">128</span> / <span class="number">256.0</span> ) + <span class="number">0.5</span>;  <span class="comment">//  0.5 to 1.0, away from white</span></div><div class="line">   <span class="built_in">CGFloat</span> brightness = ( arc4random() % <span class="number">128</span> / <span class="number">256.0</span> ) + <span class="number">0.5</span>;  <span class="comment">//  0.5 to 1.0, away from black</span></div><div class="line">   <span class="built_in">UIColor</span> *color = [<span class="built_in">UIColor</span> colorWithHue:hue saturation:saturation brightness:brightness alpha:<span class="number">1</span>];</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt; hue = ( arc4random()
    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="macOS开发" scheme="https://www.sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="技巧" scheme="https://www.sunyazhou.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>iOS获取各种文件目录的路径</title>
    <link href="https://www.sunyazhou.com/2017/06/26/get-sandbox-path-ios/"/>
    <id>https://www.sunyazhou.com/2017/06/26/get-sandbox-path-ios/</id>
    <published>2017-06-26T08:44:22.000Z</published>
    <updated>2017-07-16T02:01:48.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 获取沙盒主目录路径</span></div><div class="line"><span class="built_in">NSString</span> *homeDir = <span class="built_in">NSHomeDirectory</span>();</div><div class="line"><span class="comment">// 获取Documents目录路径</span></div><div class="line"><span class="built_in">NSString</span> *docDir = [<span class="built_in">NSSearchPathForDirectoriesInDomains</span>(<span class="built_in">NSDocumentDirectory</span>, <span class="built_in">NSUserDomainMask</span>, <span class="literal">YES</span>) firstObject];</div><div class="line"><span class="comment">// 获取Library的目录路径</span></div><div class="line"><span class="built_in">NSString</span> *libDir = [<span class="built_in">NSSearchPathForDirectoriesInDomains</span>(<span class="built_in">NSLibraryDirectory</span>, <span class="built_in">NSUserDomainMask</span>, <span class="literal">YES</span>) lastObject];</div><div class="line"><span class="comment">// 获取Caches目录路径</span></div><div class="line"><span class="built_in">NSString</span> *cachesDir = [<span class="built_in">NSSearchPathForDirectoriesInDomains</span>(<span class="built_in">NSCachesDirectory</span>, <span class="built_in">NSUserDomainMask</span>, <span class="literal">YES</span>) firstObject];</div><div class="line"><span class="comment">// 获取tmp目录路径</span></div><div class="line"><span class="built_in">NSString</span> *tmpDir =  <span class="built_in">NSTemporaryDirectory</span>();</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 获取沙盒主目录路径&lt;/span&gt;&lt;/div&gt;&lt;div class=
    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="macOS开发" scheme="https://www.sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>iOS Android Php RSA加密解密通配方案(绝对好使,拒绝不说人话的文章)</title>
    <link href="https://www.sunyazhou.com/2017/06/26/rsa-universal-cross-platform-ios-android-php/"/>
    <id>https://www.sunyazhou.com/2017/06/26/rsa-universal-cross-platform-ios-android-php/</id>
    <published>2017-06-26T02:42:47.000Z</published>
    <updated>2017-07-16T02:00:08.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/rsa-universal-cross-platform-ios-android-php/rsa-red-logo.png" alt=""></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>先膜拜一下 RSA的作者</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/rsa-universal-cross-platform-ios-android-php/rsa-team.jpg" alt=""></p>
<p>RSA非对称加密 原理 各种。。。 请自行百度 </p>
<h2 id="弯路"><a href="#弯路" class="headerlink" title="弯路"></a>弯路</h2><p>最近开发涉及到如何使用RSA进行鉴权 等技术。。。老实说 我找了一圈根本就找到一个真正能在 iOS、Android、web跑通的代码.<br> 浪费了好几天开发时间 就没有一个靠谱能好使的 所以我必须发一篇博客<br>把真正 好使的代码拿出来 share一下 (当时我真的 想骂娘了 我擦 百度搜出来的 一堆垃圾) </p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><h2 id="第一步-生成公私钥对"><a href="#第一步-生成公私钥对" class="headerlink" title="第一步 生成公私钥对"></a>第一步 生成公私钥对</h2><h3 id="命令生成原始-RSA私钥文件-rsa-private-key-pem"><a href="#命令生成原始-RSA私钥文件-rsa-private-key-pem" class="headerlink" title="命令生成原始 RSA私钥文件 rsa_private_key.pem"></a>命令生成原始 RSA私钥文件 rsa_private_key.pem</h3><figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">openssl genrsa -out rsa_private_key.pem 1024</div></pre></td></tr></table></figure>
<h3 id="命令将原始-RSA私钥转换为-pkcs8格式"><a href="#命令将原始-RSA私钥转换为-pkcs8格式" class="headerlink" title="命令将原始 RSA私钥转换为 pkcs8格式"></a>命令将原始 RSA私钥转换为 pkcs8格式</h3><figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">openssl pkcs8 -topk8 -inform PEM -<span class="keyword">in</span> rsa_private_key.pem -outform PEM -nocrypt -out private_key.pem</div></pre></td></tr></table></figure>
<h3 id="生成RSA公钥-rsa-public-key-pem"><a href="#生成RSA公钥-rsa-public-key-pem" class="headerlink" title="生成RSA公钥 rsa_public_key.pem"></a>生成RSA公钥 rsa_public_key.pem</h3><figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">openssl rsa -<span class="keyword">in</span> rsa_private_key.pem -pubout -out rsa_public_key.pem</div></pre></td></tr></table></figure>
<blockquote>
<p>从上面看出通过私钥能生成对应的公钥，因此我们将私钥<code>private_key.pem</code>用在<em>服务器端</em>，<em>公钥</em>发放给<code>android</code>跟<code>ios</code>等前端</p>
</blockquote>
<h2 id="第二步-php代码实现"><a href="#第二步-php代码实现" class="headerlink" title="第二步 php代码实现"></a>第二步 php代码实现</h2><figure class="highlight php"><table><tr><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@author</span> sunyazhou (http://www.sunyazhou.com/)</div><div class="line"> * <span class="doctag">@version</span> 1.0</div><div class="line"> * <span class="doctag">@created</span> 2017-6-25</div><div class="line"> */</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rsa</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> $PRIVATE_KEY = <span class="string">'-----BEGIN PRIVATE KEY-----</span></div><div class="line">xxxxxxxxxxxxxxxxxxxxx</div><div class="line">/xxxxxxxxxxxxxxxxxxxxx</div><div class="line">y4dDpCOn</div><div class="line">A4tBsIdpMMoT+w==</div><div class="line">-----END PRIVATE KEY-----';</div><div class="line">    <span class="comment">/**</span></div><div class="line">    *返回对应的私钥</div><div class="line">    */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getPrivateKey</span><span class="params">()</span></span>&#123;</div><div class="line">    </div><div class="line">        $privKey = <span class="keyword">self</span>::$PRIVATE_KEY;</div><div class="line">         </div><div class="line">        <span class="keyword">return</span> openssl_pkey_get_private($privKey);      </div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 私钥加密</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">privEncrypt</span><span class="params">($data)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(!is_string($data))&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;           </div><div class="line">        <span class="keyword">return</span> openssl_private_encrypt($data,$encrypted,<span class="keyword">self</span>::getPrivateKey())? base64_encode($encrypted) : <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 私钥解密</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">privDecrypt</span><span class="params">($encrypted)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(!is_string($encrypted))&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> (openssl_private_decrypt(base64_decode($encrypted), $decrypted, <span class="keyword">self</span>::getPrivateKey()))? $decrypted : <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>打开<code>private_key.pem</code>，将上面的$PRIVATE_KEY，替换成private_key.pem的内容即可，服务器端我们只需要使用私钥来加密解密。</p>
<h2 id="第三步-android端-代码实现"><a href="#第三步-android端-代码实现" class="headerlink" title="第三步 android端 代码实现"></a>第三步 android端 代码实现</h2><p>使用java的Cipher类来实现加密解密类，代码如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</div><div class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</div><div class="line"><span class="keyword">import</span> java.io.InputStream;</div><div class="line"><span class="keyword">import</span> java.security.KeyFactory;</div><div class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</div><div class="line"><span class="keyword">import</span> java.security.PublicKey;</div><div class="line"><span class="keyword">import</span> java.security.spec.X509EncodedKeySpec;</div><div class="line"><span class="keyword">import</span> javax.crypto.Cipher;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> android.util.Base64;</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@author</span> alun (http://alunblog.duapp.com)</div><div class="line"> * <span class="doctag">@version</span> 1.0</div><div class="line"> * <span class="doctag">@created</span> 2013-5-17</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rsa</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String RSA_PUBLICE =</div><div class="line">            <span class="string">"xxxxxxxxxxxxxxxxC"</span> + <span class="string">"\r"</span> +</div><div class="line">            <span class="string">"Qf/xxxxxxxhVuwdNH6aRFE0ms3bkpp/WL4cfVDgnCO"</span> + <span class="string">"\r"</span> +</div><div class="line">            <span class="string">"+W9J6vRVpuTuD/xxxxxxxxbJeO74fYnYqo/mmyJSeLE5iZg4I"</span> + <span class="string">"\r"</span> +</div><div class="line">            <span class="string">"Zm5LPWBZWUp3ULCAZQIDAQAB"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ALGORITHM = <span class="string">"RSA"</span>;</div><div class="line"> </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 得到公钥</div><div class="line">     * <span class="doctag">@param</span> algorithm</div><div class="line">     * <span class="doctag">@param</span> bysKey</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> PublicKey <span class="title">getPublicKeyFromX509</span><span class="params">(String algorithm,</span></span></div><div class="line">            String bysKey) <span class="keyword">throws</span> NoSuchAlgorithmException, Exception &#123;</div><div class="line">        <span class="keyword">byte</span>[] decodedKey = Base64.decode(bysKey,Base64.DEFAULT);</div><div class="line">        X509EncodedKeySpec x509 = <span class="keyword">new</span> X509EncodedKeySpec(decodedKey);</div><div class="line"> </div><div class="line">        KeyFactory keyFactory = KeyFactory.getInstance(algorithm);</div><div class="line">        <span class="keyword">return</span> keyFactory.generatePublic(x509);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 使用公钥加密</div><div class="line">     * <span class="doctag">@param</span> content</div><div class="line">     * <span class="doctag">@param</span> key</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encryptByPublic</span><span class="params">(String content)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            PublicKey pubkey = getPublicKeyFromX509(ALGORITHM, RSA_PUBLICE);</div><div class="line"> </div><div class="line">            Cipher cipher = Cipher.getInstance(<span class="string">"RSA/ECB/PKCS1Padding"</span>);</div><div class="line">            cipher.init(Cipher.ENCRYPT_MODE, pubkey);</div><div class="line"> </div><div class="line">            <span class="keyword">byte</span> plaintext[] = content.getBytes(<span class="string">"UTF-8"</span>);</div><div class="line">            <span class="keyword">byte</span>[] output = cipher.doFinal(plaintext);</div><div class="line"> </div><div class="line">            String s = <span class="keyword">new</span> String(Base64.encode(output,Base64.DEFAULT));</div><div class="line"> </div><div class="line">            <span class="keyword">return</span> s;</div><div class="line"> </div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="comment">/**</span></div><div class="line">    * 使用公钥解密</div><div class="line">    * <span class="doctag">@param</span> content 密文</div><div class="line">    * <span class="doctag">@param</span> key 商户私钥</div><div class="line">    * <span class="doctag">@return</span> 解密后的字符串</div><div class="line">    */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">decryptByPublic</span><span class="params">(String content)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            PublicKey pubkey = getPublicKeyFromX509(ALGORITHM, RSA_PUBLICE);</div><div class="line">            Cipher cipher = Cipher.getInstance(<span class="string">"RSA/ECB/PKCS1Padding"</span>);</div><div class="line">            cipher.init(Cipher.DECRYPT_MODE, pubkey);</div><div class="line">            InputStream ins = <span class="keyword">new</span> ByteArrayInputStream(Base64.decode(content,Base64.DEFAULT));</div><div class="line">            ByteArrayOutputStream writer = <span class="keyword">new</span> ByteArrayOutputStream();</div><div class="line">            <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">128</span>];</div><div class="line">            <span class="keyword">int</span> bufl;</div><div class="line">            <span class="keyword">while</span> ((bufl = ins.read(buf)) != -<span class="number">1</span>) &#123;</div><div class="line">                <span class="keyword">byte</span>[] block = <span class="keyword">null</span>;</div><div class="line">                <span class="keyword">if</span> (buf.length == bufl) &#123;</div><div class="line">                block = buf;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                block = <span class="keyword">new</span> <span class="keyword">byte</span>[bufl];</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bufl; i++) &#123;</div><div class="line">                    block[i] = buf[i];</div><div class="line">                &#125;</div><div class="line">                &#125;</div><div class="line">                writer.write(cipher.doFinal(block));</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> String(writer.toByteArray(), <span class="string">"utf-8"</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong><em>注意:</em></strong>在初始化<code>Cipher</code>对象时，一定要指明使用<code>&quot;RSA/ECB/PKCS1Padding&quot;</code>格式如<code>Cipher.getInstance(&quot;RSA/ECB/PKCS1Padding&quot;);</code><br>打开<code>rsa_public_key.pem</code>文件，将上面代码的<code>RSA_PUBLICE</code>替换成其中内容即可.</p>
<h2 id="第四步-iOS端代码实现"><a href="#第四步-iOS端代码实现" class="headerlink" title="第四步 iOS端代码实现"></a>第四步 iOS端代码实现</h2><p>iOS上没有直接处理RSA加密的API，网上说的大多数也是处理X.509的证书的方法来实现，不过X.509证书是带签名的，在php端<code>openssl_pkey_get_private</code>方法获取密钥时，第二个参数需要传签名，而android端实现X.509证书加密解密较为不易，在这里我们利用ios兼容c程序的特点，利用openssl的api实现rsa的加密解密，代码如下：</p>
<p>CRSA.h代码</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  CRSA.h</span></div><div class="line"><span class="comment">//  RSA_C_demo</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by sunyazhou on 2017/6/25.</span></div><div class="line"><span class="comment">//  Copyright © 2017年 Kingsoft, Inc. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;openssl/rsa.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;openssl/pem.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;openssl/err.h&gt;</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> &#123;</div><div class="line">    KeyTypePublic,</div><div class="line">    KeyTypePrivate</div><div class="line">&#125;KeyType;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> &#123;</div><div class="line">    RSA_PADDING_TYPE_NONE       = RSA_NO_PADDING,</div><div class="line">    RSA_PADDING_TYPE_PKCS1      = RSA_PKCS1_PADDING,</div><div class="line">    RSA_PADDING_TYPE_SSLV23     = RSA_SSLV23_PADDING</div><div class="line">&#125;RSA_PADDING_TYPE;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">CRSA</span> : <span class="title">NSObject</span></span>&#123;</div><div class="line">    RSA *_rsa;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>)<span class="built_in">NSString</span> *rsaKeyPath; <span class="comment">//证书路径</span></div><div class="line"></div><div class="line">+ (<span class="keyword">id</span>)shareInstance;</div><div class="line">- (<span class="built_in">BOOL</span>)importRSAKeyFromeStringWithType:(KeyType)type andKey:(<span class="built_in">NSString</span> *)keyPath;</div><div class="line">- (<span class="built_in">BOOL</span>)importRSAKeyWithType:(KeyType)type;</div><div class="line">- (<span class="keyword">int</span>)getBlockSizeWithRSA_PADDING_TYPE:(RSA_PADDING_TYPE)padding_type;</div><div class="line">- (<span class="built_in">NSString</span> *)encryptByRsa:(<span class="built_in">NSString</span>*)content withKeyType:(KeyType)keyType;</div><div class="line">- (<span class="built_in">NSString</span> *)decryptByRsa:(<span class="built_in">NSString</span>*)content withKeyType:(KeyType)keyType;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>CRSA.m</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"></div><div class="line">//  CRSA.m</div><div class="line">//  RSA_C_demo</div><div class="line">//</div><div class="line">//  Created by sunyazhou on 2017/6/25.</div><div class="line">//  Copyright © 2017年 Kingsoft, Inc. All rights reserved.</div><div class="line">//</div><div class="line"></div><div class="line">#import &quot;CRSA.h&quot;</div><div class="line"></div><div class="line">#define BUFFSIZE  1024</div><div class="line">//#import &quot;NSString+Base64.h&quot;</div><div class="line">//#import &quot;NSData+Base64.h&quot;</div><div class="line"></div><div class="line">#define PADDING RSA_PADDING_TYPE_PKCS1</div><div class="line">@implementation CRSA</div><div class="line"></div><div class="line">+ (id)shareInstance</div><div class="line">&#123;</div><div class="line">    static KSYCRSA *_crsa = nil;</div><div class="line">    static dispatch_once_t onceToken;</div><div class="line">    dispatch_once(&amp;onceToken, ^&#123;</div><div class="line">        _crsa = [[self alloc] init];</div><div class="line">    &#125;);</div><div class="line">    return _crsa;</div><div class="line">&#125;</div><div class="line">- (BOOL)importRSAKeyWithType:(KeyType)type</div><div class="line">&#123;</div><div class="line">    FILE *file;</div><div class="line">    NSString *keyName = type == KeyTypePublic ? @&quot;public_key&quot; : @&quot;private_key&quot;;</div><div class="line">    NSString *keyPath = [[NSBundle mainBundle] pathForResource:keyName ofType:@&quot;pem&quot;];</div><div class="line">    </div><div class="line">    file = fopen([keyPath UTF8String], &quot;rb&quot;);</div><div class="line">    </div><div class="line">    if (NULL != file)</div><div class="line">    &#123;</div><div class="line">        if (type == KeyTypePublic)</div><div class="line">        &#123;</div><div class="line">            _rsa = PEM_read_RSA_PUBKEY(file, NULL, NULL, NULL);</div><div class="line">            assert(_rsa != NULL);</div><div class="line">        &#125;</div><div class="line">        else</div><div class="line">        &#123;</div><div class="line">            _rsa = PEM_read_RSAPrivateKey(file, NULL, NULL, NULL);</div><div class="line">            assert(_rsa != NULL);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        fclose(file);</div><div class="line">        </div><div class="line">        return (_rsa != NULL) ? YES : NO;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    return NO;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (BOOL)importRSAKeyWithPath:(KeyType)type</div><div class="line">&#123;</div><div class="line">    FILE *file;</div><div class="line">    NSString *keyName = type == KeyTypePublic ? @&quot;public_key.pem&quot; : @&quot;private_key.pem&quot;;</div><div class="line">    NSString *keyPath = [self.rsaKeyPath stringByAppendingPathComponent:keyName];</div><div class="line">    file = fopen([keyPath UTF8String], &quot;rb&quot;);</div><div class="line">    </div><div class="line">    if (NULL != file)</div><div class="line">    &#123;</div><div class="line">        if (type == KeyTypePublic)</div><div class="line">        &#123;</div><div class="line">            _rsa = PEM_read_RSA_PUBKEY(file, NULL, NULL, NULL);</div><div class="line">            assert(_rsa != NULL);</div><div class="line">        &#125;</div><div class="line">        else</div><div class="line">        &#123;</div><div class="line">            _rsa = PEM_read_RSAPrivateKey(file, NULL, NULL, NULL);</div><div class="line">            assert(_rsa != NULL);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        fclose(file);</div><div class="line">        </div><div class="line">        return (_rsa != NULL) ? YES : NO;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    return NO;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">- (BOOL)importRSAKeyFromeStringWithType:(KeyType)type andKey:(NSString *)key&#123;</div><div class="line">    if (key.length == 0) &#123; return NO; &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    BIO *keybio ;</div><div class="line">    keybio = BIO_new_mem_buf((__bridge void *)(key), -1);</div><div class="line">    if (keybio==NULL)</div><div class="line">    &#123;</div><div class="line">        printf( &quot;Failed to create key BIO&quot;);</div><div class="line">        return 0;</div><div class="line">    &#125;</div><div class="line">    if(type == KeyTypePublic)</div><div class="line">    &#123;</div><div class="line">        _rsa = PEM_read_bio_RSA_PUBKEY(keybio, &amp;_rsa,NULL, NULL);</div><div class="line">    &#125;</div><div class="line">    else</div><div class="line">    &#123;</div><div class="line">        _rsa = PEM_read_bio_RSAPrivateKey(keybio, &amp;_rsa,NULL, NULL);</div><div class="line">    &#125;</div><div class="line">    BIO_free(keybio);</div><div class="line">    return (_rsa != NULL) ? YES : NO;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (NSString *) encryptByRsa:(NSString*)content withKeyType:(KeyType)keyType</div><div class="line">&#123;</div><div class="line">    if (![self importRSAKeyWithPath:keyType])</div><div class="line">        return nil;</div><div class="line">//    if (![self importRSAKeyWithType:keyType])</div><div class="line">//        return nil;</div><div class="line">    </div><div class="line">    int status;</div><div class="line">    NSUInteger length  = [content length];</div><div class="line">    unsigned char input[length + 1];</div><div class="line">    bzero(input, length + 1);</div><div class="line">    int i = 0;</div><div class="line">    for (; i &lt; length; i++)</div><div class="line">    &#123;</div><div class="line">        input[i] = [content characterAtIndex:i];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    NSInteger  flen = [self getBlockSizeWithRSA_PADDING_TYPE:PADDING];</div><div class="line">    </div><div class="line">    char *encData = (char*)malloc(flen);</div><div class="line">    bzero(encData, flen);</div><div class="line">    </div><div class="line">    switch (keyType) &#123;</div><div class="line">        case KeyTypePublic:</div><div class="line">            status = RSA_public_encrypt(length, (unsigned char*)input, (unsigned char*)encData, _rsa, PADDING);</div><div class="line">            break;</div><div class="line">            </div><div class="line">        default:</div><div class="line">            status = RSA_private_encrypt(length, (unsigned char*)input, (unsigned char*)encData, _rsa, PADDING);</div><div class="line">            break;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    if (status)</div><div class="line">    &#123;</div><div class="line">        NSData *returnData = [NSData dataWithBytes:encData length:status];</div><div class="line">        free(encData);</div><div class="line">        encData = NULL;</div><div class="line">        </div><div class="line">        NSString *ret = [self base64EncodedStringForData:returnData ];</div><div class="line">        return ret;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    free(encData);</div><div class="line">    encData = NULL;</div><div class="line">    </div><div class="line">    return nil;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (NSString *) decryptByRsa:(NSString*)content withKeyType:(KeyType)keyType</div><div class="line">&#123;</div><div class="line">    if (![self importRSAKeyWithPath:keyType])</div><div class="line">        return nil;</div><div class="line">//    if (![self importRSAKeyWithType:keyType])</div><div class="line">//        return nil;</div><div class="line">    </div><div class="line">    int status;</div><div class="line">    </div><div class="line">    NSData *data = [self base64DecodedDataForString:content];</div><div class="line">    NSUInteger length = [data length];</div><div class="line">    </div><div class="line">    NSInteger flen = [self getBlockSizeWithRSA_PADDING_TYPE:PADDING];</div><div class="line">    char *decData = (char*)malloc(flen);</div><div class="line">    bzero(decData, flen);</div><div class="line">    </div><div class="line">    switch (keyType) &#123;</div><div class="line">        case KeyTypePublic:</div><div class="line">            status = RSA_public_decrypt(length, (unsigned char*)[data bytes], (unsigned char*)decData, _rsa, PADDING);</div><div class="line">            break;</div><div class="line">            </div><div class="line">        default:</div><div class="line">            status = RSA_private_decrypt(length, (unsigned char*)[data bytes], (unsigned char*)decData, _rsa, PADDING);</div><div class="line">            break;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    if (status)</div><div class="line">    &#123;</div><div class="line">        NSMutableString *decryptString = [[NSMutableString alloc] initWithBytes:decData length:strlen(decData) encoding:NSASCIIStringEncoding];</div><div class="line">        free(decData);</div><div class="line">        decData = NULL;</div><div class="line">        </div><div class="line">        return decryptString;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    free(decData);</div><div class="line">    decData = NULL;</div><div class="line">    </div><div class="line">    return nil;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (int)getBlockSizeWithRSA_PADDING_TYPE:(RSA_PADDING_TYPE)padding_type</div><div class="line">&#123;</div><div class="line">    int len = RSA_size(_rsa);</div><div class="line">    </div><div class="line">    if (padding_type == RSA_PADDING_TYPE_PKCS1 || padding_type == RSA_PADDING_TYPE_SSLV23) &#123;</div><div class="line">        len -= 11;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    return len;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">//---------------加密工具方法</div><div class="line">- (NSString *)base64EncodedStringForData:(NSData *)data</div><div class="line">&#123;</div><div class="line">    return [self base64EncodedStringWithWrapWidth:0 data:data];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (NSString *)base64EncodedStringWithWrapWidth:(NSUInteger)wrapWidth data:(NSData *)data</div><div class="line">&#123;</div><div class="line">    //ensure wrapWidth is a multiple of 4</div><div class="line">    wrapWidth = (wrapWidth / 4) * 4;</div><div class="line">    </div><div class="line">    const char lookup[] = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;;</div><div class="line">    </div><div class="line">    long long inputLength = [data length];</div><div class="line">    const unsigned char *inputBytes = [data bytes];</div><div class="line">    </div><div class="line">    long long maxOutputLength = (inputLength / 3 + 1) * 4;</div><div class="line">    maxOutputLength += wrapWidth? (maxOutputLength / wrapWidth) * 2: 0;</div><div class="line">    unsigned char *outputBytes = (unsigned char *)malloc(maxOutputLength);</div><div class="line">    </div><div class="line">    long long i;</div><div class="line">    long long outputLength = 0;</div><div class="line">    for (i = 0; i &lt; inputLength - 2; i += 3)</div><div class="line">    &#123;</div><div class="line">        outputBytes[outputLength++] = lookup[(inputBytes[i] &amp; 0xFC) &gt;&gt; 2];</div><div class="line">        outputBytes[outputLength++] = lookup[((inputBytes[i] &amp; 0x03) &lt;&lt; 4) | ((inputBytes[i + 1] &amp; 0xF0) &gt;&gt; 4)];</div><div class="line">        outputBytes[outputLength++] = lookup[((inputBytes[i + 1] &amp; 0x0F) &lt;&lt; 2) | ((inputBytes[i + 2] &amp; 0xC0) &gt;&gt; 6)];</div><div class="line">        outputBytes[outputLength++] = lookup[inputBytes[i + 2] &amp; 0x3F];</div><div class="line">        </div><div class="line">        //add line break</div><div class="line">        if (wrapWidth &amp;&amp; (outputLength + 2) % (wrapWidth + 2) == 0)</div><div class="line">        &#123;</div><div class="line">            outputBytes[outputLength++] = &apos;\r&apos;;</div><div class="line">            outputBytes[outputLength++] = &apos;\n&apos;;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //handle left-over data</div><div class="line">    if (i == inputLength - 2)</div><div class="line">    &#123;</div><div class="line">        // = terminator</div><div class="line">        outputBytes[outputLength++] = lookup[(inputBytes[i] &amp; 0xFC) &gt;&gt; 2];</div><div class="line">        outputBytes[outputLength++] = lookup[((inputBytes[i] &amp; 0x03) &lt;&lt; 4) | ((inputBytes[i + 1] &amp; 0xF0) &gt;&gt; 4)];</div><div class="line">        outputBytes[outputLength++] = lookup[(inputBytes[i + 1] &amp; 0x0F) &lt;&lt; 2];</div><div class="line">        outputBytes[outputLength++] =   &apos;=&apos;;</div><div class="line">    &#125;</div><div class="line">    else if (i == inputLength - 1)</div><div class="line">    &#123;</div><div class="line">        // == terminator</div><div class="line">        outputBytes[outputLength++] = lookup[(inputBytes[i] &amp; 0xFC) &gt;&gt; 2];</div><div class="line">        outputBytes[outputLength++] = lookup[(inputBytes[i] &amp; 0x03) &lt;&lt; 4];</div><div class="line">        outputBytes[outputLength++] = &apos;=&apos;;</div><div class="line">        outputBytes[outputLength++] = &apos;=&apos;;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //truncate data to match actual output length</div><div class="line">    outputBytes = realloc(outputBytes, outputLength);</div><div class="line">    NSString *result = [[NSString alloc] initWithBytesNoCopy:outputBytes length:outputLength encoding:NSASCIIStringEncoding freeWhenDone:YES];</div><div class="line">    </div><div class="line">#if !__has_feature(objc_arc)</div><div class="line">    [result autorelease];</div><div class="line">#endif</div><div class="line">    </div><div class="line">    return (outputLength &gt;= 4)? result: nil;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">- (NSData *)base64DecodedDataForString:(NSString *)string</div><div class="line">&#123;</div><div class="line">    return [self dataWithBase64EncodedString:string];</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">- (NSData *)dataWithBase64EncodedString:(NSString *)string</div><div class="line">&#123;</div><div class="line">    const char lookup[] =</div><div class="line">    &#123;</div><div class="line">        99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99,</div><div class="line">        99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99,</div><div class="line">        99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 62, 99, 99, 99, 63,</div><div class="line">        52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 99, 99, 99, 99, 99, 99,</div><div class="line">        99,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14,</div><div class="line">        15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 99, 99, 99, 99, 99,</div><div class="line">        99, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,</div><div class="line">        41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 99, 99, 99, 99, 99</div><div class="line">    &#125;;</div><div class="line">    </div><div class="line">    NSData *inputData = [string dataUsingEncoding:NSASCIIStringEncoding allowLossyConversion:YES];</div><div class="line">    long long inputLength = [inputData length];</div><div class="line">    const unsigned char *inputBytes = [inputData bytes];</div><div class="line">    </div><div class="line">    long long maxOutputLength = (inputLength / 4 + 1) * 3;</div><div class="line">    NSMutableData *outputData = [NSMutableData dataWithLength:maxOutputLength];</div><div class="line">    unsigned char *outputBytes = (unsigned char *)[outputData mutableBytes];</div><div class="line">    </div><div class="line">    int accumulator = 0;</div><div class="line">    long long outputLength = 0;</div><div class="line">    unsigned char accumulated[] = &#123;0, 0, 0, 0&#125;;</div><div class="line">    for (long long i = 0; i &lt; inputLength; i++)</div><div class="line">    &#123;</div><div class="line">        unsigned char decoded = lookup[inputBytes[i] &amp; 0x7F];</div><div class="line">        if (decoded != 99)</div><div class="line">        &#123;</div><div class="line">            accumulated[accumulator] = decoded;</div><div class="line">            if (accumulator == 3)</div><div class="line">            &#123;</div><div class="line">                outputBytes[outputLength++] = (accumulated[0] &lt;&lt; 2) | (accumulated[1] &gt;&gt; 4);</div><div class="line">                outputBytes[outputLength++] = (accumulated[1] &lt;&lt; 4) | (accumulated[2] &gt;&gt; 2);</div><div class="line">                outputBytes[outputLength++] = (accumulated[2] &lt;&lt; 6) | accumulated[3];</div><div class="line">            &#125;</div><div class="line">            accumulator = (accumulator + 1) % 4;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //handle left-over data</div><div class="line">    if (accumulator &gt; 0) outputBytes[outputLength] = (accumulated[0] &lt;&lt; 2) | (accumulated[1] &gt;&gt; 4);</div><div class="line">    if (accumulator &gt; 1) outputBytes[++outputLength] = (accumulated[1] &lt;&lt; 4) | (accumulated[2] &gt;&gt; 2);</div><div class="line">    if (accumulator &gt; 2) outputLength++;</div><div class="line">    </div><div class="line">    //truncate data to match actual output length</div><div class="line">    outputData.length = outputLength;</div><div class="line">    return outputLength? outputData: nil;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>这里面我增加了 密钥直接从字符串读取的方法 原来方法是 从<code>NSBundle</code>读取private_key.pem和 public_key.pem 但是考虑到被篡改 我增加了 密钥直接搞成字符串(把字符串写到本地沙盒然后加载文件的方式) 这样代码 安全就提高了一些 如果能破译.m的话 拿到的也只能是 publicKey(公钥) 只要不能篡改 就是安全的 </p>
</blockquote>
<h3 id="外部调用"><a href="#外部调用" class="headerlink" title="外部调用"></a>外部调用</h3><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="built_in">NSString</span> *publicKey = <span class="string">@"-----BEGIN PUBLIC KEY-----\n此处替换生成的公钥 记得换行 按照一定规则加'\n'  \n-----END PUBLIC KEY-----"</span>;</div><div class="line">    </div><div class="line">    <span class="built_in">NSString</span> *privateKey = <span class="string">@"-----BEGIN PRIVATE KEY-----\n  此处替换生成的私钥 \n-----END PRIVATE KEY-----"</span>;</div><div class="line">    </div><div class="line">    <span class="built_in">NSFileManager</span> *fm = [<span class="built_in">NSFileManager</span> defaultManager];</div><div class="line">    </div><div class="line">    <span class="comment">// 获取Documents目录路径</span></div><div class="line">    <span class="built_in">NSString</span> *docDir = [<span class="built_in">NSSearchPathForDirectoriesInDomains</span>(<span class="built_in">NSDocumentDirectory</span>, <span class="built_in">NSUserDomainMask</span>, <span class="literal">YES</span>) firstObject];</div><div class="line">    <span class="built_in">NSString</span> *bundleIdentifier = [[<span class="built_in">NSBundle</span> mainBundle] bundleIdentifier];</div><div class="line">    <span class="built_in">NSString</span> *path = [docDir stringByAppendingFormat:<span class="string">@"/%@"</span>,bundleIdentifier];</div><div class="line">    <span class="built_in">NSString</span> *publicKeyPath = [path stringByAppendingPathComponent:<span class="string">@"public_key.pem"</span>];</div><div class="line">    <span class="built_in">NSString</span> *privateKeyPath = [path stringByAppendingPathComponent:<span class="string">@"private_key.pem"</span>];</div><div class="line">    </div><div class="line">    <span class="built_in">BOOL</span> isDir;</div><div class="line">    <span class="built_in">BOOL</span> exists = [fm fileExistsAtPath:path isDirectory:&amp;isDir];</div><div class="line">    <span class="keyword">if</span> (exists) &#123;</div><div class="line">        <span class="comment">/* file exists */</span></div><div class="line">        <span class="keyword">if</span> (isDir) &#123;</div><div class="line">            <span class="built_in">NSError</span> *error = <span class="literal">nil</span>;</div><div class="line">            <span class="built_in">BOOL</span> pubResult = [publicKey writeToFile:publicKeyPath atomically:<span class="literal">YES</span> encoding:<span class="built_in">NSUTF8StringEncoding</span> error:&amp;error];</div><div class="line">            <span class="keyword">if</span> (error) &#123;</div><div class="line">                <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,[error localizedDescription]);</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">BOOL</span> privateResult = [privateKey writeToFile:privateKeyPath atomically:<span class="literal">YES</span> encoding:<span class="built_in">NSUTF8StringEncoding</span> error:&amp;error];</div><div class="line">            <span class="keyword">if</span> (error) &#123;</div><div class="line">                <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,[error localizedDescription]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;<span class="keyword">else</span> &#123;</div><div class="line">        [fm createDirectoryAtPath:path withIntermediateDirectories:<span class="literal">YES</span> attributes:<span class="literal">nil</span> error:<span class="literal">nil</span>];</div><div class="line">        <span class="built_in">NSError</span> *error = <span class="literal">nil</span>;</div><div class="line">        <span class="built_in">BOOL</span> pubResult = [publicKey writeToFile:publicKeyPath atomically:<span class="literal">YES</span> encoding:<span class="built_in">NSUTF8StringEncoding</span> error:&amp;error];</div><div class="line">        <span class="keyword">if</span> (error) &#123;</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,[error localizedDescription]);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">BOOL</span> privateResult = [privateKey writeToFile:privateKeyPath atomically:<span class="literal">YES</span> encoding:<span class="built_in">NSUTF8StringEncoding</span> error:&amp;error];</div><div class="line">        <span class="keyword">if</span> (error) &#123;</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,[error localizedDescription]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    rsa.rsaKeyPath = path;</div><div class="line">    [rsa importRSAKeyFromeStringWithType:KeyTypePublic andKey:publicKeyPath];</div><div class="line">    </div><div class="line">    [rsa importRSAKeyFromeStringWithType:KeyTypePrivate andKey:privateKeyPath];</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="built_in">NSString</span> *pubDesc = [rsa encryptByRsa:<span class="string">@"需要加密的字符串"</span> withKeyType:KeyTypePrivate];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"加密内容:%@\n--------\n"</span>,encryptString);</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"摘要:\n---------\n%@\n--------\n"</span>,pubDesc);</div><div class="line">    </div><div class="line">    <span class="comment">//剩下的大家自己探索一下 没什么难度</span></div></pre></td></tr></table></figure>
<p>其中openssl api包，我们可以在第一步RSA密钥生成工具openssl的include文件夹中得到</p>
<p>下面我说一下如何集成openssl到 iOS工程 </p>
<h3 id="1-下载-openssl-library"><a href="#1-下载-openssl-library" class="headerlink" title="1.下载 openssl library"></a>1.下载 openssl library</h3><p><a href="https://github.com/st3fan/ios-openssl" target="_blank" rel="external">openssl ios下载</a></p>
<h3 id="2-导入到工程中"><a href="#2-导入到工程中" class="headerlink" title="2.导入到工程中"></a>2.导入到工程中</h3><p>拖拽 openssl的库 <em>(包含 <code>include</code> &amp; <code>lib</code> 的文件夹 )</em>到工程中 </p>
<p>然后 去 project targets -&gt; <code>Build Settings</code></p>
<ul>
<li>找到 <strong>Header Search Paths</strong>, 添加 <code>&quot;${SRCROOT}/Libraries/openssl/include&quot;</code> 为你的工程</li>
<li>找到 <strong>Library Search Paths</strong>, 添加 <code>&quot;${SRCROOT}/Libraries/openssl/lib&quot;</code> </li>
</ul>
<p>然后就可以了如果中间出问题 请检查一下目录是否正确理论上应该是OK的</p>
<p>–</p>
<h2 id="最后说一下我遇到RSA加密的坑"><a href="#最后说一下我遇到RSA加密的坑" class="headerlink" title="最后说一下我遇到RSA加密的坑"></a>最后说一下我遇到RSA加密的坑</h2><p>在iOS端加密 生成摘要到android的时候 android解析不出来(有时候解析出结果前面 一堆乱码) 这是base64有问题  建议 android使用原生的恩</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> android.util.Base64;</div></pre></td></tr></table></figure>
<p>如果是iOS 请使用 如下 Base64<br><a href="https://github.com/nicklockwood/Base64" target="_blank" rel="external">base64来源</a></p>
<p>上边的ios 的base64和android一一对应 不要理解错了 随便搞个Base64就行了  不信我 你可以试试</p>
<p>base64的代码我已经把代码实现写到<code>CRSA.m</code>了 如果像剥离很简单</p>
<p>好 demo我就不写了 已经把所有实现都搞上去了 </p>
<p>希望大家找到 好使的RSA方法实现 如果有问题 随时留言 </p>
<p>最后我说一句 很简单的一个RSA跨平台方案 那些抄袭CSDN的文章小伙伴 少坑点人 连搜索引擎都不会放过你</p>
<p>全文完 </p>
<p><a href="https://www.lvtao.net/dev/android_ios_php_openssl.html" target="_blank" rel="external">参考</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/rsa-universal-cross-platform-ios-android-php/
    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="macOS开发" scheme="https://www.sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="安全" scheme="https://www.sunyazhou.com/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Xcode开启静态分析器</title>
    <link href="https://www.sunyazhou.com/2017/06/20/enable-static-analyer/"/>
    <id>https://www.sunyazhou.com/2017/06/20/enable-static-analyer/</id>
    <published>2017-06-20T07:07:33.000Z</published>
    <updated>2017-07-16T02:01:54.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/enable-static-analyer/static.png" alt=""></p>
<h2 id="Clang-静态分析器"><a href="#Clang-静态分析器" class="headerlink" title="Clang 静态分析器"></a>Clang 静态分析器</h2><p>Clang 编译器（也就是 XCode 使用的编译器）有一个 静态分析器(static analyer) ，用来执行代码控制流和数据流的分析，可以发现许多编译器检查不出的问题。</p>
<p>你可以在 Xcode 的 Product → Analyze 里手动运行分析器。</p>
<p>分析器可以运行“<code>shallow</code>”和“<code>deep</code>”两种模式。后者要慢得多，但是有跨方法的控制流分析以及数据流分析，因此能发现更多问题。</p>
<h2 id="建议："><a href="#建议：" class="headerlink" title="建议："></a>建议：</h2><p>开启分析器的 全部 检查（方法是在 <code>build setting</code> 的“<code>Static Analyzer</code>”部分开启所有选项）</p>
<p>在 <code>build setting</code> 里，对 <code>release</code> 的 <code>build</code> 配置开启 “<code>Analyze during</code> <code>‘Build’</code>” 。（真的，一定要这样做——你不会记得手动跑分析器的。）</p>
<p>把 <code>build setting</code> 里的 “Mode of Analysis for <code>‘Analyze’</code>” 设为 <code>Shallow</code> (faster)</p>
<p>把 <code>build setting</code> 里的 “Mode of Analysis for <code>‘Build’</code>” 设为 <code>Deep</code></p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/enable-static-analyer/enable-static-analyer%402x.png" alt=""></p>
<p>全文完</p>
<p><a href="http://mp.weixin.qq.com/s/x6XSQ_rrYCOXi2EVeiMfCg" target="_blank" rel="external">参考</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/enable-static-analyer/static.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="macOS开发" scheme="https://www.sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="技巧" scheme="https://www.sunyazhou.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>如何在Objective-C中废弃一个方法</title>
    <link href="https://www.sunyazhou.com/2017/06/16/how-to-deprecated-a-mothod-in-Objective-C/"/>
    <id>https://www.sunyazhou.com/2017/06/16/how-to-deprecated-a-mothod-in-Objective-C/</id>
    <published>2017-06-16T08:40:26.000Z</published>
    <updated>2017-07-16T02:01:35.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/how-to-deprecated-a-mothod-in-Objective-C/deprecated.png" alt=""></p>
<p>最新在从事SDK方向的开发 有的时候 不能轻易的把某个API去掉 因为有些人还在使用 于是为了保留 相关方法 并标识为弃用 的方式 我采用如下代码</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">__attribute__((deprecated(<span class="string">"此方法已弃用,请使用xxxxx:方法"</span>)));</div></pre></td></tr></table></figure>
<h3 id="场景1"><a href="#场景1" class="headerlink" title="场景1"></a>场景1</h3><p>我想标识一个方法使用其它方式传入某个参数 </p>
<p>例如:控制器中我想标识设置URL的方法直接使用setter方法就可以了</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">VideoEditorViewController</span> : <span class="title">UIViewController</span></span></div><div class="line"></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>)<span class="built_in">NSURL</span> *videoPath;</div><div class="line"></div><div class="line">-(<span class="keyword">instancetype</span>)initWithUrl:(<span class="built_in">NSURL</span> *)path __attribute__((deprecated(<span class="string">"使用setVideoPath:方法传入"</span>)));</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>这样调用的时候就直接显示警告了 告诉当前方法传入URL被弃用</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/how-to-deprecated-a-mothod-in-Objective-C/code.png" alt=""></p>
<p>相关<code>__attribute__</code>更多用法 请参考苹果官方文档和其它博客<br>后续会持续更新更多用法</p>
<p>全文完</p>
<p><a href="http://www.jianshu.com/p/0237c34158f0" target="_blank" rel="external">参考</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.gi
    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="macOS开发" scheme="https://www.sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="如何" scheme="https://www.sunyazhou.com/tags/%E5%A6%82%E4%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>Xcode9新功能 无线真机调试</title>
    <link href="https://www.sunyazhou.com/2017/06/16/Xcode9-debug-via-wireless/"/>
    <id>https://www.sunyazhou.com/2017/06/16/Xcode9-debug-via-wireless/</id>
    <published>2017-06-16T03:07:46.000Z</published>
    <updated>2017-07-16T01:59:30.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p>今天小伙伴(王可成)发现Xcode有个很方便的功能 可以真机无线调试运行</p>
<p>看一张图<br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/Xcode9-debug-via-wireless/debug.gif" alt=""></p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>第一步 选择设备选项</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/Xcode9-debug-via-wireless/1%402x.png" alt=""></p>
<p>第二步 点勾选 via network</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/Xcode9-debug-via-wireless/2%402x.png" alt=""></p>
<p>剩下的工作就是拔掉那个我们非常讨厌而且有不得不用还死贵且总折头处的白色数据线了</p>
<p><em>注意:第一次运行的时候比较慢  可以通过数据线插上先运行一次</em><br><em>运行环境: Xcode9 beta</em><br><em>运行设备操作系统: iOS11 beta</em><br><em>Macbook+iPhone 最好在同一个局域网</em></p>
<p>我估计苹果发布正式版本的时候这个应该比较好用了 </p>
<p>好了 现在可以愉快的玩耍 了</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;效果&quot;&gt;&lt;a href=&quot;#效果&quot; class=&quot;headerlink&quot; title=&quot;效果&quot;&gt;&lt;/a&gt;效果&lt;/h3&gt;&lt;p&gt;今天小伙伴(王可成)发现Xcode有个很方便的功能 可以真机无线调试运行&lt;/p&gt;
&lt;p&gt;看一张图&lt;br&gt;&lt;img src=&quot;https://
    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="macOS开发" scheme="https://www.sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="技巧" scheme="https://www.sunyazhou.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="Xcode" scheme="https://www.sunyazhou.com/tags/Xcode/"/>
    
  </entry>
  
  <entry>
    <title>Learning AV Foundation(四)AVAsset元数据(基础篇)</title>
    <link href="https://www.sunyazhou.com/2017/06/16/Learning-AV-Foundation-AVAsset-Basic/"/>
    <id>https://www.sunyazhou.com/2017/06/16/Learning-AV-Foundation-AVAsset-Basic/</id>
    <published>2017-06-16T02:11:19.000Z</published>
    <updated>2017-07-16T02:01:01.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/Learning-AV-Foundation-AVAsset/MacHi%202017-04-14%2009-18-10.png" alt=""></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本篇讲述的<code>AVAsset</code>元数据(可以简单理解成 比如一个mp3音频格式的model信息. title:xxxx, art:刘德华, album:专辑 爱你一万年…. 等这些数据的来源). 当然这种意义上的字段信息 属于<code>AVAsset</code>的一个属性。<code>AV Foundation</code>通过<code>AVAsset</code>封装来处理各种音频的元数据, <strong>比如从mp3文件中解析出来封面图(artwork)</strong>等。 本章的具体内容如下:</p>
<h3 id="理解资源含义"><a href="#理解资源含义" class="headerlink" title="理解资源含义"></a><strong>理解资源含义</strong></h3><h3 id="创建资源"><a href="#创建资源" class="headerlink" title="创建资源"></a><strong>创建资源</strong></h3><ul>
<li>iOS Asset库</li>
<li>iOS iPod库</li>
<li>macOS iTunes库</li>
</ul>
<h3 id="异步载入"><a href="#异步载入" class="headerlink" title="异步载入"></a><strong>异步载入</strong></h3><h3 id="媒体元数据"><a href="#媒体元数据" class="headerlink" title="媒体元数据"></a><strong>媒体元数据</strong></h3><ul>
<li>元数据格式  <ol>
<li>QuickTime  </li>
<li>MPEG-4音频和视频(mp4)  </li>
<li>MP3  </li>
</ol>
</li>
</ul>
<h3 id="使用元数据"><a href="#使用元数据" class="headerlink" title="使用元数据"></a><strong>使用元数据</strong></h3><ul>
<li>查询元数据</li>
<li>使用<code>AVMetadataItem</code></li>
</ul>
<h3 id="创建MetaManager-Demo"><a href="#创建MetaManager-Demo" class="headerlink" title="创建MetaManager Demo"></a><strong>创建MetaManager Demo</strong></h3><ul>
<li>MediaItem(相当于Model)</li>
<li>MediaItem实现</li>
<li>数据转换器(model to AVMetadataItem || AVMetadataItem to mode)</li>
<li>DefaultMetadata默认转换</li>
<li>转换Artwork(唱片的封面或者专辑图那种)</li>
<li>转换注释</li>
<li>转换音轨数据(track)</li>
<li>转换唱片数据</li>
<li>转换风格数据(genre, eg: blue蓝调, classic古典,pop流行等126种..)</li>
<li>完成最终demo  </li>
</ul>
<h4 id="保存元数据"><a href="#保存元数据" class="headerlink" title="保存元数据"></a><strong>保存元数据</strong></h4><hr>
<h3 id="理解AVAsset资源含义"><a href="#理解AVAsset资源含义" class="headerlink" title="理解AVAsset资源含义"></a><strong>理解<code>AVAsset</code>资源含义</strong></h3><p><code>AVAsset</code>是一个不可变的抽象类,定义媒体资源混合呈现方式.里面包含音视频的<strong>曲目</strong>、<strong>格式</strong>、<strong>时长</strong>, 以及<strong>元数据NSData</strong>(二进制的bytes).</p>
<p><code>AVAsset</code>不用考虑媒体资源具有的两个范畴: </p>
<ul>
<li>提供对基本媒体格式的抽象层  </li>
<li>不用考虑处理因为不同格式获取内容方式不一样</li>
</ul>
<p>这意味着无论是处理<code>Quick Time</code>影片、<code>MPEG-4</code>视频还是<code>MP3</code>音频，框架提供统一的接口，我们只需要理解只有资源这个概念。这样做的目的是为了<strong>开发者在面对不同格式的内容时有一个统一的处理方法。不需要care多种编码器和容器格式因为细节不同而带来的困扰</strong>. 当然获取这些其余信息可以通过其它方式实现. <code>AVAsset</code>还隐藏了资源位置(GPS定位)信息,当处理一个媒体对象时，通过URL来初始化init. URL可以是Bundle里面 也可以是沙盒的本地文件系统URL.也可以从iPod库中取到的URL。还可以是远程服务器的音频流或视频流的URL。</p>
<p><code>AVAsset</code>属于低耦合组件方式的封装 让框架来处理那些繁重的工作, 我们就可以很方便的不用考虑文件位置的前提下获取或者载入媒体。由于不用care文件合适和文件位置等复杂的问题。<code>AVAsset</code>为开发者处理<code>timed media(时基媒体)</code>提供了一种简单统一的方式.</p>
<p><code>AVAsset</code>本身不是媒体资源. 可以把它理解成承载<code>timed media(时基媒体)</code>的容器类。它有很多描述自身元数据的媒体组成. <code>AVAssetTrack</code>才是我们真正存储媒体资源的统一媒体类型。并对每个资源建立相应的model.  <code>AVAssetTrack</code>最常见的形式就是 音频流和视频流, 但是他还可以用于表示诸如<strong>文本</strong>、<strong>副标题</strong>、<strong>隐藏字幕</strong>等媒体类型. 如下示意图理解<code>AVAsset</code> 和 <code>AVAssetTrack</code></p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/Learning-AV-Foundation-AVAsset/MacHi%202017-04-14%2011-44-16.png" alt=""></p>
<p><em><strong><code>AVAsset.tracks</code></strong></em> 如下</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">NSArray</span>&lt;<span class="built_in">AVAssetTrack</span> *&gt; *tracks;</div></pre></td></tr></table></figure>
<p> 资源曲目可通过tracks属性访问到. 该属性返回一个NSArray的数组,这个数组中的元素就是专辑包含的所有曲目. 此外，<code>AVAsset</code>还可以通过标识符、媒体类型或媒体特征等信息找到相应的曲目.这使得在未来更高级的处理中我们可以很容易获取一组需要的曲目</p>
<h4 id="创建资源-1"><a href="#创建资源-1" class="headerlink" title="创建资源"></a><strong>创建资源</strong></h4><p>当为一个现有的媒体资源创建<code>AVAsset</code>对象时, 可以通过URL对它的进行的初始化来实现. 一般来说是一个本地文件URL, 也可以是远程的资源URL</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">    <span class="built_in">NSURL</span> *assetURL = <span class="comment">//....</span></div><div class="line">    <span class="built_in">AVAsset</span> *asset = [<span class="built_in">AVAsset</span> assetWithURL: assetURL];</div><div class="line">```    </div><div class="line"></div><div class="line">`<span class="built_in">AVAsset</span>`是个抽象类, 它不能直接被实例化. 当使用`assetWithURL:`方法创建实例时,实际上是创建了`<span class="built_in">AVAsset</span>`的子类`<span class="built_in">AVURLAsset</span>` 有时候会直接使用这个类, 因为它允许通过传递选项字典来精细调整资源的创建方式, 举个例子,比如创建 用在音频或视频编辑场景中的资源, 可能希望传递一个选项(option)的字典来告诉程序提供更精确的时长和计时等信息 例如:</div><div class="line"></div><div class="line">``` objc</div><div class="line">    <span class="built_in">NSURL</span> *assetURL = <span class="comment">//....</span></div><div class="line">    <span class="built_in">NSDictionary</span> *options = @&#123;<span class="built_in">AVURLAssetPreferPreciseDurationAndTimingKey</span>:@YES&#125;;</div><div class="line">    <span class="built_in">AVAsset</span> *asset = [<span class="built_in">AVAsset</span> assetWithURL: assetURL];</div><div class="line">```  </div><div class="line">这里传递的是希望得到稍长一点的加载事件,来获取更精确的时长及时间信息.很多常见的位置是开发时大家想创建资源对象的地方. 在iOS设备上我们希望在用户的照片库中访问视频文件, 或者在iPod库中访问歌曲. 在Mac上 我们希望从用户的iTunes库中找到媒体项. 借助iOS和macOS中的这些辅助framework我们可以使用上边的媒体资源。下面介绍一下这些要用到的framework的例子</div><div class="line"></div><div class="line"><span class="meta">##### iOS Assets库</span></div><div class="line"></div><div class="line">在iOS上拍照或者通过前置和后置相机捕捉到的音视频,它们保存在用户的照片库中.iOS提供的Assets库框架可以实现从照片库中读写的功能, 下例从用户资源库中的视频创建一个<span class="built_in">AVAsset</span>:</div><div class="line"></div><div class="line">``` objc</div><div class="line">ALAssetsLibrary *library = [[ALAssetsLibrary alloc] init];</div><div class="line">    [library enumerateGroupsWithTypes:ALAssetsGroupSavedPhotos usingBlock:^(ALAssetsGroup *group, <span class="built_in">BOOL</span> *stop) &#123;</div><div class="line">        <span class="comment">//Filter down to only videos</span></div><div class="line">        [group setAssetsFilter:[ALAssetsFilter allVideos]];</div><div class="line">        </div><div class="line">        <span class="comment">//Grab the first video returned</span></div><div class="line">        [group enumerateAssetsAtIndexes:[<span class="built_in">NSIndexSet</span> indexSetWithIndex:<span class="number">0</span>] options:<span class="number">0</span> usingBlock:^(ALAsset *result, <span class="built_in">NSUInteger</span> index, <span class="built_in">BOOL</span> *stop) &#123;</div><div class="line">            <span class="keyword">if</span> (result) &#123;</div><div class="line">                <span class="keyword">id</span> representation = [result defaultRepresentation];</div><div class="line">                <span class="built_in">NSURL</span> *url = [representation url];</div><div class="line">                <span class="built_in">AVAsset</span> *asset = [<span class="built_in">AVAsset</span> assetWithURL:url];</div><div class="line">                <span class="comment">//创建 调用一些其它API</span></div><div class="line">            &#125;</div><div class="line">        &#125;];</div><div class="line">        </div><div class="line">    &#125; failureBlock:^(<span class="built_in">NSError</span> *error) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, [error localizedDescription]);</div><div class="line">    &#125;];</div></pre></td></tr></table></figure>
<p>上面是如何获取保存在 相册中的视频资源(iOS10.10以后就废弃了上述方式) 获取出筛选结果的第一个视频, 库中的条目全部被建模为<code>ALAsset</code>对象, 为默认的呈现方式选用<code>ALAsset</code>类型返回一个<code>ALAssetRepresentation</code>对象,它提供了一个适用于创建<code>AVAset</code>的URL.</p>
<h5 id="iOS-iPod库"><a href="#iOS-iPod库" class="headerlink" title="iOS iPod库"></a>iOS iPod库</h5><p>我们获取媒体的一个常见位置就是用户的iPod库. <code>MediaPlayer</code> framework 框架提供了API, 用于在iPod库中查询和获取条目. 当找到想获取的item时, 可以得到一个存储的URL并使用这个得到的URL初始化一个资源, 如下例所示:  </p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//艺术家</span></div><div class="line"><span class="built_in">MPMediaPropertyPredicate</span> *artistPredicate = [<span class="built_in">MPMediaPropertyPredicate</span> predicateWithValue:<span class="string">@"刘德华"</span> forProperty:<span class="built_in">MPMediaItemPropertyArtist</span>];</div><div class="line"><span class="comment">//专辑</span></div><div class="line"><span class="built_in">MPMediaPropertyPredicate</span> *albumPredicate = [<span class="built_in">MPMediaPropertyPredicate</span> predicateWithValue:<span class="string">@"真永远"</span> forProperty:<span class="built_in">MPMediaItemPropertyAlbumTitle</span>];</div><div class="line"><span class="comment">//歌曲名称</span></div><div class="line"><span class="built_in">MPMediaPropertyPredicate</span> *songPredicate = [<span class="built_in">MPMediaPropertyPredicate</span> predicateWithValue:<span class="string">@"爱你一万年"</span> forProperty:<span class="built_in">MPMediaItemPropertyTitle</span>];</div><div class="line"><span class="comment">//查询</span></div><div class="line"><span class="built_in">MPMediaQuery</span> *query = [[<span class="built_in">MPMediaQuery</span> alloc] init];</div><div class="line">[query addFilterPredicate:artistPredicate];</div><div class="line">[query addFilterPredicate:albumPredicate];</div><div class="line">[query addFilterPredicate:songPredicate];</div><div class="line"></div><div class="line"><span class="built_in">NSArray</span> *result = [query items];</div><div class="line"><span class="keyword">if</span> (result.count &gt; <span class="number">0</span>) &#123;</div><div class="line">    <span class="built_in">MPMediaItem</span> *item = result[<span class="number">0</span>];</div><div class="line">    <span class="built_in">NSURL</span> *assetURL = [item valueForProperty:<span class="built_in">MPMediaItemPropertyAssetURL</span>];</div><div class="line">    <span class="built_in">AVAsset</span> *asset = [<span class="built_in">AVAsset</span> assetWithURL:assetURL];</div><div class="line">    <span class="comment">// Asset 信息</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>MediaPlayer</code>framework提供了一个为<code>MPMediaPropertyPredicate</code>的类,用户帮助用户在iPod库中查找到具体内容所用的查询语句<br>上边举例一个例子: 在<code>刘德华</code>的<code>真永远</code>(真永远专辑)  唱片中查找<code>爱你一万年</code>这首歌, 执行完查询 会返回这个媒体 条目的资源URL属性(<code>MPMediaItemPropertyAssetURL</code>). 并使用这个属性创建<code>AVAsset</code></p>
<h5 id="macOS-iTunes库"><a href="#macOS-iTunes库" class="headerlink" title="macOS iTunes库"></a>macOS iTunes库</h5><p>在 macOS(以前叫 OS X)上, iTunes是用户的媒体资源中心. 要识别这个库中的资源, 我们通常要对iTunes音乐目录中的iTunes Music Library.xml 文件进行解析, 从而得到相关数据. 不过在 Mac OS X 10.8山狮之后 有了比较简单的方法–<code>iTunesLibrary</code>framework.</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">ITLibrary *library = [ITLibrary libraryWithAPIVersion:<span class="string">@"1.0"</span> error:<span class="literal">nil</span>];</div><div class="line">    <span class="built_in">NSArray</span> *items = library.allMediaItems;</div><div class="line">    </div><div class="line">    <span class="built_in">NSString</span> *query = <span class="string">@"artist.name == '刘德华'"</span></div><div class="line">                      <span class="string">"album.title == '真永远'"</span></div><div class="line">                      <span class="string">"title == '爱你一万年'"</span>;</div><div class="line">    <span class="built_in">NSPredicate</span> *predicate = [<span class="built_in">NSPredicate</span> predicateWithFormat:query];</div><div class="line">    </div><div class="line">    <span class="built_in">NSArray</span> *songs = [items filteredArrayUsingPredicate:predicate];</div><div class="line">    <span class="keyword">if</span> (songs.count &gt; <span class="number">0</span>) &#123;</div><div class="line">        ITLibMediaItem *item = songs[<span class="number">0</span>];</div><div class="line">        <span class="built_in">AVAsset</span> *asset = [<span class="built_in">AVAsset</span> assetWithURL:item.location];</div><div class="line">        <span class="comment">// asset info</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p><code>iTunesLibrary</code>框架并没有像MediaPlayer框架那样给出具体的查询API. 不过开发者可使用标准的Cocoa NSPredicate(谓词)类来构建一个复杂的查询,当筛出需要的media item集合后，可使用<code>ITLibMediaItem</code>的<code>location</code>属性得到一个URL并创建<code>AVAsset</code>.</p>
<h4 id="异步载入-1"><a href="#异步载入-1" class="headerlink" title="异步载入"></a>异步载入</h4><p><code>AVAsset</code>具有多种有用的方法和属性, 可以提供有关资源的信息, 比如时长、创建日期、元数据等.<br><code>AVAsset</code>还包含一些用于获取和使用曲目集合的方法. 不过有一点很重要, 就是当创建时资源就是对基础文件的处理, <code>AVAsset</code> 采用一种lazy load的加载方式, 提升了快速创建资源和立即载入的速度.<br><strong><em>注意<code>AVAsset</code>的属性访问是同步的,如果正在请求的属性没有预先载入,程序就会阻塞,直到它做出响应为止</em></strong>这个搞法不是很好,eg: avasset.duration 可能是个比较耗时的操作,如果使用MP3文件时没有在头文件中设置<code>TLEN</code>标签,这个标签用于定义duration值,则整个音频曲目都需要进行解析来准确的知道它的duration, 如果在主线程做这样的访问操作就会阻塞主线程,直到相关操作完成为止, APP可能会出现卡顿,导致系统监视器介入,并终止APP运行,如果解决这种问题,我们应该使用异步的 方式来查询资源属性.</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="built_in">AVKeyValueStatus</span>)statusOfValueForKey:(<span class="built_in">NSString</span> *)key error:(<span class="built_in">NSError</span> * _Nullable *)outError;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)loadValuesAsynchronouslyForKeys:(<span class="built_in">NSArray</span>&lt;<span class="built_in">NSString</span> *&gt; *)keys completionHandler:(<span class="keyword">void</span> (^)(<span class="keyword">void</span>))handler;</div></pre></td></tr></table></figure>
<p>可以使用statusOfValueForKey:error:方法查询一个给定的属性状态,返回一个<code>AVKeyValueStatus</code>的枚举值</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> <span class="built_in">AVKeyValueStatus</span> : <span class="built_in">NSInteger</span> &#123;</div><div class="line">    <span class="built_in">AVKeyValueStatusUnknown</span>,</div><div class="line">    <span class="built_in">AVKeyValueStatusLoading</span>,</div><div class="line">    <span class="built_in">AVKeyValueStatusLoaded</span>,</div><div class="line">    <span class="built_in">AVKeyValueStatusFailed</span>,</div><div class="line">    <span class="built_in">AVKeyValueStatusCancelled</span></div><div class="line">&#125; <span class="built_in">AVKeyValueStatus</span>;</div></pre></td></tr></table></figure>
<p>用于表示当前所请求的属性的状态, 如果状态不是<code>AVKeyValueStatusLoaded</code>说明此时这个属性可能导致程序卡顿,要异步载入一个给定的属性loadValuesAsynchronouslyForKeys:completionHandler:方法,参数keys 是一个或多个<code>资源属性名</code>的数组和一个callback,当资源处于回应状态时,就会调用这个<code>completionHandler</code></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="built_in">NSURL</span> *assetURL = [[<span class="built_in">NSBundle</span> mainBundle] URLForResource:<span class="string">@"384551_1438267683"</span> withExtension:<span class="string">@"mov"</span>];</div><div class="line">   <span class="built_in">AVAsset</span> *asset = [<span class="built_in">AVAsset</span> assetWithURL:assetURL];</div><div class="line">   <span class="comment">//异步加在 tracks property</span></div><div class="line">   <span class="built_in">NSArray</span> *keys = @[<span class="string">@"tracks"</span>];</div><div class="line">   [asset loadValuesAsynchronouslyForKeys:keys completionHandler:^&#123;</div><div class="line">       <span class="comment">//查询tracks的属性状态</span></div><div class="line">       <span class="built_in">NSError</span> *error = <span class="literal">nil</span>;</div><div class="line">       <span class="built_in">AVKeyValueStatus</span> status = [asset statusOfValueForKey:<span class="string">@"tracks"</span> error:&amp;error];</div><div class="line">       <span class="keyword">switch</span> (status) &#123;</div><div class="line">           <span class="keyword">case</span> <span class="built_in">AVKeyValueStatusLoaded</span>:</div><div class="line">               <span class="comment">//继续处理后续逻辑</span></div><div class="line">               <span class="keyword">break</span>;</div><div class="line">           <span class="keyword">case</span> <span class="built_in">AVKeyValueStatusFailed</span>:</div><div class="line">               <span class="comment">//有error</span></div><div class="line">               <span class="keyword">break</span>;</div><div class="line">           <span class="keyword">case</span> <span class="built_in">AVKeyValueStatusCancelled</span>:</div><div class="line">               <span class="comment">// 处理意外取消等情况的逻辑</span></div><div class="line">               <span class="keyword">break</span>;</div><div class="line">           </div><div class="line">           <span class="keyword">default</span>:</div><div class="line">               <span class="keyword">break</span>;</div><div class="line">       &#125;</div><div class="line">   &#125;];</div></pre></td></tr></table></figure>
<p>这里用bundle中的<code>QuickTime</code>电影创建一个AVAsset, 并异步载入该对象的<code>tracks</code>属性.在<code>completionHandler</code> block中,我们希望通过调用资源的statusOfValueForKey:error:方法来拿出请求属性的状态,NSError用于判断资源包含错误信息. <em><em>注意:<code>completionHandler:</code>block可能在任意一个队列中调用,在对UI界面做出相应更新之前,必须先回到主线程队列,否则必被坑！！！</em></em></p>
<blockquote>
<p><em><em>注意:上面的demo载入了一个tracks属性,其实可以在一个吊用中请求多个属性,如果请求多个属性的时候需要注意以下两点:</em></em><br>(1) 每次调用 <code>loadValuesAsynchronouslyForKeys:completionHandler:</code>方法时只会调用一次<code>completionHandler</code>block, 调用这个callback的次数不是根据传递给这个方法的key个数决定的.<br>(2) 需要为每个请求的属性调用<code>statusOfValueForKey:error:</code>,不能假设所有属性都返回相同的状态值.</p>
</blockquote>
<h3 id="媒体元数据-1"><a href="#媒体元数据-1" class="headerlink" title="媒体元数据"></a><strong>媒体元数据</strong></h3><p>当创建一个媒体应用程序时,了解该媒体的组织格式非常重要, 简单的展示一堆文件名也许在文件不多的时候还能接受, 如果大规模批量的文件需要展示就比较蛋疼了, 我们真正需要的是 <em>找到一种方法对媒体进行描述,当用户可以方便的找到、识别和组织这些媒体.</em> 我们所使用的<code>AV Foundation</code>中的主要媒体格式(<em>.mp4、</em>.mp3、<em>.mov、</em>.mkv…..)都可以嵌入描述其内容的元数据.因为各种媒体格式的描述不尽相同,要搞一套通用的策略去解析各种媒体的格式文件,这要求我们对底层技术有一些了解.不过<code>AV Foundation</code>让这些变得简单,因为它使开发者不需要考虑大多数特定格式的细节; 在处理媒体元数据方面, AV Foundation`提供了一套统一的方法.</p>
<h4 id="元数据格式"><a href="#元数据格式" class="headerlink" title="元数据格式"></a>元数据格式</h4><p>虽然存在多种格式的媒体资源,但是我们在Apple环境下遇到的媒体类型主要有4种, 分别是:<code>QuickTime(mov)</code>、<code>MPEG-4 video(mp4和m4v)</code>、<code>MPEG-4 audio(m4a)</code>和<code>MPEG-Layer Ⅲ audio(mp3)</code>. 虽然<code>AV Foundation</code>处理这些文件中嵌入的元数据时都使用一个接口, 但是理解这些不同类型资源的元数据如何存储及存储位置仍然很有价值. 这里只做概述, 但是如果深入研究这些都是必学的基础.</p>
<ol>
<li><p><strong>QuickTime</strong><br> <code>QuickTime</code>是苹果自己开发的一种跨平台媒体架构, 其中一部分是Quick File Format规范, 定义了 .mov文件的内部结构.<code>QuickTime</code>文件由一种称为<code>atom</code>的数据结构组成. 一般规则是这样的:<br> 一个<code>atom</code>包含了描述媒体资源的某一方面的数据, 或者嵌套包含其它<code>atom</code>,但不能两者都包含.有时候苹果自己的方法实现可能会违背这一规则.<code>atom</code>以一种复杂的树状结构组合在一起, 详细的对布局、音频样本格式、视频帧信息乃至需要呈现的元数据信息(作者,版权等)做了描述.   </p>
<p> <img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/Learning-AV-Foundation-AVAsset/atom.jpg" alt=""><br> <em>为了能记住<code>atom</code>我把它戏称为<code>阿童木</code>哈哈-跟阿童木压根没啥关系</em>.  </p>
<p> 了解<code>QuickTime</code>的一个好办法是用十六进制编辑器中打开一个.mov格式的文件.(常见的十六进制编辑器有Hex Fiend或Synalyze It! Pro).典型的十六进制工具会将一个真实的<code>QuickTime</code>文件的数据显示出来,但其中的结构和<code>atom</code>间的关系不是很直观能理解,推荐苹果有一个<code>Atom Inspector</code>工具.这个工具将atom结构以<code>NSOutlineView</code>(树形UI控件类似UITableView)方式显示.所以<code>atom</code>的树形瓜西会很清晰的看到,这个工具还提供一个小型的十六进制查看器,可以从中查看到<strong>实际字节布局</strong>.</p>
<p> <img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/Learning-AV-Foundation-AVAsset/atom_inspector.png" alt=""></p>
<p> 下载地址:<a href="http://adcdownload.apple.com/QuickTime/atom_inspector/atom_inspector.dmg" target="_blank" rel="external">Atom Inspector 猛击这里</a>  貌似需要登录开发者帐号<br> 下载中心:<a href="https://developer.apple.com/download/more/" target="_blank" rel="external">苹果官方软件下载中心</a>  貌似需要登录开发者帐号 </p>
<p> 下图就是atom格式<br> <img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/Learning-AV-Foundation-AVAsset/quick_time_atom_structure_new.jpeg" alt=""></p>
<p> <em>atom格式</em></p>
<p> <strong><code>QuickTime</code>文件最少包含三个高级的<code>atom</code></strong></p>
<ul>
<li><strong>用于描述文件类型和兼容类型的<code>fypy</code></strong></li>
<li><strong>包含实际音频和视频媒体的<code>mdat</code></strong></li>
<li><p><strong>moov atom(moo-vee) 媒体资源的所有细节做了完整描述包括原始的二进制数据</strong></p>
<p>下图是我实际测试一个mov文件的atom<br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/Learning-AV-Foundation-AVAsset/quick_time_atom_structure_real.jpeg" alt=""><br><em>实测</em></p>
<p>当处理QuickTime电影时会遇到两种类型的元数据. 标准的<code>QuickTime</code>元数据由<code>Final Cut Pro X</code>这样的工具编写, 位于/moov/meta/plist中, 它的key几乎都具有com.apple.quicktime前缀. 其它类型的数据被认为是<code>QuickTime</code>用户数据, 保存在/moov/udta/中.<code>QuickTime</code>用户数据可以包含播放器需要查找的标准数据,eg: 歌曲的演唱者或版权信息, 除此之外还可以包含任何对应用程序有帮助的信息.  上述两种元数据类型在    <code>AV Foundation</code>中都是可以读写的.<br>如果想了解更多<code>QuickTime</code>细节可以查看<a href="https://developer.apple.com/library/content/documentation/QuickTime/QTFF/QTFFPreface/qtffPreface.html" target="_blank" rel="external">Quick Time Format Specification</a>官方文档(400多页).<br>掌握moov atom的核心知识很重要,有助于我们更好的了解<code>AV Foundation</code>是如何使用这些数据的.</p>
</li>
</ul>
</li>
<li><p><strong>MPEG-4 (MP4)音频和视频</strong></p>
<p> MPEG-4 Part 14是定义MP4文件格式的规范. <code>MP4</code>直接派生自<code>QuickTime</code>文件格式,所以<code>MP4</code>文件格式与<code>QuickTime</code>文件结构很类似. 其实有时候能解析一种文件类型的工具也适用于其它文件类型.<code>MP4</code>文件也由成为<code>atom</code>的数据结构组成.技术上讲,<code>MPEG-4</code>规范将这些称为<code>boxes</code>,因为其大部分来自于<code>QuickTime</code>所以大家都还是把它成为<code>atom</code>.<br> <img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/Learning-AV-Foundation-AVAsset/mp4_atom_book.jpg" alt=""><br> <em>MPEG-4 atom结构</em></p>
<p> <img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/Learning-AV-Foundation-AVAsset/mp4_atom.png" alt=""><br> <em>MPEG-4 atom结构 实测结果</em></p>
<p> <code>MPEG-4</code>文件的元数据保存在<code>/moov/udat/meta/ilst</code>中. 对于<code>atom</code>中使用key没有标准, 大家都墨守成规的遵循苹果尚未发布的iTunes元数据规范中对key的定义. 虽然没有正式的发布,但iTunes元数据格式的相关文档已经在网上广为人知了(我就很纳闷 这算是发了版本还是没发,发了怎么还是尚未公布,没发怎么又广为人知…). 可以参考<a href="https://code.google.com/archive/p/mp4v2/wikis/iTunesMetadata.wiki" target="_blank" rel="external">mp4v2库</a>文档了解更多mp4内容.</p>
<p> <code>mp4</code>是对MPEG-4媒体的标准扩展.eg: <code>.m4v</code>、<code>.m4a</code>、<code>.m4p</code>、<code>.m4b</code>.这些变体使用的都是<code>MPEG-4</code>容器格式,也有些包含了附加的扩展功能.<br> 大家只需要记住几点:</p>
<ul>
<li><strong><code>M4V</code></strong> 文件是带有苹果公司针对<strong><code>FairPlay</code></strong>加密及<strong><code>AC3-audio</code></strong>扩展的<code>MPEG-4</code>视频格式</li>
<li><strong><code>MP4</code></strong> 如果不涉及<code>FairPlay</code>加密及<code>AC3-audio</code>扩展,<code>M4V</code>就仅仅是扩展名不一样而已</li>
<li><strong><code>M4A</code></strong> 专门针对音频,使用这种扩展名的目的是让大家知道这种格式的文件只带有音频资源</li>
<li><strong><code>M4P</code></strong> 苹果很古老的iTunes格式,使用其<code>FairPlay</code>扩展</li>
<li><strong><code>M4B</code></strong> 用于有声读物,同窗包含章节标签以及提供书签功能,让读者可以返回到指定位置开始阅读(类似有声小说)</li>
</ul>
</li>
<li><p><strong>MP3</strong></p>
<p> <code>MP3</code>文件和<code>MPEG-4 (.mp4)</code>、<code>QuickTime(.mov)</code>有显著区别,<code>MP3</code>不使用容器格式,而使用<strong>编码音频数据</strong>,文件开头通常包含可选元数据的结构块.<code>mp3</code>文件使用一种称为ID3v2的格式来保存关于音频内容的描述信息,包含: artist(艺术家)、演唱者、album(所属专辑)、音乐风格等.<br> <code>ID3</code>数据很easy,<code>mp3</code>前10个字节带有嵌入的元数据, 这10个字节定义了<code>ID3</code>块的头部.10个字节中的前三个字节始终为’49 44 33’(ID3,用于表示一个<code>ID3v2标签</code>,后面两个字姐用于定义主版本信息,既<code>2、3、4</code>和版本号.剩余字节用于定义标志集合及ID3快的大小.<br> <img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/Learning-AV-Foundation-AVAsset/ID3_header.png" alt=""><br> <em>ID3 header</em></p>
<p> <code>ID3</code>块中剩下的数据都是用于描述不同元数据的的key-value键值对的帧.每一帧都有一个<strong>实际标签名称的10字节的头</strong>,之后的4字节表示尺寸,再之后的两个字节用来定义选项标志.</p>
</li>
</ol>
<pre><code> id3 | version(2字节) | revision (剩余字节)| flag(2字节)| size(4字节) |

帧剩下的字节包含了实际的元数据值.如果值是文本类型tag中的第一个字节包含了实际的元数据值.如果值是文本类型,tag中的第一个字节用来定义编码类型. eg:Ox00, 代表:`ISO-8859=1`,也支持其它类型的编码。如下图ID3结构示意图.
__`AV Foundation`支持读取`ID3v2`标签的的所有版本, 但不支持写入.MP3格式收到专利限制.所以`AV Foundation`无法支持对MP3或ID3数据进行编码.__ 不过最近听说德国的MP3专利研究所说专利打算撤销因为`AAC`格式将有更好的效果相对于MP3而言.看看后续苹果API变动会不会增加修改MP3的数据吧.

![](https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/Learning-AV-Foundation-AVAsset/ID3_structure.png)
*ID3v2 结构图*
</code></pre><blockquote>
<p><code>AV Foundation</code>支持所有<code>ID3v2</code>标签格式的读取操作,但是<code>ID3v2</code>是要加星号的.<code>ID3v2.2</code>的布局和<code>ID3v2.3</code>及之后版本的布局不同. 需要注意:有些标签由3个字符组成,而不是4个字符, 比如一首歌曲的标注信息, 当标签为<code>ID3v2.2</code>时,是被保存到COM帧中,但当同一首歌使用<code>ID3v2.3</code>标签或更新版本的标签时,歌曲的标注信息会被保存在COMM帧中,框架定义的字符常量只适用于<code>ID3v2.3</code>及以后版本,后续demo中我们通过代码演示如何向前兼容<code>ID3v2.2</code>.</p>
</blockquote>
<h3 id="使用元数据-1"><a href="#使用元数据-1" class="headerlink" title="使用元数据"></a><strong>使用元数据</strong></h3><p><code>AVAsset</code>和<code>AVAssetTrack</code>可以实现查询元数据功能  </p>
<ul>
<li><code>AVAsset</code> 大部分情况下会使用</li>
<li><code>AVAssetTrack</code> 获取曲目一级元数据</li>
</ul>
<p>读取具体资源元数据的接口可以使用<code>AVMetadataItem</code>类提供的方法访问<code>QuickTime</code>、<code>MPEG-4 atom</code>和<code>ID3</code>帧中的元数据进行访问.<br><code>AVAsset</code>和<code>AVAssetTrack</code>提供了两种方法可以获取相关元数据.但是有各自的适用范围.了解适用范围之前首先要知道 <strong>键空间</strong>(key space)的含义. <code>AV Foundation</code>使用<strong>键空间(key space)</strong>作为将相关键组合在一起的方法, 可以实现对<code>AVMetadataItem</code>实例集合的筛选.每个资源至少包含两个键空间,以便从中获取元数据.<br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/Learning-AV-Foundation-AVAsset/keyspace.png" alt=""></p>
<p><code>Common</code>键空间用来定义所有支持媒体类型的键, 包括: 曲名、歌手、插图信息等常见元素. 这提供了一种对所有支持的媒体格式进行一定级别的元数据标准化过程.我们可以从<code>Common</code>键空间查询 资源或者曲目的<code>commonMetadata</code>属性来获取元数据 这个属性会返回一个包含所有可用元数据的数组</p>
<p>访问指定格式的元数据需要在资源或曲目上调用<code>metadataForFormat:</code>方法.这个方法返回一个包含所有相关元数据信息的数组.<code>AVMetadataFormat.h</code>为不同的元数据格式提供对应的字符串常量. 由于不同格式的元数据导致key value对应类型不一致,我们可以利用<br><code>availableMetadataFormats</code>(AVAsset的属性)获取到信息.如下代码:</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="built_in">NSURL</span> *url = [<span class="built_in">NSURL</span> fileURLWithPath:<span class="string">@"xxx.mp4"</span>];<span class="comment">//给个路径地址</span></div><div class="line">   <span class="comment">//创建元数据</span></div><div class="line">   <span class="built_in">AVAset</span> *asset = [<span class="built_in">AVAsset</span> assetWithURL:url];</div><div class="line">   <span class="built_in">NSArray</span> *keys = @[<span class="string">@"availableMetadataFormats"</span>];</div><div class="line">   [asset loadValuesAsynchronouslyForKeys:keys completionHandler:^&#123;</div><div class="line">       <span class="built_in">NSMutableArray</span> *metadata = [<span class="built_in">NSMutableArray</span> array];</div><div class="line">       <span class="keyword">for</span> (<span class="built_in">NSString</span> *format <span class="keyword">in</span> asset.availableMetadataFormats)&#123;</div><div class="line">           [metadata addObjectsFromArray:[asset metadataForFormat:format]];</div><div class="line">       &#125;</div><div class="line">       </div><div class="line">       <span class="comment">//处理metadata (AVMetadataItems)</span></div><div class="line">   &#125;];</div></pre></td></tr></table></figure>
<h3 id="查找元数据"><a href="#查找元数据" class="headerlink" title="查找元数据"></a><strong>查找元数据</strong></h3><p>当我们拿到一个包含元数据项的数组(上文中的metadata (AVMetadataItems))时,我们通常通过遍历取出里面的数据值. 元数据(AVAsset)提供一个AVMetadataItem的遍历方法, 例如我们相得到一个M4A的音频文件演奏者和唱片的元数据. 如下:</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="built_in">NSArray</span> *metaData = <span class="comment">//AVMetadataItems数组</span></div><div class="line">   <span class="built_in">NSString</span> *keySpace = <span class="built_in">AVMetadataKeySpaceiTunes</span>;</div><div class="line">   <span class="built_in">NSString</span> *artistKey= <span class="built_in">AVMetadataiTunesMetadataKeyArtist</span>;</div><div class="line">   <span class="built_in">NSString</span> *albumKey = <span class="built_in">AVMetadataiTunesMetadataKeyAlbum</span>;</div><div class="line">   </div><div class="line">   <span class="built_in">NSArray</span> *artistMetadata = [<span class="built_in">AVMetadataItem</span> metadataItemsFromArray:metaData withKey:artistKey keySpace:keySpace];</div><div class="line">   <span class="built_in">NSArray</span> *albumMetadata = [<span class="built_in">AVMetadataItem</span>  metadataItemsFromArray:metaData withKey:albumKey keySpace:keySpace];</div><div class="line">   </div><div class="line">   <span class="built_in">AVMetadataItem</span> *artistItem, *albumItem;</div><div class="line">   </div><div class="line">   <span class="keyword">if</span> (artistMetadata.count &gt; <span class="number">0</span>) &#123;</div><div class="line">       artistItem = artistMetadata[<span class="number">0</span>];</div><div class="line">   &#125;</div><div class="line">   </div><div class="line">   <span class="keyword">if</span> (albumMetadata.count &gt; <span class="number">0</span>) &#123;</div><div class="line">       albumItem = albumMetadata[<span class="number">0</span>];</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>这里通过下面的方法来拿出匹配key 和 keySpace的标准对象 通常情况下这个数组就只有一个实例对象</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">+ (<span class="built_in">NSArray</span>&lt;<span class="built_in">AVMetadataItem</span> *&gt; *)metadataItemsFromArray:(<span class="built_in">NSArray</span>&lt;<span class="built_in">AVMetadataItem</span> *&gt; *)metadataItems withKey:(<span class="keyword">id</span>)key keySpace:(<span class="built_in">AVMetadataKeySpace</span>)keySpace;</div></pre></td></tr></table></figure>
<h3 id="使用AVMetadataItem"><a href="#使用AVMetadataItem" class="headerlink" title="使用AVMetadataItem"></a>使用AVMetadataItem</h3><p>AVMetadataItem 可以理解成它是一个 专用于元数据的 字典(key: value) 类型, 唯一的区别是 它的key 有可能是 数字(NSNumber), 它提供了 转 字符串(stringValue) 和numberValue以及 dataValue 的转换  </p>
<p>举个例子： 如果输出的key是  145238391  …. 我觉得大家肯定不知道这代表啥意思</p>
<p>为了解决这个问题 需要对<code>AVMetadataItem</code>进行category扩展 把这种语义不清楚的整形key换成字符串的key就好理解了 代码如下:</p>
<figure class="highlight"><table><tr><td class="code"><pre><div class="line">#import "AVMetadataItem+Additions.h"</div><div class="line"></div><div class="line">@implementation AVMetadataItem (Additions)</div><div class="line"></div><div class="line">- (NSString *)keyString &#123;</div><div class="line">    if ([self.key isKindOfClass:[NSString class]]) &#123;                        // 1</div><div class="line">        return (NSString *)self.key;</div><div class="line">    &#125;</div><div class="line">    else if ([self.key isKindOfClass:[NSNumber class]]) &#123;</div><div class="line"></div><div class="line">        UInt32 keyValue = [(NSNumber *) self.key unsignedIntValue];         // 2</div><div class="line">        </div><div class="line">        // Most, but not all, keys are 4 characters ID3v2.2 keys are</div><div class="line">        // only be 3 characters long.  Adjust the length if necessary.</div><div class="line">        </div><div class="line">        size_t length = sizeof(UInt32);                                     // 3</div><div class="line">        if ((keyValue &gt;&gt; 24) == 0) --length;</div><div class="line">        if ((keyValue &gt;&gt; 16) == 0) --length;</div><div class="line">        if ((keyValue &gt;&gt; 8) == 0) --length;</div><div class="line">        if ((keyValue &gt;&gt; 0) == 0) --length;</div><div class="line">        </div><div class="line">        long address = (unsigned long)&amp;keyValue;</div><div class="line">        address += (sizeof(UInt32) - length);</div><div class="line"></div><div class="line">        // keys are stored in big-endian format, swap</div><div class="line">        keyValue = CFSwapInt32BigToHost(keyValue);                          // 4</div><div class="line"></div><div class="line">        char cstring[length];                                               // 5</div><div class="line">        strncpy(cstring, (char *) address, length);</div><div class="line">        cstring[length] = '\0';</div><div class="line"></div><div class="line">        // Replace '©' with '@' to match constants in AVMetadataFormat.h</div><div class="line">        if (cstring[0] == '\xA9') &#123;                                         // 6</div><div class="line">            cstring[0] = '@';</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return [NSString stringWithCString:(char *) cstring                 // 7</div><div class="line">                                  encoding:NSUTF8StringEncoding];</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    else &#123;</div><div class="line">        return @"&lt;&lt;unknown&gt;&gt;";</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>基础篇部分讲解到这里 下一篇 会写个demo演示一下元数据的各种不同格式如何统一解析</p>
<p>全文完</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/Learning-AV-Foundation-AVAsset/MacHi%202017-0
    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="macOS开发" scheme="https://www.sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="Learning AV Foundation" scheme="https://www.sunyazhou.com/tags/Learning-AV-Foundation/"/>
    
  </entry>
  
  <entry>
    <title>ARKit(一)ARSession</title>
    <link href="https://www.sunyazhou.com/2017/06/06/ARKit/"/>
    <id>https://www.sunyazhou.com/2017/06/06/ARKit/</id>
    <published>2017-06-06T03:34:37.000Z</published>
    <updated>2017-07-16T02:02:11.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/ARKit/ARKit_preview.png" alt=""></p>
<p>每年WWDC都发布一堆东西.今天很有震撼性发布了 增强现实<a href="https://developer.apple.com/documentation/arkit" target="_blank" rel="external">ARKit官方文档</a>,机器学习(Core ML) 。。。。等等 今天打算翻译一下Aplle的ARKit.</p>
<h2 id="AR是啥？"><a href="#AR是啥？" class="headerlink" title="AR是啥？"></a>AR是啥？</h2><p>AR增强现实的一种视觉技术.</p>
<h2 id="ARKit分6个部分-章节"><a href="#ARKit分6个部分-章节" class="headerlink" title="ARKit分6个部分(章节)"></a>ARKit分6个部分(章节)</h2><ol>
<li>理解和介绍ARSession</li>
<li>配置ARSession</li>
<li>标准视图(Standard Views)</li>
<li>自定义视图(Custom Views)</li>
<li>真实世界对象和位置(Real-World Objects and Positions)</li>
<li>相机摄像头和场景细节(Camera and Scene Details)  </li>
</ol>
<blockquote>
<p>第一部分对Seeson介绍了一下<br>第二部分介绍配置<br>第三部分使用相关的<a href="https://developer.apple.com/documentation/arkit/arscnview?language=objc" target="_blank" rel="external">ARSCNView</a>和<a href="https://developer.apple.com/documentation/arkit/arskview?language=objc" target="_blank" rel="external">ARSKView</a><br>第四部分介绍自定义View<br>第五部分介绍<code>ARAnchor</code>(锚点)、<code>ARPlaneAnchor</code>(平面锚点和射世界坐标转换)、<code>ARHitTestResult</code>(真实世界的点在摄像头中处理)<br>第六部分介绍<code>ARFrame</code>(视频图片帧)、<code>ARCamera</code>(摄像头)、<code>ARLightEstimate</code>(估算场景照明的灯光等)</p>
</blockquote>
<p>本章介绍从ARSession开始</p>
<h3 id="1-ARSession"><a href="#1-ARSession" class="headerlink" title="1. ARSession"></a>1. ARSession</h3><p><a href="https://developer.apple.com/documentation/arkit/arsession?language=objc" target="_blank" rel="external">ARSession</a>这是一个单例对象,用于管理 <strong>增强现实体验所需要的设备相机(摄像头)和运动处理</strong>的会话</p>
<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>一个<code>ARSession</code>对象坐标的主要过程是<code>ARKit</code>执行过程，代表您创建一个增强现实体验。这些过程包括读取数据从设备的运动传感硬件，控制设备的内置摄像头，并对捕获的相机图像进行图像分析。该会话综合所有这些结果，以建立真实世界的空间，设备栖息和虚拟空间，你模型AR内容之间的对应关系。</p>
<p>每一个用<code>ARKit</code>构建的<code>AR体验</code>要求只能有一个单独的<code>ARSession</code>对象.如果我们用<a href="https://developer.apple.com/documentation/arkit/arscnview?language=objc" target="_blank" rel="external">ARSCNView</a>和<a href="https://developer.apple.com/documentation/arkit/arskview?language=objc" target="_blank" rel="external">ARSKView</a>简单构建<code>AR</code>体验的一部分时,这个个view对象就包含了一个<code>ARSession</code>对象. 如果我们需要为<code>AR内容</code>构建自定义渲染,我们需要自己实例化并持有<code>ARSession</code>对象.</p>
<p>运行该会话需要如下:</p>
<ul>
<li>ARSessionConfiguration 对象实例</li>
<li>或者ARWorldTrackingSessionConfiguration 实例对象</li>
</ul>
<p>这些类决定<code>ARKit</code>如何跟踪设备的位置和相对真实的世界的运动轨迹,从而影响你可以创建AR体验的种类</p>
<blockquote>
<p><code>ARWorldTrackingSessionConfiguration</code>:<code>ARSessionConfiguration</code>(继承关系)</p>
</blockquote>
<h3 id="配置ARSession"><a href="#配置ARSession" class="headerlink" title="配置ARSession"></a>配置ARSession</h3><p>开始运行AR <code>runWithConfiguration:options:</code>方法</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)runWithConfiguration:(ARSessionConfiguration *)configuration </div><div class="line">                     options:(ARSessionRunOptions)options;</div></pre></td></tr></table></figure>
<p><code>ARSessionRunOptions</code> 枚举</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="built_in">NS_OPTIONS</span>(<span class="built_in">NSUInteger</span>, ARSessionRunOptions) &#123;</div><div class="line">    ARSessionRunOptionResetTracking           = (<span class="number">1</span> &lt;&lt; <span class="number">0</span>),</div><div class="line">    ARSessionRunOptionRemoveExistingAnchors   = (<span class="number">1</span> &lt;&lt; <span class="number">1</span>)</div><div class="line">&#125; <span class="built_in">NS_SWIFT_NAME</span>(ARSession.RunOptions);</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>ARSessionRunOptionResetTracking  不会基于上次配置信息持续 设备方向和运动轨迹</li>
<li>ARSessionRunOptionRemoveExistingAnchors 这个会话的上次配置中被关联的任何锚点对象都会被移除</li>
</ul>
</blockquote>
<h4 id="configuration配置"><a href="#configuration配置" class="headerlink" title="configuration配置"></a><code>configuration</code>配置</h4><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>, <span class="keyword">readonly</span>) ARSessionConfiguration *configuration;</div></pre></td></tr></table></figure>
<blockquote>
<p>为<code>ARSession</code>定义移动和场景轨迹行为的对象</p>
</blockquote>
<p><code>pause</code></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)pause;</div></pre></td></tr></table></figure>
<blockquote>
<p>暂停会话</p>
</blockquote>
<h5 id="Responding-to-AR-Updates-实时响应AR更新"><a href="#Responding-to-AR-Updates-实时响应AR更新" class="headerlink" title="Responding to AR Updates(实时响应AR更新)"></a>Responding to AR Updates(实时响应AR更新)</h5><p>delegate 接收ARSession视频捕捉图片和轨迹信息,或会话状态变化</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) <span class="keyword">id</span>&lt;ARSessionDelegate&gt; delegate;</div></pre></td></tr></table></figure>
<p>指定代理对象回调的队列<br><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">dispatch_queue_t</span> delegateQueue;</div></pre></td></tr></table></figure></p>
<h4 id="ARSessionDelegate"><a href="#ARSessionDelegate" class="headerlink" title="ARSessionDelegate"></a>ARSessionDelegate</h4><p>如果像直接和会话交互实现此协议方法使用<code>ARFrame</code>对象直接实现或者轨迹锚点对象(ARAnchor)的变化.一般实现如下协议都在我们构建一个自定义现实AR内容的view的情况下。如果你现实的内容使用了<code>SceneKit</code>或<code>SpriteKit</code>那么可以实现<code>ARSCNViewDelegate</code>代理它会提供给你相关的和这个<code>ARSessionDelegate</code>类似的信息</p>
<p>这个<code>ARSessionDelegate</code>代理继承<code>ARSessionObserver</code>,所以可以从回调中获取会话状态发生变化的信息.</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">ARSessionDelegate</span> &lt;<span class="title">ARSessionObserver</span>&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">@optional</span></div><div class="line"><span class="comment">//捕获的一帧图片+AR信息</span></div><div class="line">- (<span class="keyword">void</span>)session:(ARSession *)session didUpdateFrame:(ARFrame *)frame;</div><div class="line"></div><div class="line"><span class="comment">// 1个/多个锚点被添加</span></div><div class="line">- (<span class="keyword">void</span>)session:(ARSession *)session didAddAnchors:(<span class="built_in">NSArray</span>&lt;ARAnchor*&gt;*)anchors;</div><div class="line"></div><div class="line"><span class="comment">// 会话已经调整了所有锚点</span></div><div class="line">- (<span class="keyword">void</span>)session:(ARSession *)session didUpdateAnchors:(<span class="built_in">NSArray</span>&lt;ARAnchor*&gt;*)anchors;</div><div class="line"></div><div class="line"><span class="comment">// 锚点已经被移出</span></div><div class="line">- (<span class="keyword">void</span>)session:(ARSession *)session didRemoveAnchors:(<span class="built_in">NSArray</span>&lt;ARAnchor*&gt;*)anchors;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h4 id="ARSessionObserver"><a href="#ARSessionObserver" class="headerlink" title="ARSessionObserver"></a>ARSessionObserver</h4><h5 id="Responding-to-Tracking-Quality-Changes-轨迹质量变化的回馈"><a href="#Responding-to-Tracking-Quality-Changes-轨迹质量变化的回馈" class="headerlink" title="Responding to Tracking Quality Changes(轨迹质量变化的回馈)"></a>Responding to Tracking Quality Changes(轨迹质量变化的回馈)</h5><p><code>AR session</code>状态变化</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">设备方向轨迹质量发生变化</div><div class="line">- (<span class="keyword">void</span>)session:(ARSession *)session </div><div class="line">cameraDidChangeTrackingState:(ARCamera *)camera;</div></pre></td></tr></table></figure>
<h5 id="Handling-Interruptions-处理中断"><a href="#Handling-Interruptions-处理中断" class="headerlink" title="Handling Interruptions(处理中断)"></a>Handling Interruptions(处理中断)</h5><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//临时停止帧处理和跟踪设备的方向位置(类似音频会话的打断处理)</span></div><div class="line">- (<span class="keyword">void</span>)sessionWasInterrupted:(ARSession *)session;</div><div class="line"></div><div class="line"><span class="comment">//恢复刚才的操作</span></div><div class="line">- (<span class="keyword">void</span>)sessionInterruptionEnded:(ARSession *)session;</div></pre></td></tr></table></figure>
<h5 id="Handling-Session-Failure-处理会话失败"><a href="#Handling-Session-Failure-处理会话失败" class="headerlink" title="Handling Session Failure(处理会话失败)"></a>Handling Session Failure(处理会话失败)</h5><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//会话停止之后失败回调</span></div><div class="line">- (<span class="keyword">void</span>)session:(ARSession *)session </div><div class="line">didFailWithError:(<span class="built_in">NSError</span> *)error;</div></pre></td></tr></table></figure>
<h3 id="实时AR数据-更新"><a href="#实时AR数据-更新" class="headerlink" title="实时AR数据 更新"></a>实时AR数据 更新</h3><ul>
<li>currentFrame(ARFrame)当前帧</li>
<li>addAnchor: 添加锚点(ARAnchor)</li>
<li>removeAnchor:移出锚点(ARAnchor)</li>
</ul>
<blockquote>
<p>ARAnchor锚点是在AR会话的轨迹上的</p>
</blockquote>
<h3 id="ARSession-实例方法"><a href="#ARSession-实例方法" class="headerlink" title="ARSession 实例方法"></a>ARSession 实例方法</h3><ul>
<li>runWithConfiguration: (同上介绍不赘述)</li>
</ul>
<p><strong>以上是整个ARSession的介绍</strong></p>
<p>希望后续文章给出相关demo</p>
<p>全文完</p>
<p><a href="https://developer.apple.com/documentation?changes=latest_minor" target="_blank" rel="external">iOS11所有改动</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.gi
    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="macOS开发" scheme="https://www.sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>OpenGL编程语言-glsl基础</title>
    <link href="https://www.sunyazhou.com/2017/05/30/OpenGL-glsl-language/"/>
    <id>https://www.sunyazhou.com/2017/05/30/OpenGL-glsl-language/</id>
    <published>2017-05-30T12:32:33.000Z</published>
    <updated>2017-07-16T02:00:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/OpenGL-glsl-language/opengl-vbo-shader-glsl-vao-gpu.jpg" alt=""></p>
<p>最近在研究OpenGL 被各种陌生的名词虐成狗,所以记录下来一些学习知识点供学习和参考.</p>
<h2 id="GLSL是什么"><a href="#GLSL是什么" class="headerlink" title="GLSL是什么?"></a>GLSL是什么?</h2><p>GLSL(OpenGL Shading Language) 是OpenGL的着色器语言,纯粹的和GPU打交道的计算机语言.可以理解为C的变种专门针对OpenGL编程,不支持指针等等一些C的特性等. (名词解释:着色器(Shader))  </p>
<p><strong>GPU是多线程并行处理器</strong>，GLSL直接面向<a href="https://zh.wikipedia.org/wiki/%E5%8D%95%E6%8C%87%E4%BB%A4%E6%B5%81%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%B5%81" target="_blank" rel="external">单指令流多数据流(SIMD)</a>模型的多线程计算。<br>GLSL编写的着色器函数是对每个数据同时执行的。<br>每个顶点都会由顶点着色器中的算法处理，每个像素也都会由 <strong>片段着色器(也有叫片元着色器)</strong>中的算法处理。<br>初学者在编写自己的着色器时，需要考虑到SIMD的并发特性，并用并行计算的思路来思考问题 这就是GLSL.</p>
<p>我们最常见的用法是在 <strong>顶点着色器</strong>里生成所需要的值，然后传给 <strong>片断着色器</strong>用.</p>
<h2 id="GLSL能做什么"><a href="#GLSL能做什么" class="headerlink" title="GLSL能做什么"></a>GLSL能做什么</h2><ul>
<li>日以逼真的材质 – 金属，岩石，木头，油漆等</li>
<li>日益逼真的光照效果 – 区域光和软阴影</li>
<li>非现实材质 – 美术效果，钢笔画，水墨画和对插画技术的模拟</li>
<li>针对纹理内存的新用途</li>
<li>更少的纹理访问 </li>
<li>图形处理 – 选择，边缘钝化遮蔽和复杂混合</li>
<li>动画效果 – 关键帧插值，粒子系统</li>
<li>用户可编程的反走样方法</li>
</ul>
<h2 id="GLSL注意"><a href="#GLSL注意" class="headerlink" title="GLSL注意"></a>GLSL注意</h2><ul>
<li><strong>GLSL支持函数重载</strong>(就是父类定义方法,子类复写该方法叫重载)</li>
<li><strong>GLSL不存在数据类型的自动提升(就是不支持类型自动向上转换 eg:float 转 double)，类型必须严格保持一致.</strong></li>
<li><strong>GLSL不支持指针，字符串，字符，它基本上是一种处理数字数据的语言</strong></li>
<li><strong>GLSL不支持联合(union)、枚举类型(enum)、结构体(stuct)位字段(&gt;&gt; or &lt;&lt; 左右移)及按位运算符(| or &amp;这种按位与)</strong>(就是干掉麻烦的C操作 让这个更单纯的处理图形数据使用)</li>
</ul>
<h2 id="GLSL的数据类型"><a href="#GLSL的数据类型" class="headerlink" title="GLSL的数据类型"></a>GLSL的数据类型</h2><p>GLSL有三种基本数据类型: </p>
<ul>
<li>float</li>
<li>int</li>
<li>double</li>
<li>由float、int、double组成的array[]或者结构体  </li>
</ul>
<figure class="highlight glsl"><table><tr><td class="code"><pre><div class="line"><span class="number">42</span>   <span class="comment">// 十进制  </span></div><div class="line"><span class="number">042</span>  <span class="comment">// 八进制  </span></div><div class="line"><span class="number">0x2A</span> <span class="comment">// 十六进制</span></div></pre></td></tr></table></figure>
<p><strong><strong>注意:GLSL不支持指针,GLSL把向量和矩阵作为基本数据类型</strong></strong><br><a href="http://baike.baidu.com/link?url=XKZL51jLByIFnqrj3vaZ-4cnL-AedjBKiVBcD7pEGQG26Jmb9RYl7QOrX4Mwck-mT0nNlzD8UtzXi4ueVYNGkdO1b2uARr59UAih7ulWRvO" target="_blank" rel="external">向量(vector)</a>:有起始位置有方向的线段,也称作 <strong>矢量</strong>(不要被这些名词吓到,我记得这个向量是我高二的时候数学学的东西).</p>
<h2 id="矢量"><a href="#矢量" class="headerlink" title="矢量"></a>矢量</h2><p>矢量可以和标量甚至矩阵做加减乘除(必须遵守一定规则才可以 否则报错)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">vec2,  vec3,  vec4  //包含2/3/4个浮点数的矢量(浮点型)</div><div class="line">ivec2, ivec3, ivec4 //包含2/3/4个整数的矢量(整形数 前边带i 代表integer)</div><div class="line">bvec2, bvec3, bvec4 //包含2/3/4个布尔值的矢量(bool不用解释)</div></pre></td></tr></table></figure>
<p>上边这些是一种GLSL的数据类型, 可以简单理解为 <code>vec+数字</code> 就代表 是一个数组里面放几个元素(应该都是 vec2~vec4之间,没见过 vec5以上和vec2以下,好像这就代表几维坐标系),默认元素是float浮点类型,前边带<code>i</code>代表<code>integer</code>整形,<code>b</code>代表<code>bool</code>.</p>
<h3 id="vec如何声明使用？"><a href="#vec如何声明使用？" class="headerlink" title="vec如何声明使用？"></a>vec如何声明使用？</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">vec3 v; 	 //声明三维浮点型向量v</div><div class="line">v[1] = 3.0;  //给向量v的第二个元素赋值(数组从0开始,下标为1就是第二个元素)</div><div class="line"></div><div class="line">//下面两种等价</div><div class="line">vec3 v = vec3(0.6); //数组是连续的存储空间 相当于其它元素默认被这个0.6值填充</div><div class="line">vec3 v = vec3(0.6,0.6,0.6);</div></pre></td></tr></table></figure>
<blockquote>
<p><em>注意: 除了用索引方式外,还能用选择运算符的方式来使用向量.择运算符是对于向量的各个元素（最多为4个）约定俗成的名称，用一个小写拉丁字母来表示。根据向量表示对象的意义不同，可以使用以下选择运算符:</em>  </p>
</blockquote>
<ul>
<li>表示顶点可以用 (x、y、z、w)  (坐标系)</li>
<li>表示颜色可以用 (r、g、b、a)  (颜色值带透明)</li>
<li>表示纹理坐标用 (s、t、p、q)<br>三种任选一种都一样,作用都是等效的. 也就是说，如果<code>v</code>是一个向量，那么:  </li>
<li><code>v[0]</code></li>
<li><code>v.x</code></li>
<li><code>v.r</code></li>
<li><code>v.s</code><br>都指的是向量v的第一个元素。<br>例如:</li>
</ul>
<figure class="highlight glsl"><table><tr><td class="code"><pre><div class="line"><span class="comment">//用构造函数的方式声明并初始化四维浮点型</span></div><div class="line"><span class="type">vec4</span> v1 = <span class="type">vec4</span>(<span class="number">1.0</span>, <span class="number">2.0</span>, <span class="number">3.0</span>, <span class="number">4.0</span>); </div><div class="line"><span class="type">vec4</span> v2;  </div><div class="line">v2.xy=v1.yz;  <span class="comment">//将v1的第二个和第三个元素复制到v2的第一个和第二个元素</span></div><div class="line">v2.z=<span class="number">2.0</span>;  	  <span class="comment">//给v2的第三个元素赋值  </span></div><div class="line">v2.xy=v1.yx;  <span class="comment">//将v1的头两个元素互换，再复制到v2的头两个元素中</span></div></pre></td></tr></table></figure>
<h2 id="矩阵-matrix"><a href="#矩阵-matrix" class="headerlink" title="矩阵(matrix)"></a>矩阵(matrix)</h2><p>矩阵(matrix)以下类型都以mat开头</p>
<ul>
<li><code>mat2</code> 代表2x2的矩阵</li>
<li><code>mat3</code> 代表3x3的矩阵</li>
<li><code>mat4</code> 代表4x4的矩阵<br><em><strong>注意:矩阵是按列顺序组织的，先列后行</strong></em></li>
</ul>
<p>如下代码:</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><div class="line"><span class="type">mat4</span> m;		 <span class="comment">//声明四维浮点型方阵m  </span></div><div class="line">m[<span class="number">2</span>][<span class="number">3</span>]=<span class="number">2.0</span>; <span class="comment">//给方阵的第三列、第四行元素赋值 </span></div><div class="line"></div><div class="line"><span class="comment">// 下面两种等价，初始化矩阵对角</span></div><div class="line"><span class="type">mat2</span> m = <span class="type">mat2</span>(<span class="number">1.0</span>)</div><div class="line"><span class="type">mat2</span> m = <span class="type">mat2</span>(<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>);</div></pre></td></tr></table></figure>
<h2 id="取样器-Sampler"><a href="#取样器-Sampler" class="headerlink" title="取样器(Sampler)"></a>取样器(Sampler)</h2><p>纹理查找需要制定哪个纹理或者纹理单元将制定查找.</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><div class="line"><span class="type">sampler1D</span>        <span class="comment">// 访问一个一维纹理</span></div><div class="line"><span class="type">sampler2D</span>        <span class="comment">// 访问一个二维纹理           </span></div><div class="line"><span class="type">sampler3D</span>        <span class="comment">// 访问一个三维纹理</span></div><div class="line"><span class="type">samplerCube</span>      <span class="comment">// 访问一个立方贴图纹理</span></div><div class="line"><span class="type">sampler1DShadow</span>  <span class="comment">// 访问一个带对比的一维深度纹理</span></div><div class="line"><span class="type">sampler2DShadow</span>  <span class="comment">// 访问一个带对比的二维深度纹理</span></div></pre></td></tr></table></figure>
<figure class="highlight glsl"><table><tr><td class="code"><pre><div class="line"><span class="keyword">uniform</span> <span class="type">sampler2D</span> grass;</div><div class="line"></div><div class="line">vcc2 coord = <span class="type">vec2</span>(<span class="number">100</span>, <span class="number">100</span>);</div><div class="line"><span class="type">vec4</span> color = <span class="built_in">texture2D</span>(grass, coord);</div></pre></td></tr></table></figure>
<p>如果一个着色器在程序里结合多个文理, 可以使用取样器数组.</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="type">int</span> tex_nums = <span class="number">4</span>;</div><div class="line"><span class="keyword">uniform</span> <span class="type">sampler2D</span> textures[tex_nums];</div><div class="line"></div><div class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; tex_nums; ++i) &#123;</div><div class="line">    <span class="type">sampler2D</span> tex = textures[i];</div><div class="line">    <span class="comment">// todo ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><p>这是唯一的用户能用的自定义类型  </p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><div class="line">struct light  </div><div class="line">&#123;  </div><div class="line">    <span class="type">vec3</span> position;  </div><div class="line">    <span class="type">vec3</span> color;  </div><div class="line">&#125;;  </div><div class="line"></div><div class="line">light ceiling_light;</div></pre></td></tr></table></figure>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>数组索引是从0开始的，而且没有指针概念</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 创建一个10个元素的数组  </span></div><div class="line"><span class="type">vec4</span> <span class="keyword">points</span>[<span class="number">10</span>];  </div><div class="line"></div><div class="line"><span class="comment">// 创建一个不指定大小的数组</span></div><div class="line"><span class="type">vec4</span> <span class="keyword">points</span>[]; </div><div class="line"><span class="keyword">points</span>[<span class="number">2</span>] = <span class="type">vec4</span>(<span class="number">1.0</span>);  <span class="comment">// points现在大小为3</span></div><div class="line"><span class="keyword">points</span>[<span class="number">7</span>] = <span class="type">vec4</span>(<span class="number">2.0</span>);  <span class="comment">// points现在大小为8</span></div></pre></td></tr></table></figure>
<h2 id="void"><a href="#void" class="headerlink" title="void"></a>void</h2><p>只能用于声明函数返回值</p>
<h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p>必须明确地进行类型转换，不会自动类型提升</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><div class="line"><span class="type">float</span> f = <span class="number">2.3</span>; </div><div class="line"><span class="type">bool</span> b = <span class="type">bool</span>(f); <span class="comment">// b is true</span></div></pre></td></tr></table></figure>
<h2 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h2><p><strong>GLSL中有4个限定符（variable qualifiers）可供使用，它们限定了被标记的变量不能被更改的”范围”.</strong></p>
<ul>
<li><code>const</code></li>
<li><code>attribute</code></li>
<li><code>uniform</code></li>
<li><code>varying</code>  </li>
</ul>
<p><code>const</code>: 和C++里差不多，定义不可变常量<br>表示限定的变量在编译时不可被修改.</p>
<p><code>attribute</code>:是应用程序传给顶点着色器用的<br>不允许声明时初始化  </p>
<p><code>attribute</code>限定符标记的是一种全局变量,该变量在顶点着色器中是只读（read-only）的，该变量被用作从OpenGL应用程序向顶点着色器中传递参数，因此该限定符仅能用于顶点着色器.  </p>
<p><code>uniform</code>:一般是应用程序用于设定顶点着色器和片断着色器相关初始化值.不允许声明时初始化.<code>uniform</code>限定符标记的是一种全局变量,该变量对于一个图元（<code>primitive</code>）来说是不可更改的 它可以从<code>OpenGL</code>应用程序中接收传递来的参数  </p>
<p><code>varying</code>:用于传递顶点着色器的值给片断着色器.它提供了从顶点着色器向片段着色器传递数据的方法，varying限定符可以在顶点着色器中定义变量，然后再传递给光栅化器，光栅化器对数据插值后，再将每个片段的值交给片段着色器.</p>
<p><em><strong>注意:以上这几种限定符很重要</strong></em></p>
<h2 id="限制性"><a href="#限制性" class="headerlink" title="限制性"></a>限制性</h2><ul>
<li>不能在if-else中声明变量</li>
<li>用于判断的条件必须是bool类型(if,while,for…)</li>
<li>(?:)操作符后两个参数必须类型相同</li>
<li>不支持switch语句  </li>
</ul>
<figure class="highlight glsl"><table><tr><td class="code"><pre><div class="line"><span class="type">vec4</span> toonify(<span class="keyword">in</span> <span class="type">float</span> intensify) </div><div class="line">&#123;</div><div class="line">    <span class="type">vec4</span> color;</div><div class="line">    color = <span class="type">vec4</span>(<span class="number">0.8</span>,<span class="number">0.8</span>,<span class="number">0.8</span>,<span class="number">0.8</span>)</div><div class="line">    <span class="keyword">return</span> color;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="discard"><a href="#discard" class="headerlink" title="discard"></a>discard</h2><p><code>discard</code>关键字可以避免片段更新帧缓冲区，当流控制遇到这个关键字时，正在处理的片段就会被标记为丢.</p>
<p>如果不理解什么叫标记为丢 可以参考一下<a href="理解UIView的绘制">UIView的绘制过程</a></p>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul>
<li>函数名可以通过参数类型重载，但是和返回值类型无关</li>
<li>所有参数必须完全匹配，参数不会自动</li>
<li>函数不能被递归调用</li>
<li>函数返回值不能是数组</li>
</ul>
<p>函数参数标识符  </p>
<ul>
<li><code>in</code>: 进复制到函数中，但不返回的参数(默认)</li>
<li><code>out</code>: 不将参数复制到函数中，但返回参数</li>
<li><code>inout</code>: 复制到函数中并返回 </li>
</ul>
<h2 id="混合操作"><a href="#混合操作" class="headerlink" title="混合操作"></a>混合操作</h2><p>通过在选择器(.)后列出各分量名，就可以选择这些分量</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><div class="line"><span class="type">vec4</span> v4;</div><div class="line">v4.rgba;    <span class="comment">// 得到vec4</span></div><div class="line">v4.rgb;     <span class="comment">// 得到vec3</span></div><div class="line">v4.b;       <span class="comment">// 得到float</span></div><div class="line">v4.xy;      <span class="comment">// 得到vec2</span></div><div class="line">v4.xgba;    <span class="comment">// 错误！分量名不是同一类</span></div><div class="line"></div><div class="line">v4.wxyz;    <span class="comment">// 打乱原有分量顺序</span></div><div class="line">v4.xxyy;    <span class="comment">// 重复分量</span></div></pre></td></tr></table></figure>
<p>最后推荐一个GLSL编辑调试工具<a href="http://adcdownload.apple.com/Developer_Tools/Graphics_Tools_for_Xcode_7.2/Graphics_Tools_for_Xcode_7.2.dmg" target="_blank" rel="external">OpenGL Shader Builder(Graphics Tools.dmg)</a></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h1><p>由于本人记性不好使 找东西有时候总找不到 把一些 名词知识点收录出来并加以解释 方便后来的学习者学习.</p>
<p>参考:<br><a href="http://www.cnblogs.com/luweimy/p/4208570.html?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="external">GLSL基础</a></p>
<p><a href="http://www.jianshu.com/p/ee597b2bd399" target="_blank" rel="external">iOS开发-OpenGL ES入门教程2</a>  </p>
<p>全文完</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.gi
    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="macOS开发" scheme="https://www.sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="OpenGL ES" scheme="https://www.sunyazhou.com/tags/OpenGL-ES/"/>
    
  </entry>
  
  <entry>
    <title>自定义NSTableRowView实现鼠标跟踪动态显示选中/非选中颜色</title>
    <link href="https://www.sunyazhou.com/2017/05/10/NSTableRowView-mouse-track-color/"/>
    <id>https://www.sunyazhou.com/2017/05/10/NSTableRowView-mouse-track-color/</id>
    <published>2017-05-10T07:24:20.000Z</published>
    <updated>2017-07-16T02:00:26.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"BDRowView.h"</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#define k_NORMAL_COLOR [NSColor colorFromInt:0xfcfdfe]</span></div><div class="line"><span class="meta">#define k_SELECTED_COLOR [NSColor colorFromInt:0xeff1f3]</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">BDRowView</span> ()</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">strong</span>) <span class="built_in">NSTrackingArea</span> *trackingArea;</div><div class="line"><span class="keyword">@property</span>(<span class="keyword">assign</span>) <span class="built_in">BOOL</span> isHovering;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">BDRowView</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)drawRect:(<span class="built_in">NSRect</span>)dirtyRect &#123;</div><div class="line">    [<span class="keyword">super</span> drawRect:dirtyRect];</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)drawSelectionInRect:(<span class="built_in">NSRect</span>)dirtyRect &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.selectionHighlightStyle != <span class="built_in">NSTableViewSelectionHighlightStyleNone</span>) &#123;</div><div class="line">        <span class="built_in">NSRect</span> selectionRect = <span class="built_in">NSInsetRect</span>(<span class="keyword">self</span>.bounds, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">        [k_SELECTED_COLOR setStroke];</div><div class="line">        [k_SELECTED_COLOR setFill];</div><div class="line">        <span class="built_in">NSBezierPath</span> *selectionPath = [<span class="built_in">NSBezierPath</span> bezierPathWithRoundedRect:selectionRect xRadius:<span class="number">0</span> yRadius:<span class="number">0</span>];</div><div class="line">        [selectionPath fill];</div><div class="line">        [selectionPath stroke];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">-(<span class="keyword">void</span>)updateTrackingAreas</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">self</span>.trackingArea != <span class="literal">nil</span>) &#123;</div><div class="line">        [<span class="keyword">self</span> removeTrackingArea:<span class="keyword">self</span>.trackingArea];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">int</span> opts = (<span class="built_in">NSTrackingMouseEnteredAndExited</span> | <span class="built_in">NSTrackingMouseMoved</span> | <span class="built_in">NSTrackingActiveAlways</span>);</div><div class="line">    <span class="keyword">self</span>.trackingArea = [ [<span class="built_in">NSTrackingArea</span> alloc] initWithRect:[<span class="keyword">self</span> bounds]</div><div class="line">                                                      options:opts</div><div class="line">                                                        owner:<span class="keyword">self</span></div><div class="line">                                                     userInfo:<span class="literal">nil</span>];</div><div class="line">    [<span class="keyword">self</span> addTrackingArea:<span class="keyword">self</span>.trackingArea];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)mouseEntered:(<span class="built_in">NSEvent</span> *)theEvent &#123;</div><div class="line">    <span class="keyword">self</span>.isHovering = <span class="literal">YES</span>;</div><div class="line">    [<span class="keyword">self</span> setBackgroundColor:[<span class="keyword">self</span> getBackgroundColor:<span class="literal">YES</span>]];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)mouseExited:(<span class="built_in">NSEvent</span> *)theEvent &#123;</div><div class="line">    <span class="keyword">self</span>.isHovering = <span class="literal">NO</span>;</div><div class="line">    [<span class="keyword">self</span> setBackgroundColor:[<span class="keyword">self</span> getBackgroundColor:<span class="literal">NO</span>]];</div><div class="line">&#125;</div><div class="line"></div><div class="line">-(<span class="built_in">NSColor</span>*)getBackgroundColor:(<span class="built_in">BOOL</span>)isSelected</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(isSelected) &#123;</div><div class="line">        <span class="keyword">return</span> k_SELECTED_COLOR;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">return</span> k_NORMAL_COLOR;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&quot;BDRo
    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="macOS开发" scheme="https://www.sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>如何在macOS/MAC OS X上创建替身文件</title>
    <link href="https://www.sunyazhou.com/2017/05/09/how-to-create-symbolicLink-on-macos-in-code/"/>
    <id>https://www.sunyazhou.com/2017/05/09/how-to-create-symbolicLink-on-macos-in-code/</id>
    <published>2017-05-09T09:41:17.000Z</published>
    <updated>2017-07-16T02:01:41.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/how-to-create-symbolicLink-on-macos-in-code/symboliclink1.jpg" alt=""></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>熟悉WIN 开发的同学一定很熟悉快捷方式,在macOS上叫做替身 最近开发插件相关逻辑 发现需要把插件复制到指定目录所以有了此文</p>
<h3 id="软连接"><a href="#软连接" class="headerlink" title="软连接"></a>软连接</h3><p>如果你深刻的理解了内存管理的原理，软连接就如同内存管理中的“指向指针的指针”，软连接本质就是指向硬连接的一个地址，自然它也只会对这一个硬连接有效，一旦软连接所指向的硬连接被删除，软连接也就失效了。当然这与”指针的指针”也有一个很微妙的差别，那就是你对软链接的操作都是通过跳转到硬连接再映射到了对节点的操作</p>
<p>创建软链接可以使用<code>NSFileManager</code>中的两个方法:</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="built_in">BOOL</span>)createSymbolicLinkAtPath:(<span class="built_in">NSString</span> *)path withDestinationPath:(<span class="built_in">NSString</span> *)destPath error:(<span class="built_in">NSError</span> **)error ;</div><div class="line">- (<span class="built_in">BOOL</span>)createSymbolicLinkAtURL:(<span class="built_in">NSURL</span> *)url withDestinationURL:(<span class="built_in">NSURL</span> *)destURL error:(<span class="built_in">NSError</span> **)error;</div></pre></td></tr></table></figure>
<h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>最近在开发插件 需要把插件从工程目录 copy到 系统的插件目录<code>~/Library/Internet Plug-Ins/</code> (<a href="http://www.tanhao.me/pieces/1084.html/" target="_blank" rel="external">这里用了老谭的插件举例</a>)</p>
<p>如下图:<br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/how-to-create-symbolicLink-on-macos-in-code/MacHi2017-05-0918-03-05.png" alt=""></p>
<p>本想把它直接copy过去, 但可能存在以后升级问题,后续判断各种版本 删除旧的版本逻辑处理比较麻烦,于是想到用替身的方式实现</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/how-to-create-symbolicLink-on-macos-in-code/MacHi2017-05-0918-03-42.png" alt=""></p>
<p>使用这种方式创建替身:</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//工程目录文件</span></div><div class="line"><span class="built_in">NSString</span> *homePath = [[<span class="built_in">NSBundle</span> mainBundle] pathForResource:<span class="string">@"NPAPI_Download_Plugin"</span> ofType:<span class="string">@"plugin"</span>];</div><div class="line"><span class="comment">//插件在系统的目录位置</span></div><div class="line"><span class="built_in">NSString</span> *strHome = [<span class="built_in">NSString</span> stringWithUTF8String:getenv(<span class="string">"HOME"</span>)];</div><div class="line"><span class="built_in">NSString</span> *desc = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@/Library/Internet Plug-Ins/NPAPI_Download_Plugin.plugin"</span>,strHome];</div><div class="line"><span class="built_in">NSFileManager</span> *fm = [<span class="built_in">NSFileManager</span> defaultManager];</div><div class="line"><span class="comment">//创建替身代码</span></div><div class="line">[fm createSymbolicLinkAtPath:desc withDestinationPath:homePath error:<span class="literal">nil</span>];</div></pre></td></tr></table></figure>
<p><em>注意:<code>createSymbolicLinkAtPath:withDestinationPath:error:</code>方法 第一个参数<code>LinkAtPath</code>是<code>desc</code>,它是放替身文件的位置. 第二个参数<code>DestinationPath</code>是<code>homePath</code>代表本地文件的原始路径,这里用工程目录的文件是为了方便,切记不要和 copyItem方法搞混</em></p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/how-to-create-symbolicLink-on-macos-in-code/MacHi2017-05-0918-04-11.png" alt=""></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>主要涉及的一些macOS开发技巧, 希望不足之处大家多多指教.</p>
<p>参考:<a href="http://www.tanhao.me/pieces/597.html/" target="_blank" rel="external">详解OSX(Unix)中的Hard Link与Symbolic Link(硬连接与软连接)</a></p>
<p>全文完</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/how-to-create-symbolicLink-on-macos-in-code/s
    
    </summary>
    
      <category term="macOS开发" scheme="https://www.sunyazhou.com/categories/macOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="macOS开发" scheme="https://www.sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="如何" scheme="https://www.sunyazhou.com/tags/%E5%A6%82%E4%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>赠:即将高中毕业向往计算机科学相关专业同学的只言片语</title>
    <link href="https://www.sunyazhou.com/2017/04/29/some-advice-for-high-school-graduate/"/>
    <id>https://www.sunyazhou.com/2017/04/29/some-advice-for-high-school-graduate/</id>
    <published>2017-04-29T01:15:21.000Z</published>
    <updated>2017-07-16T02:02:31.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/some-advice-for-high-school-graduate/1.jpg" alt=""></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>无论是何时毕业,何时参加工作,我的这篇文章将是大家迈进大学校门之前或者过程中荐举之章. <strong>学习好一定要坚持下去,学习不好并不代表以后没有机会</strong>, 如果你大学想学的是计算机相关专业,我可以把我之所学和必备的一些学习装备合盘托出毫无保留的告诉你, 并切能节省大部分学习开支.</p>
</blockquote>
<h2 id="主要分3个方面"><a href="#主要分3个方面" class="headerlink" title="主要分3个方面"></a>主要分3个方面</h2><h3 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h3><p>首先来说 书籍 大学计算机必须的基本经典书籍</p>
<ul>
<li><p><a href="http://baike.baidu.com/link?url=rVNBy5FqKGq6YBb22T6Sj0IrRCeFj_SKf9QLjV7avP1cXIelBdhMza-y9Xu4fBHk0ynNI-RiFxbGySk68agqb1zrrQ2xPBZO9-WiqQe3AJy8IHEtHGBWGnxcwJlf77xiVaN3VdvdSn9_OaHodVRmuSl8MbPLBh5e0JzEhE0ikuNIGivWRklNzsL2WTD6WOJT" target="_blank" rel="external">C语言程序设计 谭浩强</a> <strong>必学</strong><br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/some-advice-for-high-school-graduate/c_language.jpg" alt=""></p>
</li>
<li><p><a href="https://item.jd.com/11076338.html" target="_blank" rel="external">清华大学计算机系列教材：数据结构（C语言版）</a> <strong>必学</strong><br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/some-advice-for-high-school-graduate/data_structure.jpg" alt=""></p>
</li>
<li><p><a href="https://item.jd.com/10064429.html" target="_blank" rel="external">鸟哥的Linux私房菜 （基础学习篇 第三版）</a> <strong>必学</strong><br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/some-advice-for-high-school-graduate/linux.jpg" alt=""> </p>
</li>
</ul>
<p><em><a href="https://github.com/torvalds" target="_blank" rel="external">Linux Torvalds博客</a></em></p>
<ul>
<li><p><a href="https://item.jd.com/11017238.html" target="_blank" rel="external">C++</a><br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/some-advice-for-high-school-graduate/c_plus.jpg" alt=""></p>
</li>
<li><p>Git<br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/some-advice-for-high-school-graduate/git.jpg" alt=""></p>
</li>
<li><p>数据库 这个很重要可以简单理解成excel表格只不过是以文件存储数据的文件. eg:sqlite sql server 这个就不推荐书籍了大学课程里面一定有</p>
</li>
</ul>
<p>以上的书可以买纸质的,至于 python、java、js、nodejs、机器学习相关的大家可以不必买书.但考虑大家还是很潦倒的 可以从网上下载电子版学习是一样的. 比如ibook(苹果电脑上的epub格式) kindle(mobi格式) 还有pdf常用的格式. <strong>但我还是建议不用买,耐心往下看</strong> </p>
<h3 id="技法"><a href="#技法" class="headerlink" title="技法"></a>技法</h3><ul>
<li><a href="https://github.com/sunyazhou13/free-programming-books-zh_CN" target="_blank" rel="external">免费的编程中文书籍索引</a> 这就是不需要大家买书的原因,所有计算机相关的技术书籍和视频教程博客等全部资料都在这,是的你确实没看错就是一个链接搞定.</li>
<li>学习一下如何搭建自己博客这样就可以把所学的知识点记录下来还能提高影响力<br>详情可以参考我的文章<a href="http://localhost:4000/2017/02/10/build-hexo-blog-Tutorial/" target="_blank" rel="external">如何搭建HEXO博客</a></li>
<li>每天尽量早起一个小时看书,预习今天要讲的内容.</li>
<li>看大神的博客</li>
<li>订阅各种博客发布文章(推荐一个软件叫<a href="http://www.0daydown.com/12/436535.html" target="_blank" rel="external">Reeder</a>)<br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/some-advice-for-high-school-graduate/QQ20170429-105045%402x.png" alt=""></li>
</ul>
<p>(估计初学者还不知道谁是在某个领域的大神,这个可以慢慢摸索)<br>我是个学习iOS方向的所以我给出的一个学习资料的github链接和大神列表  </p>
<ul>
<li><a href="https://github.com/tangqiaoboy/iOSBlogCN" target="_blank" rel="external">中文 iOS/Mac 开发博客列表</a>是的你又没看错就是一个链接 这里有如何把博客的RSS搞到Reeder软件里  </li>
<li><a href="http://blog.devtang.com/2014/07/27/ios-levelup-tips/" target="_blank" rel="external">唐巧博客</a></li>
</ul>
<p>下图是我的reeder<br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/some-advice-for-high-school-graduate/QQ20170429-111258%402x.png" alt=""></p>
<h3 id="装备"><a href="#装备" class="headerlink" title="装备"></a>装备</h3><p>这个是大家最关心的也是父母最心烦的事了.</p>
<p>大学装备真的很重要没错 那我先从电脑说起把</p>
<ul>
<li>Mac电脑(苹果电脑 macbook)<br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/some-advice-for-high-school-graduate/mac_computer.jpeg" alt=""><br>因为它完美结合了 Unix 系的 Shell 和优秀的图形界面(跟window PC说再见吧 这台电脑一直能用到你参加工作)</li>
</ul>
<h4 id="方案1-高贵轻奢型"><a href="#方案1-高贵轻奢型" class="headerlink" title="方案1(高贵轻奢型)"></a><strong>方案1(高贵轻奢型)</strong></h4><p>如果要求比较高的可以买<a href="https://detail.tmall.com/item.htm?spm=a220m.1000858.1000725.9.7HDqEB&amp;id=44131265268&amp;skuId=79231665633&amp;areaId=110100&amp;standard=1&amp;user_id=1669409267&amp;cat_id=2&amp;is_b=1&amp;rn=892765ac3efe1f5cd3df8f0d2eb48f87" target="_blank" rel="external">MacBook Pro MF839CH</a> <code>￥7988</code></p>
<p>840型号 貌似贵些 当然这些针对于家庭条件比较好的同学<br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/some-advice-for-high-school-graduate/839.jpg" alt="">  </p>
<h4 id="方案2-轻巧实用型"><a href="#方案2-轻巧实用型" class="headerlink" title="方案2(轻巧实用型)"></a><strong>方案2(轻巧实用型)</strong></h4><p>如果要求一般也可以省钱买个13.3吋 的<br><a href="https://detail.tmall.com/item.htm?spm=a220m.1000858.1000725.1.7HDqEB&amp;id=530945296812&amp;skuId=3163301283248&amp;areaId=110100&amp;standard=1&amp;user_id=2616970884&amp;cat_id=2&amp;is_b=1&amp;rn=892765ac3efe1f5cd3df8f0d2eb48f87" target="_blank" rel="external">MacBook Air13.3</a> 足够用了 我同事就有一个用了5年多 <code>￥6488</code><br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/some-advice-for-high-school-graduate/macbookair.jpg" alt=""></p>
<p>大家是不是会觉得这个很贵、我既然说让你省钱就能让你省钱  往下看</p>
<h4 id="方案3-穷困潦倒型"><a href="#方案3-穷困潦倒型" class="headerlink" title="方案3(穷困潦倒型)"></a><strong>方案3(穷困潦倒型)</strong></h4><p>有一个苹果电脑它很便宜叫<a href="https://www.apple.com/cn/mac-mini/" target="_blank" rel="external">mac mini</a> 港版淘宝<code>￥3300</code>左右 </p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/some-advice-for-high-school-graduate/macmini.png" alt=""></p>
<p>注意: <strong><em>没有显示器和鼠标键盘</em></strong>  需要自己买鼠标键盘 可以买个二手的显示器可以但是我记得一般大学都可以提供租借给同学使用 显示器+鼠标键盘 1500新的也够了</p>
<p>这个学习和使用完全能满足 只是大家很不习惯 苹果键盘和pc键盘按键有点稍稍区别<br>不过没关系 淘宝 50块钱能买个 蓝牙的苹果能用的键盘</p>
<p>这个是我认为最好的方案了 即经济又实惠 </p>
<p>好说完电脑 我们继续往下说</p>
<ul>
<li>树莓派<br>首先介绍一下这个是我所见过迄今为止 最便宜的最小的电脑 并且能运行linux各种操作系统 只不过是arm级别的 但是对于学生来说 非常适合学习 因为简单一个TF卡就可以当硬盘 键盘鼠标 wifi 蓝牙 网卡 全带 而且只需要 <code>￥275</code>左右<br>是的就是这么便宜 还是进口英国产的 如果国产的 只需要<code>￥230</code><br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/some-advice-for-high-school-graduate/raspberry.jpg" alt=""></li>
</ul>
<p>为啥树莓派是必备的是因为学习linux过程中 你总不能来回折腾电脑安装各种操作系统吧  其实这个也不是必要的 但是为了学习 shell建议 还是 用这个 比较方便<br>这个适合计算机相关专业的同学爱折腾 爱学习技术 玩技术 的必备</p>
<p>当我以后老去 我一定把这个放在我的博物馆里</p>
<p><em>注意:这个需要显示器和鼠标键盘 如果上边选择方案3 这个非常适合</em></p>
<ul>
<li><p>智能手机<br>这个我只能推荐大家买iPhone 或者便宜点的Android<br>iPhone 5s/SE <code>￥3288</code>左右<br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/some-advice-for-high-school-graduate/iPhone.jpg" alt=""><br>手机如果搞iOS开发当然要买个iPhone 现在不是钱的问题是移动互联网发展火爆的时代,得有个像样的装备以备不时之需.</p>
</li>
<li><p>Kindle</p>
<p>这个东西是个看书的好东西 上边说的那些图书 都可以通过 关注一些微信的公众号推送到这台设备免费获得, 一个很小的设备能装下很多书 很适合大家轻松学习不必带一堆没用沉重的书籍.  <code>￥558</code><br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/some-advice-for-high-school-graduate/kindle.jpg" alt=""></p>
</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>可以这样说 看完上述文章 你至少知道如何学习并且方便的找到学习资料</p>
<p>下面我们开始算一笔入学装备的帐  </p>
<p><code>电脑 + 树莓派 + 智能手机 + Kindle = 大学学习保障</code>  </p>
<p><code>方案1 + 树莓派 + 智能手机 + Kindle</code>    = ?<br><code>￥7988</code> + <code>￥275</code> + <code>￥3288</code> +  <code>￥558</code> = <code>￥12109</code> 这个估计家长很难接受 适合 高贵轻奢型</p>
<p><code>方案2 + 树莓派 + 智能手机 + Kindle</code>    = ?<br><code>￥6488</code> + <code>￥275</code> + <code>￥3288</code> +  <code>￥558</code> = <code>￥10609</code> 这个也得1w多 主要费钱的是手机 如果手机 能省一些 估计 不到1w够了</p>
<p><code>方案3 + 树莓派 + 智能手机 + Kindle</code>    = ?<br><code>￥3300</code> + <code>￥275</code> + <code>￥3288</code> +  <code>￥558</code> = <code>￥7421</code> </p>
<p>这个是包含主设备 考虑到还要 租借显示器 和键盘 我们 暂且 加 ￥1000</p>
<p><code>￥3300</code> + <code>￥275</code> + <code>￥3288</code> +  <code>￥558</code> + <code>￥1000</code> = <code>￥8421</code></p>
<p>最终还是 需要8K多 不过这已经 比较省了 如果手机买个Android那么 下面是这样的</p>
<p><code>￥3300</code> + <code>￥275</code> + <code>￥699</code> +  <code>￥558</code> + <code>￥1000</code> = <code>￥4832</code></p>
<p>是的 5k足够了 其实这才是最经济的方案 如果 手机不用买 鼠标键盘也不用买的花 也就 4k多一点 无论是毕业生还是大学生 切记要让钱花在刀刃上 东西要物尽其用 尤其是大学期间 根本不需要多好 能用就行了 参加工作 自己自足之后 想买什么就不是问题了 </p>
<p>好了 就说到这吧 我不是在打广告 如果觉得我的文章很有价值 可以请我喝瓶饮料</p>
<p>全文完</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/some-advice-for-high-school-graduate/1.jpg&quot; a
    
    </summary>
    
      <category term="生活" scheme="https://www.sunyazhou.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>如何在iOS/macOS系统中创建文件时创建唯一的文件名</title>
    <link href="https://www.sunyazhou.com/2017/04/20/unique-filename-in-system/"/>
    <id>https://www.sunyazhou.com/2017/04/20/unique-filename-in-system/</id>
    <published>2017-04-20T08:35:42.000Z</published>
    <updated>2017-04-29T01:11:13.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/unique-filename-in-system/stock-photo-167171895.jpg" alt=""></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>当我无数次看到大家写代码的时候总是以一个<code>时间戳+arc4random()</code>创建某文件的时候 深感心碎,难道操作系统就没有提供相关的函数么 于是 我找到了如下代码 解决大家因为创建文件重名问题.</p>
<pre><code class="objc"><span class="comment">/* Create a recording file */</span>
    <span class="built_in">NSString</span> *filePath = [<span class="string">@"~/Movies/AVScreenShackRecording_XXXXXX"</span> stringByStandardizingPath];
    <span class="keyword">char</span> *screenRecordingFileName = strdup([filePath fileSystemRepresentation]);
    <span class="keyword">if</span> (screenRecordingFileName)
    {
        <span class="keyword">int</span> fileDescriptor = mkstemp(screenRecordingFileName);
        <span class="keyword">if</span> (fileDescriptor != <span class="number">-1</span>)
        {
            <span class="built_in">NSString</span> *filenameStr = [[<span class="built_in">NSFileManager</span> defaultManager] stringWithFileSystemRepresentation:screenRecordingFileName length:strlen(screenRecordingFileName)];

            <span class="built_in">NSLog</span>(<span class="string">@"唯一的文件名:%@"</span>,filenameStr);

        }
        remove(screenRecordingFileName);
        free(screenRecordingFileName);
    }
</code></pre>
<p>使用前<br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/unique-filename-in-system/MacHi%202017-04-20%2016-55-01.png" alt=""></p>
<p>过程中<br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/unique-filename-in-system/MacHi%202017-04-20%2016-55-23.png" alt=""></p>
<p>完成之后<br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/unique-filename-in-system/MacHi%202017-04-20%2016-55-56.png" alt=""></p>
<p><em><strong>切记文件后缀需要 加上 <code>XXXXXX</code></strong></em> 几个<code>X</code>就代表几位<code>数字+字母</code>混合<br><em>注意</em>:最好是6个X或者6个以上 <a href="http://man7.org/linux/man-pages/man3/mkstemp.3.html" target="_blank" rel="external">参考Linux</a></p>
<p>主要的是要明白下面这两个函数</p>
<p><a href="http://baike.baidu.com/item/strdup/5522525" target="_blank" rel="external">strdup()用于c语言中常用的一种字符串拷贝</a></p>
<p><a href="http://baike.baidu.com/link?url=wFhfkOVXafm15-4vGfxEQiQynIG7BG2yYAurwzS4uHKmby2C2lfhiO2T6WAqbdc3nOP9mEOVTMaBqxOc2eZps7_JIAsIWI0p11pEIl7Vku_" target="_blank" rel="external">mkstemp()函数在系统中以唯一的文件名创建一个文件并打开</a></p>
<p>OK 希望大家有收获</p>
<p>全文完</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/unique-filename-in-system/stock-photo-1671718
    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="macOS开发" scheme="https://www.sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>二狗经典的3种权利摘要</title>
    <link href="https://www.sunyazhou.com/2017/04/11/3-kindof-ability/"/>
    <id>https://www.sunyazhou.com/2017/04/11/3-kindof-ability/</id>
    <published>2017-04-11T03:47:26.000Z</published>
    <updated>2017-04-29T01:11:13.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>出自《东北往事:黑道风云20年》某片段</p>
</blockquote>
<p>二狗曾拜读过托夫勒著名的《权力的转移》一书，其书中阐述的内容是：暴力、金钱、知识等三种力量是构成社会权力的基石。在这三种力量中，暴力是低等权力、金钱是中等权力，而知识是高等权力。社会越进步，主宰社会的权力就越高等。<br>　　那么，黑社会，是否也有三种力量是构成其权力基石呢？又是哪三种力量呢？和托夫勒所叙述的三种力量异同在哪里？是否可以“借鉴”托夫勒所描述的三种力量呢？</p>
<p>　　二狗认为，我国的黑社会，也有三种力量是构成其权力的基石，这三种力量分别是：暴力、金钱、腐败官员手中的职权。这三者，缺一不可。而且，暴力是低等权力、金钱是中等权力，腐败官员手中的职权是高等权力。尽管这三者都不可或缺，但黑社会团伙发展得越强大，所借助的主要力量就越高等。<br>　　也就是说，黑社会团伙借助暴力起家，以暴力扬名后获得金钱，通过金钱获得腐败官员手中职权的支持。在这个过程中，这个团伙在不断的壮大，到最后，借助的暴力手段越来越少，而腐败官员手中的职权成了黑社会团伙手中最主要的权力。<br>　　让二狗来举例分析我市黑社会这三种力量的转移。<br>　　八十年代的刘海柱号称单挑之王，在八十年代初在我市手持一柄铁锹率领一群好汉东征西讨所向披靡，好不威风。但他一直在使用最低质的权力——暴力，暴力只能用来威胁和惩罚。所以，刘海柱除了得到一个“大侠”的名头外，什么都没得到，经常被小警察打个半死。</p>
<p>　　九十年代的张岳尽管名头最响，而且武力之强横前无古人后无来者，但他只用他的暴力手段获得了金钱，却基本没有获得腐败官员手中职权的支持。所以，他不但遭遇了严春秋的毒打，而且最终，他被正法了。因为，金钱只是中等权力。<br>　　迈入两千年，新世纪，李武已懂得了如何运用“高等权力”，懂得了如何去拉拢腐败官员并且利用他们手中的职权。所以，尽管李武的名头远没有刘海柱、张岳般如雷贯耳，但不可否认的是：李武的团伙，不但比刘海柱当年的团伙高等，而且比张岳的团伙也要高等。<br>　　李武，是黑社会，真的黑社会，他代表着黑社会的最高阶段。<br>　　黑社会这三种权力的转移过程，也是从古典流氓、拜金流氓向黑社会转变的全过程。三种权力的转移，二狗却写了四部小说。因为，第三部“黑社会前传”是体现我市由拜金流氓向黑社会转变的一个巨变，在这个巨变中，张岳倒下了，赵红兵活了下来。<br>　　单纯的暴力与血腥，绝不会再是第四部《黑社会》的主题
　　</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;出自《东北往事:黑道风云20年》某片段&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;二狗曾拜读过托夫勒著名的《权力的转移》一书，其书中阐述的内容是：暴力、金钱、知识等三种力量是构成社会权力的基石。在这三种力量中，暴力是低等权力、金钱是中等权力，而知识
    
    </summary>
    
      <category term="生活" scheme="https://www.sunyazhou.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="有声小说" scheme="https://www.sunyazhou.com/tags/%E6%9C%89%E5%A3%B0%E5%B0%8F%E8%AF%B4/"/>
    
  </entry>
  
  <entry>
    <title>Xcode快捷键</title>
    <link href="https://www.sunyazhou.com/2017/04/06/Xcode-shortcuts/"/>
    <id>https://www.sunyazhou.com/2017/04/06/Xcode-shortcuts/</id>
    <published>2017-04-06T02:36:30.000Z</published>
    <updated>2017-04-29T01:11:13.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/Xcode-shortcuts/MacHi2017-04-06%2010-48-59.png" alt="shortcuts"></p>
<p>前言<br>    在iOS和macOS开发者中积累了一些快捷操作记录下来</p>
<h2 id="隐藏左侧面板"><a href="#隐藏左侧面板" class="headerlink" title="隐藏左侧面板"></a>隐藏左侧面板</h2><p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/Xcode-shortcuts/MacHi%202017-04-06%2010-56-22.png" alt=""></p>
<blockquote>
<p><strong>command+0</strong>=显示/隐藏左侧面板</p>
</blockquote>
<h2 id="隐藏右侧面板"><a href="#隐藏右侧面板" class="headerlink" title="隐藏右侧面板"></a>隐藏右侧面板</h2><p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/Xcode-shortcuts/MacHi%202017-04-06%2010-55-45.png" alt=""></p>
<blockquote>
<p><strong>command+option+0</strong>=显示/隐藏右侧面板</p>
</blockquote>
<h2 id="隐藏debug区域"><a href="#隐藏debug区域" class="headerlink" title="隐藏debug区域"></a>隐藏debug区域</h2><p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/Xcode-shortcuts/MacHi%202017-04-06%2011-06-12.png" alt=""></p>
<blockquote>
<p><strong>command+shift+y</strong>=显示/隐藏底部控制等调试区域</p>
</blockquote>
<h2 id="跳转到代码多少行"><a href="#跳转到代码多少行" class="headerlink" title="跳转到代码多少行 "></a>跳转到代码多少行 </h2><p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/Xcode-shortcuts/MacHi%202017-04-06%2011-09-08-command-line.png" alt=""></p>
<blockquote>
<p><strong>command + l (L)</strong>=跳转到代码多少行 注意看清是l 不是i </p>
</blockquote>
<h2 id="隐藏-显示函数体"><a href="#隐藏-显示函数体" class="headerlink" title="隐藏/显示函数体 "></a>隐藏/显示函数体 </h2><p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/Xcode-shortcuts/MacHi%202017-04-06%2011-10-21.png" alt=""></p>
<blockquote>
<p><strong>command+option+⬅︎</strong>=隐藏函数 <code>⬅︎</code>代表左箭头<br><strong>command+option+➡︎</strong>=显示函数  <code>➡︎</code>代表右箭头 </p>
</blockquote>
<h2 id="上下移动代码行"><a href="#上下移动代码行" class="headerlink" title="上下移动代码行"></a>上下移动代码行</h2><p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/Xcode-shortcuts/MacHi%202017-04-06%2011-10-59.png" alt=""></p>
<blockquote>
<p><strong>command + option + {</strong>=向上移动代码行<br><strong>command + option + }</strong>=向下移动代码行</p>
</blockquote>
<h2 id="前后移动代码行"><a href="#前后移动代码行" class="headerlink" title="前后移动代码行"></a>前后移动代码行</h2><p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/Xcode-shortcuts/MacHi%202017-04-06%2011-11-36.png" alt=""></p>
<blockquote>
<p><strong>command + {</strong>=向前移动代码行<br><strong>command + }</strong>=向后移动代码行</p>
</blockquote>
<h2 id="全工程查找文件"><a href="#全工程查找文件" class="headerlink" title="全工程查找文件"></a>全工程查找文件</h2><p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/Xcode-shortcuts/MacHi%202017-04-06%2011-12-33.png" alt=""></p>
<blockquote>
<p><strong>command + shift + o</strong>=向前移动代码行 o大写字母</p>
</blockquote>
<h2 id="添加代码行注释"><a href="#添加代码行注释" class="headerlink" title="添加代码行注释"></a>添加代码行注释</h2><p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/Xcode-shortcuts/MacHi%202017-04-06%2011-30-03.png" alt=""></p>
<blockquote>
<p><strong>command + option + ?</strong>=自动添加函数描述声明</p>
</blockquote>
<h2 id="撤销-反撤销-修改"><a href="#撤销-反撤销-修改" class="headerlink" title="撤销/反撤销 修改"></a>撤销/反撤销 修改</h2><blockquote>
<p><strong>command + z</strong>=撤销<br><strong>command + shift + z</strong>=反撤销</p>
</blockquote>
<p>后续有时间会持续更新</p>
<p>全文完 </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/Xcode-shortcuts/MacHi2017-04-06%2010-48-59.pn
    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="macOS开发" scheme="https://www.sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Learning AV Foundation(三)AVAudioRecorder</title>
    <link href="https://www.sunyazhou.com/2017/03/28/Learning-AV-Foundation-AVAudioRecorder/"/>
    <id>https://www.sunyazhou.com/2017/03/28/Learning-AV-Foundation-AVAudioRecorder/</id>
    <published>2017-03-28T01:40:18.000Z</published>
    <updated>2017-07-01T23:38:52.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/Learning-AV-Foundation-AVAudioRecorder/stock-photo-200814137.jpg" alt=""></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在<code>AV Foundation</code>中使用<code>AVAudioRecorder</code>类添加音频录制功能和使用<code>AVAudioPlayer</code>一样简单, 都是在<code>Audio Queue Server</code>上层构建的.同时支持<code>macOS</code>和<code>iOS</code>平台.可以从内置麦克风录制音频,也可以支持数字音频接口或USB外接麦克风录制.</p>
<h2 id="主要内容如下"><a href="#主要内容如下" class="headerlink" title="主要内容如下:"></a>主要内容如下:</h2><pre><code>如何创建AVAudioRecorder  
    1. 音频格式
    2. 采样率
    3. 通道数
创建Demo
    1. 配置音频会话
    2. 实现录音功能
    3. 使用Audio Metering实现声波视觉显示
</code></pre><p>创建<code>AVAudioRecorder</code>之前先了解一下它的方法和成员变量</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>, <span class="keyword">getter</span>=isRecording) <span class="built_in">BOOL</span> recording;<span class="comment">//是否正在录音</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>) <span class="built_in">NSDictionary</span>&lt;<span class="built_in">NSString</span> *, <span class="keyword">id</span>&gt; *settings;<span class="comment">//录音配置：采样率、音频格式、通道数...</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>) <span class="built_in">NSURL</span> *url;<span class="comment">//录音文件存放URL</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>) <span class="built_in">NSTimeInterval</span> currentTime;<span class="comment">//录音时长</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">getter</span>=isMeteringEnabled) <span class="built_in">BOOL</span> meteringEnabled;<span class="comment">//是否监控声波</span></div></pre></td></tr></table></figure>
<p><code>AVAudioRecorder</code>的实例方法:</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="built_in">BOOL</span>)prepareToRecord;<span class="comment">//为录音准备缓冲区</span></div><div class="line">- (<span class="built_in">BOOL</span>)record;<span class="comment">//录音开始，暂停后调用会恢复录音</span></div><div class="line">- (<span class="built_in">BOOL</span>)recordAtTime:(<span class="built_in">NSTimeInterval</span>)time;<span class="comment">//在指定时间后开始录音</span></div><div class="line">- (<span class="built_in">BOOL</span>)recordForDuration:(<span class="built_in">NSTimeInterval</span>) duration;<span class="comment">//按指定时长录音</span></div><div class="line">- (<span class="built_in">BOOL</span>)recordAtTime:(<span class="built_in">NSTimeInterval</span>)time </div><div class="line">         forDuration:(<span class="built_in">NSTimeInterval</span>)duration;<span class="comment">//上面2个的合体</span></div><div class="line">- (<span class="keyword">void</span>)pause; <span class="comment">//暂停录音</span></div><div class="line">- (<span class="keyword">void</span>)stop; <span class="comment">//停止录音</span></div><div class="line">- (<span class="built_in">BOOL</span>)deleteRecording;<span class="comment">//删除录音，必须先停止录音再删除</span></div></pre></td></tr></table></figure>
<p><code>AVAudioRecorder</code>的代理方法:</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//录音完成后调用</span></div><div class="line">- (<span class="keyword">void</span>)audioRecorderDidFinishRecording:(<span class="built_in">AVAudioRecorder</span> *)recorder </div><div class="line">                           successfully:(<span class="built_in">BOOL</span>)flag;</div><div class="line"><span class="comment">//录音编码发生错误时调用</span></div><div class="line">- (<span class="keyword">void</span>)audioRecorderEncodeErrorDidOccur:(<span class="built_in">AVAudioRecorder</span> *)recorder </div><div class="line">                                   error:(<span class="built_in">NSError</span> *)error;</div></pre></td></tr></table></figure>
<h2 id="如何创建AVAudioRecorder"><a href="#如何创建AVAudioRecorder" class="headerlink" title="如何创建AVAudioRecorder"></a>如何创建<code>AVAudioRecorder</code></h2><p>创建<code>AVAudioRecorder</code>对象所需要的参数如下:  </p>
<ul>
<li>音频流录制时写入到本地的路径URL</li>
<li><code>settings</code>录音配置：采样率、音频格式、通道数…等键值参数字典</li>
<li>发生错误的<code>NSError</code>指针</li>
</ul>
<p>如下代码:</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> 创建录音器</div><div class="line"> */</div><div class="line">- (<span class="keyword">void</span>)createRecorder &#123;</div><div class="line">    <span class="built_in">NSString</span> *directory = <span class="built_in">NSTemporaryDirectory</span>();</div><div class="line">    <span class="built_in">NSString</span> *filePath = [directory stringByAppendingPathComponent:<span class="string">@"voice1.m4a"</span>];</div><div class="line">    <span class="built_in">NSURL</span> *url = [<span class="built_in">NSURL</span> fileURLWithPath:filePath];</div><div class="line">    </div><div class="line">    <span class="built_in">NSDictionary</span> *setting = @&#123;<span class="built_in">AVFormatIDKey</span> : @(kAudioFormatMPEG4AAC),</div><div class="line">                              <span class="built_in">AVSampleRateKey</span>: @<span class="number">22050.0</span>f,</div><div class="line">                              <span class="built_in">AVNumberOfChannelsKey</span>: @<span class="number">1</span>&#125;;</div><div class="line">    <span class="built_in">NSError</span> *error;</div><div class="line">    <span class="keyword">self</span>.recorder = [[<span class="built_in">AVAudioRecorder</span> alloc] initWithURL:url</div><div class="line">                                                settings:setting</div><div class="line">                                                   error:&amp;error];</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.recorder) &#123;</div><div class="line">        [<span class="keyword">self</span>.recorder prepareToRecord];</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"Recorder Create Error: %@"</span>, [error localizedDescription]);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里的建议调用<code>[self.recorder prepareToRecord]</code>方法对录音实例进行预设就像<a href="http://sunyazhou.com/2017/03/17/Learning-AV-Foundation-AVAudioPlayer/" target="_blank" rel="external">上一章</a>创建<code>AVAudioPlayer</code>类似.都是为了执行底层<code>Audio Queue</code>初始化的必要过程.这个<code>prepareToRecord</code>方法还在给定的URL参数指定的位置创建一个文件，这样就减少了录制启动时的延时</p>
<h2 id="音频格式"><a href="#音频格式" class="headerlink" title="音频格式"></a>音频格式</h2><p><code>AVFormatIDKey</code>key指定录制格式,这里的除了<code>kAudioFormatMPEG4AAC</code>格式还有下面这些:</p>
<figure class="highlight"><table><tr><td class="code"><pre><div class="line">CF_ENUM(AudioFormatID)</div><div class="line">&#123;</div><div class="line">    kAudioFormatLinearPCM               = 'lpcm',</div><div class="line">    kAudioFormatAC3                     = 'ac-3',</div><div class="line">    kAudioFormat60958AC3                = 'cac3',</div><div class="line">    kAudioFormatAppleIMA4               = 'ima4',</div><div class="line">    kAudioFormatMPEG4AAC                = 'aac ',</div><div class="line">    kAudioFormatMPEG4CELP               = 'celp',</div><div class="line">    kAudioFormatMPEG4HVXC               = 'hvxc',</div><div class="line">    kAudioFormatMPEG4TwinVQ             = 'twvq',</div><div class="line">    kAudioFormatMACE3                   = 'MAC3',</div><div class="line">    kAudioFormatMACE6                   = 'MAC6',</div><div class="line">    kAudioFormatULaw                    = 'ulaw',</div><div class="line">    kAudioFormatALaw                    = 'alaw',</div><div class="line">    kAudioFormatQDesign                 = 'QDMC',</div><div class="line">    kAudioFormatQDesign2                = 'QDM2',</div><div class="line">    kAudioFormatQUALCOMM                = 'Qclp',</div><div class="line">    kAudioFormatMPEGLayer1              = '.mp1',</div><div class="line">    kAudioFormatMPEGLayer2              = '.mp2',</div><div class="line">    kAudioFormatMPEGLayer3              = '.mp3',</div><div class="line">    kAudioFormatTimeCode                = 'time',</div><div class="line">    kAudioFormatMIDIStream              = 'midi',</div><div class="line">    kAudioFormatParameterValueStream    = 'apvs',</div><div class="line">    kAudioFormatAppleLossless           = 'alac',</div><div class="line">    kAudioFormatMPEG4AAC_HE             = 'aach',</div><div class="line">    kAudioFormatMPEG4AAC_LD             = 'aacl',</div><div class="line">    kAudioFormatMPEG4AAC_ELD            = 'aace',</div><div class="line">    kAudioFormatMPEG4AAC_ELD_SBR        = 'aacf',</div><div class="line">    kAudioFormatMPEG4AAC_ELD_V2         = 'aacg',    </div><div class="line">    kAudioFormatMPEG4AAC_HE_V2          = 'aacp',</div><div class="line">    kAudioFormatMPEG4AAC_Spatial        = 'aacs',</div><div class="line">    kAudioFormatAMR                     = 'samr',</div><div class="line">    kAudioFormatAMR_WB                  = 'sawb',</div><div class="line">    kAudioFormatAudible                 = 'AUDB',</div><div class="line">    kAudioFormatiLBC                    = 'ilbc',</div><div class="line">    kAudioFormatDVIIntelIMA             = 0x6D730011,</div><div class="line">    kAudioFormatMicrosoftGSM            = 0x6D730031,</div><div class="line">    kAudioFormatAES3                    = 'aes3',</div><div class="line">    kAudioFormatEnhancedAC3             = 'ec-3'</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>这里的<code>kAudioFormatLinearPCM</code>会将为压缩的音频流写入到文件中,这就是原始数据,保真度最高,当然文件也最大, 选择ACC<code>kAudioFormatMPEG4AAC</code>或者AppleIMA4<code>kAudioFormatAppleLossless</code>等格式会显著缩小文件，还能保证音频质量.</p>
<blockquote>
<p><em>注意:</em><br><em>指定的音频格式一定要和文件写入的URL文件类型保持一致。如果录制xxx.wav文件格式 是 Waveform Audio File Format(WAVE)的格式要求,即 低字节序、 LinePCM。 如果<code>AVFormatIDKey</code>指定的值不是<code>kAudioFormatLinearPCM</code>则会发生错误。NSError 会返回如下错误</em><br><em>The operation couldn’t be completed. (OSState error 1718449215.)</em></p>
</blockquote>
<h2 id="采样率"><a href="#采样率" class="headerlink" title="采样率"></a>采样率</h2><p>上边的代码里<code>AVSampleRateKey</code>用于定义录音器的采样率. <strong>采样率定义了对输入的模拟音频信号每一秒内的采样数</strong>. 如果使用<strong>低采样率</strong> 比如8kHz,会导致粗粒度、AM广播类型的录制效果, 不过文件会比较小; 使用<strong>44.1kHz的采样率(CD质量的采样率)</strong>会得到非常高质量的内容, 不过文件比较大. 至于使用什么样的采样率没有明确的定义. 不过开发者应该尽量使用<strong>标准的采样率，比如: 8000Hz、16 000Hz(16kHz)、22050Hz(22.05kHz)或 44100Hz(44.1kHz)、当然还有48000Hz和96000Hz</strong> ,(kHz代表千赫),超过48000或96000的采样对人耳已经没有意义.最终是我们的耳朵在进行判断.（<a href="http://sunyazhou.com/2017/03/17/Learning-AV-Foundation-AVAudioPlayer/" target="_blank" rel="external">上一章</a>说了 <strong>人耳所能听到的声音，最低的频率是从20Hz起一直到最高频率20kHz</strong>,录音最好采用 x 2 倍的频率）</p>
<h2 id="通道数"><a href="#通道数" class="headerlink" title="通道数"></a>通道数</h2><p><code>AVNumberOfChannelsKey</code>用于定义记录音频内容的通道数。<strong>指定默认值1 意味着使用单声道录制</strong>、<strong>设置2意味着使用立体声录制</strong>。除非使用外部硬件进行录制，否则同窗应该创建单声道录音。 这里的通道数是指 录制设备的输入数量 可以理解为 麦克风 内置 或者外接麦克风录制比如 插入Apple耳机 里面的麦克风。</p>
<blockquote>
<p>以上是全面<code>AVAudioRecorder</code>的部分概念,<code>AVAudioRecorder</code>支持<strong>无限时长录制</strong>,还可以设置从<strong>未来某一时间点开始录制</strong>或<strong>指定时长录制</strong></p>
</blockquote>
<h2 id="网络流媒体处理"><a href="#网络流媒体处理" class="headerlink" title="网络流媒体处理"></a>网络流媒体处理</h2><p><code>AVAudioPlayer</code>音频播放器只能播放本地文件，并且是一次性加载所有的音频数据，但我们有时候需要边下载边听怎么办？<br><code>AVAudioPlayer</code>是不支持这种网络流媒体形式的音频播放，要播放这种网络流媒体，我们需要使用<code>AudioToolbox</code>框架的音频队列服务<code>Audio Queue Services</code>。</p>
<p><strong>音频队列服务分为3个部分:</strong></p>
<blockquote>
<ul>
<li>3个缓冲器</li>
<li>1个缓冲队列</li>
<li>1个回调</li>
</ul>
</blockquote>
<p><strong>1. 下面是录音的音频队列服务的工作原理:</strong></p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/Learning-AV-Foundation-AVAudioRecorder/1795722-224996f89679bc19.png" alt=""></p>
<p><strong>2. 下面是播放音频的音频队列服务的工作原理;</strong></p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/Learning-AV-Foundation-AVAudioRecorder/1795722-45f6a868779059d0.png" alt=""></p>
<p>当然处理这些不需要我们自己去写C语言函数实现 有个开源库<a href="https://github.com/sunyazhou13/FreeStreamer" target="_blank" rel="external">FreeStreamer</a></p>
<p>FreeStreamer使用 </p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;FreeStreamer/FreeStreamer.h&gt;</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    [<span class="keyword">self</span> initAudioStream];</div><div class="line">    <span class="comment">//播放网络流媒体音频</span></div><div class="line">    [<span class="keyword">self</span>.audioStream play];</div><div class="line">&#125;</div><div class="line"><span class="comment">/* 初始化网络流媒体对象 */</span></div><div class="line">- (<span class="keyword">void</span>)initAudioStream&#123;</div><div class="line">    <span class="built_in">NSString</span> *urlStr = <span class="string">@"http://sc1.111ttt.com/2016/1/02/24/195242042236.mp3"</span>;</div><div class="line">    <span class="built_in">NSURL</span> *url = [<span class="built_in">NSURL</span> URLWithString:urlStr];</div><div class="line">    <span class="comment">//创建FSAudioStream对象</span></div><div class="line">    <span class="keyword">self</span>.audioStream = [[FSAudioStream alloc] initWithUrl:url];</div><div class="line">    <span class="comment">//设置播放错误回调Block</span></div><div class="line">    <span class="keyword">self</span>.audioStream.onFailure = ^(FSAudioStreamError error, <span class="built_in">NSString</span> *description)&#123;</div><div class="line">          <span class="built_in">NSLog</span>(<span class="string">@"播放过程中发生错误，错误信息：%@"</span>,description);</div><div class="line">    &#125;;</div><div class="line">    <span class="comment">//设置播放完成回调Block</span></div><div class="line">    <span class="keyword">self</span>.audioStream.onCompletion = ^()&#123;</div><div class="line">          <span class="built_in">NSLog</span>(<span class="string">@"播放完成!"</span>);</div><div class="line">    &#125;;</div><div class="line">    [<span class="keyword">self</span>.audioStream setVolume:<span class="number">0.5</span>];<span class="comment">//设置声音大小</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>有点跑远了 回到正题 本章将不会把这个写到demo中 请谅解</p>
<h1 id="下面我们来写个AVAudioRecorder的Demo-完成上述功能"><a href="#下面我们来写个AVAudioRecorder的Demo-完成上述功能" class="headerlink" title="下面我们来写个AVAudioRecorder的Demo 完成上述功能"></a>下面我们来写个<code>AVAudioRecorder</code>的Demo 完成上述功能</h1><h2 id="配置会话"><a href="#配置会话" class="headerlink" title="配置会话"></a>配置会话</h2><p>首先创建以一个AVAudioRecorderDemo工程iOS平台这些相信大家非常熟练了.</p>
<p>在<code>AppDelegate</code>里面导入<code>#import &lt;AVFoundation/AVFoundation.h&gt;</code><br>写上设置如下代码</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class="built_in">NSDictionary</span> *)launchOptions &#123;</div><div class="line">    </div><div class="line">    <span class="built_in">AVAudioSession</span> *session = [<span class="built_in">AVAudioSession</span> sharedInstance];</div><div class="line">    <span class="built_in">NSError</span> *error;</div><div class="line">    <span class="keyword">if</span> (![session setCategory:<span class="built_in">AVAudioSessionCategoryPlayAndRecord</span> error:&amp;error]) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"Category Error: %@"</span>,[error localizedDescription]);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//激活会话</span></div><div class="line">    <span class="keyword">if</span> (![session setActive:<span class="literal">YES</span> error:&amp;error]) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"Activation Error: %@"</span>,[error localizedDescription]);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这<code>AVAudioSessionCategoryPlayAndRecord</code>是<a href="http://sunyazhou.com/2017/03/17/Learning-AV-Foundation-AVAudioPlayer/" target="_blank" rel="external">上一章</a>说的那几种Category,我们需要<strong>录音+播放</strong>功能</p>
<p>下一步 配置 plist文件访问权限信息 可以参考<a href="http://localhost:4000/2017/03/20/Access-privacy-sensitive-data-private-access-permission/" target="_blank" rel="external">Access privacy-sensitive data</a>这篇文章把访问权限需要的 信息填充上.</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/Learning-AV-Foundation-AVAudioRecorder/Snip20170329_2.png" alt="plist1"></p>
<p>然后选择SourceCode<br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/Learning-AV-Foundation-AVAudioRecorder/Snip20170329_5.png" alt="plist2"></p>
<p>填写上</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 🎤 Microphone --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>NSMicrophoneUsageDescription<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>$(PRODUCT_NAME) microphone use<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div></pre></td></tr></table></figure>
<p>上边这些是为了访问本地授权, 记得授权如果第一次被拒就必须让用户手动 到通用-设置里面去配置否则将永远不好使哈。如果不写这种本地授权 程序应该会 crash   </p>
<h2 id="录音代码实现"><a href="#录音代码实现" class="headerlink" title="录音代码实现"></a>录音代码实现</h2><p>首先我们来封装一个类起名叫<code>BDRecoder</code>吧. 这里类我们让它负责所有 音频录制、暂停录制、保存录制文件等功能 并有回调函数等block.  <code>BDRecoder.h</code>看起来像下面这样, 这里后续完善的话可以加个代理 表示录制过程中意外中断或者线路切换等逻辑.</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  BDRecorder.h</span></div><div class="line"><span class="comment">//  AVAudioRecorderDemo</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by sunyazhou on 2017/3/29.</span></div><div class="line"><span class="comment">//  Copyright © 2017年 Baidu, Inc. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;AVFoundation/AVFoundation.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@class</span> <span class="title">MemoModel</span>;</span></div><div class="line"><span class="comment">//录音停止的回调</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">void</span> (^BDRecordingStopCompletionHanlder)(<span class="built_in">BOOL</span>);</div><div class="line"><span class="comment">//保存录音文件完成的回调</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">void</span> (^BDRecordingSaveCompletionHanlder)(<span class="built_in">BOOL</span>, <span class="keyword">id</span>);</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">BDRecorder</span> : <span class="title">NSObject</span></span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 外部获取当前录制的时间</div><div class="line"> * 小时:分钟:秒  当然后续可以加微秒和毫秒哈就是格式字符串 00:03:02 这样</div><div class="line"> */</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">NSString</span> *formattedCurrentTime;</div><div class="line"></div><div class="line">- (<span class="built_in">BOOL</span>)record; <span class="comment">//开始录音</span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)pause;  <span class="comment">//暂停录音</span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)stopWithCompletionHandler:(BDRecordingStopCompletionHanlder)handler;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)saveRecordingWithName:(<span class="built_in">NSString</span> *)name</div><div class="line">            completionHandler:(BDRecordingSaveCompletionHanlder)handler;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> 回放录制的文件</div><div class="line"></div><div class="line"> @param memo 备忘录文件model 放着当前播放的model</div><div class="line"> @return 是否播放成功</div><div class="line"> */</div><div class="line">- (<span class="built_in">BOOL</span>)playbackURL:(MemoModel *)memo;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p><code>BDRecoder.m</code></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  BDRecorder.m</span></div><div class="line"><span class="comment">//  AVAudioRecorderDemo</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by sunyazhou on 2017/3/29.</span></div><div class="line"><span class="comment">//  Copyright © 2017年 Baidu, Inc. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">"BDRecorder.h"</span></span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">"MemoModel.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">BDRecorder</span> () &lt;<span class="title">AVAudioRecorderDelegate</span>&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">AVAudioPlayer</span> *player;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">AVAudioRecorder</span> *recorder;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) BDRecordingStopCompletionHanlder completionHandler;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">BDRecorder</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">instancetype</span>)init &#123;</div><div class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</div><div class="line">        <span class="built_in">NSString</span> *temDir = <span class="built_in">NSTemporaryDirectory</span>();</div><div class="line">        <span class="built_in">NSString</span> *filePath = [temDir stringByAppendingPathComponent:<span class="string">@"test1.caf"</span>];</div><div class="line">        <span class="built_in">NSURL</span> *fileURL = [<span class="built_in">NSURL</span> fileURLWithPath:filePath];</div><div class="line">        </div><div class="line">        <span class="built_in">NSDictionary</span> *setting = @&#123;<span class="built_in">AVFormatIDKey</span>: @(kAudioFormatAppleIMA4),</div><div class="line">                                  <span class="built_in">AVSampleRateKey</span>: @<span class="number">44100.0</span>f,</div><div class="line">                                  <span class="built_in">AVNumberOfChannelsKey</span>: @<span class="number">1</span>,</div><div class="line">                                  <span class="built_in">AVEncoderBitDepthHintKey</span>: @<span class="number">16</span>,</div><div class="line">                                  <span class="built_in">AVEncoderAudioQualityKey</span>: @(<span class="built_in">AVAudioQualityMedium</span>)</div><div class="line">                                  &#125;;</div><div class="line">        <span class="built_in">NSError</span> *error;</div><div class="line">        <span class="keyword">self</span>.recorder = [[<span class="built_in">AVAudioRecorder</span> alloc] initWithURL:fileURL settings:setting error:&amp;error];</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">self</span>.recorder) &#123;</div><div class="line">            <span class="keyword">self</span>.recorder.delegate = <span class="keyword">self</span>;</div><div class="line">            [<span class="keyword">self</span>.recorder prepareToRecord];</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"Create Recorder Error: %@"</span>,[error localizedDescription]);</div><div class="line">        &#125; </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">BOOL</span>)record &#123;</div><div class="line">    <span class="keyword">return</span> [<span class="keyword">self</span>.recorder record];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)pause &#123;</div><div class="line">    [<span class="keyword">self</span>.recorder pause];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)stopWithCompletionHandler:(BDRecordingStopCompletionHanlder)handler &#123;</div><div class="line">    <span class="keyword">self</span>.completionHandler = handler;</div><div class="line">    [<span class="keyword">self</span>.recorder stop];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)saveRecordingWithName:(<span class="built_in">NSString</span> *)name</div><div class="line">            completionHandler:(BDRecordingSaveCompletionHanlder)handler &#123;</div><div class="line">    <span class="built_in">NSTimeInterval</span> timestamp = [<span class="built_in">NSDate</span> timeIntervalSinceReferenceDate];</div><div class="line">    <span class="built_in">NSString</span> *filename = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@-%f.caf"</span>, name, timestamp];</div><div class="line">    <span class="built_in">NSString</span> *docDir = [<span class="keyword">self</span> documentsDirectory];</div><div class="line">    <span class="built_in">NSString</span> *destPath = [docDir stringByAppendingPathComponent:filename];</div><div class="line">    <span class="built_in">NSURL</span> *srcURL = <span class="keyword">self</span>.recorder.url;</div><div class="line">    <span class="built_in">NSURL</span> *destURL = [<span class="built_in">NSURL</span> fileURLWithPath:destPath];</div><div class="line">    <span class="built_in">NSError</span> *error;</div><div class="line">    <span class="built_in">BOOL</span> success = [[<span class="built_in">NSFileManager</span> defaultManager] copyItemAtURL:srcURL toURL:destURL error:&amp;error];</div><div class="line">    <span class="keyword">if</span> (success) &#123;</div><div class="line">        MemoModel *model = [MemoModel memoWithTitle:name url:destURL];</div><div class="line">        handler(<span class="literal">YES</span>, model);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">NSString</span> *)documentsDirectory &#123;</div><div class="line">    <span class="built_in">NSArray</span> *paths = <span class="built_in">NSSearchPathForDirectoriesInDomains</span>(<span class="built_in">NSDocumentDirectory</span>, <span class="built_in">NSUserDomainMask</span>, <span class="literal">YES</span>);</div><div class="line">    <span class="keyword">return</span> [paths objectAtIndex:<span class="number">0</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)audioRecorderDidFinishRecording:(<span class="built_in">AVAudioRecorder</span> *)recorder</div><div class="line">                           successfully:(<span class="built_in">BOOL</span>)flag &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.completionHandler) &#123; <span class="keyword">self</span>.completionHandler(flag); &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>这里的<code>self.completionHandler</code>当外部调用<code>stopWithCompletionHandler</code>的时候暂存一下block是为了录音完成时告诉外部通知一下以便于可以弹出一个UIAlertView去显示保存等操作</p>
<p>当停止录音, 进入语音备忘阶段命名阶段时 让外部调用<code>saveRecordingWithName:completionHandler</code>传入文件的命名,然后我们通过<code>self.recorder.url</code>获取到URL并且copy到tmp里面是目录并命名</p>
<p>下一步要实现<code>playbackURL:</code> 这里面有个<code>MemoModel</code>参数的对象,<br>这个<code>MemoModel</code>是一个对象model放着 文件name、url…</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MemoModel</span> : <span class="title">NSObject</span> &lt;<span class="title">NSCopying</span>&gt;</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">copy</span>, <span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">NSString</span> *title;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">NSURL</span> *url;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">copy</span>, <span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">NSString</span> *dateString;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">copy</span>, <span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">NSString</span> *timeString;</div><div class="line"></div><div class="line">+ (<span class="keyword">instancetype</span>)memoWithTitle:(<span class="built_in">NSString</span> *)title url:(<span class="built_in">NSURL</span> *)url;</div><div class="line"></div><div class="line">- (<span class="built_in">BOOL</span>)deleteMemo;</div><div class="line"><span class="keyword">@end</span></div><div class="line"><span class="comment">//具体实现请参考我的最终demo</span></div></pre></td></tr></table></figure>
<p>实现播放部分需要创建播放器 这里就简单创建一下<code>AVAudioPlayer</code></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> 回放录制的文件</div><div class="line"> </div><div class="line"> @param memo 备忘录文件model 放着当前播放的model</div><div class="line"> @return 是否播放成功</div><div class="line"> */</div><div class="line">- (<span class="built_in">BOOL</span>)playbackURL:(MemoModel *)memo &#123;</div><div class="line">    [<span class="keyword">self</span>.player stop];</div><div class="line">    <span class="keyword">self</span>.player = [[<span class="built_in">AVAudioPlayer</span> alloc] initWithContentsOfURL:memo.url error:<span class="literal">nil</span>];</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.player) &#123;</div><div class="line">        [<span class="keyword">self</span>.player prepareToPlay];</div><div class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">NO</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里通过memo.url 给当前播放器播放, 这里就简单实现一下 如果需要复杂实现可以参考我上一章讲解的<code>AVAudioPlayer</code> </p>
<p>最后把显示事件部分的代码加上</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 外部获取当前录制的时间</div><div class="line"> * 小时:分钟:秒  当然后续可以加微秒和毫秒哈就是格式字符串 00:03:02 这样</div><div class="line"> */</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">NSString</span> *formattedCurrentTime;</div></pre></td></tr></table></figure>
<p>这里我们需要复写<code>formattedCurrentTime</code>get方法获取时间格式例如: 00:00:00</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> 返回当前录制的时间格式 HH:mm:ss</div><div class="line"></div><div class="line"> @return 返回组装好的字符串</div><div class="line"> */</div><div class="line">- (<span class="built_in">NSString</span> *)formattedCurrentTime &#123;</div><div class="line">    <span class="built_in">NSUInteger</span> time = (<span class="built_in">NSUInteger</span>)<span class="keyword">self</span>.recorder.currentTime;</div><div class="line">    <span class="built_in">NSInteger</span> hours = (time / <span class="number">3600</span>);</div><div class="line">    <span class="built_in">NSInteger</span> minutes = (time / <span class="number">60</span>) % <span class="number">60</span>;</div><div class="line">    <span class="built_in">NSInteger</span> seconds = time % <span class="number">60</span>;</div><div class="line">    </div><div class="line">    <span class="built_in">NSString</span> *format = <span class="string">@"%02i:%02i:%02i"</span>;</div><div class="line">    <span class="keyword">return</span> [<span class="built_in">NSString</span> stringWithFormat:format, hours, minutes, seconds];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上边大致是封装<code>BDRecorder</code>的过程</p>
<p>下面是对<code>ViewController</code>UI的设置, 设置好时间格式 我们需要在<code>ViewController</code>里 自己搞个定时器去更新录制的时间在UI上的显示, 因为<code>self.recorder.currentTime</code>是只读熟悉 没提供set方法 所以我们也无法用KVO监听recorder的属性变化. </p>
<p>代码如下:</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  ViewController.m</span></div><div class="line"><span class="comment">//  AVAudioRecorderDemo</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by sunyazhou on 2017/3/28.</span></div><div class="line"><span class="comment">//  Copyright © 2017年 Baidu, Inc. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">"ViewController.h"</span></span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;Masonry/Masonry.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;AVFoundation/AVFoundation.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">"BDRecorder.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"LevelMeterView.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"MemoModel.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"MemoCell.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"LevelPair.h"</span></span></div><div class="line"></div><div class="line"><span class="meta">#define MEMOS_ARCHIVE    @<span class="meta-string">"memos.archive"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> () &lt;<span class="title">UITableViewDelegate</span>, <span class="title">UITableViewDataSource</span>&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSMutableArray</span> &lt;MemoModel *&gt;*memos;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) BDRecorder *recorder;</div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSTimer</span> *timer;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">CADisplayLink</span> *levelTimer;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> <span class="built_in">UIView</span> *containerView;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> <span class="built_in">UIButton</span> *recordButton;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> <span class="built_in">UIButton</span> *stopButton;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> <span class="built_in">UILabel</span> *timeLabel;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> LevelMeterView *levelMeterView;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> <span class="built_in">UITableView</span> *tableview;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    </div><div class="line">    <span class="keyword">self</span>.recorder = [[BDRecorder alloc] init];</div><div class="line">    <span class="keyword">self</span>.memos = [<span class="built_in">NSMutableArray</span> array];</div><div class="line">    <span class="keyword">self</span>.stopButton.enabled = <span class="literal">NO</span>;</div><div class="line">    </div><div class="line">    <span class="built_in">UIImage</span> *recordImage = [[<span class="built_in">UIImage</span> imageNamed:<span class="string">@"record"</span>] imageWithRenderingMode:<span class="built_in">UIImageRenderingModeAlwaysOriginal</span>];</div><div class="line">    <span class="built_in">UIImage</span> *pauseImage = [[<span class="built_in">UIImage</span> imageNamed:<span class="string">@"pause"</span>] imageWithRenderingMode:<span class="built_in">UIImageRenderingModeAlwaysOriginal</span>];</div><div class="line">    <span class="built_in">UIImage</span> *stopImage = [[<span class="built_in">UIImage</span> imageNamed:<span class="string">@"stop"</span>] imageWithRenderingMode:<span class="built_in">UIImageRenderingModeAlwaysOriginal</span>];</div><div class="line">    [<span class="keyword">self</span>.recordButton setImage:recordImage forState:<span class="built_in">UIControlStateNormal</span>];</div><div class="line">    [<span class="keyword">self</span>.recordButton setImage:pauseImage forState:<span class="built_in">UIControlStateSelected</span>];</div><div class="line">    [<span class="keyword">self</span>.stopButton setImage:stopImage forState:<span class="built_in">UIControlStateNormal</span>];</div><div class="line">    </div><div class="line">    <span class="built_in">NSData</span> *data = [<span class="built_in">NSData</span> dataWithContentsOfURL:[<span class="keyword">self</span> archiveURL]];</div><div class="line">    <span class="keyword">if</span> (!data) &#123;</div><div class="line">        _memos = [<span class="built_in">NSMutableArray</span> array];</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        _memos = [<span class="built_in">NSKeyedUnarchiver</span> unarchiveObjectWithData:data];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    [<span class="keyword">self</span>.tableview registerNib:[<span class="built_in">UINib</span> nibWithNibName:<span class="string">@"MemoCell"</span> bundle:[<span class="built_in">NSBundle</span> mainBundle]] forCellReuseIdentifier:<span class="string">@"MemoCell"</span>];</div><div class="line">    </div><div class="line">    </div><div class="line">    [<span class="keyword">self</span> layoutSubveiws];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)layoutSubveiws&#123;</div><div class="line">    [<span class="keyword">self</span>.containerView mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">        make.top.equalTo(<span class="keyword">self</span>.view.mas_top).offset(<span class="number">30</span>);</div><div class="line">        make.left.equalTo(<span class="keyword">self</span>.view.mas_left).offset(<span class="number">20</span>);</div><div class="line">        make.right.equalTo(<span class="keyword">self</span>.view.mas_right).offset(<span class="number">-20</span>);</div><div class="line">        make.centerX.equalTo(<span class="keyword">self</span>.view.mas_centerX);</div><div class="line">        make.bottom.equalTo(<span class="keyword">self</span>.tableview.mas_top).offset(<span class="number">-50</span>);</div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">    [<span class="keyword">self</span>.tableview mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">        make.left.right.bottom.equalTo(<span class="keyword">self</span>.view);</div><div class="line">        make.top.equalTo(<span class="keyword">self</span>.view.mas_top).offset(<span class="number">200</span>);</div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">    </div><div class="line">    [<span class="keyword">self</span>.timeLabel mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">        make.top.left.right.equalTo(<span class="keyword">self</span>.containerView);</div><div class="line">        make.centerX.equalTo(<span class="keyword">self</span>.containerView.mas_centerX);</div><div class="line">        make.height.equalTo(@<span class="number">25</span>);</div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">    [<span class="keyword">self</span>.recordButton mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">        make.left.equalTo(<span class="keyword">self</span>.containerView.mas_left);</div><div class="line">        make.bottom.equalTo(<span class="keyword">self</span>.containerView.mas_bottom);</div><div class="line">        make.width.height.equalTo(@<span class="number">71</span>);</div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">    [<span class="keyword">self</span>.stopButton mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">        make.right.equalTo(<span class="keyword">self</span>.containerView.mas_right);</div><div class="line">        make.bottom.equalTo(<span class="keyword">self</span>.containerView.mas_bottom);</div><div class="line">        make.width.height.equalTo(@<span class="number">71</span>);</div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">    [<span class="keyword">self</span>.levelMeterView mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">        make.left.right.equalTo(<span class="keyword">self</span>.view);</div><div class="line">        make.height.equalTo(@<span class="number">30</span>);</div><div class="line">        make.bottom.equalTo(<span class="keyword">self</span>.tableview.mas_top);</div><div class="line">    &#125;];</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)startTimer &#123;</div><div class="line">    [<span class="keyword">self</span>.timer invalidate];</div><div class="line">    <span class="keyword">self</span>.timer = [<span class="built_in">NSTimer</span> timerWithTimeInterval:<span class="number">0.5</span></div><div class="line">                                         target:<span class="keyword">self</span></div><div class="line">                                       selector:<span class="keyword">@selector</span>(updateTimeDisplay)</div><div class="line">                                       userInfo:<span class="literal">nil</span></div><div class="line">                                        repeats:<span class="literal">YES</span>];</div><div class="line">    [[<span class="built_in">NSRunLoop</span> mainRunLoop] addTimer:<span class="keyword">self</span>.timer forMode:<span class="built_in">NSRunLoopCommonModes</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)stopTimer &#123;</div><div class="line">    [<span class="keyword">self</span>.timer invalidate];</div><div class="line">    <span class="keyword">self</span>.timer = <span class="literal">nil</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)updateTimeDisplay &#123;</div><div class="line">    <span class="keyword">self</span>.timeLabel.text = <span class="keyword">self</span>.recorder.formattedCurrentTime;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)startMeterTimer &#123;</div><div class="line">    [<span class="keyword">self</span>.levelTimer invalidate];</div><div class="line">    <span class="keyword">self</span>.levelTimer = [<span class="built_in">CADisplayLink</span> displayLinkWithTarget:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(updateMeter)];</div><div class="line"><span class="comment">//    if ([self.levelTimer respondsToSelector:@selector(setPreferredFramesPerSecond:)]) &#123;</span></div><div class="line"><span class="comment">//        self.levelTimer.preferredFramesPerSecond = 5;</span></div><div class="line"><span class="comment">//    &#125; else &#123;</span></div><div class="line">    <span class="keyword">self</span>.levelTimer.frameInterval = <span class="number">5</span>;</div><div class="line"><span class="comment">//    &#125;</span></div><div class="line">    [<span class="keyword">self</span>.levelTimer addToRunLoop:[<span class="built_in">NSRunLoop</span> currentRunLoop]</div><div class="line">                          forMode:<span class="built_in">NSRunLoopCommonModes</span>];</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)stopMeterTimer &#123;</div><div class="line">    [<span class="keyword">self</span>.levelTimer invalidate];</div><div class="line">    <span class="keyword">self</span>.levelTimer = <span class="literal">nil</span>;</div><div class="line">    [<span class="keyword">self</span>.levelMeterView resetLevelMeter];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)updateMeter &#123;</div><div class="line">    LevelPair *levels = [<span class="keyword">self</span>.recorder levels];</div><div class="line">    <span class="keyword">self</span>.levelMeterView.level = levels.level;</div><div class="line">    <span class="keyword">self</span>.levelMeterView.peakLevel = levels.peakLevel;</div><div class="line">    [<span class="keyword">self</span>.levelMeterView setNeedsDisplay];</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#pragma mark -</span></div><div class="line"><span class="meta">#pragma mark - UITableViewDelegate</span></div><div class="line">- (<span class="built_in">NSInteger</span>)tableView:(<span class="built_in">UITableView</span> *)tableView numberOfRowsInSection:(<span class="built_in">NSInteger</span>)section &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.memos.count;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">- (<span class="built_in">UITableViewCell</span> *)tableView:(<span class="built_in">UITableView</span> *)tableView cellForRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath &#123;</div><div class="line">    MemoCell *cell = [tableView dequeueReusableCellWithIdentifier:<span class="string">@"MemoCell"</span>];</div><div class="line">    cell.model = <span class="keyword">self</span>.memos[indexPath.row];</div><div class="line">    <span class="keyword">return</span> cell;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)tableView:(<span class="built_in">UITableView</span> *)tableView didSelectRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath&#123;</div><div class="line">    MemoModel *model = <span class="keyword">self</span>.memos[indexPath.row];</div><div class="line">    [<span class="keyword">self</span>.recorder playbackURL:model];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">BOOL</span>)tableView:(<span class="built_in">UITableView</span> *)tableView canEditRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)tableView:(<span class="built_in">UITableView</span> *)tableView commitEditingStyle:(<span class="built_in">UITableViewCellEditingStyle</span>)editingStyle forRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath &#123;</div><div class="line">    <span class="keyword">if</span> (editingStyle == <span class="built_in">UITableViewCellEditingStyleDelete</span>) &#123;</div><div class="line">        MemoModel *memo = <span class="keyword">self</span>.memos[indexPath.row];</div><div class="line">        [memo deleteMemo];</div><div class="line">        [<span class="keyword">self</span>.memos removeObjectAtIndex:indexPath.row];</div><div class="line">        [<span class="keyword">self</span> saveMemos];</div><div class="line">        [tableView deleteRowsAtIndexPaths:@[indexPath] withRowAnimation:<span class="built_in">UITableViewRowAnimationAutomatic</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">CGFloat</span>)tableView:(<span class="built_in">UITableView</span> *)tableView heightForRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath &#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">80</span>;</div><div class="line">&#125;</div><div class="line"><span class="meta">#pragma mark - event response 所有触发的事件响应 按钮、通知、分段控件等</span></div><div class="line">- (<span class="keyword">IBAction</span>)record:(<span class="built_in">UIButton</span> *)sender &#123;</div><div class="line">    <span class="keyword">self</span>.stopButton.enabled = <span class="literal">YES</span>;</div><div class="line">    <span class="keyword">if</span> ([sender isSelected]) &#123;</div><div class="line">        [<span class="keyword">self</span> stopMeterTimer];</div><div class="line">        [<span class="keyword">self</span> stopTimer];</div><div class="line">        [<span class="keyword">self</span>.recorder pause];</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        [<span class="keyword">self</span> startMeterTimer];</div><div class="line">        [<span class="keyword">self</span> startTimer];</div><div class="line">        [<span class="keyword">self</span>.recorder record];</div><div class="line">    &#125;</div><div class="line">    [sender setSelected:![sender isSelected]];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">IBAction</span>)stopRecording:(<span class="built_in">UIButton</span> *)sender &#123;</div><div class="line">    [<span class="keyword">self</span> stopMeterTimer];</div><div class="line">    <span class="keyword">self</span>.recordButton.selected = <span class="literal">NO</span>;</div><div class="line">    <span class="keyword">self</span>.stopButton.enabled = <span class="literal">NO</span>;</div><div class="line">    [<span class="keyword">self</span>.recorder stopWithCompletionHandler:^(<span class="built_in">BOOL</span> result) &#123;</div><div class="line">        <span class="keyword">double</span> delayInSeconds = <span class="number">0.01</span>;</div><div class="line">        dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, (int64_t) (delayInSeconds * <span class="built_in">NSEC_PER_SEC</span>));</div><div class="line">        dispatch_after(popTime, dispatch_get_main_queue(), ^&#123;</div><div class="line">            [<span class="keyword">self</span> showSaveDialog];</div><div class="line">        &#125;);</div><div class="line">    &#125;];</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)showSaveDialog &#123;</div><div class="line">    <span class="built_in">UIAlertController</span> *alertController = [<span class="built_in">UIAlertController</span> alertControllerWithTitle:<span class="string">@"保存录音"</span> message:<span class="string">@"输入名称"</span> preferredStyle:<span class="built_in">UIAlertControllerStyleAlert</span>];</div><div class="line">    [alertController addTextFieldWithConfigurationHandler:^(<span class="built_in">UITextField</span> * _Nonnull textField) &#123;</div><div class="line">       textField.placeholder = <span class="string">@"我的录音"</span>;</div><div class="line">    &#125;];</div><div class="line">    <span class="built_in">UIAlertAction</span> *cancelAction = [<span class="built_in">UIAlertAction</span> actionWithTitle:<span class="string">@"Cancel"</span> style:<span class="built_in">UIAlertActionStyleCancel</span> handler:<span class="literal">nil</span>];</div><div class="line">    <span class="built_in">UIAlertAction</span> *okAction = [<span class="built_in">UIAlertAction</span> actionWithTitle:<span class="string">@"OK"</span> style:<span class="built_in">UIAlertActionStyleDefault</span> handler:^(<span class="built_in">UIAlertAction</span> * _Nonnull action) &#123;</div><div class="line">        <span class="built_in">NSString</span> *filename = [alertController.textFields.firstObject text];</div><div class="line">        [<span class="keyword">self</span>.recorder saveRecordingWithName:filename completionHandler:^(<span class="built_in">BOOL</span> success, <span class="keyword">id</span> object) &#123;</div><div class="line">            <span class="keyword">if</span> (success) &#123;</div><div class="line">                [<span class="keyword">self</span>.memos insertObject:object atIndex:<span class="number">0</span>];</div><div class="line">                [<span class="keyword">self</span> saveMemos];</div><div class="line">                [<span class="keyword">self</span>.tableview reloadData];</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="built_in">NSLog</span>(<span class="string">@"Error saving file: %@"</span>, [object localizedDescription]);</div><div class="line">            &#125;</div><div class="line">        &#125;];</div><div class="line">    &#125;];</div><div class="line">    [alertController addAction:cancelAction];</div><div class="line">    [alertController addAction:okAction];</div><div class="line">    </div><div class="line">    [<span class="keyword">self</span> presentViewController:alertController animated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#pragma mark - Memo Archiving</span></div><div class="line"><span class="comment">//保存备忘录model  这里简单用归档的方式存储一下</span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)saveMemos &#123;</div><div class="line">    <span class="built_in">NSData</span> *fileData = [<span class="built_in">NSKeyedArchiver</span> archivedDataWithRootObject:<span class="keyword">self</span>.memos];</div><div class="line">    [fileData writeToURL:[<span class="keyword">self</span> archiveURL] atomically:<span class="literal">YES</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//存储归档的路径</span></div><div class="line">- (<span class="built_in">NSURL</span> *)archiveURL &#123;</div><div class="line">    <span class="built_in">NSArray</span> *paths = <span class="built_in">NSSearchPathForDirectoriesInDomains</span>(<span class="built_in">NSDocumentDirectory</span>, <span class="built_in">NSUserDomainMask</span>, <span class="literal">YES</span>);</div><div class="line">    <span class="built_in">NSString</span> *docsDir = [paths objectAtIndex:<span class="number">0</span>];</div><div class="line">    <span class="built_in">NSString</span> *archivePath = [docsDir stringByAppendingPathComponent:MEMOS_ARCHIVE];</div><div class="line">    <span class="keyword">return</span> [<span class="built_in">NSURL</span> fileURLWithPath:archivePath];</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)didReceiveMemoryWarning &#123;</div><div class="line">    [<span class="keyword">super</span> didReceiveMemoryWarning];</div><div class="line">    <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>代码稍稍有点长  我简单说一下 大家可以参照最终的demo</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSMutableArray</span> &lt;MemoModel *&gt;*memos;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) BDRecorder *recorder;</div></pre></td></tr></table></figure>
<p>声明一个数组 存放需要播放的model对象信息 名称 文件url、日期等</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSTimer</span> *timer;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">CADisplayLink</span> *levelTimer;</div></pre></td></tr></table></figure>
<p>一个timer用于 刷新录制时间<br><code>levelTimer</code>用于刷新录制的视波图也叫<code>Audio Metering</code>对音频进行计量</p>
<p>在<code>BDRecorder</code>中增加了</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (LevelPair *)levels &#123;</div><div class="line">    [<span class="keyword">self</span>.recorder updateMeters];</div><div class="line">    <span class="keyword">float</span> avgPower = [<span class="keyword">self</span>.recorder averagePowerForChannel:<span class="number">0</span>];</div><div class="line">    <span class="keyword">float</span> peakPower = [<span class="keyword">self</span>.recorder peakPowerForChannel:<span class="number">0</span>];</div><div class="line">    <span class="keyword">float</span> linearLevel = [<span class="keyword">self</span>.meterTable valueForPower:avgPower];</div><div class="line">    <span class="keyword">float</span> linearPeak = [<span class="keyword">self</span>.meterTable valueForPower:peakPower];</div><div class="line">    <span class="keyword">return</span> [LevelPair levelsWithLevel:linearLevel peakLevel:linearPeak];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这两个方法</p>
<pre><code>1. averagePowerForChannel取出波谷平均值
2. peakPowerForChannel取出波峰 
</code></pre><p>两个方法都会返回一个用于表示声音分贝(dB)等级的浮点值. 这个值的表示范围<code>0dB(fullscale) ~ -160dB</code> 0dB最大  -160dB最小</p>
<p><strong>开启音频计量 (需要在<code>BDRecorder</code>中开启, 如下代码) 会带来很多额外的开销，但我觉得还是很划算的 毕竟要显示视觉效果才是王道.<br>如果<code>meteringEnabled</code>开启则音频录音器就会对捕捉到的音频样本进行分贝计算。</strong></p>
<p><strong>开启音频计量(Audio Metering)方法:</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="keyword">self</span>.recorder.meteringEnabled = <span class="literal">YES</span>;</div></pre></td></tr></table></figure>
<p>更新前调用了如下代码</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (LevelPair *)levels &#123;</div><div class="line">    [<span class="keyword">self</span>.recorder updateMeters];</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>每当读取值之前需要调用<code>[self.recorder updateMeters]</code>方法才能获取到最新值，否则可能获取的不够精确</p>
<p>然后 使用<code>MeterTable</code>类 声明的函数<code>valueForPower:</code> 把上边两个阀值 转成线性运算</p>
<p><strong>就是分贝值从对数形式的<code>-160 ~ 0</code>范围转换为线性0到1的形式.</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  MeterTable.m</span></div><div class="line"><span class="comment">//  AVAudioRecorderDemo</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by sunyazhou on 2017/4/5.</span></div><div class="line"><span class="comment">//  Copyright © 2017年 Baidu, Inc. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">"MeterTable.h"</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#define MIN_DB -60.0f</span></div><div class="line"><span class="meta">#define TABLE_SIZE 300</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">MeterTable</span> </span>&#123;</div><div class="line">    <span class="keyword">float</span> _scaleFactor;</div><div class="line">    <span class="built_in">NSMutableArray</span> *_meterTable;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">id</span>)init &#123;</div><div class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</div><div class="line">        <span class="keyword">float</span> dbResolution = MIN_DB / (TABLE_SIZE - <span class="number">1</span>);</div><div class="line">        </div><div class="line">        _meterTable = [<span class="built_in">NSMutableArray</span> arrayWithCapacity:TABLE_SIZE];</div><div class="line">        _scaleFactor = <span class="number">1.0</span>f / dbResolution;</div><div class="line">        </div><div class="line">        <span class="keyword">float</span> minAmp = dbToAmp(MIN_DB);</div><div class="line">        <span class="keyword">float</span> ampRange = <span class="number">1.0</span> - minAmp;</div><div class="line">        <span class="keyword">float</span> invAmpRange = <span class="number">1.0</span> / ampRange;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; TABLE_SIZE; i++) &#123;</div><div class="line">            <span class="keyword">float</span> decibels = i * dbResolution;</div><div class="line">            <span class="keyword">float</span> amp = dbToAmp(decibels);</div><div class="line">            <span class="keyword">float</span> adjAmp = (amp - minAmp) * invAmpRange;</div><div class="line">            _meterTable[i] = @(adjAmp);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">float</span> dbToAmp(<span class="keyword">float</span> dB) &#123;</div><div class="line">    <span class="keyword">return</span> powf(<span class="number">10.0</span>f, <span class="number">0.05</span>f * dB);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">float</span>)valueForPower:(<span class="keyword">float</span>)power &#123;</div><div class="line">    <span class="keyword">if</span> (power &lt; MIN_DB) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0.0</span>f;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (power &gt;= <span class="number">0.0</span>f) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1.0</span>f;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">int</span> index = (<span class="keyword">int</span>) (power * _scaleFactor);</div><div class="line">        <span class="keyword">return</span> [_meterTable[index] floatValue];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<blockquote>
<p><strong>这个类创建了一个数组<code>_meterTable</code>保存从计算前的分贝数到使用一定级别分贝解析之后的转换结果, 这里使用的解析率<code>-0.2dB</code>, 解析等级可以通过<code>MIN_DB</code> <code>TABLE_SIZE</code>这两个宏的值来修改,每个分贝值都调用<code>dbToAmp:</code>函数转换为线性范围内的值,使其处于<code>0(-60dB) ~ 1()</code>范围内, 之后由这些范围内的值构成平行曲线,开平方计算并保存到内部查找表格中. 然后如果外部需要可以调用<code>valueForPower:</code>来获取.</strong></p>
</blockquote>
<p>然后保存到<code>LevelPair</code>的实例对象返回 这个实例很简单存放两个值一个<code>level</code>一个<code>peakLevel</code></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">LevelPair</span> : <span class="title">NSObject</span></span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="keyword">float</span> level;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="keyword">float</span> peakLevel;</div><div class="line"></div><div class="line">+ (<span class="keyword">instancetype</span>)levelsWithLevel:(<span class="keyword">float</span>)level peakLevel:(<span class="keyword">float</span>)peakLevel;</div><div class="line"></div><div class="line">- (<span class="keyword">instancetype</span>)initWithLevel:(<span class="keyword">float</span>)level peakLevel:(<span class="keyword">float</span>)peakLevel;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>在<code>ViewController</code>中显示相关的UI </p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)startTimer &#123;</div><div class="line">    [<span class="keyword">self</span>.timer invalidate];</div><div class="line">    <span class="keyword">self</span>.timer = [<span class="built_in">NSTimer</span> timerWithTimeInterval:<span class="number">0.5</span></div><div class="line">                                         target:<span class="keyword">self</span></div><div class="line">                                       selector:<span class="keyword">@selector</span>(updateTimeDisplay)</div><div class="line">                                       userInfo:<span class="literal">nil</span></div><div class="line">                                        repeats:<span class="literal">YES</span>];</div><div class="line">    [[<span class="built_in">NSRunLoop</span> mainRunLoop] addTimer:<span class="keyword">self</span>.timer forMode:<span class="built_in">NSRunLoopCommonModes</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)stopTimer &#123;</div><div class="line">    [<span class="keyword">self</span>.timer invalidate];</div><div class="line">    <span class="keyword">self</span>.timer = <span class="literal">nil</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)updateTimeDisplay &#123;</div><div class="line">    <span class="keyword">self</span>.timeLabel.text = <span class="keyword">self</span>.recorder.formattedCurrentTime;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)startMeterTimer &#123;</div><div class="line">    [<span class="keyword">self</span>.levelTimer invalidate];</div><div class="line">    <span class="keyword">self</span>.levelTimer = [<span class="built_in">CADisplayLink</span> displayLinkWithTarget:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(updateMeter)];</div><div class="line"><span class="comment">//    if ([self.levelTimer respondsToSelector:@selector(setPreferredFramesPerSecond:)]) &#123;</span></div><div class="line"><span class="comment">//        self.levelTimer.preferredFramesPerSecond = 5;</span></div><div class="line"><span class="comment">//    &#125; else &#123;</span></div><div class="line">    <span class="keyword">self</span>.levelTimer.frameInterval = <span class="number">5</span>;</div><div class="line"><span class="comment">//    &#125;</span></div><div class="line">    [<span class="keyword">self</span>.levelTimer addToRunLoop:[<span class="built_in">NSRunLoop</span> currentRunLoop]</div><div class="line">                          forMode:<span class="built_in">NSRunLoopCommonModes</span>];</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)stopMeterTimer &#123;</div><div class="line">    [<span class="keyword">self</span>.levelTimer invalidate];</div><div class="line">    <span class="keyword">self</span>.levelTimer = <span class="literal">nil</span>;</div><div class="line">    [<span class="keyword">self</span>.levelMeterView resetLevelMeter];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)updateMeter &#123;</div><div class="line">    LevelPair *levels = [<span class="keyword">self</span>.recorder levels];</div><div class="line">    <span class="keyword">self</span>.levelMeterView.level = levels.level;</div><div class="line">    <span class="keyword">self</span>.levelMeterView.peakLevel = levels.peakLevel;</div><div class="line">    [<span class="keyword">self</span>.levelMeterView setNeedsDisplay];</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>用于定时器的处理</p>
<p>事件的相关响应</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="meta">#pragma mark - event response 所有触发的事件响应 按钮、通知、分段控件等</span></div><div class="line">- (<span class="keyword">IBAction</span>)record:(<span class="built_in">UIButton</span> *)sender &#123;</div><div class="line">    <span class="keyword">self</span>.stopButton.enabled = <span class="literal">YES</span>;</div><div class="line">    <span class="keyword">if</span> ([sender isSelected]) &#123;</div><div class="line">        [<span class="keyword">self</span> stopMeterTimer];</div><div class="line">        [<span class="keyword">self</span> stopTimer];</div><div class="line">        [<span class="keyword">self</span>.recorder pause];</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        [<span class="keyword">self</span> startMeterTimer];</div><div class="line">        [<span class="keyword">self</span> startTimer];</div><div class="line">        [<span class="keyword">self</span>.recorder record];</div><div class="line">    &#125;</div><div class="line">    [sender setSelected:![sender isSelected]];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">IBAction</span>)stopRecording:(<span class="built_in">UIButton</span> *)sender &#123;</div><div class="line">    [<span class="keyword">self</span> stopMeterTimer];</div><div class="line">    <span class="keyword">self</span>.recordButton.selected = <span class="literal">NO</span>;</div><div class="line">    <span class="keyword">self</span>.stopButton.enabled = <span class="literal">NO</span>;</div><div class="line">    [<span class="keyword">self</span>.recorder stopWithCompletionHandler:^(<span class="built_in">BOOL</span> result) &#123;</div><div class="line">        <span class="keyword">double</span> delayInSeconds = <span class="number">0.01</span>;</div><div class="line">        dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, (int64_t) (delayInSeconds * <span class="built_in">NSEC_PER_SEC</span>));</div><div class="line">        dispatch_after(popTime, dispatch_get_main_queue(), ^&#123;</div><div class="line">            [<span class="keyword">self</span> showSaveDialog];</div><div class="line">        &#125;);</div><div class="line">    &#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里保存数据使用的是归档方式</p>
<p><code>BDRecorder</code>没有 处理意外中断等情况 比如外接麦克风 和音频意外来电等，如果需要处理 就可以在<code>BDRecorder</code>中声明几个代理监听音频回话的那几个通知就可以了 这里出于学习为目的就简单写到这里吧，如果大家需求强烈我可以回头补上并开源。</p>
<p>很多人纠结如何根据波形绘制更好的图 我这里是借助本书作者的demo完成相关波形处理的视图。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"LevelMeterView.h"</span></span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">"LevelMeterColorThreshold.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">LevelMeterView</span> ()</span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">NSUInteger</span> ledCount;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) <span class="built_in">UIColor</span> *ledBackgroundColor;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) <span class="built_in">UIColor</span> *ledBorderColor;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSArray</span> *colorThresholds;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">LevelMeterView</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">id</span>)initWithFrame:(<span class="built_in">CGRect</span>)frame &#123;</div><div class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> initWithFrame:frame];</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</div><div class="line">        [<span class="keyword">self</span> setupView];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">id</span>)initWithCoder:(<span class="built_in">NSCoder</span> *)coder &#123;</div><div class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> initWithCoder:coder];</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</div><div class="line">        [<span class="keyword">self</span> setupView];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)setupView &#123;</div><div class="line">    </div><div class="line">    <span class="keyword">self</span>.backgroundColor = [<span class="built_in">UIColor</span> clearColor];</div><div class="line">    </div><div class="line">    _ledCount = <span class="number">20</span>;</div><div class="line">    </div><div class="line">    _ledBackgroundColor = [<span class="built_in">UIColor</span> colorWithWhite:<span class="number">0.0</span>f alpha:<span class="number">0.35</span>f];</div><div class="line">    _ledBorderColor = [<span class="built_in">UIColor</span> blackColor];</div><div class="line">    </div><div class="line">    <span class="built_in">UIColor</span> *greenColor = [<span class="built_in">UIColor</span> colorWithRed:<span class="number">0.458</span> green:<span class="number">1.000</span> blue:<span class="number">0.396</span> alpha:<span class="number">1.000</span>];</div><div class="line">    <span class="built_in">UIColor</span> *yellowColor = [<span class="built_in">UIColor</span> colorWithRed:<span class="number">1.000</span> green:<span class="number">0.930</span> blue:<span class="number">0.315</span> alpha:<span class="number">1.000</span>];</div><div class="line">    <span class="built_in">UIColor</span> *redColor = [<span class="built_in">UIColor</span> colorWithRed:<span class="number">1.000</span> green:<span class="number">0.325</span> blue:<span class="number">0.329</span> alpha:<span class="number">1.000</span>];</div><div class="line">    </div><div class="line">    _colorThresholds = @[[LevelMeterColorThreshold colorThresholdWithMaxValue:<span class="number">0.5</span> color:greenColor name:<span class="string">@"green"</span>],</div><div class="line">                         [LevelMeterColorThreshold colorThresholdWithMaxValue:<span class="number">0.8</span> color:yellowColor name:<span class="string">@"yellow"</span>],</div><div class="line">                         [LevelMeterColorThreshold colorThresholdWithMaxValue:<span class="number">1.0</span> color:redColor name:<span class="string">@"red"</span>]];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)drawRect:(<span class="built_in">CGRect</span>)rect &#123;</div><div class="line">    </div><div class="line">    <span class="built_in">CGContextRef</span> context = <span class="built_in">UIGraphicsGetCurrentContext</span>();</div><div class="line">    </div><div class="line">    <span class="built_in">CGContextTranslateCTM</span>(context, <span class="number">0</span>, <span class="built_in">CGRectGetHeight</span>(<span class="keyword">self</span>.bounds));</div><div class="line">    <span class="built_in">CGContextRotateCTM</span>(context, (<span class="built_in">CGFloat</span>) -M_PI_2);</div><div class="line">    <span class="built_in">CGRect</span> bounds = <span class="built_in">CGRectMake</span>(<span class="number">0.</span>, <span class="number">0.</span>, [<span class="keyword">self</span> bounds].size.height, [<span class="keyword">self</span> bounds].size.width);</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="built_in">CGFloat</span> lightMinValue = <span class="number">0.0</span>f;</div><div class="line">    </div><div class="line">    <span class="built_in">NSInteger</span> peakLED = <span class="number">-1</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.peakLevel &gt; <span class="number">0.0</span>f) &#123;</div><div class="line">        peakLED = <span class="keyword">self</span>.peakLevel * <span class="keyword">self</span>.ledCount;</div><div class="line">        <span class="keyword">if</span> (peakLED &gt;= <span class="keyword">self</span>.ledCount) &#123;</div><div class="line">            peakLED = <span class="keyword">self</span>.ledCount - <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> ledIndex = <span class="number">0</span>; ledIndex &lt; <span class="keyword">self</span>.ledCount; ledIndex++) &#123;</div><div class="line">        </div><div class="line">        <span class="built_in">UIColor</span> *ledColor = [<span class="keyword">self</span>.colorThresholds[<span class="number">0</span>] color];</div><div class="line">        </div><div class="line">        <span class="built_in">CGFloat</span> ledMaxValue = (<span class="built_in">CGFloat</span>) (ledIndex + <span class="number">1</span>) / <span class="keyword">self</span>.ledCount;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> colorIndex = <span class="number">0</span>; colorIndex &lt; <span class="keyword">self</span>.colorThresholds.count - <span class="number">1</span>; colorIndex++) &#123;</div><div class="line">            LevelMeterColorThreshold *currThreshold = <span class="keyword">self</span>.colorThresholds[colorIndex];</div><div class="line">            LevelMeterColorThreshold *nextThreshold = <span class="keyword">self</span>.colorThresholds[colorIndex + <span class="number">1</span>];</div><div class="line">            <span class="keyword">if</span> (currThreshold.maxValue &lt;= ledMaxValue) &#123;</div><div class="line">                ledColor = nextThreshold.color;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="built_in">CGFloat</span> height = <span class="built_in">CGRectGetHeight</span>(bounds);</div><div class="line">        <span class="built_in">CGFloat</span> width = <span class="built_in">CGRectGetWidth</span>(bounds);</div><div class="line">        </div><div class="line">        <span class="built_in">CGRect</span> ledRect = <span class="built_in">CGRectMake</span>(<span class="number">0.0</span>f, height * ((<span class="built_in">CGFloat</span>) ledIndex / <span class="keyword">self</span>.ledCount), width, height * (<span class="number">1.0</span>f / <span class="keyword">self</span>.ledCount));</div><div class="line">        </div><div class="line">        <span class="comment">// Fill background color</span></div><div class="line">        <span class="built_in">CGContextSetFillColorWithColor</span>(context, <span class="keyword">self</span>.ledBackgroundColor.CGColor);</div><div class="line">        <span class="built_in">CGContextFillRect</span>(context, ledRect);</div><div class="line">        </div><div class="line">        <span class="comment">// Draw Light</span></div><div class="line">        <span class="built_in">CGFloat</span> lightIntensity;</div><div class="line">        <span class="keyword">if</span> (ledIndex == peakLED) &#123;</div><div class="line">            lightIntensity = <span class="number">1.0</span>f;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            lightIntensity = clamp((<span class="keyword">self</span>.level - lightMinValue) / (ledMaxValue - lightMinValue));</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="built_in">UIColor</span> *fillColor = <span class="literal">nil</span>;</div><div class="line">        <span class="keyword">if</span> (lightIntensity == <span class="number">1.0</span>f) &#123;</div><div class="line">            fillColor = ledColor;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (lightIntensity &gt; <span class="number">0.0</span>f) &#123;</div><div class="line">            <span class="built_in">CGColorRef</span> color = <span class="built_in">CGColorCreateCopyWithAlpha</span>([ledColor <span class="built_in">CGColor</span>], lightIntensity);</div><div class="line">            fillColor = [<span class="built_in">UIColor</span> colorWithCGColor:color];</div><div class="line">            <span class="built_in">CGColorRelease</span>(color);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="built_in">CGContextSetFillColorWithColor</span>(context, fillColor.CGColor);</div><div class="line">        <span class="built_in">UIBezierPath</span> *fillPath = [<span class="built_in">UIBezierPath</span> bezierPathWithRoundedRect:ledRect cornerRadius:<span class="number">2.0</span>f];</div><div class="line">        <span class="built_in">CGContextAddPath</span>(context, fillPath.CGPath);</div><div class="line">        </div><div class="line">        <span class="comment">// Stroke border</span></div><div class="line">        <span class="built_in">CGContextSetStrokeColorWithColor</span>(context, <span class="keyword">self</span>.ledBorderColor.CGColor);</div><div class="line">        <span class="built_in">UIBezierPath</span> *strokePath = [<span class="built_in">UIBezierPath</span> bezierPathWithRoundedRect:<span class="built_in">CGRectInset</span>(ledRect, <span class="number">0.5</span>, <span class="number">0.5</span>) cornerRadius:<span class="number">2.0</span>f];</div><div class="line">        <span class="built_in">CGContextAddPath</span>(context, strokePath.CGPath);</div><div class="line">        </div><div class="line">        <span class="built_in">CGContextDrawPath</span>(context, kCGPathFillStroke);</div><div class="line">        </div><div class="line">        lightMinValue = ledMaxValue;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">CGFloat</span> clamp(<span class="built_in">CGFloat</span> intensity) &#123;</div><div class="line">    <span class="keyword">if</span> (intensity &lt; <span class="number">0.0</span>f) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0.0</span>f;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (intensity &gt;= <span class="number">1.0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1.0</span>f;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> intensity;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)resetLevelMeter &#123;</div><div class="line">    <span class="keyword">self</span>.level = <span class="number">0.0</span>f;</div><div class="line">    <span class="keyword">self</span>.peakLevel = <span class="number">0.0</span>f;</div><div class="line">    [<span class="keyword">self</span> setNeedsDisplay];</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>这里给出了level和peak的阀值 有很多第三方开源的view大家可以自行研究一下 很简单 就是把相关阀值量化的过程。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>AVAudioRecorder</code> 的学习还算完整的搞完了,随时记录一下学习内容和技术知识。</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/Learning-AV-Foundation-AVAudioRecorder/IMG_0114.PNG" alt=""></p>
<p><strong>最终<a href="https://github.com/sunyazhou13/AVAudioRecorderDemo" target="_blank" rel="external">Demo</a></strong></p>
<p>欢迎大家指正错误 全文完</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/Learning-AV-Foundation-AVAudioRecorder/stock-
    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="macOS开发" scheme="https://www.sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="Learning AV Foundation" scheme="https://www.sunyazhou.com/tags/Learning-AV-Foundation/"/>
    
  </entry>
  
  <entry>
    <title>判断NSWindow是否全屏</title>
    <link href="https://www.sunyazhou.com/2017/03/23/check-NSWindow-isFullScreen/"/>
    <id>https://www.sunyazhou.com/2017/03/23/check-NSWindow-isFullScreen/</id>
    <published>2017-03-23T06:03:32.000Z</published>
    <updated>2017-03-29T23:56:19.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSWindow</span> (<span class="title">FullScreen</span>)</span></div><div class="line"></div><div class="line">- (<span class="built_in">BOOL</span>)mn_isFullScreen;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSWindow</span> (<span class="title">FullScreen</span>)</span></div><div class="line"></div><div class="line">- (<span class="built_in">BOOL</span>)mn_isFullScreen</div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> (([<span class="keyword">self</span> styleMask] &amp; <span class="built_in">NSFullScreenWindowMask</span>) == <span class="built_in">NSFullScreenWindowMask</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>refs:<a href="http://stackoverflow.com/questions/6815917/how-to-know-if-a-nswindow-is-fullscreen-in-mac-os-x-lion" target="_blank" rel="external">How to know if a NSWindow is fullscreen in Mac OS X Lion?</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span
    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="macOS开发" scheme="https://www.sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Access privacy-sensitive data 隐私及敏感数据访问权限</title>
    <link href="https://www.sunyazhou.com/2017/03/20/Access-privacy-sensitive-data-private-access-permission/"/>
    <id>https://www.sunyazhou.com/2017/03/20/Access-privacy-sensitive-data-private-access-permission/</id>
    <published>2017-03-20T02:54:40.000Z</published>
    <updated>2017-03-29T23:56:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>在你访问照相机、通讯录、等等隐私以及敏感数据之前，你必须请求授权。否则你的app会在你尝试访问这些隐私时崩溃。Xcode会log这些：</p>
<blockquote>
<p>This app has crashed because it attempted to access privacy-sensitive data without a usage description. The app’s Info.plist must contain an NSContactsUsageDescription key with a string value explaining to the user how the app uses this data.</p>
</blockquote>
<p>打开你工程中名叫 <code>info.plist</code> 的文件，右键点击选择 <code>opening as Source Code</code>，把下面的代码粘贴进去。或者你可以使用默认的 <code>Property List</code> 打开 <code>info.plist</code>，点击add按钮，当你输入 <code>Privacy</code> - Xcode会给你自动补全的建议，用上下键去选择吧。</p>
<p>私有数据的框架列表可是个不小的东西:  </p>
<blockquote>
<p>通讯录 日历 提醒 照片 蓝牙共享 耳机 相机 定位 健康 homeKit 多媒体库 运动 callKit 语音识别 SiriKit TV Provider</p>
</blockquote>
<p>参考 <a href="https://github.com/ChenYilong/iOS10AdaptationTips" target="_blank" rel="external">这个大神</a></p>
<figure class="highlight"><table><tr><td class="code"><pre><div class="line">&lt;!-- 🖼 Photo Library --&gt;</div><div class="line">&lt;key&gt;NSPhotoLibraryUsageDescription&lt;/key&gt;</div><div class="line">&lt;string&gt;$(PRODUCT_NAME) photo use&lt;/string&gt;</div><div class="line"></div><div class="line">&lt;!-- 📷 Camera --&gt;</div><div class="line">&lt;key&gt;NSCameraUsageDescription&lt;/key&gt;</div><div class="line">&lt;string&gt;$(PRODUCT_NAME) camera use&lt;/string&gt;</div><div class="line"></div><div class="line">&lt;!-- 🎤 Microphone --&gt;</div><div class="line">&lt;key&gt;NSMicrophoneUsageDescription&lt;/key&gt;</div><div class="line">&lt;string&gt;$(PRODUCT_NAME) microphone use&lt;/string&gt;</div><div class="line"></div><div class="line">&lt;!-- 📍 Location --&gt;</div><div class="line">&lt;key&gt;NSLocationUsageDescription&lt;/key&gt;</div><div class="line">&lt;string&gt;$(PRODUCT_NAME) location use&lt;/string&gt;</div><div class="line"></div><div class="line">&lt;!-- 📍 Location When In Use --&gt;</div><div class="line">&lt;key&gt;NSLocationWhenInUseUsageDescription&lt;/key&gt;</div><div class="line">&lt;string&gt;$(PRODUCT_NAME) location use&lt;/string&gt;</div><div class="line"></div><div class="line">&lt;!-- 📍 Location Always --&gt;</div><div class="line">&lt;key&gt;NSLocationAlwaysUsageDescription&lt;/key&gt;</div><div class="line">&lt;string&gt;$(PRODUCT_NAME) always uses location &lt;/string&gt;</div><div class="line"></div><div class="line">&lt;!-- 📆 Calendars --&gt;</div><div class="line">&lt;key&gt;NSCalendarsUsageDescription&lt;/key&gt;</div><div class="line">&lt;string&gt;$(PRODUCT_NAME) calendar events&lt;/string&gt;</div><div class="line"></div><div class="line">&lt;!-- ⏰ Reminders --&gt;</div><div class="line">&lt;key&gt;NSRemindersUsageDescription&lt;/key&gt;</div><div class="line">&lt;string&gt;$(PRODUCT_NAME) reminder use&lt;/string&gt;</div><div class="line"></div><div class="line">&lt;!-- 📒 Contacts --&gt;</div><div class="line">&lt;key&gt;NSContactsUsageDescription&lt;/key&gt;</div><div class="line">&lt;string&gt;$(PRODUCT_NAME) contact use&lt;/string&gt;</div><div class="line"></div><div class="line">&lt;!-- 🏊 Motion --&gt;</div><div class="line">&lt;key&gt;NSMotionUsageDescription&lt;/key&gt;</div><div class="line">&lt;string&gt;$(PRODUCT_NAME) motion use&lt;/string&gt;</div><div class="line"></div><div class="line">&lt;!-- 💊 Health Update --&gt;</div><div class="line">&lt;key&gt;NSHealthUpdateUsageDescription&lt;/key&gt;</div><div class="line">&lt;string&gt;$(PRODUCT_NAME) heath update use&lt;/string&gt;</div><div class="line"></div><div class="line">&lt;!-- 💊 Health Share --&gt;</div><div class="line">&lt;key&gt;NSHealthShareUsageDescription&lt;/key&gt;</div><div class="line">&lt;string&gt;$(PRODUCT_NAME) heath share use&lt;/string&gt;</div><div class="line"></div><div class="line">&lt;!-- ᛒ🔵 Bluetooth Peripheral --&gt;</div><div class="line">&lt;key&gt;NSBluetoothPeripheralUsageDescription&lt;/key&gt;</div><div class="line">&lt;string&gt;$(PRODUCT_NAME) Bluetooth Peripheral use&lt;/string&gt;</div><div class="line"></div><div class="line">&lt;!-- 🎵 Media Library --&gt;</div><div class="line">&lt;key&gt;NSAppleMusicUsageDescription&lt;/key&gt;</div><div class="line">&lt;string&gt;$(PRODUCT_NAME) media library use&lt;/string&gt;</div><div class="line"></div><div class="line">&lt;!-- 📱 Siri --&gt;</div><div class="line">&lt;key&gt;NSSiriUsageDescription&lt;/key&gt;</div><div class="line">&lt;string&gt;$(PRODUCT_NAME) siri use&lt;/string&gt;</div><div class="line"></div><div class="line">&lt;!-- 🏡 HomeKit --&gt;</div><div class="line">&lt;key&gt;NSHomeKitUsageDescription&lt;/key&gt;</div><div class="line">&lt;string&gt;$(PRODUCT_NAME) home kit use&lt;/string&gt;</div><div class="line"></div><div class="line">&lt;!-- 📻 SpeechRecognition --&gt;</div><div class="line">&lt;key&gt;NSSpeechRecognitionUsageDescription&lt;/key&gt;</div><div class="line">&lt;string&gt;$(PRODUCT_NAME) speech use&lt;/string&gt;</div><div class="line"></div><div class="line">&lt;!-- 📺 VideoSubscriber --&gt;</div><div class="line">&lt;key&gt;NSVideoSubscriberAccountUsageDescription&lt;/key&gt;</div><div class="line">&lt;string&gt;$(PRODUCT_NAME) tvProvider use&lt;/string&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在你访问照相机、通讯录、等等隐私以及敏感数据之前，你必须请求授权。否则你的app会在你尝试访问这些隐私时崩溃。Xcode会log这些：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This app has crashed because it attempted to acce
    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="macOS开发" scheme="https://www.sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Learning AV Foundation(二)AVAudioPlayer</title>
    <link href="https://www.sunyazhou.com/2017/03/17/Learning-AV-Foundation-AVAudioPlayer/"/>
    <id>https://www.sunyazhou.com/2017/03/17/Learning-AV-Foundation-AVAudioPlayer/</id>
    <published>2017-03-17T02:26:06.000Z</published>
    <updated>2017-07-01T23:38:52.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/Learning%20AV%20Foundation2AVAudioPlayer/stock-photo-55571408.jpg" alt="AVAudioPlayer"></p>
<h2 id="开篇"><a href="#开篇" class="headerlink" title="开篇"></a>开篇</h2><p>最近在学习<code>AV Foundation</code> 试图把学习内容记录下来 并参考一些博客文章<br>本期的内容是<code>AVAudioPlayer</code></p>
<h2 id="音频知识基础"><a href="#音频知识基础" class="headerlink" title="音频知识基础  "></a>音频知识基础  </h2><blockquote>
<p>音频文件的生成过程是将声音信息<strong>采样</strong>、<strong>量化</strong>和<strong>编码</strong>产生的数字信号的过程，<strong>人耳所能听到的声音，最低的频率是从20Hz起一直到最高频率20KHZ</strong>，因此音频文件格式的最大带宽是20KHZ。根据<a href="https://zh.wikipedia.org/wiki/%E5%A5%88%E5%A5%8E%E6%96%AF%E7%89%B9%E9%A2%91%E7%8E%87" target="_blank" rel="external">奈奎斯特</a>的理论，只有采样频率高于声音信号最高频率的两倍时，才能把数字信号表示的声音还原成为原来的声音，所以音频文件的采样率一般在<strong>40~50KHZ</strong>，比如最常见的CD音质采样率<strong>44.1KHZ</strong>。 (所以一般大家都觉得CD音质是最好的.) 对声音进行采样、量化过程被称为<a href="https://zh.wikipedia.org/wiki/%E8%84%88%E8%A1%9D%E7%B7%A8%E8%99%9F%E8%AA%BF%E8%AE%8A" target="_blank" rel="external">脉冲编码调制</a>（Pulse Code Modulation），简称PCM。PCM数据是最原始的音频数据完全无损，所以PCM数据虽然音质优秀但体积庞大，为了解决这个问题先后诞生了一系列的音频格式，这些音频格式运用不同的方法对音频数据进行压缩，其中有无损压缩（ALAC、APE、FLAC）和有损压缩（MP3、AAC、OGG、WMA）两种 来源:<a href="http://msching.github.io/blog/2014/07/07/audio-in-ios/" target="_blank" rel="external">iOS音频播放 (一)：概述</a> by <a href="http://msching.github.io/" target="_blank" rel="external">码农人生</a></p>
</blockquote>
<p>–</p>
<p>我觉得程寅大牛的处理音频说的很明白<br>大神列出一个经典的音频播放流程（以MP3为例）</p>
<ol>
<li>读取MP3文件</li>
<li>解析采样率、码率、时长等信息，分离MP3中的音频帧</li>
<li>对分离出来的音频帧解码得到PCM数据</li>
<li>对PCM数据进行音效处理（均衡器、混响器等，非必须）</li>
<li>把PCM数据解码成音频信号</li>
<li>把音频信号交给硬件播放</li>
<li>重复1-6步直到播放完成</li>
</ol>
<p>在iOS系统中apple对上述的流程进行了封装并提供了不同层次的接口<br><img src="https://developer.apple.com/library/content/documentation/MusicAudio/Conceptual/CoreAudioOverview/Art/core_audio_layers_2x.png" alt="">  </p>
<blockquote>
<p>这是CoreAudio的接口层次  </p>
</blockquote>
<p>下面对其中的中高层接口进行功能说明：</p>
<ul>
<li>Audio File Services：读写音频数据，可以完成播放流程中的第2步；</li>
<li>Audio File Stream Services：对音频进行解码，可以完成播放流程中的第2步；</li>
<li>Audio Converter services：音频数据转换，可以完成播放流程中的第3步；</li>
<li>Audio Processing Graph Services：音效处理模块，可以完成播放流程中的第4步；</li>
<li>Audio Unit Services：播放音频数据：可以完成播放流程中的第5步、第6步；</li>
<li>Extended Audio File Services：Audio File Services和Audio   </li>
<li>Converter services的结合体；</li>
<li>AVAudioPlayer/AVPlayer(AVFoundation)：高级接口，可以完成整个音频播放的过程（包括本地文件和网络流播放，第4步除外）；</li>
<li>Audio Queue Services：高级接口，可以进行录音和播放，可以完成播放流程中的第3、5、6步；</li>
<li>OpenAL：用于游戏音频播放，暂不讨论</li>
</ul>
<p>可以看到apple提供的接口类型非常丰富，可以满足各种类别类需求：  </p>
<ul>
<li><p>如果你只是想实现音频的播放，没有其他需求AVFoundation会很好的满足你的需求。它的接口使用简单、不用关心其中的细节；</p>
</li>
<li><p>如果你的app需要对音频进行流播放并且同时存储，那么AudioFileStreamer加AudioQueue能够帮到你，你可以先把音频数据下载到本地，一边下载一边用NSFileHandler等接口读取本地音频文件并交给AudioFileStreamer或者AudioFile解析分离音频帧，分离出来的音频帧可以送给AudioQueue进行解码和播放。如果是本地文件直接读取文件解析即可。（这两个都是比较直接的做法，这类需求也可以用AVFoundation+本地server的方式实现，AVAudioPlayer会把请求发送给本地server，由本地server转发出去，获取数据后在本地server中存储并转送给AVAudioPlayer。另一个比较trick的做法是先把音频下载到文件中，在下载到一定量的数据后把文件路径给AVAudioPlayer播放，当然这种做法在音频seek后就回有问题了。）</p>
</li>
<li>如果你正在开发一个专业的音乐播放软件，需要对音频施加音效（均衡器、混响器），那么除了数据的读取和解析以外还需要用到AudioConverter来把音频数据转换成PCM数据，再由AudioUnit+AUGraph来进行音效处理和播放（但目前多数带音效的app都是自己开发音效模块来坐PCM数据的处理，这部分功能自行开发在自定义性和扩展性上会比较强一些。PCM数据通过音效器处理完成后就可以使用AudioUnit播放了，当然AudioQueue也支持直接使对PCM数据进行播放。）。下图描述的就是使用AudioFile + AudioConverter + AudioUnit进行音频播放的流程</li>
</ul>
<p><img src="http://msching.github.io/images/iOS-audio/audioUnitPlay.jpg" alt=""></p>
<p>以上内容均转自<a href="http://msching.github.io/blog/2014/07/07/audio-in-ios/" target="_blank" rel="external">码农人生</a> 希望大神不要介意 如果有问题 我可立即清除</p>
<h2 id="使用AVAudioPlayer之前对AudioSession简介"><a href="#使用AVAudioPlayer之前对AudioSession简介" class="headerlink" title="使用AVAudioPlayer之前对AudioSession简介"></a>使用<code>AVAudioPlayer</code>之前对AudioSession简介</h2><blockquote>
<p><code>AVAudioSession</code>负责管理音频会话 它是个单例 在应用程序和操作系统之间负责中间人的角色 <a href="http://msching.github.io/blog/2014/07/08/audio-in-ios-2/" target="_blank" rel="external">AudioSession参考</a> </p>
</blockquote>
<p><code>AVAudioSession</code>主要功能包括以下几点：</p>
<ul>
<li>app是如何使用的音频服务 播放 还是录制 之类的</li>
<li>控制协调app输入输出设备（比如 麦克风，耳机、手机外放比如蓝牙连接一个外置音响 或airplay）</li>
<li>协调你的app的音频播放和系统以及其他app行为（例如有电话时需要打断，电话结束时需要恢复，按下静音按钮时是否歌曲也要静音等）</li>
</ul>
<p><img src="https://developer.apple.com/library/content/documentation/Audio/Conceptual/AudioSessionProgrammingGuide/Art/aspg_intro_2x.png" alt=""></p>
<p><em>注：AVAudioSession iOS6以后使用 以前叫AudioSession</em></p>
<h2 id="如何使用AVAudioPlayer"><a href="#如何使用AVAudioPlayer" class="headerlink" title="如何使用AVAudioPlayer"></a>如何使用<code>AVAudioPlayer</code></h2><p>在我的博客里面我尽量使用code胜过千言万语<br>使用<code>AVAudioPlayer</code>之前需要在<code>AppDelegate</code>里面导入<code>#import &lt;AVFoundation/AVFoundation.h&gt;</code><br>并且启动音频会话</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"></div><div class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class="built_in">NSDictionary</span> *)launchOptions &#123;</div><div class="line">    </div><div class="line">    <span class="built_in">AVAudioSession</span> *session = [<span class="built_in">AVAudioSession</span> sharedInstance];</div><div class="line">    <span class="built_in">NSError</span> *error;</div><div class="line">    <span class="keyword">if</span> (![session setCategory:<span class="built_in">AVAudioSessionCategoryPlayback</span> error:&amp;error]) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"Category Error: %@"</span>, [error localizedDescription]);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (![session setActive:<span class="literal">YES</span> error:&amp;error]) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"Activation Error: %@"</span>, [error localizedDescription]);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上边已经介绍了<code>AVAudioSession</code>  </p>
<p>这里面说一下<code>[session setCategory:AVAudioSessionCategoryPlayback error:&amp;error]</code> 里面的<code>AVAudioSessionCategoryPlayback</code></p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/Learning%20AV%20Foundation2AVAudioPlayer/AVAudioPlayer_category.png" alt="音频会话分类"></p>
<p>这是这几种分类的列表大家可以看下</p>
<p>记得开启后台播放<br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/Learning%20AV%20Foundation2AVAudioPlayer/MacHi%202017-03-19%2022-43-36.png" alt=""><br>或者在plist里面修改<br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/Learning%20AV%20Foundation2AVAudioPlayer/MacHi%202017-03-19%2022-44-05.png" alt="">  </p>
<p>下面就是创建音频播放器代码</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">"ViewController.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;Masonry/Masonry.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">"THControlKnob.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"THPlayButton.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;AVFoundation/AVFoundation.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></div><div class="line"></div><div class="line"><span class="comment">//三个控制推子</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> THOrangeControlKnob *panKnob;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> THOrangeControlKnob *volumnKnob;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> THGreenControlKnob *rateKnob;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> THPlayButton *playButton;</div><div class="line"></div><div class="line"><span class="comment">//音乐播放器</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">AVAudioPlayer</span> *musicPlayer;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">getter</span> = isPlaying) <span class="built_in">BOOL</span> playing; <span class="comment">//播放状态</span></div><div class="line"></div><div class="line"><span class="comment">//无关代码</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> <span class="built_in">UILabel</span> *LeftRightRoundDec;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> <span class="built_in">UILabel</span> *voiceDec;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> <span class="built_in">UILabel</span> *rateDec;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> <span class="built_in">UILabel</span> *trackDescrption;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<blockquote>
<p>导入几个第三方控件的类用于音乐播放</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/Learning%20AV%20Foundation2AVAudioPlayer/MacHi%202017-03-19%2021-22-43.png" alt=""></p>
<p>这上边的三个旋钮就是导入的开源库</p>
<p>下面创建播放器<code>AVAudioPlayer</code><br>创建时需要一个<code>NSURL</code>代表要播放的文件路径 这里简单从bundle中拖了一首歌进去了</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#pragma mark -</span></div><div class="line"><span class="meta">#pragma mark - 创建AVAudioPlayer与播放状态控制</span></div><div class="line"><span class="comment">/**</span></div><div class="line"> 创建音乐播放器</div><div class="line"> </div><div class="line"> @param fileName 文件名</div><div class="line"> @param fileExtension 文件扩展名</div><div class="line"> @return 播放器实例</div><div class="line"> */</div><div class="line">- (<span class="built_in">AVAudioPlayer</span> *)createPlayForFile:(<span class="built_in">NSString</span> *)fileName</div><div class="line">                       withExtension:(<span class="built_in">NSString</span> *)fileExtension&#123;</div><div class="line">    <span class="built_in">NSURL</span> *url = [[<span class="built_in">NSBundle</span> mainBundle] URLForResource:fileName withExtension:fileExtension];</div><div class="line">    <span class="built_in">NSError</span> *error = <span class="literal">nil</span>;</div><div class="line">    <span class="built_in">AVAudioPlayer</span> *audioPlayer = [[<span class="built_in">AVAudioPlayer</span> alloc] initWithContentsOfURL:url error:&amp;error];</div><div class="line">    <span class="keyword">if</span> (audioPlayer) &#123;</div><div class="line">        audioPlayer.numberOfLoops = <span class="number">-1</span>; <span class="comment">//-1无限循环</span></div><div class="line">        audioPlayer.enableRate = <span class="literal">YES</span>; <span class="comment">//启动倍速控制</span></div><div class="line">        [audioPlayer prepareToPlay];</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"Error creating player: %@"</span>,[error localizedDescription]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> audioPlayer;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>numberOfLoops</code> = -1; 代表本首歌 无限循环 其它常数代表循环次数<br><code>enableRate</code> 代表是否启用倍速调节 0.5x 1.0x 2.0x 等倍速 1.0代表正常速度</p>
<p>这里说一下<code>[audioPlayer prepareToPlay]</code><br><strong>调用这个函数是为了取得需要的音频硬件并预加载<code>Audio Queue</code>的缓冲区.</strong> 当然也可以不调用这个方法直接调用 <code>[audioPlayer play]</code>，但当  <strong>调用<code>play</code>方法时也会隐性激活</strong>,调用<code>prepareToPlay</code>是为了减少 创建播放器时预设加载和听到声音输出之间的延时 </p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">instancetype</span>)initWithNibName:(<span class="built_in">NSString</span> *)nibNameOrNil bundle:(<span class="built_in">NSBundle</span> *)nibBundleOrNil &#123;</div><div class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> initWithNibName:nibNameOrNil bundle:nibBundleOrNil];</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">self</span>.musicPlayer == <span class="literal">nil</span>) &#123;</div><div class="line">            <span class="keyword">self</span>.musicPlayer = [<span class="keyword">self</span> createPlayForFile:<span class="string">@"384551_1438267683"</span> withExtension:<span class="string">@"mp3"</span>];</div><div class="line">        &#125;</div><div class="line">        [<span class="keyword">self</span> setupNotifications];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)awakeFromNib&#123;</div><div class="line">    [<span class="keyword">super</span> awakeFromNib];</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.musicPlayer == <span class="literal">nil</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.musicPlayer = [<span class="keyword">self</span> createPlayForFile:<span class="string">@"384551_1438267683"</span> withExtension:<span class="string">@"mp3"</span>];</div><div class="line">    &#125;</div><div class="line">    [<span class="keyword">self</span> setupNotifications];</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>在<code>initWithNibName</code>或<code>awakeFromNib</code>时候调用一下创建播放器的代码<br>这个<code>[self setupNotifications];</code>后面说  </p>
</blockquote>
<p>先添加一些常见的方法封装 比如 <strong>播放、暂停、停止</strong><br><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"></div><div class="line">- (<span class="keyword">void</span>)play &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.musicPlayer == <span class="literal">nil</span>) &#123; <span class="keyword">return</span>; &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (!<span class="keyword">self</span>.playing) &#123;</div><div class="line">        <span class="built_in">NSTimeInterval</span> delayTime = [<span class="keyword">self</span>.musicPlayer deviceCurrentTime] + <span class="number">0.01</span>;</div><div class="line">        [<span class="keyword">self</span>.musicPlayer playAtTime:delayTime];</div><div class="line">        <span class="keyword">self</span>.playing = <span class="literal">YES</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">self</span>.trackDescrption.text = [<span class="keyword">self</span>.musicPlayer.url absoluteString];</div><div class="line">    [<span class="keyword">self</span> configNowPlayingInfoCenter]; <span class="comment">//配置后台播放的页面信息</span></div><div class="line">&#125;</div><div class="line">- (<span class="keyword">void</span>)stop &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.musicPlayer == <span class="literal">nil</span>) &#123; <span class="keyword">return</span>; &#125;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.playing) &#123;</div><div class="line">        [<span class="keyword">self</span>.musicPlayer stop];</div><div class="line">        <span class="keyword">self</span>.musicPlayer.currentTime = <span class="number">0.0</span>f;</div><div class="line">        <span class="keyword">self</span>.playing = <span class="literal">NO</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)pause &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.musicPlayer == <span class="literal">nil</span>) &#123; <span class="keyword">return</span>; &#125;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.playing) &#123;</div><div class="line">        [<span class="keyword">self</span>.musicPlayer pause];</div><div class="line">        <span class="keyword">self</span>.playing = <span class="literal">NO</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里看到<code>[self.musicPlayer deviceCurrentTime] + 0.01</code> 加了 -0.01的延时, 是为了以后大家做播放器的时候 有可能暂停或者歌曲切换时 有可能 向前向后做片段衔接, 也是为了使用 <code>playAtTime</code>去播放 指定位置的音乐用于 意外暂停或者播放上次播放的配置信息使用 这里看到我写了一个<br><code>[self configNowPlayingInfoCenter];</code>配置后台播放的页面信息<br>这个主要用于播放音乐在后台时 锁屏显示的屏幕信息  请看下面代码</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//设置锁屏状态，显示的歌曲信息</span></div><div class="line">-(<span class="keyword">void</span>)configNowPlayingInfoCenter&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">NSClassFromString</span>(<span class="string">@"MPNowPlayingInfoCenter"</span>)) &#123;</div><div class="line">        <span class="built_in">NSMutableDictionary</span> *dict = [[<span class="built_in">NSMutableDictionary</span> alloc] init];</div><div class="line">        </div><div class="line">        <span class="comment">//歌曲名称</span></div><div class="line">        [dict setObject:<span class="string">@"歌曲名称"</span> forKey:<span class="built_in">MPMediaItemPropertyTitle</span>];</div><div class="line">        </div><div class="line">        <span class="comment">//演唱者</span></div><div class="line">        [dict setObject:<span class="string">@"演唱者"</span> forKey:<span class="built_in">MPMediaItemPropertyArtist</span>];</div><div class="line">        </div><div class="line">        <span class="comment">//专辑名</span></div><div class="line">        [dict setObject:<span class="string">@"专辑名"</span> forKey:<span class="built_in">MPMediaItemPropertyAlbumTitle</span>];</div><div class="line">        </div><div class="line">        <span class="comment">//专辑缩略图</span></div><div class="line">        <span class="built_in">UIImage</span> *image = [<span class="built_in">UIImage</span> imageNamed:<span class="string">@"sunyazhou"</span>];</div><div class="line">        <span class="built_in">MPMediaItemArtwork</span> *artwork = [[<span class="built_in">MPMediaItemArtwork</span> alloc] initWithImage:image];</div><div class="line">        [dict setObject:artwork forKey:<span class="built_in">MPMediaItemPropertyArtwork</span>];</div><div class="line">        </div><div class="line">        <span class="comment">//音乐剩余时长</span></div><div class="line">        [dict setObject:@<span class="number">20</span> forKey:<span class="built_in">MPMediaItemPropertyPlaybackDuration</span>];</div><div class="line">        </div><div class="line">        <span class="comment">//音乐当前播放时间 在计时器中修改</span></div><div class="line">       <span class="comment">// [dict setObject:[NSNumber numberWithDouble:100.0] forKey:MPNowPlayingInfoPropertyElapsedPlaybackTime];</span></div><div class="line">        </div><div class="line">        <span class="comment">//设置锁屏状态下屏幕显示播放音乐信息</span></div><div class="line">        [[<span class="built_in">MPNowPlayingInfoCenter</span> defaultCenter] setNowPlayingInfo:dict];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果需要在计时器中不断刷新锁屏状态下的播放进度条请写如下代码</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//计时器修改进度</span></div><div class="line">- (<span class="keyword">void</span>)changeProgress:(<span class="built_in">NSTimer</span> *)sender&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">self</span>.player)&#123;</div><div class="line">        <span class="comment">//当前播放时间</span></div><div class="line">        <span class="built_in">NSMutableDictionary</span> *dict = [<span class="built_in">NSMutableDictionary</span> dictionaryWithDictionary:[[<span class="built_in">MPNowPlayingInfoCenter</span> defaultCenter] nowPlayingInfo]];</div><div class="line">        [dict setObject:[<span class="built_in">NSNumber</span> numberWithDouble:<span class="keyword">self</span>.player.currentTime] forKey:<span class="built_in">MPNowPlayingInfoPropertyElapsedPlaybackTime</span>]; <span class="comment">//音乐当前已经过时间</span></div><div class="line">        [[<span class="built_in">MPNowPlayingInfoCenter</span> defaultCenter] setNowPlayingInfo:dict];</div><div class="line"> </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>参考<a href="http://www.iliunian.com/2831.html" target="_blank" rel="external">IOS后台运行 之 后台播放音乐</a> </p>
</blockquote>
<p>下面我们来介绍一下<br><code>[self setupNotifications];</code>注册监听 音频意外中断和耳机拔出时要暂停音乐播放<br>实现代码如下</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> 播放的通知处理</div><div class="line"> */</div><div class="line">- (<span class="keyword">void</span>)setupNotifications &#123;</div><div class="line">    <span class="built_in">NSNotificationCenter</span> *nsnc = [<span class="built_in">NSNotificationCenter</span> defaultCenter];</div><div class="line">    </div><div class="line">    <span class="comment">//添加意外中断音频播放的通知</span></div><div class="line">    [nsnc addObserver:<span class="keyword">self</span></div><div class="line">             selector:<span class="keyword">@selector</span>(handleInterruption:)</div><div class="line">                 name:<span class="built_in">AVAudioSessionInterruptionNotification</span></div><div class="line">               object:[<span class="built_in">AVAudioSession</span> sharedInstance]];</div><div class="line">    </div><div class="line">    <span class="comment">//添加线路变化通知</span></div><div class="line">    [nsnc addObserver:<span class="keyword">self</span></div><div class="line">             selector:<span class="keyword">@selector</span>(hanldeRouteChange:)</div><div class="line">                 name:<span class="built_in">AVAudioSessionRouteChangeNotification</span></div><div class="line">               object:[<span class="built_in">AVAudioSession</span> sharedInstance]];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><em>注：记得在delloc里面<code>[[NSNotificationCenter defaultCenter] removeObserver:self]</code></em></p>
<p>意外中断音频发生的场景 例如 听歌过程中来电话或者 按住home键使用siri </p>
<p>下面是具体方法实现</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> 音频意外打断处理</div><div class="line"></div><div class="line"> @param notification 通知信息</div><div class="line"> */</div><div class="line">- (<span class="keyword">void</span>)handleInterruption:(<span class="built_in">NSNotification</span> *)notification &#123;</div><div class="line">    <span class="built_in">NSDictionary</span> *info = notification.userInfo;</div><div class="line">    <span class="built_in">AVAudioSessionInterruptionType</span> type = [info[<span class="built_in">AVAudioSessionInterruptionTypeKey</span>] unsignedIntegerValue];</div><div class="line">    <span class="keyword">if</span> (type == <span class="built_in">AVAudioSessionInterruptionTypeBegan</span>) &#123;</div><div class="line">        <span class="comment">//Handle AVAudioSessionInterruptionTypeBegan</span></div><div class="line">        [<span class="keyword">self</span> pause];</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">//Handle AVAudioSessionInterruptionTypeEnded</span></div><div class="line">        <span class="built_in">AVAudioSessionInterruptionOptions</span> options = [info[<span class="built_in">AVAudioSessionInterruptionTypeKey</span>] unsignedIntegerValue];</div><div class="line">        <span class="built_in">NSError</span> *error = <span class="literal">nil</span>;</div><div class="line">        <span class="comment">//激活音频会话 允许外接音响</span></div><div class="line">        [[<span class="built_in">AVAudioSession</span> sharedInstance] setCategory:<span class="built_in">AVAudioSessionCategoryPlayback</span></div><div class="line">                                         withOptions:<span class="built_in">AVAudioSessionCategoryOptionAllowBluetooth</span> error:<span class="literal">nil</span>];</div><div class="line">        [[<span class="built_in">AVAudioSession</span> sharedInstance] setActive:<span class="literal">YES</span> withOptions:<span class="built_in">AVAudioSessionSetActiveOptionNotifyOthersOnDeactivation</span> error:&amp;error];</div><div class="line">        <span class="keyword">if</span> (options == <span class="built_in">AVAudioSessionInterruptionOptionShouldResume</span>) &#123;</div><div class="line">            [<span class="keyword">self</span> play];</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            [<span class="keyword">self</span> play];</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        </div><div class="line">        <span class="keyword">self</span>.playButton.selected = <span class="literal">YES</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (error) &#123;</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"AVAudioSessionInterruptionOptionShouldResume失败:%@"</span>,[error localizedDescription]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>先说<code>handleInterruption</code>意外情况下中断比如我按住home键使用siri<br>我会收到意外打断的通知当 type == <code>AVAudioSessionInterruptionTypeBegan</code>时 我们停止音乐播放或者暂停.<br>当type != <code>AVAudioSessionInterruptionTypeBegan</code>的时候一定是<code>AVAudioSessionInterruptionTypeEnded</code>这个时候<code>notification.userInfo</code>里面包含一个<code>AVAudioSessionInterruptionOptions</code>值来表明音频会话是否已经重新激活以及是否可以再次播放</p>
<p><strong><em>注:这个地方遇到个坑</em></strong> 当意外中断时候有时音频会话会很不灵敏 后来发现这种情况下需要重新激活会话 如下代码:</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">[[<span class="built_in">AVAudioSession</span> sharedInstance] setActive:<span class="literal">YES</span> withOptions:<span class="built_in">AVAudioSessionSetActiveOptionNotifyOthersOnDeactivation</span> error:&amp;error];</div></pre></td></tr></table></figure>
<p>这里<code>AVAudioSessionSetActiveOptionNotifyOthersOnDeactivation</code>是为了通知其它应用会话被我激活了 很多播放器开发者很不讲究 每次从来不用这个方法导致每次别人播放完音频 自己都收不到音频重新播放的信息 建议大家以和为贵, 写良心代码.</p>
<p>因为我外接的小米蓝牙音响发现还是不好使 最后又补上了<code>AVAudioSessionCategoryOptionAllowBluetooth</code>这个  </p>
<p><strong>激活音频会话 允许外接音响</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">[[<span class="built_in">AVAudioSession</span> sharedInstance] setCategory:<span class="built_in">AVAudioSessionCategoryPlayback</span> withOptions:<span class="built_in">AVAudioSessionCategoryOptionAllowBluetooth</span> error:<span class="literal">nil</span>];</div></pre></td></tr></table></figure>
<p>就好使了</p>
<p>下面说一下耳机插拔或者USB麦克风断开 Apple有个什么<code>Human Interface Guidelines(HIG)</code>相关定义 意思是说当硬件耳机拔出时建议 暂停播放音乐或者麦克风断开时。就是处于静音状态。是为了保密播放内容不被外界听到,不管苹果啥规定 我们都得照办 否则就得被拒。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)hanldeRouteChange:(<span class="built_in">NSNotification</span> *)notification &#123;</div><div class="line">    <span class="built_in">NSDictionary</span> *info = notification.userInfo;</div><div class="line">    <span class="built_in">AVAudioSessionRouteChangeReason</span> reason = [info[<span class="built_in">AVAudioSessionRouteChangeReasonKey</span>] unsignedIntegerValue];</div><div class="line">    <span class="comment">//老设备不可用</span></div><div class="line">    <span class="keyword">if</span> (reason == <span class="built_in">AVAudioSessionRouteChangeReasonOldDeviceUnavailable</span>) &#123;</div><div class="line">        <span class="built_in">AVAudioSessionRouteDescription</span> *previousRoute = info[<span class="built_in">AVAudioSessionRouteChangePreviousRouteKey</span>];</div><div class="line">        <span class="built_in">AVAudioSessionPortDescription</span> *previousOutput = previousRoute.outputs[<span class="number">0</span>];</div><div class="line">        <span class="built_in">NSString</span> *portType = previousOutput.portType;</div><div class="line">        <span class="keyword">if</span> ([portType isEqualToString:<span class="built_in">AVAudioSessionPortHeadphones</span>]) &#123;</div><div class="line">            [<span class="keyword">self</span> stop];</div><div class="line">            <span class="keyword">self</span>.playButton.selected = <span class="literal">NO</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这需要用<code>AVAudioSessionRouteChangeReasonKey</code>取出线路切换的原因<code>AVAudioSessionRouteChangeReason</code> 原因有这么多</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSUInteger</span>, <span class="built_in">AVAudioSessionRouteChangeReason</span>)</div><div class="line">&#123;</div><div class="line">	<span class="built_in">AVAudioSessionRouteChangeReasonUnknown</span> = <span class="number">0</span>,</div><div class="line">	<span class="built_in">AVAudioSessionRouteChangeReasonNewDeviceAvailable</span> = <span class="number">1</span>,</div><div class="line">	<span class="built_in">AVAudioSessionRouteChangeReasonOldDeviceUnavailable</span> = <span class="number">2</span>,</div><div class="line">	<span class="built_in">AVAudioSessionRouteChangeReasonCategoryChange</span> = <span class="number">3</span>,</div><div class="line">	<span class="built_in">AVAudioSessionRouteChangeReasonOverride</span> = <span class="number">4</span>,</div><div class="line">	<span class="built_in">AVAudioSessionRouteChangeReasonWakeFromSleep</span> = <span class="number">6</span>,</div><div class="line">	<span class="built_in">AVAudioSessionRouteChangeReasonNoSuitableRouteForCategory</span> = <span class="number">7</span>,</div><div class="line">	<span class="built_in">AVAudioSessionRouteChangeReasonRouteConfigurationChange</span> <span class="built_in">NS_ENUM_AVAILABLE_IOS</span>(<span class="number">7</span>_0) = <span class="number">8</span></div><div class="line">&#125; <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">6</span>_0);</div></pre></td></tr></table></figure>
<p>我们需要这个<code>AVAudioSessionRouteChangeReasonOldDeviceUnavailable</code> 判断是否是旧设备<br>通过<code>AVAudioSessionRouteChangePreviousRouteKey</code>拿出</p>
<p><code>AVAudioSessionRouteDescription</code>描述信息<br><code>previousRoute</code> 在通过<br><code>previousRoute.outputs[0]</code>拿出<code>AVAudioSessionPortDescription</code></p>
<p>拿出<code>NSString *portType = previousOutput.portType</code></p>
<p>如果<code>[portType isEqualToString:AVAudioSessionPortHeadphones]</code></p>
<p>如果是耳机<code>AVAudioSessionPortHeadphones</code>则暂停播放</p>
<p>以上就是中断和线路切换的一些代码逻辑</p>
<p>下面我介绍一些好玩的</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/Learning%20AV%20Foundation2AVAudioPlayer/IMG_2090.PNG" alt=""></p>
<p>前面说的一些后台设置信息显示的内容就是上图所示 在锁屏的时候显示</p>
<p>但是大家一定很奇怪的是怎么实现接收 <strong>锁屏状态下 点击 上一曲 暂停/播放 下一曲等操作</strong></p>
<p>需要在AppDelegate里面写上</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class="built_in">NSDictionary</span> *)launchOptions &#123;</div><div class="line">    </div><div class="line">    <span class="built_in">AVAudioSession</span> *session = [<span class="built_in">AVAudioSession</span> sharedInstance];</div><div class="line">    <span class="built_in">NSError</span> *error;</div><div class="line">    <span class="keyword">if</span> (![session setCategory:<span class="built_in">AVAudioSessionCategoryPlayback</span> error:&amp;error]) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"Category Error: %@"</span>, [error localizedDescription]);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (![session setActive:<span class="literal">YES</span> error:&amp;error]) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"Activation Error: %@"</span>, [error localizedDescription]);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    [[<span class="built_in">UIApplication</span> sharedApplication] beginReceivingRemoteControlEvents];</div><div class="line">    [<span class="keyword">self</span> becomeFirstResponder];</div><div class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这<code>[[UIApplication sharedApplication] beginReceivingRemoteControlEvents];</code><br>行代码 以及调用自己为 <code>[self becomeFirstResponder];</code>第一响应者 这样写是为了应用响应音频播放 后台切换或者中断的时候更灵敏.</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="built_in">BOOL</span>)canBecomeFirstResponder &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后 写上如下代码 处理<strong>锁屏状态下 点击 上一曲 暂停/播放 下一曲等操作</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)remoteControlReceivedWithEvent:(<span class="built_in">UIEvent</span> *)event &#123;</div><div class="line">    <span class="keyword">if</span> (event.type == <span class="built_in">UIEventTypeRemoteControl</span>) &#123;</div><div class="line">        <span class="keyword">switch</span> (event.subtype) &#123;</div><div class="line">            <span class="keyword">case</span> <span class="built_in">UIEventSubtypeRemoteControlPlay</span>:</div><div class="line">                <span class="built_in">NSLog</span>(<span class="string">@"暂停播放"</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="built_in">UIEventSubtypeRemoteControlPause</span>:</div><div class="line">                </div><div class="line">                <span class="built_in">NSLog</span>(<span class="string">@"继续播放"</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="built_in">UIEventSubtypeRemoteControlNextTrack</span>:</div><div class="line">                <span class="built_in">NSLog</span>(<span class="string">@"下一曲"</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="built_in">UIEventSubtypeRemoteControlPreviousTrack</span>:</div><div class="line">                <span class="built_in">NSLog</span>(<span class="string">@"上一曲"</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>剩余逻辑大家自己填充吧我就不介绍了. </p>
<p>好了AVAudioPlayer就到这吧！有啥疑问大家可以评论留言都能看到或者指正我的错误。我会及时改正.</p>
<p>全文完</p>
<p><strong>文章的最终<a href="https://github.com/sunyazhou13/AVAudioPlayerDemo" target="_blank" rel="external">demo</a></strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/Learning%20AV%20Foundation2AVAudioPlayer/stoc
    
    </summary>
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="https://www.sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="macOS开发" scheme="https://www.sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="Learning AV Foundation" scheme="https://www.sunyazhou.com/tags/Learning-AV-Foundation/"/>
    
  </entry>
  
</feed>
