<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>東引甌越</title>
  <subtitle>不断学习, 与时俱进.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://sunyazhou.com/"/>
  <updated>2017-03-29T23:56:19.000Z</updated>
  <id>http://sunyazhou.com/</id>
  
  <author>
    <name>sunyazhou</name>
    <email>sunyazhou13@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Learning AV Foundation(三)AVAudioRecorder</title>
    <link href="http://sunyazhou.com/2017/03/28/Learning-AV-Foundation-AVAudioRecorder/"/>
    <id>http://sunyazhou.com/2017/03/28/Learning-AV-Foundation-AVAudioRecorder/</id>
    <published>2017-03-28T01:40:18.000Z</published>
    <updated>2017-03-29T23:56:19.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/Learning-AV-Foundation-AVAudioRecorder/stock-photo-200814137.jpg" alt=""></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在<code>AV Foundation</code>中使用<code>AVAudioRecorder</code>类添加音频录制功能和使用<code>AVAudioPlayer</code>一样简单, 都是在<code>Audio Queue Server</code>上层构建的.同时支持<code>macOS</code>和<code>iOS</code>平台.可以从内置麦克风录制音频,也可以支持数字音频接口或USB外接麦克风录制.</p>
<h2 id="主要内容如下"><a href="#主要内容如下" class="headerlink" title="主要内容如下:"></a>主要内容如下:</h2><pre><code>如何创建AVAudioRecorder  
    1. 音频格式
    2. 采样率
    3. 通道数
创建Demo
    1. 配置音频会话
    2. 实现录音功能
    3. 使用Audio Metering实现声波视觉显示
</code></pre><p>创建<code>AVAudioRecorder</code>之前先了解一下它的方法和成员变量</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>, <span class="keyword">getter</span>=isRecording) <span class="built_in">BOOL</span> recording;<span class="comment">//是否正在录音</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>) <span class="built_in">NSDictionary</span>&lt;<span class="built_in">NSString</span> *, <span class="keyword">id</span>&gt; *settings;<span class="comment">//录音配置：采样率、音频格式、通道数...</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>) <span class="built_in">NSURL</span> *url;<span class="comment">//录音文件存放URL</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>) <span class="built_in">NSTimeInterval</span> currentTime;<span class="comment">//录音时长</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">getter</span>=isMeteringEnabled) <span class="built_in">BOOL</span> meteringEnabled;<span class="comment">//是否监控声波</span></div></pre></td></tr></table></figure>
<p><code>AVAudioRecorder</code>的实例方法:</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="built_in">BOOL</span>)prepareToRecord;<span class="comment">//为录音准备缓冲区</span></div><div class="line">- (<span class="built_in">BOOL</span>)record;<span class="comment">//录音开始，暂停后调用会恢复录音</span></div><div class="line">- (<span class="built_in">BOOL</span>)recordAtTime:(<span class="built_in">NSTimeInterval</span>)time;<span class="comment">//在指定时间后开始录音</span></div><div class="line">- (<span class="built_in">BOOL</span>)recordForDuration:(<span class="built_in">NSTimeInterval</span>) duration;<span class="comment">//按指定时长录音</span></div><div class="line">- (<span class="built_in">BOOL</span>)recordAtTime:(<span class="built_in">NSTimeInterval</span>)time </div><div class="line">         forDuration:(<span class="built_in">NSTimeInterval</span>)duration;<span class="comment">//上面2个的合体</span></div><div class="line">- (<span class="keyword">void</span>)pause; <span class="comment">//暂停录音</span></div><div class="line">- (<span class="keyword">void</span>)stop; <span class="comment">//停止录音</span></div><div class="line">- (<span class="built_in">BOOL</span>)deleteRecording;<span class="comment">//删除录音，必须先停止录音再删除</span></div></pre></td></tr></table></figure>
<p><code>AVAudioRecorder</code>的代理方法:</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//录音完成后调用</span></div><div class="line">- (<span class="keyword">void</span>)audioRecorderDidFinishRecording:(<span class="built_in">AVAudioRecorder</span> *)recorder </div><div class="line">                           successfully:(<span class="built_in">BOOL</span>)flag;</div><div class="line"><span class="comment">//录音编码发生错误时调用</span></div><div class="line">- (<span class="keyword">void</span>)audioRecorderEncodeErrorDidOccur:(<span class="built_in">AVAudioRecorder</span> *)recorder </div><div class="line">                                   error:(<span class="built_in">NSError</span> *)error;</div></pre></td></tr></table></figure>
<h2 id="如何创建AVAudioRecorder"><a href="#如何创建AVAudioRecorder" class="headerlink" title="如何创建AVAudioRecorder"></a>如何创建<code>AVAudioRecorder</code></h2><p>创建<code>AVAudioRecorder</code>对象所需要的参数如下:  </p>
<ul>
<li>音频流录制时写入到本地的路径URL</li>
<li><code>settings</code>录音配置：采样率、音频格式、通道数…等键值参数字典</li>
<li>发生错误的<code>NSError</code>指针</li>
</ul>
<p>如下代码:</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> 创建录音器</div><div class="line"> */</div><div class="line">- (<span class="keyword">void</span>)createRecorder &#123;</div><div class="line">    <span class="built_in">NSString</span> *directory = <span class="built_in">NSTemporaryDirectory</span>();</div><div class="line">    <span class="built_in">NSString</span> *filePath = [directory stringByAppendingPathComponent:<span class="string">@"voice1.m4a"</span>];</div><div class="line">    <span class="built_in">NSURL</span> *url = [<span class="built_in">NSURL</span> fileURLWithPath:filePath];</div><div class="line">    </div><div class="line">    <span class="built_in">NSDictionary</span> *setting = @&#123;<span class="built_in">AVFormatIDKey</span> : @(kAudioFormatMPEG4AAC),</div><div class="line">                              <span class="built_in">AVSampleRateKey</span>: @<span class="number">22050.0</span>f,</div><div class="line">                              <span class="built_in">AVNumberOfChannelsKey</span>: @<span class="number">1</span>&#125;;</div><div class="line">    <span class="built_in">NSError</span> *error;</div><div class="line">    <span class="keyword">self</span>.recorder = [[<span class="built_in">AVAudioRecorder</span> alloc] initWithURL:url</div><div class="line">                                                settings:setting</div><div class="line">                                                   error:&amp;error];</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.recorder) &#123;</div><div class="line">        [<span class="keyword">self</span>.recorder prepareToRecord];</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"Recorder Create Error: %@"</span>, [error localizedDescription]);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里的建议调用<code>[self.recorder prepareToRecord]</code>方法对录音实例进行预设就像<a href="http://sunyazhou.com/2017/03/17/Learning-AV-Foundation-AVAudioPlayer/">上一章</a>创建<code>AVAudioPlayer</code>类似.都是为了执行底层<code>Audio Queue</code>初始化的必要过程.这个<code>prepareToRecord</code>方法还在给定的URL参数指定的位置创建一个文件，这样就减少了录制启动时的延时</p>
<h2 id="音频格式"><a href="#音频格式" class="headerlink" title="音频格式"></a>音频格式</h2><p><code>AVFormatIDKey</code>key指定录制格式,这里的除了<code>kAudioFormatMPEG4AAC</code>格式还有下面这些:</p>
<figure class="highlight"><table><tr><td class="code"><pre><div class="line">CF_ENUM(AudioFormatID)</div><div class="line">&#123;</div><div class="line">    kAudioFormatLinearPCM               = 'lpcm',</div><div class="line">    kAudioFormatAC3                     = 'ac-3',</div><div class="line">    kAudioFormat60958AC3                = 'cac3',</div><div class="line">    kAudioFormatAppleIMA4               = 'ima4',</div><div class="line">    kAudioFormatMPEG4AAC                = 'aac ',</div><div class="line">    kAudioFormatMPEG4CELP               = 'celp',</div><div class="line">    kAudioFormatMPEG4HVXC               = 'hvxc',</div><div class="line">    kAudioFormatMPEG4TwinVQ             = 'twvq',</div><div class="line">    kAudioFormatMACE3                   = 'MAC3',</div><div class="line">    kAudioFormatMACE6                   = 'MAC6',</div><div class="line">    kAudioFormatULaw                    = 'ulaw',</div><div class="line">    kAudioFormatALaw                    = 'alaw',</div><div class="line">    kAudioFormatQDesign                 = 'QDMC',</div><div class="line">    kAudioFormatQDesign2                = 'QDM2',</div><div class="line">    kAudioFormatQUALCOMM                = 'Qclp',</div><div class="line">    kAudioFormatMPEGLayer1              = '.mp1',</div><div class="line">    kAudioFormatMPEGLayer2              = '.mp2',</div><div class="line">    kAudioFormatMPEGLayer3              = '.mp3',</div><div class="line">    kAudioFormatTimeCode                = 'time',</div><div class="line">    kAudioFormatMIDIStream              = 'midi',</div><div class="line">    kAudioFormatParameterValueStream    = 'apvs',</div><div class="line">    kAudioFormatAppleLossless           = 'alac',</div><div class="line">    kAudioFormatMPEG4AAC_HE             = 'aach',</div><div class="line">    kAudioFormatMPEG4AAC_LD             = 'aacl',</div><div class="line">    kAudioFormatMPEG4AAC_ELD            = 'aace',</div><div class="line">    kAudioFormatMPEG4AAC_ELD_SBR        = 'aacf',</div><div class="line">    kAudioFormatMPEG4AAC_ELD_V2         = 'aacg',    </div><div class="line">    kAudioFormatMPEG4AAC_HE_V2          = 'aacp',</div><div class="line">    kAudioFormatMPEG4AAC_Spatial        = 'aacs',</div><div class="line">    kAudioFormatAMR                     = 'samr',</div><div class="line">    kAudioFormatAMR_WB                  = 'sawb',</div><div class="line">    kAudioFormatAudible                 = 'AUDB',</div><div class="line">    kAudioFormatiLBC                    = 'ilbc',</div><div class="line">    kAudioFormatDVIIntelIMA             = 0x6D730011,</div><div class="line">    kAudioFormatMicrosoftGSM            = 0x6D730031,</div><div class="line">    kAudioFormatAES3                    = 'aes3',</div><div class="line">    kAudioFormatEnhancedAC3             = 'ec-3'</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>这里的<code>kAudioFormatLinearPCM</code>会将为压缩的音频流写入到文件中,这就是原始数据,保真度最高,当然文件也最大, 选择ACC<code>kAudioFormatMPEG4AAC</code>或者AppleIMA4<code>kAudioFormatAppleLossless</code>等格式会显著缩小文件，还能保证音频质量.</p>
<blockquote>
<p><em>注意:</em><br><em>指定的音频格式一定要和文件写入的URL文件类型保持一致。如果录制xxx.wav文件格式 是 Waveform Audio File Format(WAVE)的格式要求,即 低字节序、 LinePCM。 如果<code>AVFormatIDKey</code>指定的值不是<code>kAudioFormatLinearPCM</code>则会发生错误。NSError 会返回如下错误</em><br><em>The operation couldn’t be completed. (OSState error 1718449215.)</em></p>
</blockquote>
<h2 id="采样率"><a href="#采样率" class="headerlink" title="采样率"></a>采样率</h2><p>上边的代码里<code>AVSampleRateKey</code>用于定义录音器的采样率. <strong>采样率定义了对输入的模拟音频信号每一秒内的采样数</strong>. 如果使用<strong>低采样率</strong> 比如8kHz,会导致粗粒度、AM广播类型的录制效果, 不过文件会比较小; 使用<strong>44.1kHz的采样率(CD质量的采样率)</strong>会得到非常高质量的内容, 不过文件比较大. 至于使用什么样的采样率没有明确的定义. 不过开发者应该尽量使用<strong>标准的采样率，比如: 8000Hz、16 000Hz(16kHz)、22050Hz(22.05kHz)或 44100Hz(44.1kHz)、当然还有48000Hz和96000Hz</strong> ,(kHz代表千赫),超过48000或96000的采样对人耳已经没有意义.最终是我们的耳朵在进行判断.（<a href="http://sunyazhou.com/2017/03/17/Learning-AV-Foundation-AVAudioPlayer/">上一章</a>说了 <strong>人耳所能听到的声音，最低的频率是从20Hz起一直到最高频率20kHz</strong>,录音最好采用 x 2 倍的频率）</p>
<h2 id="通道数"><a href="#通道数" class="headerlink" title="通道数"></a>通道数</h2><p><code>AVNumberOfChannelsKey</code>用于定义记录音频内容的通道数。<strong>指定默认值1 意味着使用单声道录制</strong>、<strong>设置2意味着使用立体声录制</strong>。除非使用外部硬件进行录制，否则同窗应该创建单声道录音。 这里的通道数是指 录制设备的输入数量 可以理解为 麦克风 内置 或者外接麦克风录制比如 插入Apple耳机 里面的麦克风。</p>
<blockquote>
<p>以上是全面<code>AVAudioRecorder</code>的部分概念,<code>AVAudioRecorder</code>支持<strong>无限时长录制</strong>,还可以设置从<strong>未来某一时间点开始录制</strong>或<strong>指定时长录制</strong></p>
</blockquote>
<h1 id="下面我们来写个demo-完成上述功能"><a href="#下面我们来写个demo-完成上述功能" class="headerlink" title="下面我们来写个demo 完成上述功能"></a>下面我们来写个demo 完成上述功能</h1><h2 id="配置会话"><a href="#配置会话" class="headerlink" title="配置会话"></a>配置会话</h2><p>首先创建以一个AVAudioRecorderDemo工程iOS平台这些相信大家非常熟练了.</p>
<p>在<code>AppDelegate</code>里面导入<code>#import &lt;AVFoundation/AVFoundation.h&gt;</code><br>写上设置如下代码</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class="built_in">NSDictionary</span> *)launchOptions &#123;</div><div class="line">    </div><div class="line">    <span class="built_in">AVAudioSession</span> *session = [<span class="built_in">AVAudioSession</span> sharedInstance];</div><div class="line">    <span class="built_in">NSError</span> *error;</div><div class="line">    <span class="keyword">if</span> (![session setCategory:<span class="built_in">AVAudioSessionCategoryPlayAndRecord</span> error:&amp;error]) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"Category Error: %@"</span>,[error localizedDescription]);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//激活会话</span></div><div class="line">    <span class="keyword">if</span> (![session setActive:<span class="literal">YES</span> error:&amp;error]) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"Activation Error: %@"</span>,[error localizedDescription]);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这<code>AVAudioSessionCategoryPlayAndRecord</code>是<a href="http://sunyazhou.com/2017/03/17/Learning-AV-Foundation-AVAudioPlayer/">上一章</a>说的那几种Category,我们需要<strong>录音+播放</strong>功能</p>
<p>下一步 配置 plist文件访问权限信息 可以参考<a href="http://localhost:4000/2017/03/20/Access-privacy-sensitive-data-private-access-permission/" target="_blank" rel="external">Access privacy-sensitive data</a>这篇文章把访问权限需要的 信息填充上.</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/Learning-AV-Foundation-AVAudioRecorder/Snip20170329_2.png" alt="plist1"></p>
<p>然后选择SourceCode<br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/Learning-AV-Foundation-AVAudioRecorder/Snip20170329_5.png" alt="plist2"></p>
<p>填写上</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 🎤 Microphone --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>NSMicrophoneUsageDescription<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>$(PRODUCT_NAME) microphone use<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div></pre></td></tr></table></figure>
<p>上边这些是为了访问本地授权, 记得授权如果第一次被拒就必须让用户手动 到通用-设置里面去配置否则将永远不好使哈。如果不写这种本地授权 程序应该会 crash   </p>
<h2 id="录音代码实现"><a href="#录音代码实现" class="headerlink" title="录音代码实现"></a>录音代码实现</h2><p>首先我们来封装一个类起名叫<code>BDRecoder</code>吧. 这里类我们让它负责所有 音频录制、暂停录制、保存录制文件等功能 并有回调函数等block.  <code>BDRecoder.h</code>看起来像下面这样, 这里后续完善的话可以加个代理 表示录制过程中意外中断或者线路切换等逻辑.</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  BDRecorder.h</span></div><div class="line"><span class="comment">//  AVAudioRecorderDemo</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by sunyazhou on 2017/3/29.</span></div><div class="line"><span class="comment">//  Copyright © 2017年 Baidu, Inc. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;AVFoundation/AVFoundation.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">//录音停止的回调</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">void</span> (^BDRecordingStopCompletionHanlder)(<span class="built_in">BOOL</span>);</div><div class="line"><span class="comment">//保存录音文件完成的回调</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">void</span> (^BDRecordingSaveCompletionHanlder)(<span class="built_in">BOOL</span>, <span class="keyword">id</span>);</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">BDRecorder</span> : <span class="title">NSObject</span></span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 外部获取当前录制的时间</div><div class="line"> * 小时:分钟:秒  当然后续可以加微秒和毫秒哈就是格式字符串 00:03:02 这样</div><div class="line"> */</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">NSString</span> *formattedCurrentTime;</div><div class="line"></div><div class="line">- (<span class="built_in">BOOL</span>)record; <span class="comment">//开始录音</span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)pause;  <span class="comment">//暂停录音</span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)stopWithCompletionHandler:(BDRecordingStopCompletionHanlder)handler;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)saveRecordingWithName:(<span class="built_in">NSString</span> *)name</div><div class="line">            completionHandler:(BDRecordingSaveCompletionHanlder)handler;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> 回放录制的文件</div><div class="line"> @param fileUrl 文件URL</div><div class="line"> @return 播放是否成功</div><div class="line"> */</div><div class="line">- (<span class="built_in">BOOL</span>)playbackURL:(<span class="built_in">NSURL</span> *)fileUrl;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p><code>BDRecoder.m</code></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  BDRecorder.m</span></div><div class="line"><span class="comment">//  AVAudioRecorderDemo</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by sunyazhou on 2017/3/29.</span></div><div class="line"><span class="comment">//  Copyright © 2017年 Baidu, Inc. All rights reserved.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">"BDRecorder.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">BDRecorder</span> () &lt;<span class="title">AVAudioRecorderDelegate</span>&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">AVAudioPlayer</span> *player;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">AVAudioRecorder</span> *recorder;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) BDRecordingStopCompletionHanlder completionHandler;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">BDRecorder</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">instancetype</span>)init &#123;</div><div class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</div><div class="line">        <span class="built_in">NSString</span> *temDir = <span class="built_in">NSTemporaryDirectory</span>();</div><div class="line">        <span class="built_in">NSString</span> *filePath = [temDir stringByAppendingPathComponent:<span class="string">@"test1.caf"</span>];</div><div class="line">        <span class="built_in">NSURL</span> *fileURL = [<span class="built_in">NSURL</span> fileURLWithPath:filePath];</div><div class="line">        </div><div class="line">        <span class="built_in">NSDictionary</span> *setting = @&#123;<span class="built_in">AVFormatIDKey</span>: @(kAudioFormatAppleIMA4),</div><div class="line">                                  <span class="built_in">AVSampleRateKey</span>: @<span class="number">44100.0</span>f,</div><div class="line">                                  <span class="built_in">AVNumberOfChannelsKey</span>: @<span class="number">1</span>,</div><div class="line">                                  <span class="built_in">AVEncoderBitDepthHintKey</span>: @<span class="number">16</span>,</div><div class="line">                                  <span class="built_in">AVEncoderAudioQualityKey</span>: @(<span class="built_in">AVAudioQualityMedium</span>)</div><div class="line">                                  &#125;;</div><div class="line">        <span class="built_in">NSError</span> *error;</div><div class="line">        <span class="keyword">self</span>.recorder = [[<span class="built_in">AVAudioRecorder</span> alloc] initWithURL:fileURL settings:setting error:&amp;error];</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">self</span>.recorder) &#123;</div><div class="line">            <span class="keyword">self</span>.recorder.delegate = <span class="keyword">self</span>;</div><div class="line">            [<span class="keyword">self</span>.recorder prepareToRecord];</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"Create Recorder Error: %@"</span>,[error localizedDescription]);</div><div class="line">        &#125; </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">BOOL</span>)record &#123;</div><div class="line">    <span class="keyword">return</span> [<span class="keyword">self</span>.recorder record];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)pause &#123;</div><div class="line">    [<span class="keyword">self</span>.recorder pause];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)stopWithCompletionHandler:(BDRecordingStopCompletionHanlder)handler &#123;</div><div class="line">    <span class="keyword">self</span>.completionHandler = handler;</div><div class="line">    [<span class="keyword">self</span>.recorder stop];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)saveRecordingWithName:(<span class="built_in">NSString</span> *)name</div><div class="line">            completionHandler:(BDRecordingSaveCompletionHanlder)handler &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)audioRecorderDidFinishRecording:(<span class="built_in">AVAudioRecorder</span> *)recorder</div><div class="line">                           successfully:(<span class="built_in">BOOL</span>)flag &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.completionHandler) &#123; <span class="keyword">self</span>.completionHandler(flag); &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>暂时到这 明天再继续</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/Learning-AV-Foundation-AVAudioRecorder/stock-
    
    </summary>
    
      <category term="iOS开发" scheme="http://sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="http://sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="macOS开发" scheme="http://sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>判断NSWindow是否全屏</title>
    <link href="http://sunyazhou.com/2017/03/23/check-NSWindow-isFullScreen/"/>
    <id>http://sunyazhou.com/2017/03/23/check-NSWindow-isFullScreen/</id>
    <published>2017-03-23T06:03:32.000Z</published>
    <updated>2017-03-29T23:56:19.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSWindow</span> (<span class="title">FullScreen</span>)</span></div><div class="line"></div><div class="line">- (<span class="built_in">BOOL</span>)mn_isFullScreen;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSWindow</span> (<span class="title">FullScreen</span>)</span></div><div class="line"></div><div class="line">- (<span class="built_in">BOOL</span>)mn_isFullScreen</div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> (([<span class="keyword">self</span> styleMask] &amp; <span class="built_in">NSFullScreenWindowMask</span>) == <span class="built_in">NSFullScreenWindowMask</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>refs:<a href="http://stackoverflow.com/questions/6815917/how-to-know-if-a-nswindow-is-fullscreen-in-mac-os-x-lion" target="_blank" rel="external">How to know if a NSWindow is fullscreen in Mac OS X Lion?</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span
    
    </summary>
    
      <category term="iOS开发" scheme="http://sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="http://sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="macOS开发" scheme="http://sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Access privacy-sensitive data 隐私及敏感数据访问权限</title>
    <link href="http://sunyazhou.com/2017/03/20/Access-privacy-sensitive-data-private-access-permission/"/>
    <id>http://sunyazhou.com/2017/03/20/Access-privacy-sensitive-data-private-access-permission/</id>
    <published>2017-03-20T02:54:40.000Z</published>
    <updated>2017-03-29T23:56:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>在你访问照相机、通讯录、等等隐私以及敏感数据之前，你必须请求授权。否则你的app会在你尝试访问这些隐私时崩溃。Xcode会log这些：</p>
<blockquote>
<p>This app has crashed because it attempted to access privacy-sensitive data without a usage description. The app’s Info.plist must contain an NSContactsUsageDescription key with a string value explaining to the user how the app uses this data.</p>
</blockquote>
<p>打开你工程中名叫 <code>info.plist</code> 的文件，右键点击选择 <code>opening as Source Code</code>，把下面的代码粘贴进去。或者你可以使用默认的 <code>Property List</code> 打开 <code>info.plist</code>，点击add按钮，当你输入 <code>Privacy</code> - Xcode会给你自动补全的建议，用上下键去选择吧。</p>
<p>私有数据的框架列表可是个不小的东西:  </p>
<blockquote>
<p>通讯录 日历 提醒 照片 蓝牙共享 耳机 相机 定位 健康 homeKit 多媒体库 运动 callKit 语音识别 SiriKit TV Provider</p>
</blockquote>
<p>参考 <a href="https://github.com/ChenYilong/iOS10AdaptationTips" target="_blank" rel="external">这个大神</a></p>
<figure class="highlight"><table><tr><td class="code"><pre><div class="line">&lt;!-- 🖼 Photo Library --&gt;</div><div class="line">&lt;key&gt;NSPhotoLibraryUsageDescription&lt;/key&gt;</div><div class="line">&lt;string&gt;$(PRODUCT_NAME) photo use&lt;/string&gt;</div><div class="line"></div><div class="line">&lt;!-- 📷 Camera --&gt;</div><div class="line">&lt;key&gt;NSCameraUsageDescription&lt;/key&gt;</div><div class="line">&lt;string&gt;$(PRODUCT_NAME) camera use&lt;/string&gt;</div><div class="line"></div><div class="line">&lt;!-- 🎤 Microphone --&gt;</div><div class="line">&lt;key&gt;NSMicrophoneUsageDescription&lt;/key&gt;</div><div class="line">&lt;string&gt;$(PRODUCT_NAME) microphone use&lt;/string&gt;</div><div class="line"></div><div class="line">&lt;!-- 📍 Location --&gt;</div><div class="line">&lt;key&gt;NSLocationUsageDescription&lt;/key&gt;</div><div class="line">&lt;string&gt;$(PRODUCT_NAME) location use&lt;/string&gt;</div><div class="line"></div><div class="line">&lt;!-- 📍 Location When In Use --&gt;</div><div class="line">&lt;key&gt;NSLocationWhenInUseUsageDescription&lt;/key&gt;</div><div class="line">&lt;string&gt;$(PRODUCT_NAME) location use&lt;/string&gt;</div><div class="line"></div><div class="line">&lt;!-- 📍 Location Always --&gt;</div><div class="line">&lt;key&gt;NSLocationAlwaysUsageDescription&lt;/key&gt;</div><div class="line">&lt;string&gt;$(PRODUCT_NAME) always uses location &lt;/string&gt;</div><div class="line"></div><div class="line">&lt;!-- 📆 Calendars --&gt;</div><div class="line">&lt;key&gt;NSCalendarsUsageDescription&lt;/key&gt;</div><div class="line">&lt;string&gt;$(PRODUCT_NAME) calendar events&lt;/string&gt;</div><div class="line"></div><div class="line">&lt;!-- ⏰ Reminders --&gt;</div><div class="line">&lt;key&gt;NSRemindersUsageDescription&lt;/key&gt;</div><div class="line">&lt;string&gt;$(PRODUCT_NAME) reminder use&lt;/string&gt;</div><div class="line"></div><div class="line">&lt;!-- 📒 Contacts --&gt;</div><div class="line">&lt;key&gt;NSContactsUsageDescription&lt;/key&gt;</div><div class="line">&lt;string&gt;$(PRODUCT_NAME) contact use&lt;/string&gt;</div><div class="line"></div><div class="line">&lt;!-- 🏊 Motion --&gt;</div><div class="line">&lt;key&gt;NSMotionUsageDescription&lt;/key&gt;</div><div class="line">&lt;string&gt;$(PRODUCT_NAME) motion use&lt;/string&gt;</div><div class="line"></div><div class="line">&lt;!-- 💊 Health Update --&gt;</div><div class="line">&lt;key&gt;NSHealthUpdateUsageDescription&lt;/key&gt;</div><div class="line">&lt;string&gt;$(PRODUCT_NAME) heath update use&lt;/string&gt;</div><div class="line"></div><div class="line">&lt;!-- 💊 Health Share --&gt;</div><div class="line">&lt;key&gt;NSHealthShareUsageDescription&lt;/key&gt;</div><div class="line">&lt;string&gt;$(PRODUCT_NAME) heath share use&lt;/string&gt;</div><div class="line"></div><div class="line">&lt;!-- ᛒ🔵 Bluetooth Peripheral --&gt;</div><div class="line">&lt;key&gt;NSBluetoothPeripheralUsageDescription&lt;/key&gt;</div><div class="line">&lt;string&gt;$(PRODUCT_NAME) Bluetooth Peripheral use&lt;/string&gt;</div><div class="line"></div><div class="line">&lt;!-- 🎵 Media Library --&gt;</div><div class="line">&lt;key&gt;NSAppleMusicUsageDescription&lt;/key&gt;</div><div class="line">&lt;string&gt;$(PRODUCT_NAME) media library use&lt;/string&gt;</div><div class="line"></div><div class="line">&lt;!-- 📱 Siri --&gt;</div><div class="line">&lt;key&gt;NSSiriUsageDescription&lt;/key&gt;</div><div class="line">&lt;string&gt;$(PRODUCT_NAME) siri use&lt;/string&gt;</div><div class="line"></div><div class="line">&lt;!-- 🏡 HomeKit --&gt;</div><div class="line">&lt;key&gt;NSHomeKitUsageDescription&lt;/key&gt;</div><div class="line">&lt;string&gt;$(PRODUCT_NAME) home kit use&lt;/string&gt;</div><div class="line"></div><div class="line">&lt;!-- 📻 SpeechRecognition --&gt;</div><div class="line">&lt;key&gt;NSSpeechRecognitionUsageDescription&lt;/key&gt;</div><div class="line">&lt;string&gt;$(PRODUCT_NAME) speech use&lt;/string&gt;</div><div class="line"></div><div class="line">&lt;!-- 📺 VideoSubscriber --&gt;</div><div class="line">&lt;key&gt;NSVideoSubscriberAccountUsageDescription&lt;/key&gt;</div><div class="line">&lt;string&gt;$(PRODUCT_NAME) tvProvider use&lt;/string&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在你访问照相机、通讯录、等等隐私以及敏感数据之前，你必须请求授权。否则你的app会在你尝试访问这些隐私时崩溃。Xcode会log这些：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This app has crashed because it attempted to acce
    
    </summary>
    
      <category term="iOS开发" scheme="http://sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="http://sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="macOS开发" scheme="http://sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Learning AV Foundation(二)AVAudioPlayer</title>
    <link href="http://sunyazhou.com/2017/03/17/Learning-AV-Foundation-AVAudioPlayer/"/>
    <id>http://sunyazhou.com/2017/03/17/Learning-AV-Foundation-AVAudioPlayer/</id>
    <published>2017-03-17T02:26:06.000Z</published>
    <updated>2017-03-29T23:56:19.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/Learning%20AV%20Foundation2AVAudioPlayer/stock-photo-55571408.jpg" alt="AVAudioPlayer"></p>
<h2 id="开篇"><a href="#开篇" class="headerlink" title="开篇"></a>开篇</h2><p>最近在学习<code>AV Foundation</code> 试图把学习内容记录下来 并参考一些博客文章<br>本期的内容是<code>AVAudioPlayer</code></p>
<h2 id="音频知识基础"><a href="#音频知识基础" class="headerlink" title="音频知识基础  "></a>音频知识基础  </h2><blockquote>
<p>音频文件的生成过程是将声音信息<strong>采样</strong>、<strong>量化</strong>和<strong>编码</strong>产生的数字信号的过程，<strong>人耳所能听到的声音，最低的频率是从20Hz起一直到最高频率20KHZ</strong>，因此音频文件格式的最大带宽是20KHZ。根据<a href="https://zh.wikipedia.org/wiki/%E5%A5%88%E5%A5%8E%E6%96%AF%E7%89%B9%E9%A2%91%E7%8E%87" target="_blank" rel="external">奈奎斯特</a>的理论，只有采样频率高于声音信号最高频率的两倍时，才能把数字信号表示的声音还原成为原来的声音，所以音频文件的采样率一般在<strong>40~50KHZ</strong>，比如最常见的CD音质采样率<strong>44.1KHZ</strong>。 (所以一般大家都觉得CD音质是最好的.) 对声音进行采样、量化过程被称为<a href="https://zh.wikipedia.org/wiki/%E8%84%88%E8%A1%9D%E7%B7%A8%E8%99%9F%E8%AA%BF%E8%AE%8A" target="_blank" rel="external">脉冲编码调制</a>（Pulse Code Modulation），简称PCM。PCM数据是最原始的音频数据完全无损，所以PCM数据虽然音质优秀但体积庞大，为了解决这个问题先后诞生了一系列的音频格式，这些音频格式运用不同的方法对音频数据进行压缩，其中有无损压缩（ALAC、APE、FLAC）和有损压缩（MP3、AAC、OGG、WMA）两种 来源:<a href="http://msching.github.io/blog/2014/07/07/audio-in-ios/" target="_blank" rel="external">iOS音频播放 (一)：概述</a> by <a href="http://msching.github.io/" target="_blank" rel="external">码农人生</a></p>
</blockquote>
<p>–</p>
<p>我觉得程寅大牛的处理音频说的很明白<br>大神列出一个经典的音频播放流程（以MP3为例）</p>
<ol>
<li>读取MP3文件</li>
<li>解析采样率、码率、时长等信息，分离MP3中的音频帧</li>
<li>对分离出来的音频帧解码得到PCM数据</li>
<li>对PCM数据进行音效处理（均衡器、混响器等，非必须）</li>
<li>把PCM数据解码成音频信号</li>
<li>把音频信号交给硬件播放</li>
<li>重复1-6步直到播放完成</li>
</ol>
<p>在iOS系统中apple对上述的流程进行了封装并提供了不同层次的接口<br><img src="https://developer.apple.com/library/content/documentation/MusicAudio/Conceptual/CoreAudioOverview/Art/core_audio_layers_2x.png" alt="">  </p>
<blockquote>
<p>这是CoreAudio的接口层次  </p>
</blockquote>
<p>下面对其中的中高层接口进行功能说明：</p>
<ul>
<li>Audio File Services：读写音频数据，可以完成播放流程中的第2步；</li>
<li>Audio File Stream Services：对音频进行解码，可以完成播放流程中的第2步；</li>
<li>Audio Converter services：音频数据转换，可以完成播放流程中的第3步；</li>
<li>Audio Processing Graph Services：音效处理模块，可以完成播放流程中的第4步；</li>
<li>Audio Unit Services：播放音频数据：可以完成播放流程中的第5步、第6步；</li>
<li>Extended Audio File Services：Audio File Services和Audio   </li>
<li>Converter services的结合体；</li>
<li>AVAudioPlayer/AVPlayer(AVFoundation)：高级接口，可以完成整个音频播放的过程（包括本地文件和网络流播放，第4步除外）；</li>
<li>Audio Queue Services：高级接口，可以进行录音和播放，可以完成播放流程中的第3、5、6步；</li>
<li>OpenAL：用于游戏音频播放，暂不讨论</li>
</ul>
<p>可以看到apple提供的接口类型非常丰富，可以满足各种类别类需求：  </p>
<ul>
<li><p>如果你只是想实现音频的播放，没有其他需求AVFoundation会很好的满足你的需求。它的接口使用简单、不用关心其中的细节；</p>
</li>
<li><p>如果你的app需要对音频进行流播放并且同时存储，那么AudioFileStreamer加AudioQueue能够帮到你，你可以先把音频数据下载到本地，一边下载一边用NSFileHandler等接口读取本地音频文件并交给AudioFileStreamer或者AudioFile解析分离音频帧，分离出来的音频帧可以送给AudioQueue进行解码和播放。如果是本地文件直接读取文件解析即可。（这两个都是比较直接的做法，这类需求也可以用AVFoundation+本地server的方式实现，AVAudioPlayer会把请求发送给本地server，由本地server转发出去，获取数据后在本地server中存储并转送给AVAudioPlayer。另一个比较trick的做法是先把音频下载到文件中，在下载到一定量的数据后把文件路径给AVAudioPlayer播放，当然这种做法在音频seek后就回有问题了。）</p>
</li>
<li>如果你正在开发一个专业的音乐播放软件，需要对音频施加音效（均衡器、混响器），那么除了数据的读取和解析以外还需要用到AudioConverter来把音频数据转换成PCM数据，再由AudioUnit+AUGraph来进行音效处理和播放（但目前多数带音效的app都是自己开发音效模块来坐PCM数据的处理，这部分功能自行开发在自定义性和扩展性上会比较强一些。PCM数据通过音效器处理完成后就可以使用AudioUnit播放了，当然AudioQueue也支持直接使对PCM数据进行播放。）。下图描述的就是使用AudioFile + AudioConverter + AudioUnit进行音频播放的流程</li>
</ul>
<p><img src="http://msching.github.io/images/iOS-audio/audioUnitPlay.jpg" alt=""></p>
<p>以上内容均转自<a href="http://msching.github.io/blog/2014/07/07/audio-in-ios/" target="_blank" rel="external">码农人生</a> 希望大神不要介意 如果有问题 我可立即清除</p>
<h2 id="使用AVAudioPlayer之前对AudioSession简介"><a href="#使用AVAudioPlayer之前对AudioSession简介" class="headerlink" title="使用AVAudioPlayer之前对AudioSession简介"></a>使用<code>AVAudioPlayer</code>之前对AudioSession简介</h2><blockquote>
<p><code>AVAudioSession</code>负责管理音频会话 它是个单例 在应用程序和操作系统之间负责中间人的角色 <a href="http://msching.github.io/blog/2014/07/08/audio-in-ios-2/" target="_blank" rel="external">AudioSession参考</a> </p>
</blockquote>
<p><code>AVAudioSession</code>主要功能包括以下几点：</p>
<ul>
<li>app是如何使用的音频服务 播放 还是录制 之类的</li>
<li>控制协调app输入输出设备（比如 麦克风，耳机、手机外放比如蓝牙连接一个外置音响 或airplay）</li>
<li>协调你的app的音频播放和系统以及其他app行为（例如有电话时需要打断，电话结束时需要恢复，按下静音按钮时是否歌曲也要静音等）</li>
</ul>
<p><img src="https://developer.apple.com/library/content/documentation/Audio/Conceptual/AudioSessionProgrammingGuide/Art/aspg_intro_2x.png" alt=""></p>
<p><em>注：AVAudioSession iOS6以后使用 以前叫AudioSession</em></p>
<h2 id="如何使用AVAudioPlayer"><a href="#如何使用AVAudioPlayer" class="headerlink" title="如何使用AVAudioPlayer"></a>如何使用<code>AVAudioPlayer</code></h2><p>在我的博客里面我尽量使用code胜过千言万语<br>使用<code>AVAudioPlayer</code>之前需要在<code>AppDelegate</code>里面导入<code>#import &lt;AVFoundation/AVFoundation.h&gt;</code><br>并且启动音频会话</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"></div><div class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class="built_in">NSDictionary</span> *)launchOptions &#123;</div><div class="line">    </div><div class="line">    <span class="built_in">AVAudioSession</span> *session = [<span class="built_in">AVAudioSession</span> sharedInstance];</div><div class="line">    <span class="built_in">NSError</span> *error;</div><div class="line">    <span class="keyword">if</span> (![session setCategory:<span class="built_in">AVAudioSessionCategoryPlayback</span> error:&amp;error]) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"Category Error: %@"</span>, [error localizedDescription]);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (![session setActive:<span class="literal">YES</span> error:&amp;error]) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"Activation Error: %@"</span>, [error localizedDescription]);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上边已经介绍了<code>AVAudioSession</code>  </p>
<p>这里面说一下<code>[session setCategory:AVAudioSessionCategoryPlayback error:&amp;error]</code> 里面的<code>AVAudioSessionCategoryPlayback</code></p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/Learning%20AV%20Foundation2AVAudioPlayer/AVAudioPlayer_category.png" alt="音频会话分类"></p>
<p>这是这几种分类的列表大家可以看下</p>
<p>记得开启后台播放<br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/Learning%20AV%20Foundation2AVAudioPlayer/MacHi%202017-03-19%2022-43-36.png" alt=""><br>或者在plist里面修改<br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/Learning%20AV%20Foundation2AVAudioPlayer/MacHi%202017-03-19%2022-44-05.png" alt="">  </p>
<p>下面就是创建音频播放器代码</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">"ViewController.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;Masonry/Masonry.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">"THControlKnob.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"THPlayButton.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;AVFoundation/AVFoundation.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></div><div class="line"></div><div class="line"><span class="comment">//三个控制推子</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> THOrangeControlKnob *panKnob;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> THOrangeControlKnob *volumnKnob;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> THGreenControlKnob *rateKnob;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> THPlayButton *playButton;</div><div class="line"></div><div class="line"><span class="comment">//音乐播放器</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">AVAudioPlayer</span> *musicPlayer;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">getter</span> = isPlaying) <span class="built_in">BOOL</span> playing; <span class="comment">//播放状态</span></div><div class="line"></div><div class="line"><span class="comment">//无关代码</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> <span class="built_in">UILabel</span> *LeftRightRoundDec;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> <span class="built_in">UILabel</span> *voiceDec;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> <span class="built_in">UILabel</span> *rateDec;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> <span class="built_in">UILabel</span> *trackDescrption;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<blockquote>
<p>导入几个第三方控件的类用于音乐播放</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/Learning%20AV%20Foundation2AVAudioPlayer/MacHi%202017-03-19%2021-22-43.png" alt=""></p>
<p>这上边的三个旋钮就是导入的开源库</p>
<p>下面创建播放器<code>AVAudioPlayer</code><br>创建时需要一个<code>NSURL</code>代表要播放的文件路径 这里简单从bundle中拖了一首歌进去了</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#pragma mark -</span></div><div class="line"><span class="meta">#pragma mark - 创建AVAudioPlayer与播放状态控制</span></div><div class="line"><span class="comment">/**</span></div><div class="line"> 创建音乐播放器</div><div class="line"> </div><div class="line"> @param fileName 文件名</div><div class="line"> @param fileExtension 文件扩展名</div><div class="line"> @return 播放器实例</div><div class="line"> */</div><div class="line">- (<span class="built_in">AVAudioPlayer</span> *)createPlayForFile:(<span class="built_in">NSString</span> *)fileName</div><div class="line">                       withExtension:(<span class="built_in">NSString</span> *)fileExtension&#123;</div><div class="line">    <span class="built_in">NSURL</span> *url = [[<span class="built_in">NSBundle</span> mainBundle] URLForResource:fileName withExtension:fileExtension];</div><div class="line">    <span class="built_in">NSError</span> *error = <span class="literal">nil</span>;</div><div class="line">    <span class="built_in">AVAudioPlayer</span> *audioPlayer = [[<span class="built_in">AVAudioPlayer</span> alloc] initWithContentsOfURL:url error:&amp;error];</div><div class="line">    <span class="keyword">if</span> (audioPlayer) &#123;</div><div class="line">        audioPlayer.numberOfLoops = <span class="number">-1</span>; <span class="comment">//-1无限循环</span></div><div class="line">        audioPlayer.enableRate = <span class="literal">YES</span>; <span class="comment">//启动倍速控制</span></div><div class="line">        [audioPlayer prepareToPlay];</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"Error creating player: %@"</span>,[error localizedDescription]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> audioPlayer;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>numberOfLoops</code> = -1; 代表本首歌 无限循环 其它常数代表循环次数<br><code>enableRate</code> 代表是否启用倍速调节 0.5x 1.0x 2.0x 等倍速 1.0代表正常速度</p>
<p>这里说一下<code>[audioPlayer prepareToPlay]</code><br><strong>调用这个函数是为了取得需要的音频硬件并预加载<code>Audio Queue</code>的缓冲区.</strong> 当然也可以不调用这个方法直接调用 <code>[audioPlayer play]</code>，但当  <strong>调用<code>play</code>方法时也会隐性激活</strong>,调用<code>prepareToPlay</code>是为了减少 创建播放器时预设加载和听到声音输出之间的延时 </p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">instancetype</span>)initWithNibName:(<span class="built_in">NSString</span> *)nibNameOrNil bundle:(<span class="built_in">NSBundle</span> *)nibBundleOrNil &#123;</div><div class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> initWithNibName:nibNameOrNil bundle:nibBundleOrNil];</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">self</span>.musicPlayer == <span class="literal">nil</span>) &#123;</div><div class="line">            <span class="keyword">self</span>.musicPlayer = [<span class="keyword">self</span> createPlayForFile:<span class="string">@"384551_1438267683"</span> withExtension:<span class="string">@"mp3"</span>];</div><div class="line">        &#125;</div><div class="line">        [<span class="keyword">self</span> setupNotifications];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)awakeFromNib&#123;</div><div class="line">    [<span class="keyword">super</span> awakeFromNib];</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.musicPlayer == <span class="literal">nil</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.musicPlayer = [<span class="keyword">self</span> createPlayForFile:<span class="string">@"384551_1438267683"</span> withExtension:<span class="string">@"mp3"</span>];</div><div class="line">    &#125;</div><div class="line">    [<span class="keyword">self</span> setupNotifications];</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>在<code>initWithNibName</code>或<code>awakeFromNib</code>时候调用一下创建播放器的代码<br>这个<code>[self setupNotifications];</code>后面说  </p>
</blockquote>
<p>先添加一些常见的方法封装 比如 <strong>播放、暂停、停止</strong><br><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"></div><div class="line">- (<span class="keyword">void</span>)play &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.musicPlayer == <span class="literal">nil</span>) &#123; <span class="keyword">return</span>; &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (!<span class="keyword">self</span>.playing) &#123;</div><div class="line">        <span class="built_in">NSTimeInterval</span> delayTime = [<span class="keyword">self</span>.musicPlayer deviceCurrentTime] + <span class="number">0.01</span>;</div><div class="line">        [<span class="keyword">self</span>.musicPlayer playAtTime:delayTime];</div><div class="line">        <span class="keyword">self</span>.playing = <span class="literal">YES</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">self</span>.trackDescrption.text = [<span class="keyword">self</span>.musicPlayer.url absoluteString];</div><div class="line">    [<span class="keyword">self</span> configNowPlayingInfoCenter]; <span class="comment">//配置后台播放的页面信息</span></div><div class="line">&#125;</div><div class="line">- (<span class="keyword">void</span>)stop &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.musicPlayer == <span class="literal">nil</span>) &#123; <span class="keyword">return</span>; &#125;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.playing) &#123;</div><div class="line">        [<span class="keyword">self</span>.musicPlayer stop];</div><div class="line">        <span class="keyword">self</span>.musicPlayer.currentTime = <span class="number">0.0</span>f;</div><div class="line">        <span class="keyword">self</span>.playing = <span class="literal">NO</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)pause &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.musicPlayer == <span class="literal">nil</span>) &#123; <span class="keyword">return</span>; &#125;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.playing) &#123;</div><div class="line">        [<span class="keyword">self</span>.musicPlayer pause];</div><div class="line">        <span class="keyword">self</span>.playing = <span class="literal">NO</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里看到<code>[self.musicPlayer deviceCurrentTime] + 0.01</code> 加了 -0.01的延时, 是为了以后大家做播放器的时候 有可能暂停或者歌曲切换时 有可能 向前向后做片段衔接, 也是为了使用 <code>playAtTime</code>去播放 指定位置的音乐用于 意外暂停或者播放上次播放的配置信息使用 这里看到我写了一个<br><code>[self configNowPlayingInfoCenter];</code>配置后台播放的页面信息<br>这个主要用于播放音乐在后台时 锁屏显示的屏幕信息  请看下面代码</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//设置锁屏状态，显示的歌曲信息</span></div><div class="line">-(<span class="keyword">void</span>)configNowPlayingInfoCenter&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">NSClassFromString</span>(<span class="string">@"MPNowPlayingInfoCenter"</span>)) &#123;</div><div class="line">        <span class="built_in">NSMutableDictionary</span> *dict = [[<span class="built_in">NSMutableDictionary</span> alloc] init];</div><div class="line">        </div><div class="line">        <span class="comment">//歌曲名称</span></div><div class="line">        [dict setObject:<span class="string">@"歌曲名称"</span> forKey:<span class="built_in">MPMediaItemPropertyTitle</span>];</div><div class="line">        </div><div class="line">        <span class="comment">//演唱者</span></div><div class="line">        [dict setObject:<span class="string">@"演唱者"</span> forKey:<span class="built_in">MPMediaItemPropertyArtist</span>];</div><div class="line">        </div><div class="line">        <span class="comment">//专辑名</span></div><div class="line">        [dict setObject:<span class="string">@"专辑名"</span> forKey:<span class="built_in">MPMediaItemPropertyAlbumTitle</span>];</div><div class="line">        </div><div class="line">        <span class="comment">//专辑缩略图</span></div><div class="line">        <span class="built_in">UIImage</span> *image = [<span class="built_in">UIImage</span> imageNamed:<span class="string">@"sunyazhou"</span>];</div><div class="line">        <span class="built_in">MPMediaItemArtwork</span> *artwork = [[<span class="built_in">MPMediaItemArtwork</span> alloc] initWithImage:image];</div><div class="line">        [dict setObject:artwork forKey:<span class="built_in">MPMediaItemPropertyArtwork</span>];</div><div class="line">        </div><div class="line">        <span class="comment">//音乐剩余时长</span></div><div class="line">        [dict setObject:@<span class="number">20</span> forKey:<span class="built_in">MPMediaItemPropertyPlaybackDuration</span>];</div><div class="line">        </div><div class="line">        <span class="comment">//音乐当前播放时间 在计时器中修改</span></div><div class="line">       <span class="comment">// [dict setObject:[NSNumber numberWithDouble:100.0] forKey:MPNowPlayingInfoPropertyElapsedPlaybackTime];</span></div><div class="line">        </div><div class="line">        <span class="comment">//设置锁屏状态下屏幕显示播放音乐信息</span></div><div class="line">        [[<span class="built_in">MPNowPlayingInfoCenter</span> defaultCenter] setNowPlayingInfo:dict];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果需要在计时器中不断刷新锁屏状态下的播放进度条请写如下代码</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//计时器修改进度</span></div><div class="line">- (<span class="keyword">void</span>)changeProgress:(<span class="built_in">NSTimer</span> *)sender&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">self</span>.player)&#123;</div><div class="line">        <span class="comment">//当前播放时间</span></div><div class="line">        <span class="built_in">NSMutableDictionary</span> *dict = [<span class="built_in">NSMutableDictionary</span> dictionaryWithDictionary:[[<span class="built_in">MPNowPlayingInfoCenter</span> defaultCenter] nowPlayingInfo]];</div><div class="line">        [dict setObject:[<span class="built_in">NSNumber</span> numberWithDouble:<span class="keyword">self</span>.player.currentTime] forKey:<span class="built_in">MPNowPlayingInfoPropertyElapsedPlaybackTime</span>]; <span class="comment">//音乐当前已经过时间</span></div><div class="line">        [[<span class="built_in">MPNowPlayingInfoCenter</span> defaultCenter] setNowPlayingInfo:dict];</div><div class="line"> </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>参考<a href="http://www.iliunian.com/2831.html" target="_blank" rel="external">IOS后台运行 之 后台播放音乐</a> </p>
</blockquote>
<p>下面我们来介绍一下<br><code>[self setupNotifications];</code>注册监听 音频意外中断和耳机拔出时要暂停音乐播放<br>实现代码如下</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> 播放的通知处理</div><div class="line"> */</div><div class="line">- (<span class="keyword">void</span>)setupNotifications &#123;</div><div class="line">    <span class="built_in">NSNotificationCenter</span> *nsnc = [<span class="built_in">NSNotificationCenter</span> defaultCenter];</div><div class="line">    </div><div class="line">    <span class="comment">//添加意外中断音频播放的通知</span></div><div class="line">    [nsnc addObserver:<span class="keyword">self</span></div><div class="line">             selector:<span class="keyword">@selector</span>(handleInterruption:)</div><div class="line">                 name:<span class="built_in">AVAudioSessionInterruptionNotification</span></div><div class="line">               object:[<span class="built_in">AVAudioSession</span> sharedInstance]];</div><div class="line">    </div><div class="line">    <span class="comment">//添加线路变化通知</span></div><div class="line">    [nsnc addObserver:<span class="keyword">self</span></div><div class="line">             selector:<span class="keyword">@selector</span>(hanldeRouteChange:)</div><div class="line">                 name:<span class="built_in">AVAudioSessionRouteChangeNotification</span></div><div class="line">               object:[<span class="built_in">AVAudioSession</span> sharedInstance]];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><em>注：记得在delloc里面<code>[[NSNotificationCenter defaultCenter] removeObserver:self]</code></em></p>
<p>意外中断音频发生的场景 例如 听歌过程中来电话或者 按住home键使用siri </p>
<p>下面是具体方法实现</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> 音频意外打断处理</div><div class="line"></div><div class="line"> @param notification 通知信息</div><div class="line"> */</div><div class="line">- (<span class="keyword">void</span>)handleInterruption:(<span class="built_in">NSNotification</span> *)notification &#123;</div><div class="line">    <span class="built_in">NSDictionary</span> *info = notification.userInfo;</div><div class="line">    <span class="built_in">AVAudioSessionInterruptionType</span> type = [info[<span class="built_in">AVAudioSessionInterruptionTypeKey</span>] unsignedIntegerValue];</div><div class="line">    <span class="keyword">if</span> (type == <span class="built_in">AVAudioSessionInterruptionTypeBegan</span>) &#123;</div><div class="line">        <span class="comment">//Handle AVAudioSessionInterruptionTypeBegan</span></div><div class="line">        [<span class="keyword">self</span> pause];</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">//Handle AVAudioSessionInterruptionTypeEnded</span></div><div class="line">        <span class="built_in">AVAudioSessionInterruptionOptions</span> options = [info[<span class="built_in">AVAudioSessionInterruptionTypeKey</span>] unsignedIntegerValue];</div><div class="line">        <span class="built_in">NSError</span> *error = <span class="literal">nil</span>;</div><div class="line">        <span class="comment">//激活音频会话 允许外接音响</span></div><div class="line">        [[<span class="built_in">AVAudioSession</span> sharedInstance] setCategory:<span class="built_in">AVAudioSessionCategoryPlayback</span></div><div class="line">                                         withOptions:<span class="built_in">AVAudioSessionCategoryOptionAllowBluetooth</span> error:<span class="literal">nil</span>];</div><div class="line">        [[<span class="built_in">AVAudioSession</span> sharedInstance] setActive:<span class="literal">YES</span> withOptions:<span class="built_in">AVAudioSessionSetActiveOptionNotifyOthersOnDeactivation</span> error:&amp;error];</div><div class="line">        <span class="keyword">if</span> (options == <span class="built_in">AVAudioSessionInterruptionOptionShouldResume</span>) &#123;</div><div class="line">            [<span class="keyword">self</span> play];</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            [<span class="keyword">self</span> play];</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        </div><div class="line">        <span class="keyword">self</span>.playButton.selected = <span class="literal">YES</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (error) &#123;</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"AVAudioSessionInterruptionOptionShouldResume失败:%@"</span>,[error localizedDescription]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>先说<code>handleInterruption</code>意外情况下中断比如我按住home键使用siri<br>我会收到意外打断的通知当 type == <code>AVAudioSessionInterruptionTypeBegan</code>时 我们停止音乐播放或者暂停.<br>当type != <code>AVAudioSessionInterruptionTypeBegan</code>的时候一定是<code>AVAudioSessionInterruptionTypeEnded</code>这个时候<code>notification.userInfo</code>里面包含一个<code>AVAudioSessionInterruptionOptions</code>值来表明音频会话是否已经重新激活以及是否可以再次播放</p>
<p><strong><em>注:这个地方遇到个坑</em></strong> 当意外中断时候有时音频会话会很不灵敏 后来发现这种情况下需要重新激活会话 如下代码:</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">[[<span class="built_in">AVAudioSession</span> sharedInstance] setActive:<span class="literal">YES</span> withOptions:<span class="built_in">AVAudioSessionSetActiveOptionNotifyOthersOnDeactivation</span> error:&amp;error];</div></pre></td></tr></table></figure>
<p>这里<code>AVAudioSessionSetActiveOptionNotifyOthersOnDeactivation</code>是为了通知其它应用会话被我激活了 很多播放器开发者很不讲究 每次从来不用这个方法导致每次别人播放完音频 自己都收不到音频重新播放的信息 建议大家以和为贵, 写良心代码.</p>
<p>因为我外接的小米蓝牙音响发现还是不好使 最后又补上了<code>AVAudioSessionCategoryOptionAllowBluetooth</code>这个  </p>
<p><strong>激活音频会话 允许外接音响</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">[[<span class="built_in">AVAudioSession</span> sharedInstance] setCategory:<span class="built_in">AVAudioSessionCategoryPlayback</span> withOptions:<span class="built_in">AVAudioSessionCategoryOptionAllowBluetooth</span> error:<span class="literal">nil</span>];</div></pre></td></tr></table></figure>
<p>就好使了</p>
<p>下面说一下耳机插拔或者USB麦克风断开 Apple有个什么<code>Human Interface Guidelines(HIG)</code>相关定义 意思是说当硬件耳机拔出时建议 暂停播放音乐或者麦克风断开时。就是处于静音状态。是为了保密播放内容不被外界听到,不管苹果啥规定 我们都得照办 否则就得被拒。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)hanldeRouteChange:(<span class="built_in">NSNotification</span> *)notification &#123;</div><div class="line">    <span class="built_in">NSDictionary</span> *info = notification.userInfo;</div><div class="line">    <span class="built_in">AVAudioSessionRouteChangeReason</span> reason = [info[<span class="built_in">AVAudioSessionRouteChangeReasonKey</span>] unsignedIntegerValue];</div><div class="line">    <span class="comment">//老设备不可用</span></div><div class="line">    <span class="keyword">if</span> (reason == <span class="built_in">AVAudioSessionRouteChangeReasonOldDeviceUnavailable</span>) &#123;</div><div class="line">        <span class="built_in">AVAudioSessionRouteDescription</span> *previousRoute = info[<span class="built_in">AVAudioSessionRouteChangePreviousRouteKey</span>];</div><div class="line">        <span class="built_in">AVAudioSessionPortDescription</span> *previousOutput = previousRoute.outputs[<span class="number">0</span>];</div><div class="line">        <span class="built_in">NSString</span> *portType = previousOutput.portType;</div><div class="line">        <span class="keyword">if</span> ([portType isEqualToString:<span class="built_in">AVAudioSessionPortHeadphones</span>]) &#123;</div><div class="line">            [<span class="keyword">self</span> stop];</div><div class="line">            <span class="keyword">self</span>.playButton.selected = <span class="literal">NO</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这需要用<code>AVAudioSessionRouteChangeReasonKey</code>取出线路切换的原因<code>AVAudioSessionRouteChangeReason</code> 原因有这么多</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSUInteger</span>, <span class="built_in">AVAudioSessionRouteChangeReason</span>)</div><div class="line">&#123;</div><div class="line">	<span class="built_in">AVAudioSessionRouteChangeReasonUnknown</span> = <span class="number">0</span>,</div><div class="line">	<span class="built_in">AVAudioSessionRouteChangeReasonNewDeviceAvailable</span> = <span class="number">1</span>,</div><div class="line">	<span class="built_in">AVAudioSessionRouteChangeReasonOldDeviceUnavailable</span> = <span class="number">2</span>,</div><div class="line">	<span class="built_in">AVAudioSessionRouteChangeReasonCategoryChange</span> = <span class="number">3</span>,</div><div class="line">	<span class="built_in">AVAudioSessionRouteChangeReasonOverride</span> = <span class="number">4</span>,</div><div class="line">	<span class="built_in">AVAudioSessionRouteChangeReasonWakeFromSleep</span> = <span class="number">6</span>,</div><div class="line">	<span class="built_in">AVAudioSessionRouteChangeReasonNoSuitableRouteForCategory</span> = <span class="number">7</span>,</div><div class="line">	<span class="built_in">AVAudioSessionRouteChangeReasonRouteConfigurationChange</span> <span class="built_in">NS_ENUM_AVAILABLE_IOS</span>(<span class="number">7</span>_0) = <span class="number">8</span></div><div class="line">&#125; <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">6</span>_0);</div></pre></td></tr></table></figure>
<p>我们需要这个<code>AVAudioSessionRouteChangeReasonOldDeviceUnavailable</code> 判断是否是旧设备<br>通过<code>AVAudioSessionRouteChangePreviousRouteKey</code>拿出</p>
<p><code>AVAudioSessionRouteDescription</code>描述信息<br><code>previousRoute</code> 在通过<br><code>previousRoute.outputs[0]</code>拿出<code>AVAudioSessionPortDescription</code></p>
<p>拿出<code>NSString *portType = previousOutput.portType</code></p>
<p>如果<code>[portType isEqualToString:AVAudioSessionPortHeadphones]</code></p>
<p>如果是耳机<code>AVAudioSessionPortHeadphones</code>则暂停播放</p>
<p>以上就是中断和线路切换的一些代码逻辑</p>
<p>下面我介绍一些好玩的</p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/Learning%20AV%20Foundation2AVAudioPlayer/IMG_2090.PNG" alt=""></p>
<p>前面说的一些后台设置信息显示的内容就是上图所示 在锁屏的时候显示</p>
<p>但是大家一定很奇怪的是怎么实现接收 <strong>锁屏状态下 点击 上一曲 暂停/播放 下一曲等操作</strong></p>
<p>需要在AppDelegate里面写上</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class="built_in">NSDictionary</span> *)launchOptions &#123;</div><div class="line">    </div><div class="line">    <span class="built_in">AVAudioSession</span> *session = [<span class="built_in">AVAudioSession</span> sharedInstance];</div><div class="line">    <span class="built_in">NSError</span> *error;</div><div class="line">    <span class="keyword">if</span> (![session setCategory:<span class="built_in">AVAudioSessionCategoryPlayback</span> error:&amp;error]) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"Category Error: %@"</span>, [error localizedDescription]);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (![session setActive:<span class="literal">YES</span> error:&amp;error]) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"Activation Error: %@"</span>, [error localizedDescription]);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    [[<span class="built_in">UIApplication</span> sharedApplication] beginReceivingRemoteControlEvents];</div><div class="line">    [<span class="keyword">self</span> becomeFirstResponder];</div><div class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这<code>[[UIApplication sharedApplication] beginReceivingRemoteControlEvents];</code><br>行代码 以及调用自己为 <code>[self becomeFirstResponder];</code>第一响应者 这样写是为了应用响应音频播放 后台切换或者中断的时候更灵敏.</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="built_in">BOOL</span>)canBecomeFirstResponder &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后 写上如下代码 处理<strong>锁屏状态下 点击 上一曲 暂停/播放 下一曲等操作</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)remoteControlReceivedWithEvent:(<span class="built_in">UIEvent</span> *)event &#123;</div><div class="line">    <span class="keyword">if</span> (event.type == <span class="built_in">UIEventTypeRemoteControl</span>) &#123;</div><div class="line">        <span class="keyword">switch</span> (event.subtype) &#123;</div><div class="line">            <span class="keyword">case</span> <span class="built_in">UIEventSubtypeRemoteControlPlay</span>:</div><div class="line">                <span class="built_in">NSLog</span>(<span class="string">@"暂停播放"</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="built_in">UIEventSubtypeRemoteControlPause</span>:</div><div class="line">                </div><div class="line">                <span class="built_in">NSLog</span>(<span class="string">@"继续播放"</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="built_in">UIEventSubtypeRemoteControlNextTrack</span>:</div><div class="line">                <span class="built_in">NSLog</span>(<span class="string">@"下一曲"</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="built_in">UIEventSubtypeRemoteControlPreviousTrack</span>:</div><div class="line">                <span class="built_in">NSLog</span>(<span class="string">@"上一曲"</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>剩余逻辑大家自己填充吧我就不介绍了. </p>
<p>好了AVAudioPlayer就到这吧！有啥疑问大家可以评论留言都能看到或者指正我的错误。我会及时改正.</p>
<p>全文完</p>
<p><strong>文章的最终<a href="https://github.com/sunyazhou13/AVAudioPlayerDemo" target="_blank" rel="external">demo</a></strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/Learning%20AV%20Foundation2AVAudioPlayer/stoc
    
    </summary>
    
      <category term="iOS开发" scheme="http://sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="http://sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="macOS开发" scheme="http://sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Learning AV Foundation(一)汉字语音朗读</title>
    <link href="http://sunyazhou.com/2017/03/11/Learning-AV-Foundation-AVSpeechSynthesizer/"/>
    <id>http://sunyazhou.com/2017/03/11/Learning-AV-Foundation-AVSpeechSynthesizer/</id>
    <published>2017-03-11T04:38:53.000Z</published>
    <updated>2017-03-29T23:56:19.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://www.informit.com/ShowCover.aspx?isbn=0321961803" alt="AVSpeechSynthesizer"></p>
<p>前言</p>
<blockquote>
<p>最近在研究<code>AV Foundation</code> 框架 发现有一本书叫做<br><a href="http://item.jd.com/11742630.html" target="_blank" rel="external">AV Foundation开发秘籍：实践掌握iOS &amp; OS X 应用的视听处理技术</a><br>然后google查了一下英文版叫<br><a href="http://www.informit.com/store/learning-av-foundation-a-hands-on-guide-to-mastering-9780321961808" target="_blank" rel="external">Learning AV Foundation: A Hands-on Guide to Mastering the AV Foundation Framework</a><br>看着国人的翻译不仅慨叹的想说一句话: 为啥不自己写一本书 何必这么费劲翻译它搞得原来很有技术含量 这么直译就没技术含量了。看着开发秘籍这名字不禁想起大学时那些书 从开发到入门… 21天学会xxx… 开发指南… 开发秘籍… 我大学读的都是<code>假书</code></p>
</blockquote>
<p>今天给大家分享的是 iOS上如何 把汉字转换成语音朗读, 当然这个没什么技术含量(大神可以飞过).</p>
<h2 id="AVFoundation整体架构"><a href="#AVFoundation整体架构" class="headerlink" title="AVFoundation整体架构"></a>AVFoundation整体架构</h2><p>研究这个功能之前先介绍一下<code>AV Foundation</code>整体架构</p>
<p><img src="https://developer.apple.com/library/content/documentation/AudioVideo/Conceptual/AVFoundationPG/Art/frameworksBlockDiagram_2x.png" alt="iOS"><br>这是iOS上的架构设计 (上图)  </p>
<p><img src="https://developer.apple.com/library/content/documentation/AudioVideo/Conceptual/AVFoundationPG/Art/frameworksBlockDiagramOSX_2x.png" alt="iOS"><br>这是macOS上的架构设计(上图)</p>
<p>看完之后我们就来用代码实现这个demo<br>首先导入<code>&lt;AVFoundation/AVFoundation.h&gt;</code></p>
<p>这我需要使用的是iOS上的<code>AVSpeechSynthesizer</code>,macOS上叫<code>NSSpeechSynthesizer</code></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) <span class="built_in">AVSpeechSynthesizer</span> *synthesizer;</div></pre></td></tr></table></figure>
<p><code>AVSpeechSynthesizer</code> 它的功能</p>
<ul>
<li><strong>将文字添加到语音, 就是用语音播放一段文字</strong></li>
</ul>
<p>初始化</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)awakeFromNib &#123;</div><div class="line">    [<span class="keyword">super</span> awakeFromNib];</div><div class="line">    <span class="comment">//创建语音合成器</span></div><div class="line">    <span class="keyword">self</span>.synthesizer = [[<span class="built_in">AVSpeechSynthesizer</span> alloc] init];</div><div class="line">    <span class="keyword">self</span>.synthesizer.delegate = <span class="keyword">self</span>;</div><div class="line">    <span class="comment">//播放的国家的语言</span></div><div class="line">    <span class="keyword">self</span>.voices = @[[<span class="built_in">AVSpeechSynthesisVoice</span> voiceWithLanguage:<span class="string">@"zh-CN"</span>],[<span class="built_in">AVSpeechSynthesisVoice</span> voiceWithLanguage:<span class="string">@"en-US"</span>]</div><div class="line">                    ];</div><div class="line">    <span class="keyword">self</span>.speechStrings = [[<span class="built_in">NSMutableArray</span> alloc] init];</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里的<code>[AVSpeechSynthesisVoice voiceWithLanguage:@&quot;zh-CN&quot;]</code><br>设置的是简体中文语音 文章末尾会列出所有语音播放信息不用担心写错.</p>
<p><code>AVSpeechSynthesizer</code>的delegate方法如下 主要是对语音播放状态的监听</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">AVSpeechSynthesizerDelegate</span> &lt;<span class="title">NSObject</span>&gt;</span></div><div class="line"><span class="comment">// 代理方法</span></div><div class="line"><span class="keyword">@optional</span></div><div class="line"><span class="comment">// 开始播放 语音单元</span></div><div class="line">- (<span class="keyword">void</span>)speechSynthesizer:(<span class="built_in">AVSpeechSynthesizer</span> *)synthesizer didStartSpeechUtterance:(<span class="built_in">AVSpeechUtterance</span> *)utterance;</div><div class="line"><span class="comment">// 完成播放 语音单元</span></div><div class="line">- (<span class="keyword">void</span>)speechSynthesizer:(<span class="built_in">AVSpeechSynthesizer</span> *)synthesizer didFinishSpeechUtterance:(<span class="built_in">AVSpeechUtterance</span> *)utterance;</div><div class="line"><span class="comment">// 暂停播放 语音单元</span></div><div class="line">- (<span class="keyword">void</span>)speechSynthesizer:(<span class="built_in">AVSpeechSynthesizer</span> *)synthesizer didPauseSpeechUtterance:(<span class="built_in">AVSpeechUtterance</span> *)utterance;</div><div class="line"><span class="comment">// 继续播放 语音单元</span></div><div class="line">- (<span class="keyword">void</span>)speechSynthesizer:(<span class="built_in">AVSpeechSynthesizer</span> *)synthesizer didContinueSpeechUtterance:(<span class="built_in">AVSpeechUtterance</span> *)utterance;</div><div class="line"><span class="comment">// 取消播放 语音单元</span></div><div class="line">- (<span class="keyword">void</span>)speechSynthesizer:(<span class="built_in">AVSpeechSynthesizer</span> *)synthesizer didCancelSpeechUtterance:(<span class="built_in">AVSpeechUtterance</span> *)utterance;</div><div class="line"><span class="comment">// 这里 指的是 又来监听 播放 字符范围</span></div><div class="line">- (<span class="keyword">void</span>)speechSynthesizer:(<span class="built_in">AVSpeechSynthesizer</span> *)synthesizer willSpeakRangeOfSpeechString:(<span class="built_in">NSRange</span>)characterRange utterance:(<span class="built_in">AVSpeechUtterance</span> *)utterance;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p><strong>这里的<code>AVSpeechSynthesizer</code>主要的方法有</strong>  </p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">/* 添加 播放话语 到 播放语音 队列, 可以设置utterance的属性来控制播放 */</span></div><div class="line">- (<span class="keyword">void</span>)speakUtterance:(<span class="built_in">AVSpeechUtterance</span> *)utterance;</div><div class="line"></div><div class="line"><span class="comment">// 对于 stopSpeakingAtBoundary: 语音单元的操作, 如果中断, 会清空队列</span></div><div class="line"><span class="comment">// 中断</span></div><div class="line">- (<span class="built_in">BOOL</span>)stopSpeakingAtBoundary:(<span class="built_in">AVSpeechBoundary</span>)boundary;</div><div class="line"><span class="comment">// 暂停</span></div><div class="line">- (<span class="built_in">BOOL</span>)pauseSpeakingAtBoundary:(<span class="built_in">AVSpeechBoundary</span>)boundary;</div><div class="line"><span class="comment">// 继续</span></div><div class="line">- (<span class="built_in">BOOL</span>)continueSpeaking;</div></pre></td></tr></table></figure>
<blockquote>
<p>这里我们用的<code>speakUtterance</code>方法来播放文字<br>speakUtterance:(AVSpeechUtterance *)utterance  </p>
<ol>
<li><code>AVSpeechUtterance</code>是对文字朗读的封装</li>
<li>被播放的语音文字, 可以理解为一段需要播放的文字<br>这里我们设置<code>AVSpeechUtterance</code>朗读播放的信息  </li>
</ol>
</blockquote>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//播放语音</span></div><div class="line"><span class="built_in">NSArray</span> *speechStringsArray = [<span class="keyword">self</span> buildSpeechStrings]; <span class="comment">//buildSpeechStrings播放字符串的数组</span></div><div class="line">   <span class="keyword">for</span> (<span class="built_in">NSUInteger</span> i = <span class="number">0</span>; i &lt; speechStringsArray.count; i++) &#123;</div><div class="line">       <span class="comment">//创建AVSpeechUtterance 对象 用于播放的语音文字</span></div><div class="line">       <span class="built_in">AVSpeechUtterance</span> *utterance = [[<span class="built_in">AVSpeechUtterance</span> alloc] initWithString:speechStringsArray[i]];</div><div class="line">       <span class="comment">//设置使用哪一个国家的语言播放</span></div><div class="line">       utterance.voice = <span class="keyword">self</span>.voices[<span class="number">0</span>];</div><div class="line">       <span class="comment">//本段文字播放时的 语速, 应介于AVSpeechUtteranceMinimumSpeechRate 和 AVSpeechUtteranceMaximumSpeechRate 之间</span></div><div class="line">       utterance.rate = <span class="number">0.5</span>;</div><div class="line">       <span class="comment">//在播放特定语句时改变声音的声调, 一般取值介于0.5(底音调)~2.0(高音调)之间</span></div><div class="line">       utterance.pitchMultiplier = <span class="number">0.8</span>f;</div><div class="line">       <span class="comment">//声音大小, 0.0 ~ 1.0 之间</span></div><div class="line">       utterance.volume = <span class="number">1.0</span>f;</div><div class="line">       <span class="comment">//播放后的延迟, 就是本次文字播放完之后的停顿时间, 默认是0</span></div><div class="line">       utterance.preUtteranceDelay = <span class="number">0</span>;</div><div class="line">       <span class="comment">//播放前的延迟, 就是本次文字播放前停顿的时间, 然后播放本段文字, 默认是0</span></div><div class="line">       utterance.postUtteranceDelay = <span class="number">0.1</span>f;</div><div class="line">       [<span class="keyword">self</span>.synthesizer speakUtterance:utterance];</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p><code>AVSpeechUtterance</code>的属性如下</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 设置使用哪一个国家的语言播放</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">retain</span>, <span class="keyword">nullable</span>) <span class="built_in">AVSpeechSynthesisVoice</span> *voice;</div><div class="line"><span class="comment">// 获取当前需要播放的文字, 只读属性</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">NSString</span> *speechString;</div><div class="line"><span class="comment">// 获取当前需要播放的文字 - 富文本, 只读属性, iOS10以后可用</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">NSAttributedString</span> *attributedSpeechString;</div><div class="line"><span class="comment">// 本段文字播放时的 语速, 应介于AVSpeechUtteranceMinimumSpeechRate 和 AVSpeechUtteranceMaximumSpeechRate 之间</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="keyword">float</span> rate;           </div><div class="line"><span class="comment">// 在播放特定语句时改变声音的声调, 一般取值介于0.5(底音调)~2.0(高音调)之间</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="keyword">float</span> pitchMultiplier; </div><div class="line"><span class="comment">// 声音大小, 0.0 ~ 1.0 之间</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="keyword">float</span> volume;</div><div class="line"><span class="comment">// 播放后的延迟, 就是本次文字播放完之后的停顿时间, 默认是0</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="built_in">NSTimeInterval</span> preUtteranceDelay; </div><div class="line"><span class="comment">// 播放前的延迟, 就是本次文字播放前停顿的时间, 然后播放本段文字, 默认是0</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="built_in">NSTimeInterval</span> postUtteranceDelay;</div></pre></td></tr></table></figure>
<p><code>AVSpeechUtterance</code>的方法如下  </p>
<p>以下全部都是初始化方法, 分为 类方法 和 对象方法, 富文本的初始化方法要在iOS10以后才可以用  </p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">+ (<span class="keyword">instancetype</span>)speechUtteranceWithString:(<span class="built_in">NSString</span> *)string;</div><div class="line">+ (<span class="keyword">instancetype</span>)speechUtteranceWithAttributedString:(<span class="built_in">NSAttributedString</span> *)string <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">10</span>_0);</div><div class="line">- (<span class="keyword">instancetype</span>)initWithString:(<span class="built_in">NSString</span> *)string;</div><div class="line">- (<span class="keyword">instancetype</span>)initWithAttributedString:(<span class="built_in">NSAttributedString</span> *)string</div></pre></td></tr></table></figure>
<p>可以使用<strong><code>[AVSpeechSynthesisVoice speechVoices]</code></strong>代码打印出支持朗读语言的国家  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">ar-SA  沙特阿拉伯（阿拉伯文）</div><div class="line"></div><div class="line">en-ZA, 南非（英文）</div><div class="line"></div><div class="line">nl-BE, 比利时（荷兰文）</div><div class="line"></div><div class="line">en-AU, 澳大利亚（英文）</div><div class="line"></div><div class="line">th-TH, 泰国（泰文）</div><div class="line"></div><div class="line">de-DE, 德国（德文）</div><div class="line"></div><div class="line">en-US, 美国（英文）</div><div class="line"></div><div class="line">pt-BR, 巴西（葡萄牙文）</div><div class="line"></div><div class="line">pl-PL, 波兰（波兰文）</div><div class="line"></div><div class="line">en-IE, 爱尔兰（英文）</div><div class="line"></div><div class="line">el-GR, 希腊（希腊文）</div><div class="line"></div><div class="line">id-ID, 印度尼西亚（印度尼西亚文）</div><div class="line"></div><div class="line">sv-SE, 瑞典（瑞典文）</div><div class="line"></div><div class="line">tr-TR, 土耳其（土耳其文）</div><div class="line"></div><div class="line">pt-PT, 葡萄牙（葡萄牙文）</div><div class="line"></div><div class="line">ja-JP, 日本（日文）</div><div class="line"></div><div class="line">ko-KR, 南朝鲜（朝鲜文）</div><div class="line"></div><div class="line">hu-HU, 匈牙利（匈牙利文）</div><div class="line"></div><div class="line">cs-CZ, 捷克共和国（捷克文）</div><div class="line"></div><div class="line">da-DK, 丹麦（丹麦文）</div><div class="line"></div><div class="line">es-MX, 墨西哥（西班牙文）</div><div class="line"></div><div class="line">fr-CA, 加拿大（法文）</div><div class="line"></div><div class="line">nl-NL, 荷兰（荷兰文）</div><div class="line"></div><div class="line">fi-FI, 芬兰（芬兰文）</div><div class="line"></div><div class="line">es-ES, 西班牙（西班牙文）</div><div class="line"></div><div class="line">it-IT, 意大利（意大利文）</div><div class="line"></div><div class="line">he-IL, 以色列（希伯莱文，阿拉伯文）</div><div class="line"></div><div class="line">no-NO, 挪威（挪威文）</div><div class="line"></div><div class="line">ro-RO, 罗马尼亚（罗马尼亚文）</div><div class="line"></div><div class="line">zh-HK, 香港（中文）</div><div class="line"></div><div class="line">zh-TW, 台湾（中文）</div><div class="line"></div><div class="line">sk-SK, 斯洛伐克（斯洛伐克文）</div><div class="line"></div><div class="line">zh-CN, 中国（中文）</div><div class="line"></div><div class="line">ru-RU, 俄罗斯（俄文）</div><div class="line"></div><div class="line">en-GB, 英国（英文）</div><div class="line"></div><div class="line">fr-FR, 法国（法文）</div><div class="line"></div><div class="line">hi-IN  印度（印度文）</div></pre></td></tr></table></figure>
<blockquote>
<p>总结<br>为了学习<strong><code>AVFoundation</code></strong>我先从一个简单的知识点入手,唯一觉得遗憾的是我不太确定是否这个合成器支持自定义语音朗读,这个后续研究一下,把相关学习内容填补上.</p>
</blockquote>
<p><strong>最终的demo 支持iOS和macOS:<a href="https://github.com/sunyazhou13/AVSpeechSynthesizerDemo" target="_blank" rel="external">Learning-AV-Foundation(一)汉字语音朗读</a></strong></p>
<p>参考:<br><a href="https://developer.apple.com/library/content/documentation/AudioVideo/Conceptual/AVFoundationPG/Articles/00_Introduction.html#//apple_ref/doc/uid/TP40010188" target="_blank" rel="external">AV Foundation Apple 官方文档</a><br><a href="http://www.jianshu.com/p/acd57725ba4d" target="_blank" rel="external">AVSpeechSynthesizer 和 AVSpeechUtterance</a><br><a href="http://www.jianshu.com/p/a41cb018f0b5" target="_blank" rel="external">AVSpeechSynthesizer详解</a><br><a href="http://www.jianshu.com/p/cc79c45b4ccf" target="_blank" rel="external">AVFoundation</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://www.informit.com/ShowCover.aspx?isbn=0321961803&quot; alt=&quot;AVSpeechSynthesizer&quot;&gt;&lt;/p&gt;
&lt;p&gt;前言&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;最近在研究&lt;code&gt;AV 
    
    </summary>
    
      <category term="iOS开发" scheme="http://sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="http://sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="macOS开发" scheme="http://sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>macOS上模拟发送键盘事件</title>
    <link href="http://sunyazhou.com/2017/02/22/macOS-simulate-keyborad-NSEvent/"/>
    <id>http://sunyazhou.com/2017/02/22/macOS-simulate-keyborad-NSEvent/</id>
    <published>2017-02-22T08:17:00.000Z</published>
    <updated>2017-03-29T23:56:19.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/macOS%E4%B8%8A%E6%A8%A1%E6%8B%9F%E5%8F%91%E9%80%81%E9%94%AE%E7%9B%98%E4%BA%8B%E4%BB%B6/Snip20170222_1.png" alt=""></p>
<p>最近在开发macOS远程协助功能, 需要模拟从windows传过来的键盘事件映射成macOS <code>NSEvent</code>, macOS上模拟事件都是底层的<code>CoreGraphic</code>的<code>class</code>,下面说下实现的片断代码.</p>
<ol>
<li>导入<code>#import &lt;Carbon/Carbon.h&gt;</code></li>
<li>创建<code>CGEventSourceRef</code> 事件源对象<strong>(注意它不是OC对象,声明的时候对象前边没有<code>*</code>,而且需要用<code>CFRelease()</code>释放内存)</strong>.</li>
<li>创建<code>CGEventRef</code>使用<code>CGEventCreateKeyboardEvent</code>, 第三个参数<code>true</code>代表<code>keydown</code>就是键盘按键的按下状态,如果是<code>false</code>则代表<code>keyup</code>. 这里用了一个键盘<code>kVK_ANSI_A</code> A键作为例子</li>
<li><code>CGEventTapLocation</code> 这个是下一个函数需要的参数 应该是键盘硬件按下的键位信息(如果搞错了欢迎指正,马上修改)  </li>
<li><code>CGEventPost()</code>发送<code>NSEvent</code>事件 </li>
<li>释放内存</li>
</ol>
<blockquote>
<p><em>talk is cheap, show me the code –LINUS TORVALDS</em>  </p>
</blockquote>
<p>下面是演示代码</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;Carbon/Carbon.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[]) &#123;</div><div class="line">    <span class="keyword">@autoreleasepool</span> &#123;</div><div class="line">       <span class="built_in">CGEventSourceRef</span> source = <span class="built_in">CGEventSourceCreate</span>(kCGEventSourceStatePrivate);</div><div class="line">	    <span class="built_in">CGEventRef</span> A = <span class="built_in">CGEventCreateKeyboardEvent</span>(source, kVK_ANSI_A, <span class="literal">true</span>);</div><div class="line">	    <span class="built_in">CGEventTapLocation</span> location = kCGHIDEventTap;</div><div class="line">	    <span class="comment">//发送事件</span></div><div class="line">	    <span class="built_in">CGEventPost</span>(location, A);</div><div class="line">	    <span class="built_in">CFRelease</span>(A);</div><div class="line">	    <span class="built_in">CFRelease</span>(source);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>CGEventSourceCreate()</code>里定义了三个<strong>枚举</strong></p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="built_in">CF_ENUM</span>(int32_t, <span class="built_in">CGEventSourceStateID</span>) &#123;</div><div class="line">  kCGEventSourceStatePrivate = <span class="number">-1</span>,</div><div class="line">  kCGEventSourceStateCombinedSessionState = <span class="number">0</span>,</div><div class="line">  kCGEventSourceStateHIDSystemState = <span class="number">1</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<blockquote>
<p><code>kCGEventSourceStatePrivate</code> 代表 专门的应用,如远程控制程序可以生成和跟踪事件源状态独立于其他进程。这些程序应该使用kCGEventSourceStatePrivate值在创建他们的事件源。<br><code>kCGEventSourceStateCombinedSessionState</code> 该状态表反映了所有事件源的组合状态发布到当前用户的登录会话。如果您的程序发布的事件在一个登录会话,您应该使用这个源状态当你创建一个事件源。</p>
<p><code>kCGEventSourceStateHIDSystemState</code> 该状态表反映了 组合硬件输入源从HID系统硬件层面发送的事件源。生成的事件。 就是外接键盘或者macbook本机键盘以及一些系统定义的按键点击事件 </p>
</blockquote>
<p>这里我使用的是第一个恰巧它有说明<code>remote control</code></p>
<p>上面就是今天要分享的模拟发送系统键盘事件全部逻辑, 如有错误欢迎指正, 鄙人定当咨诹善道察纳雅言.</p>
<p><strong>附* macOS ANSI码 </strong>枚举**</p>
<pre><code class="objc"><span class="comment">/*
 *  Summary:
 *    Virtual keycodes
 *  
 *  Discussion:
 *    These constants are the virtual keycodes defined originally in
 *    Inside Mac Volume V, pg. V-191. They identify physical keys on a
 *    keyboard. Those constants with "ANSI" in the name are labeled
 *    according to the key position on an ANSI-standard US keyboard.
 *    For example, kVK_ANSI_A indicates the virtual keycode for the key
 *    with the letter 'A' in the US keyboard layout. Other keyboard
 *    layouts may have the 'A' key label on a different physical key;
 *    in this case, pressing 'A' will generate a different virtual
 *    keycode.
 */</span>
<span class="keyword">enum</span> {
  kVK_ANSI_A                    = <span class="number">0x00</span>,
  kVK_ANSI_S                    = <span class="number">0x01</span>,
  kVK_ANSI_D                    = <span class="number">0x02</span>,
  kVK_ANSI_F                    = <span class="number">0x03</span>,
  kVK_ANSI_H                    = <span class="number">0x04</span>,
  kVK_ANSI_G                    = <span class="number">0x05</span>,
  kVK_ANSI_Z                    = <span class="number">0x06</span>,
  kVK_ANSI_X                    = <span class="number">0x07</span>,
  kVK_ANSI_C                    = <span class="number">0x08</span>,
  kVK_ANSI_V                    = <span class="number">0x09</span>,
  kVK_ANSI_B                    = <span class="number">0x0B</span>,
  kVK_ANSI_Q                    = <span class="number">0x0C</span>,
  kVK_ANSI_W                    = <span class="number">0x0D</span>,
  kVK_ANSI_E                    = <span class="number">0x0E</span>,
  kVK_ANSI_R                    = <span class="number">0x0F</span>,
  kVK_ANSI_Y                    = <span class="number">0x10</span>,
  kVK_ANSI_T                    = <span class="number">0x11</span>,
  kVK_ANSI_1                    = <span class="number">0x12</span>,
  kVK_ANSI_2                    = <span class="number">0x13</span>,
  kVK_ANSI_3                    = <span class="number">0x14</span>,
  kVK_ANSI_4                    = <span class="number">0x15</span>,
  kVK_ANSI_6                    = <span class="number">0x16</span>,
  kVK_ANSI_5                    = <span class="number">0x17</span>,
  kVK_ANSI_Equal                = <span class="number">0x18</span>,
  kVK_ANSI_9                    = <span class="number">0x19</span>,
  kVK_ANSI_7                    = <span class="number">0x1A</span>,
  kVK_ANSI_Minus                = <span class="number">0x1B</span>,
  kVK_ANSI_8                    = <span class="number">0x1C</span>,
  kVK_ANSI_0                    = <span class="number">0x1D</span>,
  kVK_ANSI_RightBracket         = <span class="number">0x1E</span>,
  kVK_ANSI_O                    = <span class="number">0x1F</span>,
  kVK_ANSI_U                    = <span class="number">0x20</span>,
  kVK_ANSI_LeftBracket          = <span class="number">0x21</span>,
  kVK_ANSI_I                    = <span class="number">0x22</span>,
  kVK_ANSI_P                    = <span class="number">0x23</span>,
  kVK_ANSI_L                    = <span class="number">0x25</span>,
  kVK_ANSI_J                    = <span class="number">0x26</span>,
  kVK_ANSI_Quote                = <span class="number">0x27</span>,
  kVK_ANSI_K                    = <span class="number">0x28</span>,
  kVK_ANSI_Semicolon            = <span class="number">0x29</span>,
  kVK_ANSI_Backslash            = <span class="number">0x2A</span>,
  kVK_ANSI_Comma                = <span class="number">0x2B</span>,
  kVK_ANSI_Slash                = <span class="number">0x2C</span>,
  kVK_ANSI_N                    = <span class="number">0x2D</span>,
  kVK_ANSI_M                    = <span class="number">0x2E</span>,
  kVK_ANSI_Period               = <span class="number">0x2F</span>,
  kVK_ANSI_Grave                = <span class="number">0x32</span>,
  kVK_ANSI_KeypadDecimal        = <span class="number">0x41</span>,
  kVK_ANSI_KeypadMultiply       = <span class="number">0x43</span>,
  kVK_ANSI_KeypadPlus           = <span class="number">0x45</span>,
  kVK_ANSI_KeypadClear          = <span class="number">0x47</span>,
  kVK_ANSI_KeypadDivide         = <span class="number">0x4B</span>,
  kVK_ANSI_KeypadEnter          = <span class="number">0x4C</span>,
  kVK_ANSI_KeypadMinus          = <span class="number">0x4E</span>,
  kVK_ANSI_KeypadEquals         = <span class="number">0x51</span>,
  kVK_ANSI_Keypad0              = <span class="number">0x52</span>,
  kVK_ANSI_Keypad1              = <span class="number">0x53</span>,
  kVK_ANSI_Keypad2              = <span class="number">0x54</span>,
  kVK_ANSI_Keypad3              = <span class="number">0x55</span>,
  kVK_ANSI_Keypad4              = <span class="number">0x56</span>,
  kVK_ANSI_Keypad5              = <span class="number">0x57</span>,
  kVK_ANSI_Keypad6              = <span class="number">0x58</span>,
  kVK_ANSI_Keypad7              = <span class="number">0x59</span>,
  kVK_ANSI_Keypad8              = <span class="number">0x5B</span>,
  kVK_ANSI_Keypad9              = <span class="number">0x5C</span>
};

<span class="comment">/* keycodes for keys that are independent of keyboard layout*/</span>
<span class="keyword">enum</span> {
  kVK_Return                    = <span class="number">0x24</span>,
  kVK_Tab                       = <span class="number">0x30</span>,
  kVK_Space                     = <span class="number">0x31</span>,
  kVK_Delete                    = <span class="number">0x33</span>,
  kVK_Escape                    = <span class="number">0x35</span>,
  kVK_Command                   = <span class="number">0x37</span>,
  kVK_Shift                     = <span class="number">0x38</span>,
  kVK_CapsLock                  = <span class="number">0x39</span>,
  kVK_Option                    = <span class="number">0x3A</span>,
  kVK_Control                   = <span class="number">0x3B</span>,
  kVK_RightCommand              = <span class="number">0x36</span>,
  kVK_RightShift                = <span class="number">0x3C</span>,
  kVK_RightOption               = <span class="number">0x3D</span>,
  kVK_RightControl              = <span class="number">0x3E</span>,
  kVK_Function                  = <span class="number">0x3F</span>,
  kVK_F17                       = <span class="number">0x40</span>,
  kVK_VolumeUp                  = <span class="number">0x48</span>,
  kVK_VolumeDown                = <span class="number">0x49</span>,
  kVK_Mute                      = <span class="number">0x4A</span>,
  kVK_F18                       = <span class="number">0x4F</span>,
  kVK_F19                       = <span class="number">0x50</span>,
  kVK_F20                       = <span class="number">0x5A</span>,
  kVK_F5                        = <span class="number">0x60</span>,
  kVK_F6                        = <span class="number">0x61</span>,
  kVK_F7                        = <span class="number">0x62</span>,
  kVK_F3                        = <span class="number">0x63</span>,
  kVK_F8                        = <span class="number">0x64</span>,
  kVK_F9                        = <span class="number">0x65</span>,
  kVK_F11                       = <span class="number">0x67</span>,
  kVK_F13                       = <span class="number">0x69</span>,
  kVK_F16                       = <span class="number">0x6A</span>,
  kVK_F14                       = <span class="number">0x6B</span>,
  kVK_F10                       = <span class="number">0x6D</span>,
  kVK_F12                       = <span class="number">0x6F</span>,
  kVK_F15                       = <span class="number">0x71</span>,
  kVK_Help                      = <span class="number">0x72</span>,
  kVK_Home                      = <span class="number">0x73</span>,
  kVK_PageUp                    = <span class="number">0x74</span>,
  kVK_ForwardDelete             = <span class="number">0x75</span>,
  kVK_F4                        = <span class="number">0x76</span>,
  kVK_End                       = <span class="number">0x77</span>,
  kVK_F2                        = <span class="number">0x78</span>,
  kVK_PageDown                  = <span class="number">0x79</span>,
  kVK_F1                        = <span class="number">0x7A</span>,
  kVK_LeftArrow                 = <span class="number">0x7B</span>,
  kVK_RightArrow                = <span class="number">0x7C</span>,
  kVK_DownArrow                 = <span class="number">0x7D</span>,
  kVK_UpArrow                   = <span class="number">0x7E</span>
};
</code></pre>
<p>全文完</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/macOS%E4%B8%8A%E6%A8%A1%E6%8B%9F%E5%8F%91%E9%
    
    </summary>
    
      <category term="macOS开发" scheme="http://sunyazhou.com/categories/macOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="http://sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="macOS开发" scheme="http://sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>$(SRCROOT)和$(PROJECT_DIR)区别</title>
    <link href="http://sunyazhou.com/2017/02/21/SRCROOT-and-PROJECT-DIR-different/"/>
    <id>http://sunyazhou.com/2017/02/21/SRCROOT-and-PROJECT-DIR-different/</id>
    <published>2017-02-21T08:28:00.000Z</published>
    <updated>2017-03-29T23:56:19.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>$(SRCROOT)</code>代表的是项目根目录下<br><code>$(PROJECT_DIR)</code>代表的是整个项目</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;$(SRCROOT)&lt;/code&gt;代表的是项目根目录下&lt;br&gt;&lt;code&gt;$(PROJECT_DIR)&lt;/code&gt;代表的是整个项目&lt;/p&gt;

    
    </summary>
    
      <category term="iOS开发" scheme="http://sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="http://sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="macOS开发" scheme="http://sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>使用终端删除NSUserDefault的内容</title>
    <link href="http://sunyazhou.com/2017/02/20/use-terminal-delete-all-NSUserDefault-content/"/>
    <id>http://sunyazhou.com/2017/02/20/use-terminal-delete-all-NSUserDefault-content/</id>
    <published>2017-02-20T11:05:01.000Z</published>
    <updated>2017-03-29T23:56:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>大家对<code>NSUserDefaults</code>非常熟悉 今天给大家讲一下如何用终端清理<code>NSUserDefaults</code>的信息  </p>
</blockquote>
<p><code>NSUserDefaults</code>和<code>win</code>开发的注册表一样 用于存储一些标记位<br>最近开发用到的比较多是如何不运行代码的情况下清理<code>NSUserDefaults</code>信息</p>
<p><strong>$ defaults delete + 包名</strong>  eg: com.baidu.demo </p>
<p>下面这样会删除所有以<code>com.baidu.demo</code>为包名的文件  </p>
<pre><code class="shell">$ defaults delete com.baidu.demo
</code></pre>
<blockquote>
<p>实际的的路径(把 my app和前后剪头 换成自己的应用的包名)</p>
</blockquote>
<p>macOS应用非沙盒权限(如下图) <code>~/Library/Preferences/&lt;my app&gt;.plist  &lt;my app&gt;</code>  eg:QQ<br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/%E4%BD%BF%E7%94%A8%E7%BB%88%E7%AB%AF%E5%88%A0%E9%99%A4NSUserDefault%E7%9A%84%E5%86%85%E5%AE%B9/Snip20170220_1.png" alt="非沙盒路径"></p>
<p>macOS应用沙盒权限(如下图)  <code>~/Library/Containers/&lt;my app&gt;/Data/Library/Preferences/&lt;my app&gt;.plist</code> eg:qq  </p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/%E4%BD%BF%E7%94%A8%E7%BB%88%E7%AB%AF%E5%88%A0%E9%99%A4NSUserDefault%E7%9A%84%E5%86%85%E5%AE%B9/Snip20170220_2.png" alt=""></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>defaults 还有其它指令还可以为某个<code>key</code>设置<code>value</code> 大家可自行google  </p>
</blockquote>
<p>谢谢大家</p>
<p>全文完</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;大家对&lt;code&gt;NSUserDefaults&lt;/code&gt;非常熟悉 今天给大家讲一下如何用终端清理&lt;code&gt;N
    
    </summary>
    
      <category term="macOS开发" scheme="http://sunyazhou.com/categories/macOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="http://sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="macOS开发" scheme="http://sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>iOS如何让二维码/条形码扫描框跟随二维码移动</title>
    <link href="http://sunyazhou.com/2017/02/18/how-to-let-QRCodeView-bounds-tracking-ScanView-moving/"/>
    <id>http://sunyazhou.com/2017/02/18/how-to-let-QRCodeView-bounds-tracking-ScanView-moving/</id>
    <published>2017-02-18T11:08:56.000Z</published>
    <updated>2017-03-29T23:56:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>开发过程中经常会遇到二维码条形码,但总会有一个比较蛋疼的问题<br>如何让二维码的扫描框跟随扫码到的二维码移动跟踪呢(就是智能探测扫描的layer.bounds)？  </p>
</blockquote>
<p><img src="http://www.appcoda.com/wp-content/uploads/2016/11/qrcode-reader-5-1024x637.jpg" alt=""></p>
<p>这里有一篇文字讲述了开发过程我这里就不赘述了, 如果有小伙伴觉得需要我翻译的话请在底部留言 我会及时更新代码  </p>
<blockquote>
<p><a href="http://www.appcoda.com/barcode-reader-swift/" target="_blank" rel="external">Building a Barcode and QR Code Reader in Swift 3 and Xcode 8</a></p>
</blockquote>
<p><em>这里比较核心的代码如下</em> <code>AVCaptureMetadataOutputObjectsDelegate</code>代理</p>
<pre><code class="swift">
<span class="function"><span class="keyword">func</span> <span class="title">captureOutput</span><span class="params">(<span class="number">_</span> captureOutput: AVCaptureOutput!, didOutputMetadataObjects metadataObjects: [Any]!, from connection: AVCaptureConnection!)</span></span> {  

    <span class="comment">// Check if the metadataObjects array is not nil and it contains at least one object.</span>
    <span class="keyword">if</span> metadataObjects == <span class="literal">nil</span> || metadataObjects.<span class="built_in">count</span> == <span class="number">0</span> {
        qrCodeFrameView?.frame = <span class="type">CGRect</span>.zero
        messageLabel.text = <span class="string">"No QR code is detected"</span>
        <span class="keyword">return</span>
    }

    <span class="comment">// Get the metadata object.</span>
    <span class="keyword">let</span> metadataObj = metadataObjects[<span class="number">0</span>] <span class="keyword">as</span>! <span class="type">AVMetadataMachineReadableCodeObject</span>

    <span class="keyword">if</span> metadataObj.type == <span class="type">AVMetadataObjectTypeQRCode</span> {
        <span class="comment">// If the found metadata is equal to the QR code metadata then update the status label's text and set the bounds</span>
        <span class="keyword">let</span> barCodeObject = videoPreviewLayer?.transformedMetadataObject(<span class="keyword">for</span>: metadataObj)
        <span class="comment">//核心代码在这</span>
        qrCodeFrameView?.frame = barCodeObject!.bounds

        <span class="keyword">if</span> metadataObj.stringValue != <span class="literal">nil</span> {
            messageLabel.text = metadataObj.stringValue
        }
    }
}}
</code></pre>
<p><code>qrCodeFrameView?.frame = barCodeObject!.bounds</code><br>这行代码最核心 就是拿到barCodeObject.bounds 给我们自己创建透明的那个view就行了 <strong><a href="https://github.com/sunyazhou13/QRCodeReader" target="_blank" rel="external">最终项目</a></strong></p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/%E5%A6%82%E4%BD%95%E8%AE%A9%E4%BA%8C%E7%BB%B4%E7%A0%81-%E6%9D%A1%E5%BD%A2%E7%A0%81%E6%89%AB%E6%8F%8F%E6%A1%86%E8%B7%9F%E9%9A%8F%E4%BA%8C%E7%BB%B4%E7%A0%81%E7%A7%BB%E5%8A%A8/2017-02-18%2019_01_35loop.gif" alt="QRCode 跟踪"></p>
<p>全文完</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;开发过程中经常会遇到二维码条形码,但总会有一个比较蛋疼的问题&lt;br&gt;如何让二维码的扫描框跟随扫码到的二维码移动跟踪
    
    </summary>
    
      <category term="iOS开发" scheme="http://sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="http://sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>iOS语言本地化/国际化一些技巧</title>
    <link href="http://sunyazhou.com/2017/02/17/iOS-internationalization-language-some-skills/"/>
    <id>http://sunyazhou.com/2017/02/17/iOS-internationalization-language-some-skills/</id>
    <published>2017-02-17T02:01:19.000Z</published>
    <updated>2017-03-29T23:56:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="代码获取国际化语言数组"><a href="#代码获取国际化语言数组" class="headerlink" title="代码获取国际化语言数组  "></a>代码获取国际化语言数组  </h2><p>获取当前app使用的语言<br><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="built_in">NSArray</span> *langArr1 = [[<span class="built_in">NSUserDefaults</span> standardUserDefaults] valueForKey:<span class="string">@"AppleLanguages"</span>];</div><div class="line"><span class="built_in">NSString</span> *language1 = langArr1.firstObject;</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"模拟器语言：%@"</span>,language1);</div></pre></td></tr></table></figure></p>
<p>切换语言 <code>en</code>代表 英语, <code>zh-Hans</code> 简体中文, <code>zh-Hant</code> 繁体中文.  </p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="built_in">NSArray</span> *lans = @[<span class="string">@"en"</span>];</div><div class="line">[[<span class="built_in">NSUserDefaults</span> standardUserDefaults] setObject:lans forKey:<span class="string">@"AppleLanguages"</span>];</div></pre></td></tr></table></figure>
<h2 id="修改scheme切换启动语言"><a href="#修改scheme切换启动语言" class="headerlink" title="修改scheme切换启动语言"></a>修改scheme切换启动语言</h2><p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/iOS%E8%AF%AD%E8%A8%80%E6%9C%AC%E5%9C%B0%E5%8C%96-%E5%9B%BD%E9%99%85%E5%8C%96%E4%B8%80%E4%BA%9B%E6%8A%80%E5%B7%A7/Snip20170217_2.png" alt="图1"></p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/iOS%E8%AF%AD%E8%A8%80%E6%9C%AC%E5%9C%B0%E5%8C%96-%E5%9B%BD%E9%99%85%E5%8C%96%E4%B8%80%E4%BA%9B%E6%8A%80%E5%B7%A7/Snip20170217_3.png" alt="图2"></p>
<blockquote>
<p><code>-AppleLanguages (zh-Hans)</code> 代表简体中文<br><code>-AppleLanguages (zh-Hant)</code> 代表繁体中文<br><code>-AppleLanguages (en)</code> 代表英文<br>其它小伙伴们自己总结一下也可以 注意 <strong>空格</strong> </p>
</blockquote>
<h2 id="国际化取不同图片代码"><a href="#国际化取不同图片代码" class="headerlink" title="国际化取不同图片代码"></a>国际化取不同图片代码</h2><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"ViewController.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> <span class="built_in">UIImageView</span> *imageView;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    <span class="comment">//xxx 是国际化 图片的名字 例如xxx.png </span></div><div class="line">    <span class="comment">//如果是 xxx.jpg 必须写把xxx 替换成xxx.jpg</span></div><div class="line">    <span class="built_in">NSString</span> *imageName = <span class="built_in">NSLocalizedString</span>(<span class="string">@"xxx"</span>, <span class="literal">nil</span>); </div><div class="line">    <span class="keyword">self</span>.imageView.image = [<span class="built_in">UIImage</span> imageNamed:imageName];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>下面是我写的一个<a href="https://github.com/sunyazhou13/LocalizedDemo/tree/master" target="_blank" rel="external">demo</a><br>主要完成 如下内容 </p>
<ol>
<li>工程名称配置plist 国际化  </li>
<li>字符串国际化  </li>
<li>自定义字符串国际化  </li>
<li>图片国际化  </li>
</ol>
<p>参考 <a href="http://www.jianshu.com/p/88c1b65e3ddb" target="_blank" rel="external">VV木公子</a> </p>
<p>全文完</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;代码获取国际化语言数组&quot;&gt;&lt;a href=&quot;#代码获取国际化语言数组&quot; class=&quot;headerlink&quot; title=&quot;代码获取国际化语言数组  &quot;&gt;&lt;/a&gt;代码获取国际化语言数组  &lt;/h2&gt;&lt;p&gt;获取当前app使用的语言&lt;br&gt;&lt;figure class=
    
    </summary>
    
      <category term="iOS开发" scheme="http://sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="http://sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="macOS开发" scheme="http://sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>搭建hexo博客教程</title>
    <link href="http://sunyazhou.com/2017/02/10/build-hexo-blog-Tutorial/"/>
    <id>http://sunyazhou.com/2017/02/10/build-hexo-blog-Tutorial/</id>
    <published>2017-02-10T02:24:25.000Z</published>
    <updated>2017-03-29T23:56:19.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><a href="http://www.ezlippi.com/blog/2016/02/jekyll-to-hexo.html" target="_blank" rel="external">Jekyll迁移到Hexo搭建个人博客</a>  </p>
<p><a href="http://www.czhzero.com/2016/06/25/hexoblog/" target="_blank" rel="external">HEXO + Github 搭建自己的博客系统</a></p>
<p><a href="http://skx926.com/2016/01/26/build-hexo/" target="_blank" rel="external">利用Hexo和Github Pages搭建个人博客</a></p>
</blockquote>
<p>上边是我参考的文章<br>主要是环境比较费劲  </p>
<pre><code>1. nodejs  
2. npm包管理工具  
3. hexo  
4. nvm管理node  
5. 本地配置重启shell又被reverse  
6. ...其它
</code></pre><p>多数都是参考喵神写的博客</p>
<p>都是眼泪搭建起来的博客, 完全免费, 可以说是模仿iOS开发者的领袖喵神的blog</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ezlippi.com/blog/2016/02/jekyll-to-hexo.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Jekyll迁移到Hexo搭建个人博客&lt;/a&gt;  &lt;/
    
    </summary>
    
      <category term="iOS开发" scheme="http://sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="http://sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="macOS开发" scheme="http://sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>DFS算法扫描上传文件/文件夹</title>
    <link href="http://sunyazhou.com/2017/02/10/DFS-algorithm-scanning-diectory-or-files/"/>
    <id>http://sunyazhou.com/2017/02/10/DFS-algorithm-scanning-diectory-or-files/</id>
    <published>2017-02-10T02:07:55.000Z</published>
    <updated>2017-03-29T23:56:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="DFS需求背景"><a href="#DFS需求背景" class="headerlink" title="DFS需求背景"></a>DFS需求背景</h2><blockquote>
<p>在开发过程中难免会遇到类似 上传文件夹的功能,但是上传文件夹会遇到一种情况</p>
</blockquote>
<pre><code>1. 如果文件里面包含子文件夹的N层嵌套
2. 如何过滤非空文件夹
3. 如何处理根层文件夹没有文件那么文件目录也需要创建
</code></pre><p>举例例子<br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/DFS%E7%AE%97%E6%B3%95%E6%89%AB%E6%8F%8F%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%3A%E6%96%87%E4%BB%B6%E5%A4%B9/Snip20170213_3.png" alt=""></p>
<p>这种文件夹如何 <code>此文件夹为空且是叶子结点</code> 走上传逻辑(就是发个 http请求 create一下 dir就行了) 我们要的结果是 过滤出这个路径走上传逻辑 创建一下这个最深处目录 那么下次再遇到它的父目录 <code>/1/</code> 的话应该就不用创建了.</p>
<p>还有一种情况  </p>
<blockquote>
<p>eg: ~/Downloads/A/B/C/ 里面有个 1.txt<br>路径是: ~/Downloads/A/B/C//A/B/C/1.txt</p>
</blockquote>
<p>一般如果广度优先做上传的话 Downloads、A、B、C分别要发4个http请求<br>如果深度优先发一个上传这个文件~/Downloads/A/B/C//A/B/C/1.txt就可以了，因为一般server都会做 容错处理发现父目录有没有没有就创建之类的逻辑。</p>
<h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><blockquote>
<p>不要害怕, 很简单<br>一般我们处理这种问题都是采用自己写的递归算法, 估计是鄙人算法不咋好没搞出来什么好的递归,最后找到了 苹果自带的递归方法</p>
</blockquote>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">//搞个点击事件 在这里我拿macOS上的 文件选择面板做一下测试</span></div><div class="line">- (<span class="keyword">IBAction</span>)dfsAction:(<span class="built_in">NSButton</span> *)sender</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSOpenPanel</span> *panelPath = [<span class="built_in">NSOpenPanel</span> openPanel];</div><div class="line">    [panelPath setCanChooseFiles:<span class="literal">YES</span>];</div><div class="line">    [panelPath setCanChooseDirectories:<span class="literal">YES</span>];</div><div class="line">    [panelPath setTitle:<span class="string">@"上传文件选择"</span>];</div><div class="line">    [panelPath setCanCreateDirectories:<span class="literal">YES</span>];</div><div class="line">    [panelPath setPrompt:<span class="string">@"上传"</span>];</div><div class="line">    [panelPath setMessage:<span class="string">@"这就是message"</span>];</div><div class="line">    panelPath.allowsMultipleSelection = <span class="literal">YES</span>;</div><div class="line">    [panelPath beginSheetModalForWindow:<span class="keyword">self</span>.window completionHandler:^(<span class="built_in">NSInteger</span> result) &#123;</div><div class="line">        <span class="keyword">if</span> (result == <span class="built_in">NSFileHandlingPanelOKButton</span>) &#123;</div><div class="line">            [<span class="keyword">self</span> dfsUrls:panelPath.URLs];</div><div class="line">        &#125;</div><div class="line">    &#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/DFS%E7%AE%97%E6%B3%95%E6%89%AB%E6%8F%8F%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%3A%E6%96%87%E4%BB%B6%E5%A4%B9/Snip20170213_1.png" alt=""></p>
<p>然后  </p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> 选择文件夹的目录</div><div class="line"></div><div class="line"> @param urls 所有选中的目录/文件URL</div><div class="line"> */</div><div class="line">- (<span class="keyword">void</span>)dfsUrls:(<span class="built_in">NSArray</span> *)urls</div><div class="line">&#123;</div><div class="line">	<span class="comment">//开一个线程在异步处理这些耗时任务</span></div><div class="line">	<span class="built_in">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>), ^&#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"所有URLs%@"</span>,urls);</div><div class="line">        <span class="keyword">if</span> (urls.count == <span class="number">0</span>) &#123; <span class="keyword">return</span>; &#125;</div><div class="line">        </div><div class="line">        <span class="built_in">NSTimeInterval</span> currentTime = [[<span class="built_in">NSDate</span> date] timeIntervalSince1970];</div><div class="line">        <span class="comment">//深度遍历</span></div><div class="line">        <span class="built_in">NSFileManager</span> *fileManager = [<span class="built_in">NSFileManager</span> defaultManager];</div><div class="line">        <span class="built_in">NSMutableArray</span> *urlDirFiles = [[<span class="built_in">NSMutableArray</span> alloc] initWithCapacity:<span class="number">0</span>];</div><div class="line">        <span class="built_in">NSArray</span> *keys = [<span class="built_in">NSArray</span> arrayWithObjects:<span class="built_in">NSURLIsDirectoryKey</span>,<span class="built_in">NSURLParentDirectoryURLKey</span>, <span class="literal">nil</span>];</div><div class="line">        <span class="built_in">NSUInteger</span> *total = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="built_in">NSURL</span> *localUrl <span class="keyword">in</span> urls) &#123;</div><div class="line">            <span class="built_in">NSDirectoryEnumerator</span> *enumerator = [<span class="keyword">self</span> enumeratorPathByFileManager:fileManager atURL:localUrl propertiesForKeys:keys options:<span class="number">0</span>];</div><div class="line">            </div><div class="line">            <span class="comment">//这里包含的元素是 有子文件的忽略父路径结点</span></div><div class="line">            <span class="comment">//eg: /A/1/2/ (这个就需要移除)   /A/1/2/sun.txt(保留这个文件即可）</span></div><div class="line">            <span class="keyword">for</span> (<span class="built_in">NSURL</span> *url <span class="keyword">in</span> enumerator) &#123;</div><div class="line">                total++;</div><div class="line">                <span class="built_in">NSError</span> *error;</div><div class="line">                <span class="built_in">NSNumber</span> *isDirectory = <span class="literal">nil</span>;</div><div class="line">                <span class="keyword">if</span> (![url getResourceValue:&amp;isDirectory forKey:<span class="built_in">NSURLIsDirectoryKey</span> error:&amp;error]) &#123;</div><div class="line">                    <span class="comment">// handle error</span></div><div class="line">                &#125;</div><div class="line">                </div><div class="line">                <span class="comment">//是否为文件夹</span></div><div class="line">                <span class="keyword">if</span> ([isDirectory boolValue]) &#123;</div><div class="line">                    <span class="comment">//方案1</span></div><div class="line"><span class="comment">//                    NSDirectoryEnumerator *dirEnumerator = [self enumeratorPathByFileManager:fileManager atURL:url propertiesForKeys:@[NSURLIsDirectoryKey] options:NSDirectoryEnumerationSkipsSubdirectoryDescendants];</span></div><div class="line"><span class="comment">//                    if (dirEnumerator.allObjects.count &gt; 0) &#123;</span></div><div class="line"><span class="comment">//                        NSLog(@"文件夹内有文件,忽略此条路径 %@",[url path]);</span></div><div class="line"><span class="comment">//                    &#125; else &#123;</span></div><div class="line"><span class="comment">//                        [urlDirFiles addObject:[url path]];</span></div><div class="line"><span class="comment">//                    &#125;</span></div><div class="line">                    </div><div class="line">                    <span class="comment">//方案2</span></div><div class="line">                    <span class="built_in">NSError</span> *error = <span class="literal">nil</span>;</div><div class="line">                    <span class="built_in">NSArray</span> *listOfFiles = [fileManager contentsOfDirectoryAtPath:[url path] error:<span class="literal">nil</span>];</div><div class="line">                    <span class="keyword">if</span> (listOfFiles != <span class="literal">nil</span> &amp;&amp; listOfFiles.count == <span class="number">0</span>) &#123;</div><div class="line">                        [urlDirFiles addObject:[url path]];</div><div class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (error == <span class="literal">nil</span>)&#123;</div><div class="line">                        <span class="built_in">NSLog</span>(<span class="string">@"文件夹内有文件,忽略此条路径 %@"</span>,[url path]);</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        <span class="built_in">NSLog</span>(<span class="string">@"文件遍历该层出错:%@"</span>,error);</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    [urlDirFiles addObject:[url path]];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"所有可上传文件列表:\n%@"</span>,urlDirFiles);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">NSTimeInterval</span> nowTime = [[<span class="built_in">NSDate</span> date] timeIntervalSince1970];</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"\n文件数量:%zd 遍历总数:%zd\n耗时:%.2f 秒"</span>,urlDirFiles.count,total,(nowTime - currentTime));</div><div class="line">        total = <span class="number">0</span>;</div><div class="line">        </div><div class="line">        <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"scan end"</span>);</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来就是最核心的代码块  </p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line">- (<span class="built_in">NSDirectoryEnumerator</span> *)enumeratorPathByFileManager:(<span class="built_in">NSFileManager</span> *)fileManager</div><div class="line">                                                 atURL:(<span class="built_in">NSURL</span> *)url</div><div class="line">                                     propertiesForKeys:(<span class="keyword">nullable</span> <span class="built_in">NSArray</span>&lt;<span class="built_in">NSString</span> *&gt; *)keys</div><div class="line">                                               options:(<span class="built_in">NSDirectoryEnumerationOptions</span>)mask</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSDirectoryEnumerator</span> *enumerator = [fileManager</div><div class="line">                                         enumeratorAtURL:url</div><div class="line">                                         includingPropertiesForKeys:keys</div><div class="line">                                         options:mask</div><div class="line">                                         errorHandler:^(<span class="built_in">NSURL</span> *url, <span class="built_in">NSError</span> *error) &#123;</div><div class="line">                                             <span class="comment">// Handle the error.</span></div><div class="line">                                             <span class="comment">// Return YES if the enumeration should continue after the error.</span></div><div class="line">                                             <span class="built_in">NSLog</span>(<span class="string">@"深度遍历出错%@"</span>,error);</div><div class="line">                                             <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">                                         &#125;];</div><div class="line">    <span class="keyword">return</span> enumerator;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>NSDirectoryEnumerator</code> 是一个路径枚举迭代器 </p>
<blockquote>
<p>talk is cheap, show me the result.  </p>
</blockquote>
<p>下面是我扫描本地<code>下载</code>目录的结果<br><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/DFS%E7%AE%97%E6%B3%95%E6%89%AB%E6%8F%8F%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%3A%E6%96%87%E4%BB%B6%E5%A4%B9/Snip20170213_4.png" alt=""></p>
<p><img src="https://raw.githubusercontent.com/sunyazhou13/sunyazhou13.github.io-images/master/DFS%E7%AE%97%E6%B3%95%E6%89%AB%E6%8F%8F%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%3A%E6%96%87%E4%BB%B6%E5%A4%B9/%E5%9B%BE%E7%89%87%201.png" alt=""></p>
<p>结果还是比较快的 </p>
<p>单从数据上来讲 比广度优先节省至少7万次Http请求</p>
<p>我怀疑是macOS对系统目录有索引或者缓存 第二次扫码速度比较快</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总体来看，效果还可以，如果你有更好的算法来解决这种问题 欢迎@我 或者发邮件我也学习一下. </p>
<blockquote>
<p><a href="https://github.com/sunyazhou13/DFSDemo" target="_blank" rel="external">最终DFSdemo</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;DFS需求背景&quot;&gt;&lt;a href=&quot;#DFS需求背景&quot; class=&quot;headerlink&quot; title=&quot;DFS需求背景&quot;&gt;&lt;/a&gt;DFS需求背景&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;在开发过程中难免会遇到类似 上传文件夹的功能,但是上传文件夹会遇到一种情况
    
    </summary>
    
      <category term="iOS开发" scheme="http://sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="http://sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="macOS开发" scheme="http://sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>如何使用git管理代码</title>
    <link href="http://sunyazhou.com/2017/02/09/how-to-use-git-manage-code/"/>
    <id>http://sunyazhou.com/2017/02/09/how-to-use-git-manage-code/</id>
    <published>2017-02-09T11:35:45.000Z</published>
    <updated>2017-03-29T23:56:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="全局配置git"><a href="#全局配置git" class="headerlink" title="全局配置git"></a>全局配置git</h2><figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">$ git config --global user.name <span class="string">"username"</span>  </div><div class="line">$ git config --golbal user.email <span class="string">"email@you.com"</span></div></pre></td></tr></table></figure>
<blockquote>
<p><code>username</code> 一般代表提交的本机用户名<br><code>email@you.com</code> 一般是邮箱地址 </p>
</blockquote>
<h2 id="创建本地仓库进行初始化"><a href="#创建本地仓库进行初始化" class="headerlink" title="创建本地仓库进行初始化  "></a>创建本地仓库进行初始化  </h2><figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">$ git init</div></pre></td></tr></table></figure>
<blockquote>
<p>执行完成之后在本地创建一个 .git 的隐藏文件夹包含git的信息在里面</p>
</blockquote>
<h2 id="克隆远程版本库"><a href="#克隆远程版本库" class="headerlink" title="克隆远程版本库"></a>克隆远程版本库</h2><figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> git@github.com:sunyazhou13/sunyazhou13.github.io.git</div></pre></td></tr></table></figure>
<h2 id="查看当前代码库状况"><a href="#查看当前代码库状况" class="headerlink" title="查看当前代码库状况"></a>查看当前代码库状况</h2><figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">$ git status</div></pre></td></tr></table></figure>
<blockquote>
<p><code>git status</code> 命令会显示当前代码库的状况，包括添加，修改（modified），删除（deleted）</p>
</blockquote>
<h2 id="版本管理"><a href="#版本管理" class="headerlink" title="版本管理"></a>版本管理</h2><p>指向git当前最新版本为<code>HEAD</code>，<code>HEAD^</code>表示上一版本，<code>HEAD^^</code>上上一个版本，<code>HEAD~100</code>表示往上100个版本</p>
<h2 id="添加本地修改代码"><a href="#添加本地修改代码" class="headerlink" title="添加本地修改代码"></a>添加本地修改代码</h2><figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">//添加当前目录的所有修改</div><div class="line">$ git add .</div></pre></td></tr></table></figure>
<blockquote>
<p>//如果需要添加指定文件可以这样<br><code>$ git add  A B  C</code>  // 中间用空格隔开<br>//如果有些文件标红 代表未纳入git 管理 可以 <code>rm -rf xxx</code>删除该文件<br>//如果有些文件标黄 代表有修改<br>//如果有些文件标绿 代表有文件已经纳入 <code>git</code> 管理</p>
</blockquote>
<h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">$ git commit -am <span class="string">"[产品名称][迭代名称] 1.修改点 2.修改点xxx"</span></div></pre></td></tr></table></figure>
<h2 id="push到git代码仓库"><a href="#push到git代码仓库" class="headerlink" title="push到git代码仓库"></a>push到<code>git</code>代码仓库</h2><figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">$ git push origin HEAD:refs/<span class="keyword">for</span>/master</div></pre></td></tr></table></figure>
<blockquote>
<p>如果是第一次提交 使用 <code>git push -u origin master</code></p>
</blockquote>
<h2 id="push-的时候进行代码追踪"><a href="#push-的时候进行代码追踪" class="headerlink" title="push 的时候进行代码追踪"></a>push 的时候进行代码追踪</h2><figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">$ git push --set-upstream origin + 分支名</div></pre></td></tr></table></figure>
<h2 id="如果提交被废弃"><a href="#如果提交被废弃" class="headerlink" title="如果提交被废弃"></a>如果提交被废弃</h2><figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">$ git fetch origin master</div><div class="line">$ git reset --soft origin/master</div><div class="line">$ git add .</div><div class="line">$ git commit -m <span class="string">"some comments"</span></div><div class="line">$ git push origin HEAD:refs/<span class="keyword">for</span>/master</div></pre></td></tr></table></figure>
<blockquote>
<p>回到本地代码库库中，执行</p>
</blockquote>
<h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><p>创建分支并切换过去<br><figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">$ git branch -b 分支名</div></pre></td></tr></table></figure></p>
<p>切换分支</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">$ git checkout 分支名</div></pre></td></tr></table></figure>
<blockquote>
<p>查看远程分支 <code>git branch -r</code> r 代表remote</p>
</blockquote>
<p><a href="https://www.zybuluo.com/ValenW/note/364756" target="_blank" rel="external">详细资料参考</a></p>
<p>持续更新</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;全局配置git&quot;&gt;&lt;a href=&quot;#全局配置git&quot; class=&quot;headerlink&quot; title=&quot;全局配置git&quot;&gt;&lt;/a&gt;全局配置git&lt;/h2&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;co
    
    </summary>
    
      <category term="iOS开发" scheme="http://sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="http://sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="macOS开发" scheme="http://sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Webview的NSScrollView禁用滑动功能</title>
    <link href="http://sunyazhou.com/2017/02/09/howt-to-disable-WebviewNSScrollView-scroll/"/>
    <id>http://sunyazhou.com/2017/02/09/howt-to-disable-WebviewNSScrollView-scroll/</id>
    <published>2017-02-09T05:37:28.000Z</published>
    <updated>2017-03-29T23:56:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>在<code>webview</code>的<code>WebFrameLoadDelegate</code>代理里面实现如下代码</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#pragma mark -</span></div><div class="line"><span class="meta">#pragma mark - WebViewDelegate</span></div><div class="line">- (<span class="keyword">void</span>)webView:(WebView *)sender didFinishLoadForFrame:(WebFrame *)frame</div><div class="line">&#123;</div><div class="line">    [sender stringByEvaluatingJavaScriptFromString:<span class="string">@"document.documentElement.style.overflow='hidden'"</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上代码属于<code>macOS</code>上的开发内容.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在&lt;code&gt;webview&lt;/code&gt;的&lt;code&gt;WebFrameLoadDelegate&lt;/code&gt;代理里面实现如下代码&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;di
    
    </summary>
    
      <category term="macOS开发" scheme="http://sunyazhou.com/categories/macOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="http://sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="macOS开发" scheme="http://sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>2017回家过年</title>
    <link href="http://sunyazhou.com/2017/01/28/2017-Spring-Festival/"/>
    <id>http://sunyazhou.com/2017/01/28/2017-Spring-Festival/</id>
    <published>2017-01-28T05:42:34.000Z</published>
    <updated>2017-03-29T23:56:19.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p1.bqimg.com/584350/7df258f2ecddcf81.jpg" alt=""></p>
<blockquote>
<p>练习了一年的小楷, 感谢老乡<strong>潘旭</strong>的帮助，我的书法有很多提升.</p>
</blockquote>
<h2 id="出发"><a href="#出发" class="headerlink" title="出发"></a>出发</h2><p>当我拿着行李箱等待过年回家地铁那一刻 又是一年过去了<br><img src="http://p1.bqimg.com/584350/035a303723a4b623.jpg" alt=""><br>这么多年总觉得自己和农民工一样，无非就是穿着体面一些,但内心还是农民工的内心.</p>
<h2 id="高铁"><a href="#高铁" class="headerlink" title="高铁"></a>高铁</h2><p>睁开眼睛看到这篇黑土地盖着一层雪, 我应该快到家了。<br><img src="http://p1.bpimg.com/584350/5addde1fe4d65611.jpg" alt="Markdown"><br>我就是从这片黑土地走出去的年轻人, 我23年没有离开过这片黑土地，如今在京码砖好几年。买房没资格,买车没牌照,只能每天骑车我心爱的小牛M1上班。(其实我内心是崩溃的),只有雾霾陪着哥,有事没事来北京看看我和北京的土著。</p>
<p>24岁入职百度如今已经快3年了, 想想已经很久没换工作了.工资少的可怜,想起那个每天都一门心思研究人工智能的厂长，我真想拒绝再给他打工了.</p>
<h2 id="中转站"><a href="#中转站" class="headerlink" title="中转站"></a>中转站</h2><p>擦 车到站了 (我打算以后在这买个楼)<br><img src="http://i1.piimg.com/584350/698eb97cae2b2dea.jpg" alt="Markdown"><br>刚下火车 已经被这种熟悉的冷瞬间打透.这种冷是多么的熟悉, 我早穿上了<br><a href="https://item.taobao.com/item.htm?spm=a230r.1.14.9.pmOPas&amp;id=36777946060&amp;ns=1&amp;abbucket=15#detail" target="_blank" rel="external">林甸鞋</a>,只有熟悉东北的小伙伴才知道啥叫林甸鞋</p>
<blockquote>
<p>大庆市林甸县制造 的林甸鞋 俗称<strong>老头鞋</strong> 我就不上照片了,我觉得这是东北人值得骄傲的文化遗产,都可以申请世界文化遗产了,在冰城没有这鞋我估计你很难度过漫长严寒的冬天。一双鞋售价仅仅 33 元 送一双羊毛鞋垫, 说句实话这绝对是东北人的业界良心，这鞋一年都不断帮断底，一个冬天穿这鞋很暖和,不信你可以问问你身边的东北人。<br>当然不熟悉套路的估计不知道买啥牌子好, 我印象中只有 林嘉牌 双丽牌比较好 但是工厂估计早破产了,33元每双上哪挣钱去啊。想买的小伙伴或者想去东北旅游的小伙伴 建议随便买一双的就行了 都一样 反正不贵。<br><img src="http://p1.bqimg.com/584350/fb737f626882c66b.jpg" alt="Markdown"></p>
</blockquote>
<h2 id="小吃"><a href="#小吃" class="headerlink" title="小吃"></a>小吃</h2><p>古云人:”上车饺子下车面” 这句话说的很有哲理我特意在百度搜了一下<br>不过我还是想去吃哈尔滨的喜家德水饺<br><img src="http://p1.bqimg.com/584350/042feb2337732f5e.jpg" alt="Markdown"> </p>
<blockquote>
<p>trust me如果到哈尔滨必须要尝尝<strong>喜家德水饺</strong>和<strong>东方饺子王</strong><br>不去尝尝永远不知道啥叫地道的饺子, 做饺子能做到淋漓尽致也没谁了,饺子皮、大小、厚度、弧度、都有专门的计量工具, 如果把<strong>做饺子</strong>当做一个app的话,我觉得喜家德应该是 app 中的支付宝, 但是比较蛋疼的是这些传统的民族企业都不发展互联网, 不支持任何网络支付、支付宝、微信、百度钱包都用不了、我真觉的喜家德CEO应该聘请哥给他当互联网总裁、用互联网发展一下传统企业、这种封闭的经营模式我持批评的态度.这是新时代的中国、想发展必须要与时俱进、跟上时代的发展不能闭关锁国、我怀疑喜家德的 老大不太相信互联网给他带来的任何改变、这一点我必须批评一下他、要拿出李鸿章大人以一人抵一国的能力. 不断学习,与时俱进</p>
</blockquote>
<h2 id="冰雪大世界"><a href="#冰雪大世界" class="headerlink" title="冰雪大世界"></a>冰雪大世界</h2><p>说来惭愧在哈尔滨好几年都没去过<strong>冰雪大世界</strong>(上学时比较穷)门票在糯米上至少需要360左右/人,这绝对有点贵.</p>
<p>参加工作以后挣钱了必须想圆了学生时代的梦想,于是 让我大姐请我去了哈哈</p>
<p><img src="http://p1.bqimg.com/584350/d449b5d2f5debbed.jpg" alt="Markdown"></p>
<p><img src="http://i1.piimg.com/584350/f894381b5bd3aaee.jpg" alt="Markdown"><br><img src="http://i1.piimg.com/584350/d1115c4e6d7981ab.jpg" alt="Markdown"></p>
<blockquote>
<p>这个世界玩的都是人的想象力,我从来没想过冰和雪能玩出什么花样,去了才知道只要有想象力和创造力 一件普通东西能这么有意思。记得一点要有车去大世界最好, 我建议租个车或者亲戚有车,不然必须坐黑车回来,这个很蛋疼,什么滴滴打车 用司机的话 <strong>“啥滴都不好使”</strong> 这个确实很无奈,大家玩完回不去很是蛋疼.政府得加大力度管制这些出租车司机.</p>
</blockquote>
<h2 id="美丽冰城"><a href="#美丽冰城" class="headerlink" title="美丽冰城"></a>美丽冰城</h2><p><img src="http://i1.piimg.com/584350/a9abec8d1c2c56e0.jpg" alt="Markdown"><br><img src="http://i1.piimg.com/584350/7bf35db34b720d2a.jpg" alt="Markdown"><br><img src="http://i1.piimg.com/584350/dc97959821ac8fa2.jpg" alt="Markdown"><br><img src="http://i1.piimg.com/584350/a260c895027dd64c.jpg" alt="Markdown"></p>
<blockquote>
<p>在哈尔滨俄罗斯的建筑随处可见, 哈站前边(前两张照片)始于1907年有个什么斯基开个茶馆, 建的楼群依然还矗立在果戈里大街附近, 没去的小伙伴可以去看看, 最后一张断壁残垣在抢救性修复中。</p>
</blockquote>
<h2 id="红肠"><a href="#红肠" class="headerlink" title="红肠"></a>红肠</h2><p>哈尔滨有个比较出名的东西貌似叫红肠,但是 不是本地人很难知道哪里买的才算地道 我今天可以告诉大家啥叫地道的哈尔滨红肠<br><img src="http://i1.piimg.com/584350/1736e20ba1e625f5.jpg" alt="Markdown">  </p>
<p><img src="http://p1.bpimg.com/584350/40a9d97bdeee2b05.jpg" alt="Markdown"></p>
<blockquote>
<p>大家一定听过秋林红肠,都以为红肠应该是秋林牌子,其实好像叫秋林里道斯系列的食品<br>如果想买正宗的红肠我推荐2个品牌个两个地点</p>
</blockquote>
<ul>
<li><p><strong>商委红肠</strong>  </p>
<p>这个商委在 道外红旗大街514号（黑龙江工程学院对面）前店后厂,之所以这么出名是因为商委红肠全程纯手工制作,深得龙江人喜爱.很多人喜欢吃它那个专有的味道.也有很多人不喜欢它的味道嫌它大蒜放的多哈哈.反正我吃都一样没啥特别的.如果我回哈尔滨发展我一定学学红肠怎么制作的自己做的才放心哈哈. 这个红肠火爆的程度得早晨5点去排队 每天几百斤,卖没了就售罄了,尤其过节期间</p>
</li>
<li><p><strong>秋林里道斯红肠</strong>  </p>
<p>这个就在上边那绿色图片的地方地下一层,看哪里排队人多就在那里买就是秋林红肠最正宗的卖点,一定不要相信任何人说秋林红肠换地方了,好几十年了都没换地方怎么可能说换就换.都是商业竞争搞得鬼把戏,岂能欺骗我这个程序猿. (东大直街319号(近秋林国际购物中心)<br>15245082279,(0451)58938888)<br>就下图这地方<br><img src="http://p1.bqimg.com/584350/b4c23a2cdd0e057b.jpg" alt="Markdown"></p>
</li>
</ul>
<p>以后不要问谁哪里买红肠最好了,上边的就是最正宗的买红肠的地方了.</p>
<h2 id="回家"><a href="#回家" class="headerlink" title="回家"></a>回家</h2><p><img src="http://p1.bpimg.com/584350/8f60e12618c08949.jpg" alt="Markdown"><br>看着家乡的夕阳,我真的快到家了-海伦市</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p1.bqimg.com/584350/7df258f2ecddcf81.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;练习了一年的小楷, 感谢老乡&lt;strong&gt;潘旭&lt;/strong&gt;的帮助，我的书法有很多提升.&lt;/p
    
    </summary>
    
      <category term="生活记录" scheme="http://sunyazhou.com/categories/%E7%94%9F%E6%B4%BB%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="生活" scheme="http://sunyazhou.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>iOS开发知识点积累</title>
    <link href="http://sunyazhou.com/2017/01/18/iOS-development-knowledge-point-accumulate/"/>
    <id>http://sunyazhou.com/2017/01/18/iOS-development-knowledge-point-accumulate/</id>
    <published>2017-01-18T05:44:57.000Z</published>
    <updated>2017-03-29T23:56:19.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>搞了很久iOS开发, 以前都是用脑子记某种技术文章和技术实现的代码,但是当一个人的大脑超过一定存储极限的时候就会出现栈溢出(其实我比较笨)，后来开始逐渐记某博客的是谁写的，或者技巧实现的代码。。。后来发现不但栈溢出，堆也快存不住海量的iOS技术文章了。。。唉于是我的chrome上保留了所有经典的文章标签和浏览器网页地址，现在我想把它整理出来放在博客里，方便查找某技术实现的代码(其实我的原百度云小伙伴实习生都觉得我能对某种技术存储如此详细赶到惊叹).好了 我们开始iOS知识点技术导航</p>
</blockquote>
<p>iOS技术分类如下</p>
<ul>
<li>音频</li>
<li>相机与照片</li>
<li>图形图像</li>
<li>动画</li>
<li>UI转场</li>
<li>ASDK(AsyncDisplayKit)</li>
<li>swift相关</li>
<li>数学图形</li>
<li>架构</li>
<li>Masonry</li>
<li>Cocoapods</li>
<li>文件相关</li>
</ul>
<h2 id="音频"><a href="#音频" class="headerlink" title="音频"></a>音频</h2><p><strong><a href="http://msching.github.io/blog/2014/07/07/audio-in-ios/" target="_blank" rel="external">iOS音频播放 (一)：概述</a></strong><br><strong><a href="http://msching.github.io/blog/2014/07/08/audio-in-ios-2/" target="_blank" rel="external">iOS音频播放 (二)：AudioSession</a></strong><br><strong><a href="http://msching.github.io/blog/2014/07/09/audio-in-ios-3/" target="_blank" rel="external">iOS音频播放 (三)：AudioFileStream</a></strong><br><strong><a href="http://msching.github.io/blog/2014/07/19/audio-in-ios-4/" target="_blank" rel="external">iOS音频播放 (四)：AudioFile</a></strong><br><strong><a href="http://msching.github.io/blog/2014/08/02/audio-in-ios-5/" target="_blank" rel="external">iOS音频播放 (五)：AudioQueue</a></strong><br><strong><a href="http://msching.github.io/blog/2014/08/09/audio-in-ios-6/" target="_blank" rel="external">iOS音频播放 (六)：简单的音频播放器实现</a></strong><br><strong><a href="http://msching.github.io/blog/2014/09/07/audio-in-ios-7/" target="_blank" rel="external">iOS音频播放 (七)：播放iPod Library中的歌曲</a></strong><br><strong><a href="http://msching.github.io/blog/2014/11/06/audio-in-ios-8/" target="_blank" rel="external">iOS音频播放 (八)：NowPlayingCenter和RemoteControl</a></strong><br><strong><a href="http://msching.github.io/blog/2016/05/24/audio-in-ios-9/" target="_blank" rel="external">iOS音频播放 (九)：边播边缓存</a></strong></p>
<blockquote>
<p>以上内容来自<a href="http://msching.github.io/" target="_blank" rel="external">码农人生</a> 这个哥们我有过交流，感觉底层音频技术比较透彻，适合初学者以及中级开发者研究学习和使用。</p>
</blockquote>
<h2 id="图形处理"><a href="#图形处理" class="headerlink" title="图形处理"></a>图形处理</h2><p><strong><a href="https://objccn.io/issue-21-1/" target="_blank" rel="external">基础知识</a></strong>一些列教程可以连续看完<br><strong><a href="https://github.com/BradLarson/GPUImage" target="_blank" rel="external">GPUImage</a></strong>库<br><strong><a href="http://mp.weixin.qq.com/s/pg2vPYftkfghoQswxJFIvw" target="_blank" rel="external">iOS GPUImage源码解读（一）</a></strong><br><strong><a href="http://hawk0620.github.io/blog/2017/02/17/zpcamera-opensource-share/" target="_blank" rel="external">开源一个上架 App Store 的相机 App</a></strong></p>
<h2 id="图形图像"><a href="#图形图像" class="headerlink" title="图形图像"></a>图形图像</h2><p><strong><a href="https://www.objccn.io/issue-21-9/" target="_blank" rel="external">基于 OpenCV 的人脸识别</a></strong><br><strong><a href="https://github.com/3tinkers/TKImageView" target="_blank" rel="external">图片编辑</a></strong></p>
<h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><p><strong><a href="http://kittenyang.com/drawablebubble/" target="_blank" rel="external">QQ中未读气泡拖拽消失的实现分析</a></strong><br><strong><a href="http://kittenyang.com/curvelineanimation/" target="_blank" rel="external">iOS 自定义下拉线条动画</a></strong><br><strong><a href="https://github.com/sunyazhou13/Animations" target="_blank" rel="external">一个库涵盖了所有iOS动画效果</a></strong><br><strong><a href="https://github.com/facebook/pop" target="_blank" rel="external">pop</a></strong></p>
<blockquote>
<p>学动画先从<a href="http://kittenyang.com/" target="_blank" rel="external">骑滔(Kitten)</a>的动画搞起最靠谱<br>以上是普通动画内容2篇来自Kitten<br>持续更新中</p>
</blockquote>
<h2 id="转场动画"><a href="#转场动画" class="headerlink" title="转场动画"></a>转场动画</h2><p><strong><a href="">WWDC 2013 Session笔记 - iOS7中的ViewController切换</a></strong> 喵神的这篇必看  </p>
<p><strong><a href="https://www.raywenderlich.com/139277/uipresentationcontroller-tutorial-getting-started" target="_blank" rel="external">UIPresentationController Tutorial: Getting Started</a></strong> 需要翻墙<br><em>(话说我解释一下这个词”翻墙”,翻墙名词叫科学上网,黑话叫自备梯子,因为大家一开始都用<a href="https://www.yuntipub.com/" target="_blank" rel="external">云梯VPN</a>访问国外网站,因为我国搞了个垃圾防火墙的大型局域网,虽然阻碍了世界文明和技术科技的发展但也防范了一些不健康内容，比如万一有一天你搞个车床，制造个微冲出来怎么办哈哈,所以要翻越那个防火墙就俗称翻墙)</em>  </p>
<p><strong><a href="http://wxgbridgeq.github.io/blog/2015/08/10/custom-transition-animation/" target="_blank" rel="external">自定义控制器转场动画及下拉菜单的小Demo | AppCoda翻译系列</a></strong></p>
<blockquote>
<p>还有可以github搜索<strong><a href="https://github.com/search?l=Objective-C&amp;o=desc&amp;q=Transition&amp;s=stars&amp;type=Repositories&amp;utf8=%E2%9C%93" target="_blank" rel="external">Transition</a></strong><br>很多这种转场动画不一一介绍</p>
</blockquote>
<h2 id="ASDK-AsyncDisplayKit"><a href="#ASDK-AsyncDisplayKit" class="headerlink" title="ASDK(AsyncDisplayKit)"></a>ASDK(AsyncDisplayKit)</h2><p><strong><a href="http://asyncdisplaykit.org/" target="_blank" rel="external">官方文档</a></strong> (需要翻墙)<br><strong><a href="https://www.raywenderlich.com/124311/asyncdisplaykit-2-0-tutorial-getting-started" target="_blank" rel="external">AsyncDisplayKit 2.0 Tutorial: Getting Started</a></strong><br><strong><a href="https://www.raywenderlich.com/124696/asyncdisplaykit-2-0-tutorial-automatic-layout" target="_blank" rel="external">AsyncDisplayKit 2.0 Tutorial: Automatic Layout</a></strong><br><strong><a href="http://awhisper.github.io/2016/05/04/AsyncDisplayKit%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3%E7%BF%BB%E8%AF%91/" target="_blank" rel="external">AsyncDisplayKit官方文档翻译</a></strong><br><strong><a href="http://awhisper.github.io/2016/05/06/AsyncDisplayKit%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/" target="_blank" rel="external">AsyncDisplayKit源码分析(一)轮廓梳理</a></strong><br><strong><a href="http://awhisper.github.io/2016/12/16/AysncDisplayKit%E5%88%86%E6%9E%90-%E4%BA%8C/" target="_blank" rel="external">AsyncDisplayKit源码分析(二) 异步渲染</a></strong><br><strong><a href="http://draveness.me/asdk-rendering/" target="_blank" rel="external">使用ASDK性能调优-提升iOS界面的渲染性能</a></strong></p>
<blockquote>
<p>以上几篇分别来自 <strong><a href="https://www.raywenderlich.com/" target="_blank" rel="external">raywenderlich</a></strong><br>源码分析来自于 <strong><a href="http://awhisper.github.io/" target="_blank" rel="external">折腾范儿の味精
</a></strong> 一个百度阅读团队同事的博客<br>在这里我说一下我对ASDK的看法，我视图读过源码和官方文档，我发现这个不是你想用想用就能马上用的东西，简直可以让一个初学者学习一遍 <strong>UIKit</strong> 一样集成起来倒是很简单，但是就那是那个布局就足够一个开发人员研究一阵子，用不了masonry,但是功能单一的页面需要调优可以考虑一下。</p>
</blockquote>
<h2 id="swift相关"><a href="#swift相关" class="headerlink" title="swift相关"></a>swift相关</h2><p><strong><a href="http://swifter.tips/" target="_blank" rel="external">喵神的网站</a></strong> 目前好像停止了更新 iOS开发领域喵神 真是神一般的存在<br><strong><a href="http://southpeak.github.io/2015/09/26/ios-techset-5/" target="_blank" rel="external">swift随机数</a></strong> 来自<strong><a href="http://southpeak.github.io/" target="_blank" rel="external">南峰子 老驴</a></strong> 一个百度前同事现在在京东金融貌似， 有过技术交流很NB的一个人.<br><strong><a href="http://www.jianshu.com/p/fc78dab5736f" target="_blank" rel="external">Swift 3必看：从使用场景了解GCD新API</a></strong> 这个哥们我没有了解过 不过很多文章写的很好希望以后有机会交流一下</p>
<blockquote>
<p>持续更新中更新…</p>
</blockquote>
<h2 id="数学图形"><a href="#数学图形" class="headerlink" title="数学图形"></a>数学图形</h2><p><strong><a href="https://jackschaedler.github.io/" target="_blank" rel="external">图形数学</a></strong> eg:傅里叶变换</p>
<h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><p><strong><a href="http://casatwy.com/" target="_blank" rel="external">Casa博客</a></strong></p>
<blockquote>
<p>我必须评价一下这个Casa哥们,iOS架构师我唯一佩服的人,用我的话就是，这才是真正程序员心中的架构师，而不是哪些所谓的听起来很NB的架构师,我在百度个人云(你们看到的是百度网盘)工作时有个T8架构师就坐在我对面，那个架构师每天闲的我真想撅他，改iOS程序 xib的引用没去掉都不知道 最好导致线上崩溃，我其实非常想送他一句话，不管技术多NB 每天都要保持写代码，记得孔子的话：『吾尝终日而思矣，不如须臾之所学也』。<br>这个Casa的哥们让我看到了什么叫 架构工程师 和业务工程师，这是一个能真正去写架构代码然后扔给业务工程师说：按照这个搞法</p>
</blockquote>
<h2 id="Masonry"><a href="#Masonry" class="headerlink" title="Masonry"></a>Masonry</h2><p><strong><a href="http://tutuge.me/2015/05/23/autolayout-example-with-masonry/" target="_blank" rel="external"></a></strong><br><strong><a href="http://tutuge.me/2015/05/23/autolayout-example-with-masonry/" target="_blank" rel="external">有趣的Autolayout示例-Masonry实现</a></strong><br><strong><a href="http://tutuge.me/2015/08/08/autolayout-example-with-masonry2/" target="_blank" rel="external">有趣的Autolayout示例2-Masonry实现</a></strong><br><strong><a href="http://tutuge.me/2015/12/14/autolayout-example-with-masonry3/" target="_blank" rel="external">有趣的Autolayout示例3-Masonry实现</a></strong><br><strong><a href="http://tutuge.me/2016/08/06/autolayout-example-with-masonry4/" target="_blank" rel="external">有趣的Autolayout示例4-Masonry实现</a></strong><br><strong><a href="http://tutuge.me/2017/03/12/autolayout-example-with-masonry5/" target="_blank" rel="external">有趣的Autolayout示例5-Masonry实现</a></strong>  </p>
<p><strong><a href="http://www.jianshu.com/p/ea74b230c70d" target="_blank" rel="external">iOS自动布局框架-Masonry详解</a></strong><br><strong><a href="http://www.ios122.com/2015/09/masonry/" target="_blank" rel="external">Masonry — 使用纯代码进行iOS应用的autolayout自适应布局</a></strong> 中文翻译</p>
<blockquote>
<p>话说 我个人认为学习masonry只需要看看 中文翻译之后 再去看看土土哥的教程就会了。土土哥的masonry教程简直就是中文文档。写的非常好</p>
</blockquote>
<h2 id="Cocoapods"><a href="#Cocoapods" class="headerlink" title="Cocoapods"></a>Cocoapods</h2><p><strong><a href="http://blog.devtang.com/2014/05/25/use-cocoapod-to-manage-ios-lib-dependency/" target="_blank" rel="external">用CocoaPods做iOS程序的依赖管理</a></strong> 巧神的文章必看</p>
<h2 id="文件相关"><a href="#文件相关" class="headerlink" title="文件相关"></a>文件相关</h2><p><strong><a href="https://github.com/sunyazhou13/FileExplorer" target="_blank" rel="external">文件列表</a></strong><br><strong><a href="https://github.com/sunyazhou13/HYFileManager" target="_blank" rel="external">HYFileManager</a></strong>  </p>
<h2 id="博客列表"><a href="#博客列表" class="headerlink" title="博客列表"></a>博客列表</h2><table>
<thead>
<tr>
<th>博客地址</th>
<th style="text-align:left">RSS地址</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://onevcat.com" target="_blank" rel="external">OneV’s Den</a></td>
<td style="text-align:left"><a href="http://onevcat.com/atom.xml" target="_blank" rel="external">http://onevcat.com/atom.xml</a></td>
</tr>
<tr>
<td><a href="http://beyondvincent.com" target="_blank" rel="external">破船之家</a></td>
<td style="text-align:left"><a href="http://beyondvincent.com/atom.xml" target="_blank" rel="external">http://beyondvincent.com/atom.xml</a></td>
</tr>
<tr>
<td><a href="http://nshipster.cn" target="_blank" rel="external">NSHipster</a></td>
<td style="text-align:left"><a href="http://nshipster.cn/feed.xml" target="_blank" rel="external">http://nshipster.cn/feed.xml</a></td>
</tr>
<tr>
<td><a href="http://blog.leezhong.com/" target="_blank" rel="external">Limboy 无网不剩</a></td>
<td style="text-align:left"><a href="http://feeds.feedburner.com/lzyy" target="_blank" rel="external">http://feeds.feedburner.com/lzyy</a></td>
</tr>
<tr>
<td><a href="http://blog.devtang.com" target="_blank" rel="external">唐巧的技术博客</a></td>
<td style="text-align:left"><a href="http://blog.devtang.com/atom.xml" target="_blank" rel="external">http://blog.devtang.com/atom.xml</a></td>
</tr>
<tr>
<td><a href="http://ios.lextang.com" target="_blank" rel="external">Lex iOS notes</a></td>
<td style="text-align:left"><a href="http://ios.lextang.com/rss" target="_blank" rel="external">http://ios.lextang.com/rss</a></td>
</tr>
<tr>
<td><a href="http://nianxi.net" target="_blank" rel="external">念茜的博客</a></td>
<td style="text-align:left"><a href="http://nianxi.net/feed.xml" target="_blank" rel="external">http://nianxi.net/feed.xml</a></td>
</tr>
<tr>
<td><a href="http://blog.xcodev.com" target="_blank" rel="external">Xcode Dev</a></td>
<td style="text-align:left"><a href="http://blog.xcodev.com/atom.xml" target="_blank" rel="external">http://blog.xcodev.com/atom.xml</a></td>
</tr>
<tr>
<td><a href="http://wufawei.com/" target="_blank" rel="external">Ted’s Homepage</a></td>
<td style="text-align:left"><a href="http://wufawei.com/feed" target="_blank" rel="external">http://wufawei.com/feed</a></td>
</tr>
<tr>
<td><a href="http://blog.t-xx.me" target="_blank" rel="external">txx’s blog</a></td>
<td style="text-align:left"><a href="http://blog.t-xx.me/atom.xml" target="_blank" rel="external">http://blog.t-xx.me/atom.xml</a></td>
</tr>
<tr>
<td><a href="http://imkevin.me" target="_blank" rel="external">KEVIN BLOG</a></td>
<td style="text-align:left"><a href="http://imkevin.me/rss" target="_blank" rel="external">http://imkevin.me/rss</a></td>
</tr>
<tr>
<td><a href="http://www.xiangwangfeng.com" target="_blank" rel="external">阿毛的蛋疼地</a></td>
<td style="text-align:left"><a href="http://www.xiangwangfeng.com/atom.xml" target="_blank" rel="external">http://www.xiangwangfeng.com/atom.xml</a></td>
</tr>
<tr>
<td><a href="http://billwang1990.github.io" target="_blank" rel="external">亚庆的 Blog</a></td>
<td style="text-align:left"><a href="http://billwang1990.github.io/atom.xml" target="_blank" rel="external">http://billwang1990.github.io/atom.xml</a></td>
</tr>
<tr>
<td><a href="http://nonomori.farbox.com" target="_blank" rel="external">Nonomori</a></td>
<td style="text-align:left"><a href="http://nonomori.farbox.com/feed" target="_blank" rel="external">http://nonomori.farbox.com/feed</a></td>
</tr>
<tr>
<td><a href="http://tang3w.com" target="_blank" rel="external">言无不尽</a></td>
<td style="text-align:left"><a href="http://tang3w.com/atom.xml" target="_blank" rel="external">http://tang3w.com/atom.xml</a></td>
</tr>
<tr>
<td><a href="http://wonderffee.github.io" target="_blank" rel="external">Wonderffee’s Blog</a></td>
<td style="text-align:left"><a href="http://wonderffee.github.io/atom.xml" target="_blank" rel="external">http://wonderffee.github.io/atom.xml</a></td>
</tr>
<tr>
<td><a href="http://imtx.me" target="_blank" rel="external">I’m TualatriX</a></td>
<td style="text-align:left"><a href="http://imtx.me/feed/latest/" target="_blank" rel="external">http://imtx.me/feed/latest/</a></td>
</tr>
<tr>
<td><a href="http://vclwei.com" target="_blank" rel="external">vclwei</a></td>
<td style="text-align:left"><a href="http://vclwei.com/posts.rss" target="_blank" rel="external">http://vclwei.com/posts.rss</a></td>
</tr>
<tr>
<td><a href="http://blog.cocoabit.com" target="_blank" rel="external">Cocoabit</a></td>
<td style="text-align:left"><a href="http://blog.cocoabit.com/atom.xml" target="_blank" rel="external">http://blog.cocoabit.com/atom.xml</a></td>
</tr>
<tr>
<td><a href="http://nixzhu.me" target="_blank" rel="external">nixzhu on scriptogr.am</a></td>
<td style="text-align:left"><a href="http://nixzhu.me/feed" target="_blank" rel="external">http://nixzhu.me/feed</a></td>
</tr>
<tr>
<td><a href="http://studentdeng.github.io" target="_blank" rel="external">不会开机的男孩</a></td>
<td style="text-align:left"><a href="http://studentdeng.github.io/atom.xml" target="_blank" rel="external">http://studentdeng.github.io/atom.xml</a></td>
</tr>
<tr>
<td><a href="http://www.taofengping.com" target="_blank" rel="external">Nico</a></td>
<td style="text-align:left"><a href="http://www.taofengping.com/rss.xml" target="_blank" rel="external">http://www.taofengping.com/rss.xml</a></td>
</tr>
<tr>
<td><a href="http://hufeng825.github.io" target="_blank" rel="external">阿峰的技术窝窝</a></td>
<td style="text-align:left"><a href="http://hufeng825.github.io/atom.xml" target="_blank" rel="external">http://hufeng825.github.io/atom.xml</a></td>
</tr>
<tr>
<td><a href="http://answerhuang.duapp.com" target="_blank" rel="external">answer_huang</a></td>
<td style="text-align:left"><a href="http://answerhuang.duapp.com/index.php/feed/" target="_blank" rel="external">http://answerhuang.duapp.com/index.php/feed/</a></td>
</tr>
<tr>
<td><a href="http://webfrogs.me" target="_blank" rel="external">webfrogs</a></td>
<td style="text-align:left"><a href="http://webfrogs.me/feed/" target="_blank" rel="external">http://webfrogs.me/feed/</a></td>
</tr>
<tr>
<td><a href="http://joeyio.com" target="_blank" rel="external">代码手工艺人</a></td>
<td style="text-align:left"><a href="http://joeyio.com/atom.xml" target="_blank" rel="external">http://joeyio.com/atom.xml</a></td>
</tr>
<tr>
<td><a href="http://gracelancy.com" target="_blank" rel="external">Lancy’s Blog</a></td>
<td style="text-align:left"><a href="http://gracelancy.com/atom.xml" target="_blank" rel="external">http://gracelancy.com/atom.xml</a></td>
</tr>
<tr>
<td><a href="http://www.imallen.com" target="_blank" rel="external">I’m Allen</a></td>
<td style="text-align:left"><a href="http://www.imallen.com/atom.xml" target="_blank" rel="external">http://www.imallen.com/atom.xml</a></td>
</tr>
<tr>
<td><a href="http://imi.im/" target="_blank" rel="external">Travis’ Blog</a></td>
<td style="text-align:left"><a href="http://imi.im/feed" target="_blank" rel="external">http://imi.im/feed</a></td>
</tr>
<tr>
<td><a href="http://wangzz.github.io/" target="_blank" rel="external">王中周的技术博客</a></td>
<td style="text-align:left"><a href="http://wangzz.github.io/atom.xml" target="_blank" rel="external">http://wangzz.github.io/atom.xml</a></td>
</tr>
<tr>
<td><a href="http://jiajun.org/" target="_blank" rel="external">会写代码的猪</a></td>
<td style="text-align:left"><a href="http://gaosboy.com/feed/atom/" target="_blank" rel="external">http://gaosboy.com/feed/atom/</a></td>
</tr>
<tr>
<td><a href="http://wangkewei.cnblogs.com/" target="_blank" rel="external">克伟的博客</a></td>
<td style="text-align:left"><a href="http://feed.cnblogs.com/blog/u/23857/rss" target="_blank" rel="external">http://feed.cnblogs.com/blog/u/23857/rss</a></td>
</tr>
<tr>
<td><a href="http://cnblogs.com/biosli" target="_blank" rel="external">摇滚诗人</a></td>
<td style="text-align:left"><a href="http://feed.cnblogs.com/blog/u/35410/rss" target="_blank" rel="external">http://feed.cnblogs.com/blog/u/35410/rss</a></td>
</tr>
<tr>
<td><a href="http://geeklu.com/" target="_blank" rel="external">Luke’s Homepage</a></td>
<td style="text-align:left"><a href="http://geeklu.com/feed/" target="_blank" rel="external">http://geeklu.com/feed/</a></td>
</tr>
<tr>
<td><a href="http://iiiyu.com/" target="_blank" rel="external">萧宸宇</a></td>
<td style="text-align:left"><a href="http://iiiyu.com/atom.xml" target="_blank" rel="external">http://iiiyu.com/atom.xml</a></td>
</tr>
<tr>
<td><a href="http://www.heyuan110.com/" target="_blank" rel="external">Yuan博客</a></td>
<td style="text-align:left"><a href="http://www.heyuan110.com/?feed=rss2" target="_blank" rel="external">http://www.heyuan110.com/?feed=rss2</a></td>
</tr>
<tr>
<td><a href="http://shiningio.com/" target="_blank" rel="external">Shining IO</a></td>
<td style="text-align:left"><a href="http://shiningio.com/atom.xml" target="_blank" rel="external">http://shiningio.com/atom.xml</a></td>
</tr>
<tr>
<td><a href="http://www.yifeiyang.net/" target="_blank" rel="external">YIFEIYANG–易飞扬的博客</a></td>
<td style="text-align:left"><a href="http://www.yifeiyang.net/feed" target="_blank" rel="external">http://www.yifeiyang.net/feed</a></td>
</tr>
<tr>
<td><a href="http://koofrank.com/" target="_blank" rel="external">KooFrank’s Blog</a></td>
<td style="text-align:left"><a href="http://koofrank.com/rss" target="_blank" rel="external">http://koofrank.com/rss</a></td>
</tr>
<tr>
<td><a href="http://helloitworks.com" target="_blank" rel="external">hello it works</a></td>
<td style="text-align:left"><a href="http://helloitworks.com/feed" target="_blank" rel="external">http://helloitworks.com/feed</a></td>
</tr>
<tr>
<td><a href="http://msching.github.io/" target="_blank" rel="external">码农人生</a></td>
<td style="text-align:left"><a href="http://msching.github.io/atom.xml" target="_blank" rel="external">http://msching.github.io/atom.xml</a></td>
</tr>
<tr>
<td><a href="http://yulingtianxia.com" target="_blank" rel="external">玉令天下的Blog</a></td>
<td style="text-align:left"><a href="http://yulingtianxia.com/atom.xml" target="_blank" rel="external">http://yulingtianxia.com/atom.xml</a></td>
</tr>
<tr>
<td><a href="http://www.hotobear.com/" target="_blank" rel="external">不掏蜂窝的熊</a></td>
<td style="text-align:left"><a href="http://www.hotobear.com/?feed=rss2" target="_blank" rel="external">http://www.hotobear.com/?feed=rss2</a></td>
</tr>
<tr>
<td><a href="https://andelf.github.io/" target="_blank" rel="external">猫·仁波切</a></td>
<td style="text-align:left"><a href="https://andelf.github.io/atom.xml" target="_blank" rel="external">https://andelf.github.io/atom.xml</a></td>
</tr>
<tr>
<td><a href="http://ivoryxiong.org/" target="_blank" rel="external">煲仔饭</a></td>
<td style="text-align:left"><a href="http://ivoryxiong.org/feed.xml" target="_blank" rel="external">http://ivoryxiong.org/feed.xml</a></td>
</tr>
<tr>
<td><a href="http://adad184.com" target="_blank" rel="external">里脊串的开发随笔</a></td>
<td style="text-align:left"><a href="http://adad184.com/atom.xml" target="_blank" rel="external">http://adad184.com/atom.xml</a></td>
</tr>
<tr>
<td><a href="http://chun.tips/" target="_blank" rel="external">Chun Tips</a></td>
<td style="text-align:left"><a href="http://chun.tips/atom.xml" target="_blank" rel="external">http://chun.tips/atom.xml</a></td>
</tr>
<tr>
<td><a href="http://blog.callmewhy.com/" target="_blank" rel="external">Why’s blog - 汪海的实验室</a></td>
<td style="text-align:left"><a href="http://blog.callmewhy.com/atom.xml" target="_blank" rel="external">http://blog.callmewhy.com/atom.xml</a></td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;搞了很久iOS开发, 以前都是用脑子记某种技术文章和技术实现的代码,但是当一个人的大脑超过一定存储极限的时候就会出现栈溢出(其实我比较笨)，后来开始逐渐记某博客的是谁写的，或者技巧实现的代码。。。后来发现不但栈溢出，堆也快存不住海量的iOS技术文章
    
    </summary>
    
      <category term="iOS开发" scheme="http://sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="http://sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="macOS开发" scheme="http://sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>学习macOS开发的路线</title>
    <link href="http://sunyazhou.com/2017/01/13/Learning-macOS-development-shortcut/"/>
    <id>http://sunyazhou.com/2017/01/13/Learning-macOS-development-shortcut/</id>
    <published>2017-01-13T03:38:30.000Z</published>
    <updated>2017-03-29T23:56:19.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>开发总结</p>
</blockquote>
<p><img src="https://img3.doubanio.com/lpic/s28041282.jpg" alt="macOS icon"></p>
<blockquote>
<ol>
<li>学习完所有<strong><a href="https://www.raywenderlich.com/category/macos" target="_blank" rel="external">raywenderlich</a></strong>的<strong>macOS</strong>开发教程</li>
<li><strong><a href="https://pan.baidu.com/s/1nuMnePj" target="_blank" rel="external">Cocoa Programming for OS X (5th Edition)</a></strong>必看(英文版没有中文)</li>
<li><strong><a href="https://pan.baidu.com/s/1i493Zpz" target="_blank" rel="external">[Advanced.Mac.OS.X.Programming(3rd.2011)].Mark.Dalrymple.文字版</a></strong>必看</li>
</ol>
</blockquote>
<p>以上这些必须看一遍 包括那两本epub的书籍 虽然都是英文的(我本人英语应该不算太好但也不差)看这个很easy</p>
<p><strong>博客</strong></p>
<blockquote>
<p><strong><a href="http://www.tanhao.me/" target="_blank" rel="external">老谭笔记</a></strong> 这个大牛是原新浪网盘mac端的技术开发他的每一篇文章我都看过并实践过，大家如果学习macOS开发我建议先认真扫一遍他的博客</p>
<p><strong><a href="https://onevcat.com/" target="_blank" rel="external">喵神</a></strong><br><strong><a href="http://blog.devtang.com/" target="_blank" rel="external">巧神</a></strong><br>这些博客都是每个iOS&amp;macOS开发必看的<br>剩下的就是一堆博客了太多 我就不列了 大家github搜一下 </p>
</blockquote>
<p>欢迎大家提出问题 一起交流和学习，本人开发年头也不算太短了，以前搞不明白博客咋玩的，2017年开始决定先订个小目标 把博客搞好欢迎各位批评指教，鄙人定当咨诹善道察纳雅言，多谢！</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;开发总结&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://img3.doubanio.com/lpic/s28041282.jpg&quot; alt=&quot;macOS icon&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;l
    
    </summary>
    
      <category term="macOS开发" scheme="http://sunyazhou.com/categories/macOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="http://sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="macOS开发" scheme="http://sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>UIViewController代码规范</title>
    <link href="http://sunyazhou.com/2017/01/13/UIViewController-code-standard/"/>
    <id>http://sunyazhou.com/2017/01/13/UIViewController-code-standard/</id>
    <published>2017-01-13T03:18:07.000Z</published>
    <updated>2017-03-29T23:56:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Objective-C"><a href="#Objective-C" class="headerlink" title="Objective-C"></a>Objective-C</h2><figure class="highlight objc"><table><tr><td class="code"><pre><div class="line"><span class="meta">#pragma mark -</span></div><div class="line"><span class="meta">#pragma mark - private methods 私有方法</span></div><div class="line"></div><div class="line"><span class="meta">#pragma mark -</span></div><div class="line"><span class="meta">#pragma mark - public methods 公有方法</span></div><div class="line"></div><div class="line"><span class="meta">#pragma mark -</span></div><div class="line"><span class="meta">#pragma mark - getters and setters 设置器和访问器</span></div><div class="line"></div><div class="line"><span class="meta">#pragma mark -</span></div><div class="line"><span class="meta">#pragma mark - UITableViewDelegate</span></div><div class="line"></div><div class="line"><span class="meta">#pragma mark -</span></div><div class="line"><span class="meta">#pragma mark - CustomDelegate 自定义的代理</span></div><div class="line"></div><div class="line"><span class="meta">#pragma mark -</span></div><div class="line"><span class="meta">#pragma mark - event response 所有触发的事件响应 按钮、通知、分段控件等</span></div><div class="line"></div><div class="line"><span class="meta">#pragma mark -</span></div><div class="line"><span class="meta">#pragma mark - life cycle 视图的生命周期</span></div><div class="line"></div><div class="line"><span class="meta">#pragma mark -</span></div><div class="line"><span class="meta">#pragma mark - StatisticsLog 各种页面统计Log</span></div></pre></td></tr></table></figure>
<h2 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h2><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="comment">// MARK: -</span></div><div class="line"><span class="comment">// MARK: - life cycle 视图的生命周期</span></div><div class="line"></div><div class="line"><span class="comment">// MARK: -</span></div><div class="line"><span class="comment">// MARK: - getters and setters 设置器和访问器</span></div><div class="line"></div><div class="line"><span class="comment">// MARK: -</span></div><div class="line"><span class="comment">// MARK: - UITableViewDelegate 代理</span></div><div class="line"></div><div class="line"><span class="comment">// MARK: -</span></div><div class="line"><span class="comment">// MARK: - CustomDelegate 自定义的代理</span></div><div class="line"></div><div class="line"><span class="comment">// MARK: -</span></div><div class="line"><span class="comment">// MARK: - event response 所有触发的事件响应 按钮、通知、分段控件等</span></div><div class="line"></div><div class="line"><span class="comment">// MARK: -</span></div><div class="line"><span class="comment">// MARK: - private methods 私有方法</span></div><div class="line"></div><div class="line"><span class="comment">// MARK: -</span></div><div class="line"><span class="comment">// MARK: - public methods 公有方法</span></div><div class="line"></div><div class="line"><span class="comment">// MARK: -</span></div><div class="line"><span class="comment">// MARK: - StatisticsLog 各种页面统计Log</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Objective-C&quot;&gt;&lt;a href=&quot;#Objective-C&quot; class=&quot;headerlink&quot; title=&quot;Objective-C&quot;&gt;&lt;/a&gt;Objective-C&lt;/h2&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table
    
    </summary>
    
      <category term="iOS开发" scheme="http://sunyazhou.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="http://sunyazhou.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="macOS开发" scheme="http://sunyazhou.com/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
</feed>
