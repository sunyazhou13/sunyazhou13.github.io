<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://www.sunyazhou.com</id><title>迈腾大队长</title><subtitle>嗨,我是孙亚洲(@sunyazhou13),一名来自祖国北国冰城的iOS开发者.</subtitle> <updated>2023-03-06T10:57:06+08:00</updated> <author> <name>孙亚洲</name> <uri>https://www.sunyazhou.com</uri> </author><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="https://www.sunyazhou.com" rel="alternate" type="text/html" /> <generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator> <rights> © 2023 孙亚洲 </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>objc中的类型安全转换</title><link href="https://www.sunyazhou.com/2023/03/safecast/" rel="alternate" type="text/html" title="objc中的类型安全转换" /><published>2023-03-06T10:28:00+08:00</published> <updated>2023-03-06T10:57:06+08:00</updated> <id>https://www.sunyazhou.com/2023/03/safecast/</id> <content src="https://www.sunyazhou.com/2023/03/safecast/" /> <author> <name>孙亚洲</name> </author> <category term="ObjectiveC" /> <summary> 前言 本文具有强烈的个人感情色彩,如有观看不适,请尽快关闭. 本文仅作为个人学习记录使用,也欢迎在许可协议范围内转载或使用,请尊重版权并且保留原文链接,谢谢您的理解合作. 如果您觉得本站对您能有帮助,您可以使用RSS方式订阅本站,这样您将能在第一时间获取本站信息. CAST Cast也叫柯里化,就是一种简单的类型转换过程.在iOS中我们经常对某种数据类型进行强制转换.每次不得不写一些臃肿的代码,于是大家习惯写成宏来check 某实例变量是否数据某class. 下面代码分享出来经常用到宏 利用objc运行时提供的动态特性来处理常用的类型check. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #ifdef __cplusplus extern "C" { #endif id YZSafeCast(id obj, Class classType); #ifdef __cplusplus } #endif #ifndef YZ_SAFE_CAST /// 安全类型转换(柯里化) #define YZ_SAFE_CAST(o... </summary> </entry> <entry><title>iOS中NSDate是否是今天Today</title><link href="https://www.sunyazhou.com/2023/02/nsdateistoday/" rel="alternate" type="text/html" title="iOS中NSDate是否是今天Today" /><published>2023-02-13T19:39:00+08:00</published> <updated>2023-03-06T10:57:06+08:00</updated> <id>https://www.sunyazhou.com/2023/02/nsdateistoday/</id> <content src="https://www.sunyazhou.com/2023/02/nsdateistoday/" /> <author> <name>孙亚洲</name> </author> <category term="swiftUI" /> <summary> 前言 本文具有强烈的个人感情色彩,如有观看不适,请尽快关闭. 本文仅作为个人学习记录使用,也欢迎在许可协议范围内转载或使用,请尊重版权并且保留原文链接,谢谢您的理解合作. 如果您觉得本站对您能有帮助,您可以使用RSS方式订阅本站,这样您将能在第一时间获取本站信息. 背景 每天的iOS开发过程中经常会出现Check一些逻辑是否每天仅发生一次,一般我们的通用是用NSDate判断是否是今天,然后对NSDate做持久化存储 eg: MMKV、或者NSUserDefault,但随着工程的日渐庞大,我们逐渐关注一些细节和代码 的耗时. 首先来看一下几种不同的逻辑判断NSDateisToday的代码实现 1.系统NSCalendar日历 1 2 NSDate *date = [NSDate date]; //这里取当前日期,正常应该做为参数传入NSDate BOOL inToday = [[NSCalendar currentCalendar] isDateInToday:date] 2.增加更多参数调用NSCalendar 1 2 3 4 5 6 7 8... </summary> </entry> <entry><title>博客的图片资源优化</title><link href="https://www.sunyazhou.com/2023/02/webpenhancement/" rel="alternate" type="text/html" title="博客的图片资源优化" /><published>2023-02-05T17:09:00+08:00</published> <updated>2023-03-06T10:57:06+08:00</updated> <id>https://www.sunyazhou.com/2023/02/webpenhancement/</id> <content src="https://www.sunyazhou.com/2023/02/webpenhancement/" /> <author> <name>孙亚洲</name> </author> <category term="Blog" /> <summary> 前言 本文具有强烈的个人感情色彩,如有观看不适,请尽快关闭. 本文仅作为个人学习记录使用,也欢迎在许可协议范围内转载或使用,请尊重版权并且保留原文链接,谢谢您的理解合作. 如果您觉得本站对您能有帮助,您可以使用RSS方式订阅本站,这样您将能在第一时间获取本站信息. 背景 最近周末有点时间,对博客的资源图片进行了整体优化,优化后图片资源减少了一半.要不然以目前我写文章的速度,不出几年连同资源很快就会超过1G.如果超过1G的话github pages将停止对仓库提供支持,需要额外购买仓库空间. 前一阵偶然发现自己的博客图片太多了运行起来慢 加载也慢,资源文件优化减负逐渐成为迫在眉睫的焦虑任务. 然后尝试一下webp图片和png对比发现,简直就是降维打击,通用的图片,在webp下27k,在png下80k+,这完全就是几何倍数的优化.再回头看看画质,虽然色彩没有之前鲜艳了不过也不是一些重要的图片,没有必要搞得那么高清.于是萌生优化博客资源的想法. 想法有了 可是面对的是自己写了好多年的资源 难不成要挨个替换吗？ 作为NB的工程师必须得用脚本把所有的图片进行批处理,全部转成 ... </summary> </entry> <entry><title>如何使用jekyll发布一篇文章</title><link href="https://www.sunyazhou.com/2023/02/jekyllpost/" rel="alternate" type="text/html" title="如何使用jekyll发布一篇文章" /><published>2023-02-02T10:21:00+08:00</published> <updated>2023-03-06T10:57:06+08:00</updated> <id>https://www.sunyazhou.com/2023/02/jekyllpost/</id> <content src="https://www.sunyazhou.com/2023/02/jekyllpost/" /> <author> <name>孙亚洲</name> </author> <category term="Blog" /> <summary> 前言 本文具有强烈的个人感情色彩,如有观看不适,请尽快关闭. 本文仅作为个人学习记录使用,也欢迎在许可协议范围内转载或使用,请尊重版权并且保留原文链接,谢谢您的理解合作. 如果您觉得本站对您能有帮助,您可以使用RSS方式订阅本站,这样您将能在第一时间获取本站信息. jekyll 我的博客开始使用的是hexo,后来喵神 把博客换成以jekyll的形式,我还是很喜欢的.可是之前hexo要写一篇文章直接就可以用 1 2 hexo new "202300202XXXPaper" 的形式 通过模版生成一个markdown文件. 具体使用一看看hexo 指令 然而新的https://github.com/cotes2020/jekyll-theme-chirpy/ 主题 在喵大的简化版本里面还是比较简单实用的,唯独缺少了 如何快速写文章的操作. 经过和喵神邮件请教 喵神不但回复了我并表示 他不是很经常写文章,这种操作他都是复制一下原来的也不麻烦.邮件末尾喵神给出来一个非常实用的 stackoverflow的答案. 在我的博客中有一个Gemfile文件 ... </summary> </entry> <entry><title>Swift中的defer关键字</title><link href="https://www.sunyazhou.com/2023/02/swift-defer/" rel="alternate" type="text/html" title="Swift中的defer关键字" /><published>2023-02-01T10:10:58+08:00</published> <updated>2023-03-06T10:57:06+08:00</updated> <id>https://www.sunyazhou.com/2023/02/swift-defer/</id> <content src="https://www.sunyazhou.com/2023/02/swift-defer/" /> <author> <name>孙亚洲</name> </author> <category term="swiftUI" /> <summary> 前言 本文具有强烈的个人感情色彩,如有观看不适,请尽快关闭. 本文仅作为个人学习记录使用,也欢迎在许可协议范围内转载或使用,请尊重版权并且保留原文链接,谢谢您的理解合作. 如果您觉得本站对您能有帮助,您可以使用RSS方式订阅本站,这样您将能在第一时间获取本站信息. defer关键字 在swift中有一个关键字非常 类似 try catch finally中的finally,在一个代码块中执行完成后 执行最后的收尾代码完成一些收尾工作. 例如: 清理工作、回收资源 跟 swift 文档举的例子类似，defer一个很适合的使用场景就是用来做清理工作。文件操作就是一个很好的例子： 关闭文件 1 2 3 4 5 6 7 func foo() { let fileDescriptor = open(url.path, O_EVTONLY) defer { close(fileDescriptor) } // use fileDescriptor... } 在例如： dealloc 手动分配的空间,最后销毁内存 1 2 3 4 5 6 7 func... </summary> </entry> </feed>
