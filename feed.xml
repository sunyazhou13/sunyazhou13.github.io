<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://www.sunyazhou.com</id><title>迈腾大队长</title><subtitle>嗨,我是孙亚洲(@sunyazhou13),一名来自祖国北国冰城的iOS开发者.</subtitle> <updated>2023-02-01T21:57:16+08:00</updated> <author> <name>孙亚洲</name> <uri>https://www.sunyazhou.com</uri> </author><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="https://www.sunyazhou.com" rel="alternate" type="text/html" /> <generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator> <rights> © 2023 孙亚洲 </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Swift中的defer关键字</title><link href="https://www.sunyazhou.com/2023/02/swift-defer/" rel="alternate" type="text/html" title="Swift中的defer关键字" /><published>2023-02-01T10:10:58+08:00</published> <updated>2023-02-01T21:57:16+08:00</updated> <id>https://www.sunyazhou.com/2023/02/swift-defer/</id> <content src="https://www.sunyazhou.com/2023/02/swift-defer/" /> <author> <name>孙亚洲</name> </author> <category term="swiftUI" /> <summary> 前言 本文具有强烈的个人感情色彩,如有观看不适,请尽快关闭. 本文仅作为个人学习记录使用,也欢迎在许可协议范围内转载或使用,请尊重版权并且保留原文链接,谢谢您的理解合作. 如果您觉得本站对您能有帮助,您可以使用RSS方式订阅本站,这样您将能在第一时间获取本站信息. defer关键字 在swift中有一个关键字非常 类似 try catch finally中的finally,在一个代码块中执行完成后 执行最后的收尾代码完成一些收尾工作. 例如: 清理工作、回收资源 跟 swift 文档举的例子类似，defer一个很适合的使用场景就是用来做清理工作。文件操作就是一个很好的例子： 关闭文件 1 2 3 4 5 6 7 func foo() { let fileDescriptor = open(url.path, O_EVTONLY) defer { close(fileDescriptor) } // use fileDescriptor... } 在例如： dealloc 手动分配的空间,最后销毁内存 1 2 3 4 5 6 7 func... </summary> </entry> <entry><title>2022年终总结</title><link href="https://www.sunyazhou.com/2022/12/FinalSummary/" rel="alternate" type="text/html" title="2022年终总结" /><published>2022-12-24T14:54:00+08:00</published> <updated>2023-02-01T21:57:16+08:00</updated> <id>https://www.sunyazhou.com/2022/12/FinalSummary/</id> <content src="https://www.sunyazhou.com/2022/12/FinalSummary/" /> <author> <name>孙亚洲</name> </author> <category term="记录世界记录你" /> <summary> 前言 本文具有强烈的个人感情色彩,如有观看不适,请尽快关闭. 本文仅作为个人学习记录使用,也欢迎在许可协议范围内转载或使用,请尊重版权并且保留原文链接,谢谢您的理解合作. 如果您觉得本站对您能有帮助,您可以使用RSS方式订阅本站,这样您将能在第一时间获取本站信息. 年终将至,作业催交. 州司临门,病毒被秒. 诸事皆顺,时光渐少. 励精图治,地上逍遥. 这是坚持写年终总结的第5个年头了,如果非要给今年的总结写个主题的话我肤浅的认为每天都活在自我否定后的不断妥协中的一年最为贴切. 2021年终总结 2020年终总结 2019年终总结 2018年终总结 2017年终总结 真的是有量的积累，才有质的飞跃. 2022回顾 关于生活 关于工作 关于学习 关于理想 关于好物 关于生活 疫情3年多了,直到这个月初才真正的放开,经过3针疫苗后,放开的第一周不幸中招.还好康复的很快. 2022年的春节是在北京过的,这是自参加工作以来唯一一次被疫情逼迫不得不在北京过年.说到底还是因为穷人的世界处处都是困难.... </summary> </entry> <entry><title>模仿Q音径向渐变动画</title><link href="https://www.sunyazhou.com/2022/12/gradientlayeranimation/" rel="alternate" type="text/html" title="模仿Q音径向渐变动画" /><published>2022-12-07T16:00:00+08:00</published> <updated>2023-02-01T21:57:16+08:00</updated> <id>https://www.sunyazhou.com/2022/12/gradientlayeranimation/</id> <content src="https://www.sunyazhou.com/2022/12/gradientlayeranimation/" /> <author> <name>孙亚洲</name> </author> <category term="iOS开发" /> <summary> 前言 本文具有强烈的个人感情色彩,如有观看不适,请尽快关闭. 本文仅作为个人学习记录使用,也欢迎在许可协议范围内转载或使用,请尊重版权并且保留原文链接,谢谢您的理解合作. 如果您觉得本站对您能有帮助,您可以使用RSS方式订阅本站,这样您将能在第一时间获取本站信息. 先上成品看看效果 深入CAGradientLayer 最近开发功能,视觉设计同学对QQ音乐的桌面歌词预览图的流体渐变动画很感兴趣,想让开发这边实现这个效果. 仔细观察歌词背景( 若不是我左右眼都是5.0 我第一次看到QQ音乐的效果我以为没动画.幼稚被教育了),会有一个类似柔光的效果像个灯光一样照射并移动.视觉设计同学把这个效果称为流体过渡动画. 为了研究这个效果我深入了解了一下CAGradientLayer,发现这里面有几个重要的类型和大家介绍一下 CAGradientLayer中有一个成员变量叫type 1 @property(copy) CAGradientLayerType type; //objc中的成员变量 1 open var type: CAGradientLayerTyp... </summary> </entry> <entry><title>《The Sunyazhou Theory Ⅱ》的诞生</title><link href="https://www.sunyazhou.com/2022/12/thesunyazhoutheoryii/" rel="alternate" type="text/html" title="《The Sunyazhou Theory Ⅱ》的诞生" /><published>2022-12-03T11:32:00+08:00</published> <updated>2023-02-01T21:57:16+08:00</updated> <id>https://www.sunyazhou.com/2022/12/thesunyazhoutheoryii/</id> <content src="https://www.sunyazhou.com/2022/12/thesunyazhoutheoryii/" /> <author> <name>孙亚洲</name> </author> <category term="理论" /> <summary> 前言 由于基础知识薄弱，我所做到的内容仅限于学习和观察到的一些事实，未能上升为理论学说. 非著名的《The Sunyazhou Theory II》 未来自动驾驶必须且一定是眼睛(摄像头)+耳朵(雷达超声波或激光)一起用才是最优解，计算机视觉+激光雷达，来实现安全车规级自动驾驶。 计算机视觉最多只能识别物体表面，经过计算结果指纹比对方式才能得知已识别到已知物体密度和质量(识别到未知物体则是盲区)，目前还做不到感知物体远近距离的精确到毫米级，即便做到了也是理论级，绝非物理级，而超声波雷达则可以快速感知，达到物理级感知，这才是它存在的合理性。 – 综上所述，我成立孙亚洲第二理论，未来自动驾驶一定眼睛耳朵一起用。 目前以我肤浅的认知还没出现这个系统，我应该享有优先命名权: TSTⅡCVLRS (The Sunyazhou Theory Ⅱ Computer Vision Laser Radar System) 孙亚洲第二理论计算机视觉激光雷达系统. 注: 计算机视觉是一种图形图像识别技术科学 激光雷达是一种发射激光束探测位置的雷达系统 验证理... </summary> </entry> <entry><title>SwiftUI属性包装器:State、Binding、ObservableObject、EnvironmentObject</title><link href="https://www.sunyazhou.com/2022/11/swiftuipropertywrapper/" rel="alternate" type="text/html" title="SwiftUI属性包装器:State、Binding、ObservableObject、EnvironmentObject" /><published>2022-11-25T18:45:00+08:00</published> <updated>2023-02-01T21:57:16+08:00</updated> <id>https://www.sunyazhou.com/2022/11/swiftuipropertywrapper/</id> <content src="https://www.sunyazhou.com/2022/11/swiftuipropertywrapper/" /> <author> <name>孙亚洲</name> </author> <category term="swiftUI" /> <summary> 前言 本文具有强烈的个人感情色彩,如有观看不适,请尽快关闭. 本文仅作为个人学习记录使用,也欢迎在许可协议范围内转载或使用,请尊重版权并且保留原文链接,谢谢您的理解合作. 如果您觉得本站对您能有帮助,您可以使用RSS方式订阅本站,这样您将能在第一时间获取本站信息. 主要内容 本文主要讲述SwiftUI中的属性包装器，这些包装器都是用来数据绑定的，作为视图的唯一真值来源，四种方式在实现功能上有细微差别。最后会进行总结比较 State Binding ObservableObject EnvironmentObject 1.@State SwiftUI管理声明为state的存储属性。当值发生变化时，SwiftUI会更新视图层次结构中依赖于该值的部分。使用@State作为存储在视图层次结构中的给定值的唯一真值来源。 @State修饰的属性虽然是存储属性，但是我们可以进行读写操作。 父视图和子视图进行传递该属性只能是值传递。 需要在属性名称前加上一个美元符号$来获得这个值。因为它是投影属性 代码： 1 2 3 4 5 6 7 8 9 stru... </summary> </entry> </feed>
