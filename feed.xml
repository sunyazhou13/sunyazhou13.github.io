<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://www.sunyazhou.com</id><title>迈腾大队长</title><subtitle>嗨,我是孙亚洲(@sunyazhou13),一名来自祖国北国冰城的iOS开发者.</subtitle> <updated>2024-08-19T02:20:11+00:00</updated> <author> <name>孙亚洲</name> <uri>https://www.sunyazhou.com</uri> </author><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="https://www.sunyazhou.com" rel="alternate" type="text/html" /> <generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator> <rights> © 2024 孙亚洲 </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Picking-and-Hit-Testing-in-Metal</title><link href="https://www.sunyazhou.com/2024/08/pickingandhittestingInmetal/" rel="alternate" type="text/html" title="Picking-and-Hit-Testing-in-Metal" /><published>2024-08-13T01:55:00+00:00</published> <updated>2024-08-19T02:20:11+00:00</updated> <id>https://www.sunyazhou.com/2024/08/pickingandhittestingInmetal/</id> <content src="https://www.sunyazhou.com/2024/08/pickingandhittestingInmetal/" /> <author> <name>孙亚洲</name> </author> <category term="iOS" /> <category term="SwiftUI" /> <summary> 前言 本文具有强烈的个人感情色彩,如有观看不适,请尽快关闭. 本文仅作为个人学习记录使用,也欢迎在许可协议范围内转载或分享,请尊重版权并且保留原文链接,谢谢您的理解合作. 如果您觉得本站对您能有帮助,您可以使用RSS方式订阅本站,感谢支持! 最近学习Metal 当学习到第十二的时候遇到了一个之前想解决却从未找到答案的方式。如何检测 一个3D场景中某个元素的点击问题,比如引入一个3D场景在手机端或者PC端, 通过手指触摸或者鼠标点击能知道 我点击是哪个3D模型 在Metal.by.Tutorials.4th.2023.12.pdf这本书中我找到了答案-Object Picking To get started with multipass rendering, you’ll create a simple render pass that adds object picking to your app. When you click a model in your scene, that model will render in a slightly differ... </summary> </entry> <entry><title>Swift中的do catch</title><link href="https://www.sunyazhou.com/2024/08/docatchinswift/" rel="alternate" type="text/html" title="Swift中的do catch" /><published>2024-08-11T01:55:00+00:00</published> <updated>2024-08-19T02:20:11+00:00</updated> <id>https://www.sunyazhou.com/2024/08/docatchinswift/</id> <content src="https://www.sunyazhou.com/2024/08/docatchinswift/" /> <author> <name>孙亚洲</name> </author> <category term="iOS" /> <category term="SwiftUI" /> <summary> 前言 本文具有强烈的个人感情色彩,如有观看不适,请尽快关闭. 本文仅作为个人学习记录使用,也欢迎在许可协议范围内转载或分享,请尊重版权并且保留原文链接,谢谢您的理解合作. 如果您觉得本站对您能有帮助,您可以使用RSS方式订阅本站,感谢支持! Swift中的do-catch语句 在Swift中，do-catch语句是用于异常处理的机制。它允许你执行可能会抛出错误的代码块（在do块中），并捕获这些错误（在catch块中）以便处理。这是Swift中处理运行时错误的一种优雅方式。 示例 1 2 3 4 5 6 7 8 9 10 11 do { // 尝试执行的代码，这里可能会抛出错误 let number = "这不是一个数字" let myNumber = Int(number) // 这行可能会因为转换失败而抛出错误 // 如果上面的代码没有抛出错误，这里的代码将执行 print("转换成功: \(myNumber)") } catch let error as NSError { // 捕获并处理错误 ... </summary> </entry> <entry><title>iOS中如何解决跨天日期变化</title><link href="https://www.sunyazhou.com/2024/07/uiapplicationsignificanttimechangenotification/" rel="alternate" type="text/html" title="iOS中如何解决跨天日期变化" /><published>2024-07-31T03:17:00+00:00</published> <updated>2024-08-19T02:20:11+00:00</updated> <id>https://www.sunyazhou.com/2024/07/uiapplicationsignificanttimechangenotification/</id> <content src="https://www.sunyazhou.com/2024/07/uiapplicationsignificanttimechangenotification/" /> <author> <name>孙亚洲</name> </author> <category term="iOS" /> <category term="SwiftUI" /> <summary> 前言 本文具有强烈的个人感情色彩,如有观看不适,请尽快关闭. 本文仅作为个人学习记录使用,也欢迎在许可协议范围内转载或分享,请尊重版权并且保留原文链接,谢谢您的理解合作. 如果您觉得本站对您能有帮助,您可以使用RSS方式订阅本站,感谢支持! 背景介绍 最近工作中遇到一个需求是 当app在前台并且 过午夜12点时 触发某些逻辑,而且还需要在前台触发, 也就是说如果在后台挂起状态 回到前台才要触发,一般用于一些签到之类的逻辑. UIApplicationSignificantTimeChangeNotification 在iOS应用开发中，UIApplicationSignificantTimeChangeNotification是一个强大的工具，它允许开发者在时间发生重大变化时接收通知。这种变化包括日期的更改、时区的变动或夏令时（DST）的开始和结束或运营商的时间更新。这个功能尤其对于需要在特定时间执行某些任务的应用非常有用，例如在午夜12点进行数据备份或更新。 要在应用中接收UIApplicationSignificantTimeChangeNotificatio... </summary> </entry> <entry><title>swiftUI中添加拟合手势MagnificationGesture</title><link href="https://www.sunyazhou.com/2024/07/magnificationgesture/" rel="alternate" type="text/html" title="swiftUI中添加拟合手势MagnificationGesture" /><published>2024-07-27T14:29:00+00:00</published> <updated>2024-08-19T02:20:11+00:00</updated> <id>https://www.sunyazhou.com/2024/07/magnificationgesture/</id> <content src="https://www.sunyazhou.com/2024/07/magnificationgesture/" /> <author> <name>孙亚洲</name> </author> <category term="iOS" /> <category term="SwiftUI" /> <summary> 前言 本文具有强烈的个人感情色彩,如有观看不适,请尽快关闭. 本文仅作为个人学习记录使用,也欢迎在许可协议范围内转载或分享,请尊重版权并且保留原文链接,谢谢您的理解合作. 如果您觉得本站对您能有帮助,您可以使用RSS方式订阅本站,感谢支持! MagnificationGesture 介绍 MagnificationGesture 是SwiftUI中用于处理缩放手势的手势识别器。它允许用户通过捏合（即两个手指靠近或远离）的手势来放大或缩小视图中的元素。这种手势在多种应用场景中都非常有用，如图片缩放、地图缩放、用户界面缩放等。 主要特点 缩放手势识别：MagnificationGesture 能够识别用户的捏合手势，并根据手势的方向（靠近或远离）来放大或缩小视图。 实时响应：在用户进行缩放手势时，MagnificationGesture 能够实时地调整视图的大小，提供流畅的交互体验。 可定制性：开发者可以通过设置不同的参数和监听器来定制MagnificationGesture的行为，以满足不同的应用需求。 使用场景 图片缩放：在图片查看应用... </summary> </entry> <entry><title>使用UIViewRepresentable 在SwiftUI中桥接 UIKit 视图</title><link href="https://www.sunyazhou.com/2024/07/UIViewrepresentable/" rel="alternate" type="text/html" title="使用UIViewRepresentable 在SwiftUI中桥接 UIKit 视图" /><published>2024-07-26T14:28:00+00:00</published> <updated>2024-08-19T02:20:11+00:00</updated> <id>https://www.sunyazhou.com/2024/07/UIViewrepresentable/</id> <content src="https://www.sunyazhou.com/2024/07/UIViewrepresentable/" /> <author> <name>孙亚洲</name> </author> <category term="iOS" /> <category term="SwiftUI" /> <summary> 前言 本文具有强烈的个人感情色彩,如有观看不适,请尽快关闭. 本文仅作为个人学习记录使用,也欢迎在许可协议范围内转载或分享,请尊重版权并且保留原文链接,谢谢您的理解合作. 如果您觉得本站对您能有帮助,您可以使用RSS方式订阅本站,感谢支持! UIViewRepresentable介绍 UIViewRepresentable 是 SwiftUI 框架中的一个协议，它主要用于在 SwiftUI 环境中封装 UIKit 视图（UIView 及其子类）。SwiftUI 是 Apple 推出的一个用于构建跨平台用户界面的现代框架，它支持 iOS、macOS、watchOS 和 tvOS。然而，由于 SwiftUI 是在相对较新的时间点上推出的，许多现有的 UIKit 视图和控件尚未被直接集成到 SwiftUI 中。 UIViewRepresentable 协议允许开发者将 UIKit 视图桥接到 SwiftUI 视图系统中，使得在 SwiftUI 应用中能够利用 UIKit 强大的功能和现有的 UIKit 组件。通过使用 UIViewRepresentable，开发者可以创建一... </summary> </entry> </feed>
