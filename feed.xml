<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://www.sunyazhou.com</id><title>迈腾大队长</title><subtitle>嗨,我是孙亚洲(@sunyazhou13),一名来自祖国北国冰城的iOS开发者.</subtitle> <updated>2022-07-01T13:18:26+08:00</updated> <author> <name>孙亚洲</name> <uri>https://www.sunyazhou.com</uri> </author><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="https://www.sunyazhou.com" rel="alternate" type="text/html" /> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2022 孙亚洲 </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>反转链表</title><link href="https://www.sunyazhou.com/2022/07/reverselist/" rel="alternate" type="text/html" title="反转链表" /><published>2022-07-01T12:36:00+08:00</published> <updated>2022-07-01T13:18:26+08:00</updated> <id>https://www.sunyazhou.com/2022/07/reverselist/</id> <content src="https://www.sunyazhou.com/2022/07/reverselist/" /> <author> <name>孙亚洲</name> </author> <category term="algorithm" /> <summary> 前言 本文具有强烈的个人感情色彩,如有观看不适,请尽快关闭. 本文仅作为个人学习记录使用,也欢迎在许可协议范围内转载或使用,请尊重版权并且保留原文链接,谢谢您的理解合作. 如果您觉得本站对您能有帮助,您可以使用RSS方式订阅本站,这样您将能在第一时间获取本站信息. 如题 给你单链表的头节点head，请你反转链表，并返回反转后的链表。 1 2 输入：head = [1,2,3,4,5] 输出：[5,4,3,2,1] Answer 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 //Definition for singly-linked list. struct ListNode { int val; ListNode *next; ListNode() : val(0), next(nullptr) {} ListNode(int x) : val(x), next(nullptr) {} ListNode(int x, ListNode *next... </summary> </entry> <entry><title>macos鼠标软件MOS</title><link href="https://www.sunyazhou.com/2022/04/Mos/" rel="alternate" type="text/html" title="macos鼠标软件MOS" /><published>2022-04-25T09:28:00+08:00</published> <updated>2022-07-01T13:18:26+08:00</updated> <id>https://www.sunyazhou.com/2022/04/Mos/</id> <content src="https://www.sunyazhou.com/2022/04/Mos/" /> <author> <name>孙亚洲</name> </author> <category term="iOS" /> <category term="Swift" /> <summary> 前言 本文具有强烈的个人感情色彩,如有观看不适,请尽快关闭. 本文仅作为个人学习记录使用,也欢迎在许可协议范围内转载或使用,请尊重版权并且保留原文链接,谢谢您的理解合作. 如果您觉得本站对您能有帮助,您可以使用RSS方式订阅本站,这样您将能在第一时间获取本站信息. 推荐一个好用的mac上使用鼠标的软件 免费开源mac上使用windows鼠标滑动自然的软件mos 可以让windows上的鼠标滚轮滑动像苹果触摸板一样丝滑 点此下载 </summary> </entry> <entry><title>开发分支管理模型</title><link href="https://www.sunyazhou.com/2022/04/BranchManage/" rel="alternate" type="text/html" title="开发分支管理模型" /><published>2022-04-14T08:50:00+08:00</published> <updated>2022-07-01T13:18:26+08:00</updated> <id>https://www.sunyazhou.com/2022/04/BranchManage/</id> <content src="https://www.sunyazhou.com/2022/04/BranchManage/" /> <author> <name>孙亚洲</name> </author> <category term="iOS" /> <category term="Swift" /> <summary> 前言 本文具有强烈的个人感情色彩,如有观看不适,请尽快关闭. 本文仅作为个人学习记录使用,也欢迎在许可协议范围内转载或使用,请尊重版权并且保留原文链接,谢谢您的理解合作. 如果您觉得本站对您能有帮助,您可以使用RSS方式订阅本站,这样您将能在第一时间获取本站信息. 一种适合客户端开发的分支管理模型 首先DEV代表开发分支 首先RB代表发版分支 注意此名称和思路借鉴之前快手开发的内部分支管理. 当开发完成提测后自动开出下个版本的RB和DEV分支.这样循环往复.实现迭代的管理 大家关心的问题 RB的代码修改如果DEV想用如何处理？ RB分支修改后和如何同步给DEV分支,如果常规开发的话在代码Review的前提下.可以从RB 提Merge Reuqest到DEV. eg: RB1.6.0 Merge to DEV1.6.1. 如果只是几个简单的commit 的话 我建议RB上的提交自己手动执行git cherry-pick commitIDXXX的形式到DEV分支.(也就是说你要切到DEVxxx分支 然后执行 git cherry-pick com... </summary> </entry> <entry><title>开源YZ3DMenu导航菜单</title><link href="https://www.sunyazhou.com/2022/04/YZ3DMenu/" rel="alternate" type="text/html" title="开源YZ3DMenu导航菜单" /><published>2022-04-13T09:50:00+08:00</published> <updated>2022-07-01T13:18:26+08:00</updated> <id>https://www.sunyazhou.com/2022/04/YZ3DMenu/</id> <content src="https://www.sunyazhou.com/2022/04/YZ3DMenu/" /> <author> <name>孙亚洲</name> </author> <category term="iOS" /> <category term="Swift" /> <summary> 前言 本文具有强烈的个人感情色彩,如有观看不适,请尽快关闭. 本文仅作为个人学习记录使用,也欢迎在许可协议范围内转载或使用,请尊重版权并且保留原文链接,谢谢您的理解合作. 如果您觉得本站对您能有帮助,您可以使用RSS方式订阅本站,这样您将能在第一时间获取本站信息. 上图先看效果 这个菜单是个3D菜单,之前在一个叫cosmos的app中出现,之前一直想找个时间把这个功能搞出来开源.之后出现了一个类似微博的开源项目Cosmos 这一阵子有时间 把这个组件重写一遍. 实现原理 通过tabbar的按钮触发(内部封装pan手势)时机,开始拖拽中、结束或取消… 添加新window 并在window上覆盖了 Blur模糊和容器,以及封装的仪表盘菜单视图 滑动过程中改动菜单视图(仪表盘菜单)的m34动画属性实现 倾斜滑动. 下面是框架的代码结构设计 代码比较多 我这里没有给大家详细列,我把代码 放在了 github上感兴趣的可以点击查看一下. 总结 之前一直想把这个重写一下,一直没有抽出时间,后续打算用swift重写一个新的轮子,希望这个开源... </summary> </entry> <entry><title>深入理解CVPixelBufferRef</title><link href="https://www.sunyazhou.com/2022/04/CVPixelBufferRef/" rel="alternate" type="text/html" title="深入理解CVPixelBufferRef" /><published>2022-04-06T09:50:00+08:00</published> <updated>2022-07-01T13:18:26+08:00</updated> <id>https://www.sunyazhou.com/2022/04/CVPixelBufferRef/</id> <content src="https://www.sunyazhou.com/2022/04/CVPixelBufferRef/" /> <author> <name>孙亚洲</name> </author> <category term="iOS" /> <category term="Swift" /> <summary> 在iOS里，我们经常能看到CVPixelBufferRef这个类型，在Camera采集返回的数据里得到一个CMSampleBufferRef,而每个CMSampleBufferRef里则包含一个CVPixelBufferRef,在视频硬解码的返回数据里也是一个CVPixelBufferRef。 顾名思义,CVPixelBufferRef是一种像素图片类型，由于CV开头，所以它是属于CoreVideo模块的。 iOS喜欢在对象命名前面用缩写表示它属于的模块，比如CF代表CoreFoundation,CG代表CoreGraphic，CM代表 CoreMedia。既然属于CoreVideo那么它就和视频处理相关了。 它是一个C对象，而不是Objective-C对象，所以它不是一个类，而是一个类似Handle的东西。从代码头文件的定义来看 CVPixelBufferRef就是用CVBufferRef typedef而来的，而CVBufferRef本质上就是一个void *，至于这个void *具体指向什么数据只有系统才知道了。 所以我们看到 所有对CVPixelBuffer... </summary> </entry> </feed>
