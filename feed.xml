<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://www.sunyazhou.com</id><title>迈腾大队长</title><subtitle>嗨,我是孙亚洲(@sunyazhou13),一名来自祖国北国冰城的iOS开发者.</subtitle> <updated>2025-10-20T23:06:06+00:00</updated> <author> <name>孙亚洲</name> <uri>https://www.sunyazhou.com</uri> </author><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="https://www.sunyazhou.com" rel="alternate" type="text/html" /> <generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator> <rights> © 2025 孙亚洲 </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>在 iOS 中使用 UIBezierPath 插值点</title><link href="https://www.sunyazhou.com/2025/10/interpolating-points-in-ios-with-uibezierpath/" rel="alternate" type="text/html" title="在 iOS 中使用 UIBezierPath 插值点" /><published>2025-10-20T22:48:00+00:00</published> <updated>2025-10-20T23:06:06+00:00</updated> <id>https://www.sunyazhou.com/2025/10/interpolating-points-in-ios-with-uibezierpath/</id> <content src="https://www.sunyazhou.com/2025/10/interpolating-points-in-ios-with-uibezierpath/" /> <author> <name>孙亚洲</name> </author> <category term="iOS" /> <summary> 前言 最近开发需要处理利用贝塞尔曲线解决平滑的动效,读了一篇Catmull-Rom的论文,记录一下这篇文章. Interpolating Points in iOS with UIBezierPath 最近，我一直在开发一个移动应用，其中包含一个可视化组件，该组件由平滑曲线组成，这些曲线穿过任意的、变化的二维点集。在 iOS 中实现这一功能最直接的方法是使用由 UIBezierPath 定义的平滑曲线序列，但开发人员需要以这样一种方式构造路径中的三次贝塞尔曲线：它们是平滑的并且恰好通过数据点。 在这篇文章中，我将描述两种简单且常用的方法，用于使用三次贝塞尔曲线插值点（不会深入探讨它们背后的数学原理），并链接到我编写的包含这两种插值方法实现的 git 仓库。 UIBezierPath 和贝塞尔曲线 在 iOS 中，我们使用 UIBezierPath 绘制直线段和曲线段。通过 addLineToPoint: 添加线性段非常简单，但如何绘制曲线形状呢？ 可以通过在路径中添加三次贝塞尔曲线来绘制曲线段。三次贝塞尔曲线由四个控制点定义——这四个点的位置定义了曲线的形状。在... </summary> </entry> <entry><title>GPU内存对齐算法</title><link href="https://www.sunyazhou.com/2025/05/MemoryAlignmentAlgorithm/" rel="alternate" type="text/html" title="GPU内存对齐算法" /><published>2025-05-11T07:30:00+00:00</published> <updated>2025-10-20T23:06:06+00:00</updated> <id>https://www.sunyazhou.com/2025/05/MemoryAlignmentAlgorithm/</id> <content src="https://www.sunyazhou.com/2025/05/MemoryAlignmentAlgorithm/" /> <author> <name>孙亚洲</name> </author> <category term="iOS" /> <category term="SwiftUI" /> <summary> 前言 本文具有强烈的个人感情色彩,如有观看不适,请尽快关闭. 本文仅作为个人学习记录使用,也欢迎在许可协议范围内转载或分享,请尊重版权并且保留原文链接,谢谢您的理解合作. 如果您觉得本站对您能有帮助,您可以使用RSS方式订阅本站,感谢支持! 背景介绍 在学习《Metal》 GPU着色器编程中 有一章讲解GPU资源堆(Resource Heap)的参数缓冲(Arguements Buffer)中需要从CPU送资源到GPU时遇到一段代码计算资源的内存占用的算法,很有意思,在此记录下来. 1 2 3 4 5 6 7 8 9 10 11 let sizeAndAligns = descriptors.map { descriptor in Renderer.device.heapTextureSizeAndAlign(descriptor: descriptor) } heapDescriptor.size = sizeAndAligns.reduce(0) { total, sizeAndAlign in let size = sizeAndAlign.si... </summary> </entry> <entry><title>Swift结构体实例内存布局的基础知识</title><link href="https://www.sunyazhou.com/2025/02/the-basics-on-the-memory-layout-of-swift-struct-instances/" rel="alternate" type="text/html" title="Swift结构体实例内存布局的基础知识" /><published>2025-02-23T12:17:00+00:00</published> <updated>2025-10-20T23:06:06+00:00</updated> <id>https://www.sunyazhou.com/2025/02/the-basics-on-the-memory-layout-of-swift-struct-instances/</id> <content src="https://www.sunyazhou.com/2025/02/the-basics-on-the-memory-layout-of-swift-struct-instances/" /> <author> <name>孙亚洲</name> </author> <category term="iOS" /> <category term="SwiftUI" /> <summary> 前言 本文具有强烈的个人感情色彩,如有观看不适,请尽快关闭. 本文仅作为个人学习记录使用,也欢迎在许可协议范围内转载或分享,请尊重版权并且保留原文链接,谢谢您的理解合作. 如果您觉得本站对您能有帮助,您可以使用RSS方式订阅本站,感谢支持! 背景介绍 2024年学习《Metal.by.Tutorials.4th.2023.12》中有提到swift中的结构体实例的内存布局,我把这些整理了一下. 大小、步长和对齐(Size, Stride, Alignment) Swift 结构体实例内存布局的基础知识 2018 年 3 月 12 日 ∙ Swift 内部原理 ∙ 作者：Greg Heo 在内存中处理 Swift 类型时，需要考虑三个属性：大小（Size）、步长（Stride） 和 对齐（Alignment）。 大小(Size) 让我们以两个结构体的举例说明 1 2 3 4 5 6 7 8 struct Year { let year: Int } struct YearWithMonth { let year: Int let mon... </summary> </entry> <entry><title>如何使用unsafe Swift指针类型直接访问内存并与C交互</title><link href="https://www.sunyazhou.com/2025/02/unsafe-swift-using-pointers-and-interacting-with-c/" rel="alternate" type="text/html" title="如何使用unsafe Swift指针类型直接访问内存并与C交互" /><published>2025-02-22T14:15:00+00:00</published> <updated>2025-10-20T23:06:06+00:00</updated> <id>https://www.sunyazhou.com/2025/02/unsafe-swift-using-pointers-and-interacting-with-c/</id> <content src="https://www.sunyazhou.com/2025/02/unsafe-swift-using-pointers-and-interacting-with-c/" /> <author> <name>孙亚洲</name> </author> <category term="iOS" /> <category term="SwiftUI" /> <summary> 前言 本文具有强烈的个人感情色彩,如有观看不适,请尽快关闭. 本文仅作为个人学习记录使用,也欢迎在许可协议范围内转载或分享,请尊重版权并且保留原文链接,谢谢您的理解合作. 如果您觉得本站对您能有帮助,您可以使用RSS方式订阅本站,感谢支持! 背景介绍 2024年学习《Metal.by.Tutorials.4th.2023.12》中有提到如何使用Unsafe Swift 指针和C交互,主要是在内存中如何标识C的内容,下面这篇文章是书中介绍的英文文章我看了以后觉得消化吸收一下,整理成中文版供各位参考. 在本教程中，您将学习如何使用unsafe Swift 通过各种指针类型直接访问内存。作者：Brody Eller。 更新说明：Brody Eller 为 Swift 5.1 更新了本教程。原始版本由 Ray Fix 编写。 默认情况下，Swift 是内存安全的：它防止直接访问内存，并确保在使用之前初始化所有内容。关键短语是“默认情况下”。你也可以使用不安全的 Swift，它允许你通过指针直接访问内存。 本教程将带你快速了解 Swift 中所谓的“不安全”特性。... </summary> </entry> <entry><title>2024年终总结</title><link href="https://www.sunyazhou.com/2024/12/FinalSummary/" rel="alternate" type="text/html" title="2024年终总结" /><published>2024-12-31T23:53:00+00:00</published> <updated>2025-10-20T23:06:06+00:00</updated> <id>https://www.sunyazhou.com/2024/12/FinalSummary/</id> <content src="https://www.sunyazhou.com/2024/12/FinalSummary/" /> <author> <name>孙亚洲</name> </author> <category term="生活纪实" /> <summary> 将一切困难踩在脚下 前言 本文具有强烈的个人感情色彩,如有观看不适,请尽快关闭. 本文仅作为个人学习记录使用,也欢迎在许可协议范围内转载或分享,请尊重版权并且保留原文链接,谢谢您的理解合作. 如果您觉得本站对您能有帮助,您可以使用RSS方式订阅本站,感谢支持! 清平乐·2024年终回顾 岁末天寒，回首流年远。 风霜雨雪征途漫，梦想未曾改变。 经济通缩卷起，尽显人之无力. 裁员压榨凋敝, 前途渺茫寥寂. 2024年冬纪念那些曾毫无人文主义精神和艺术气质的企业在互联网的浪潮变革洗礼中对待底层打工人惨无人道的杀戮. 这一年除了时刻面临被裁的风险外几乎生活过得毫无波澜,两鬓白发诉说着平静毫无追求的日子,这是缝缝补补的一年,几乎所有人都对自己的开支控制的非常到位,能花少部分钱修的指定不花钱换,纵观多年前所未有之经济现象,大家都在疯狂攒钱拒绝消费,迫不得已消费的话也只是”口红经济”的情况而已. 当对前途毫无期待的人们失去对未来经济向好的信心,那生活会过的毫无追求和期待,只能和现实写照下的自己妥协,勉强活着, 那样的人们中就有我一个. 在这种复杂的局面下来... </summary> </entry> </feed>
