<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://www.sunyazhou.com</id><title>迈腾大队长</title><subtitle>嗨,我是孙亚洲(@sunyazhou13),一名来自祖国北国冰城的iOS开发者.</subtitle> <updated>2023-03-17T21:00:19+08:00</updated> <author> <name>孙亚洲</name> <uri>https://www.sunyazhou.com</uri> </author><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="https://www.sunyazhou.com" rel="alternate" type="text/html" /> <generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator> <rights> © 2023 孙亚洲 </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>使用SwiftUI绘制环形 Slider</title><link href="https://www.sunyazhou.com/2023/03/circularsliderview/" rel="alternate" type="text/html" title="使用SwiftUI绘制环形 Slider" /><published>2023-03-17T20:38:00+08:00</published> <updated>2023-03-17T21:00:19+08:00</updated> <id>https://www.sunyazhou.com/2023/03/circularsliderview/</id> <content src="https://www.sunyazhou.com/2023/03/circularsliderview/" /> <author> <name>孙亚洲</name> </author> <category term="SwiftUI" /> <summary> 前言 本文具有强烈的个人感情色彩,如有观看不适,请尽快关闭. 本文仅作为个人学习记录使用,也欢迎在许可协议范围内转载或使用,请尊重版权并且保留原文链接,谢谢您的理解合作. 如果您觉得本站对您能有帮助,您可以使用RSS方式订阅本站,这样您将能在第一时间获取本站信息. SwiftUI绘制环形 Slider 最近看到一篇文章讲述简单的用SwiftUI绘制一个圆形Slider,经过亲手实践果然很简单,记录一下代码实现和效果. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 // // CircularSliderView... </summary> </entry> <entry><title>Flutter的有状态StatefulWidget生命周期</title><link href="https://www.sunyazhou.com/2023/03/flutterlifecycle/" rel="alternate" type="text/html" title="Flutter的有状态StatefulWidget生命周期" /><published>2023-03-12T14:38:00+08:00</published> <updated>2023-03-17T21:00:19+08:00</updated> <id>https://www.sunyazhou.com/2023/03/flutterlifecycle/</id> <content src="https://www.sunyazhou.com/2023/03/flutterlifecycle/" /> <author> <name>孙亚洲</name> </author> <category term="flutter" /> <summary> 前言 本文具有强烈的个人感情色彩,如有观看不适,请尽快关闭. 本文仅作为个人学习记录使用,也欢迎在许可协议范围内转载或使用,请尊重版权并且保留原文链接,谢谢您的理解合作. 如果您觉得本站对您能有帮助,您可以使用RSS方式订阅本站,这样您将能在第一时间获取本站信息. Flutter的声明周期 最近在负责波点音乐的相关开发,由于波点是用flutter写的,所以周末不得不做一些Flutter开发的功课来弥补自己在移动端技术栈的缺失. Flutter的声明周期主要是StatefulWidget和State之间配合 下面从祖传的hello world开始 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 ... </summary> </entry> <entry><title>whimsical模块设计</title><link href="https://www.sunyazhou.com/2023/03/whimsical/" rel="alternate" type="text/html" title="whimsical模块设计" /><published>2023-03-08T11:09:00+08:00</published> <updated>2023-03-17T21:00:19+08:00</updated> <id>https://www.sunyazhou.com/2023/03/whimsical/</id> <content src="https://www.sunyazhou.com/2023/03/whimsical/" /> <author> <name>孙亚洲</name> </author> <category term="ObjectiveC" /> <summary> 前言 本文具有强烈的个人感情色彩,如有观看不适,请尽快关闭. 本文仅作为个人学习记录使用,也欢迎在许可协议范围内转载或使用,请尊重版权并且保留原文链接,谢谢您的理解合作. 如果您觉得本站对您能有帮助,您可以使用RSS方式订阅本站,这样您将能在第一时间获取本站信息. 背景 在很多开发中经常会对模块进行技术设计,其中用到很多绘图的工具,最近发现一个很好的国外在线设计工具 https://whimsical.com/ 需要科学上网才能访问. 总结 收藏开发过程中一些工具方便提高工作效率 </summary> </entry> <entry><title>objc中的类型安全转换</title><link href="https://www.sunyazhou.com/2023/03/safecast/" rel="alternate" type="text/html" title="objc中的类型安全转换" /><published>2023-03-06T10:28:00+08:00</published> <updated>2023-03-17T21:00:19+08:00</updated> <id>https://www.sunyazhou.com/2023/03/safecast/</id> <content src="https://www.sunyazhou.com/2023/03/safecast/" /> <author> <name>孙亚洲</name> </author> <category term="ObjectiveC" /> <summary> 前言 本文具有强烈的个人感情色彩,如有观看不适,请尽快关闭. 本文仅作为个人学习记录使用,也欢迎在许可协议范围内转载或使用,请尊重版权并且保留原文链接,谢谢您的理解合作. 如果您觉得本站对您能有帮助,您可以使用RSS方式订阅本站,这样您将能在第一时间获取本站信息. CAST Cast也叫柯里化,就是一种简单的类型转换过程.在iOS中我们经常对某种数据类型进行强制转换.每次不得不写一些臃肿的代码,于是大家习惯写成宏来check 某实例变量是否数据某class. 下面代码分享出来经常用到宏 利用objc运行时提供的动态特性来处理常用的类型check. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #ifdef __cplusplus extern "C" { #endif id YZSafeCast(id obj, Class classType); #ifdef __cplusplus } #endif #ifndef YZ_SAFE_CAST /// 安全类型转换(柯里化) #define YZ_SAFE_CAST(o... </summary> </entry> <entry><title>iOS中NSDate是否是今天Today</title><link href="https://www.sunyazhou.com/2023/02/nsdateistoday/" rel="alternate" type="text/html" title="iOS中NSDate是否是今天Today" /><published>2023-02-13T19:39:00+08:00</published> <updated>2023-03-17T21:00:19+08:00</updated> <id>https://www.sunyazhou.com/2023/02/nsdateistoday/</id> <content src="https://www.sunyazhou.com/2023/02/nsdateistoday/" /> <author> <name>孙亚洲</name> </author> <category term="swiftUI" /> <summary> 前言 本文具有强烈的个人感情色彩,如有观看不适,请尽快关闭. 本文仅作为个人学习记录使用,也欢迎在许可协议范围内转载或使用,请尊重版权并且保留原文链接,谢谢您的理解合作. 如果您觉得本站对您能有帮助,您可以使用RSS方式订阅本站,这样您将能在第一时间获取本站信息. 背景 每天的iOS开发过程中经常会出现Check一些逻辑是否每天仅发生一次,一般我们的通用是用NSDate判断是否是今天,然后对NSDate做持久化存储 eg: MMKV、或者NSUserDefault,但随着工程的日渐庞大,我们逐渐关注一些细节和代码 的耗时. 首先来看一下几种不同的逻辑判断NSDateisToday的代码实现 1.系统NSCalendar日历 1 2 NSDate *date = [NSDate date]; //这里取当前日期,正常应该做为参数传入NSDate BOOL inToday = [[NSCalendar currentCalendar] isDateInToday:date] 2.增加更多参数调用NSCalendar 1 2 3 4 5 6 7 8... </summary> </entry> </feed>
