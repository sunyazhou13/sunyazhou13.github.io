<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://www.sunyazhou.com</id><title>迈腾大队长</title><subtitle>嗨,我是孙亚洲(@sunyazhou13),一名来自祖国北国冰城的iOS开发者.</subtitle> <updated>2022-12-10T15:19:30+08:00</updated> <author> <name>孙亚洲</name> <uri>https://www.sunyazhou.com</uri> </author><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="https://www.sunyazhou.com" rel="alternate" type="text/html" /> <generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator> <rights> © 2022 孙亚洲 </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>模仿Q音径向渐变动画</title><link href="https://www.sunyazhou.com/2022/12/gradientlayeranimation/" rel="alternate" type="text/html" title="模仿Q音径向渐变动画" /><published>2022-12-07T16:00:00+08:00</published> <updated>2022-12-10T15:19:30+08:00</updated> <id>https://www.sunyazhou.com/2022/12/gradientlayeranimation/</id> <content src="https://www.sunyazhou.com/2022/12/gradientlayeranimation/" /> <author> <name>孙亚洲</name> </author> <category term="iOS开发" /> <summary> 前言 本文具有强烈的个人感情色彩,如有观看不适,请尽快关闭. 本文仅作为个人学习记录使用,也欢迎在许可协议范围内转载或使用,请尊重版权并且保留原文链接,谢谢您的理解合作. 如果您觉得本站对您能有帮助,您可以使用RSS方式订阅本站,这样您将能在第一时间获取本站信息. 先上成品看看效果 深入CAGradientLayer 最近开发功能,视觉设计同学对QQ音乐的桌面歌词预览图的流体渐变动画很感兴趣,想让开发这边实现这个效果. 仔细观察歌词背景( 若不是我左右眼都是5.0 我第一次看到QQ音乐的效果我以为没动画.幼稚被教育了),会有一个类似柔光的效果像个灯光一样照射并移动.视觉设计同学把这个效果称为流体过渡动画. 为了研究这个效果我深入了解了一下CAGradientLayer,发现这里面有几个重要的类型和大家介绍一下 CAGradientLayer中有一个成员变量叫type 1 @property(copy) CAGradientLayerType type; //objc中的成员变量 1 open var type: CAGradientLayerTyp... </summary> </entry> <entry><title>《The Sunyazhou Theory Ⅱ》的诞生</title><link href="https://www.sunyazhou.com/2022/12/thesunyazhoutheoryii/" rel="alternate" type="text/html" title="《The Sunyazhou Theory Ⅱ》的诞生" /><published>2022-12-03T11:32:00+08:00</published> <updated>2022-12-10T15:19:30+08:00</updated> <id>https://www.sunyazhou.com/2022/12/thesunyazhoutheoryii/</id> <content src="https://www.sunyazhou.com/2022/12/thesunyazhoutheoryii/" /> <author> <name>孙亚洲</name> </author> <category term="理论" /> <summary> 前言 由于基础知识薄弱，我所做到的内容仅限于学习和观察到的一些事实，未能上升为理论学说. 非著名的《The Sunyazhou Theory II》 未来自动驾驶必须且一定是眼睛(摄像头)+耳朵(雷达超声波或激光)一起用才是最优解，计算机视觉+激光雷达，来实现安全车规级自动驾驶。 计算机视觉最多只能识别物体表面，经过计算结果指纹比对方式才能得知已识别到已知物体密度和质量(识别到未知物体则是盲区)，目前还做不到感知物体远近距离的精确到毫米级，即便做到了也是理论级，绝非物理级，而超声波雷达则可以快速感知，达到物理级感知，这才是它存在的合理性。 – 综上所述，我成立孙亚洲第二理论，未来自动驾驶一定眼睛耳朵一起用。 目前以我肤浅的认知还没出现这个系统，我应该享有优先命名权: TSTⅡCVLRS (The Sunyazhou Theory Ⅱ Computer Vision Laser Radar System) 孙亚洲第二理论计算机视觉激光雷达系统. 注: 计算机视觉是一种图形图像识别技术科学 激光雷达是一种发射激光束探测位置的雷达系统 验证理... </summary> </entry> <entry><title>SwiftUI属性包装器:State、Binding、ObservableObject、EnvironmentObject</title><link href="https://www.sunyazhou.com/2022/11/swiftuipropertywrapper/" rel="alternate" type="text/html" title="SwiftUI属性包装器:State、Binding、ObservableObject、EnvironmentObject" /><published>2022-11-25T18:45:00+08:00</published> <updated>2022-12-10T15:19:30+08:00</updated> <id>https://www.sunyazhou.com/2022/11/swiftuipropertywrapper/</id> <content src="https://www.sunyazhou.com/2022/11/swiftuipropertywrapper/" /> <author> <name>孙亚洲</name> </author> <category term="swiftUI" /> <summary> 前言 本文具有强烈的个人感情色彩,如有观看不适,请尽快关闭. 本文仅作为个人学习记录使用,也欢迎在许可协议范围内转载或使用,请尊重版权并且保留原文链接,谢谢您的理解合作. 如果您觉得本站对您能有帮助,您可以使用RSS方式订阅本站,这样您将能在第一时间获取本站信息. 主要内容 本文主要讲述SwiftUI中的属性包装器，这些包装器都是用来数据绑定的，作为视图的唯一真值来源，四种方式在实现功能上有细微差别。最后会进行总结比较 State Binding ObservableObject EnvironmentObject 1.@State SwiftUI管理声明为state的存储属性。当值发生变化时，SwiftUI会更新视图层次结构中依赖于该值的部分。使用@State作为存储在视图层次结构中的给定值的唯一真值来源。 @State修饰的属性虽然是存储属性，但是我们可以进行读写操作。 父视图和子视图进行传递该属性只能是值传递。 需要在属性名称前加上一个美元符号$来获得这个值。因为它是投影属性 代码： 1 2 3 4 5 6 7 8 9 stru... </summary> </entry> <entry><title>NS-OPTIONS的用法</title><link href="https://www.sunyazhou.com/2022/09/howtousensoptions/" rel="alternate" type="text/html" title="NS-OPTIONS的用法" /><published>2022-09-16T17:02:00+08:00</published> <updated>2022-12-10T15:19:30+08:00</updated> <id>https://www.sunyazhou.com/2022/09/howtousensoptions/</id> <content src="https://www.sunyazhou.com/2022/09/howtousensoptions/" /> <author> <name>孙亚洲</name> </author> <category term="iOS开发" /> <summary> 前言 本文具有强烈的个人感情色彩,如有观看不适,请尽快关闭. 本文仅作为个人学习记录使用,也欢迎在许可协议范围内转载或使用,请尊重版权并且保留原文链接,谢谢您的理解合作. 如果您觉得本站对您能有帮助,您可以使用RSS方式订阅本站,这样您将能在第一时间获取本站信息. 定义: 1 2 3 4 5 6 7 typedef NS_OPTIONS(NSUInteger, MyOption) { MyOptionNone = 0, //二进制0000,十进制0 MyOption1 = 1 &amp;lt;&amp;lt; 0,//0001,1 MyOption2 = 1 &amp;lt;&amp;lt; 1,//0010,2 MyOption3 = 1 &amp;lt;&amp;lt; 2,//0100,4 MyOption4 = 1 &amp;lt;&amp;lt; 3,//1000,8 }; 使用 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 //声明定义枚举变量 MyOption option = MyOption1 | MyOption2;/... </summary> </entry> <entry><title>FB内存检测工具分享</title><link href="https://www.sunyazhou.com/2022/09/fbmemorychecktool/" rel="alternate" type="text/html" title="FB内存检测工具分享" /><published>2022-09-16T10:11:00+08:00</published> <updated>2022-12-10T15:19:30+08:00</updated> <id>https://www.sunyazhou.com/2022/09/fbmemorychecktool/</id> <content src="https://www.sunyazhou.com/2022/09/fbmemorychecktool/" /> <author> <name>孙亚洲</name> </author> <category term="iOS开发" /> <summary> 前言 本文具有强烈的个人感情色彩,如有观看不适,请尽快关闭. 本文仅作为个人学习记录使用,也欢迎在许可协议范围内转载或使用,请尊重版权并且保留原文链接,谢谢您的理解合作. 如果您觉得本站对您能有帮助,您可以使用RSS方式订阅本站,这样您将能在第一时间获取本站信息. 讨论 如果申请一大块内存没有被release这属于内存泄漏,并不属于内存竞争导致的持有,根本原因是没有正确的release. 在常规流程下(正常 alloc,release或者 malloc free,亦或是 new delete)合理使用内存,造成内存泄漏的最主要原因是资源的竞争造成的相互持有.这是诱因导致 资源没有被正常释放. 此工具擅长解决 相互持有关系不释放内存问题,精确到实例类型和内存地址,并直观看到 找到相关对象. 内存检测工具-介绍 FBMemoryProfiler FBMemoryProfiler 是几个组件的结合。其中包括 FBAllocationTracker 和 FBRetainCycleDetector。 可视化工具，直接嵌入到 App 中，可以起到... </summary> </entry> </feed>
